{
  String[] uriSplit=splitUri(uri);
  if (uriSplit.length > 0) {
switch (ConsumerType.fromUri(uriSplit[0])) {
case DIRECTMESSAGE:
      return new DirectMessageConsumer(te);
case SEARCH:
    boolean hasNoKeywords=te.getProperties().getKeywords() == null || te.getProperties().getKeywords().trim().isEmpty();
  if (hasNoKeywords) {
    throw new IllegalArgumentException("Type set to SEARCH but no keywords were provided.");
  }
 else {
    return new SearchConsumer(te);
  }
case STREAMING:
switch (StreamingType.fromUri(uriSplit[1])) {
case SAMPLE:
  return new SampleConsumer(te);
case FILTER:
return new FilterConsumer(te);
default :
break;
}
break;
case TIMELINE:
if (uriSplit.length > 1) {
switch (TimelineType.fromUri(uriSplit[1])) {
case HOME:
return new HomeConsumer(te);
case MENTIONS:
return new MentionsConsumer(te);
case RETWEETSOFME:
return new RetweetsConsumer(te);
case USER:
if (te.getProperties().getUser() == null || te.getProperties().getUser().trim().isEmpty()) {
throw new IllegalArgumentException("Fetch type set to USER TIMELINE but no user was set.");
}
 else {
return new UserConsumer(te);
}
default :
break;
}
}
break;
default :
break;
}
}
throw new IllegalArgumentException("Cannot create any consumer with uri " + uri + ". A consumer type was not provided (or an incorrect pairing was used).");
}
