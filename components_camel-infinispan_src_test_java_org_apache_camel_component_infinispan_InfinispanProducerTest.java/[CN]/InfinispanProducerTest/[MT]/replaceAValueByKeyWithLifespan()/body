{
  currentCache().put(KEY_ONE,VALUE_ONE);
  Exchange exchange=template.request("direct:replace",new Processor(){
    @Override public void process(    Exchange exchange) throws Exception {
      exchange.getIn().setHeader(InfinispanConstants.KEY,KEY_ONE);
      exchange.getIn().setHeader(InfinispanConstants.VALUE,VALUE_TWO);
      exchange.getIn().setHeader(InfinispanConstants.LIFESPAN_TIME,new Long(LIFESPAN_TIME));
      exchange.getIn().setHeader(InfinispanConstants.LIFESPAN_TIME_UNIT,TimeUnit.SECONDS.toString());
      exchange.getIn().setHeader(InfinispanConstants.OPERATION,InfinispanConstants.REPLACE);
    }
  }
);
  assertEquals(exchange.getIn().getHeader(InfinispanConstants.RESULT,String.class),VALUE_ONE);
  assertEquals(currentCache().get(KEY_ONE),VALUE_TWO);
  Thread.sleep(LIFESPAN_TIME * 1000);
  exchange=template.send("direct:get",new Processor(){
    @Override public void process(    Exchange exchange) throws Exception {
      exchange.getIn().setHeader(InfinispanConstants.KEY,KEY_ONE);
    }
  }
);
  String resultGet=exchange.getIn().getHeader(InfinispanConstants.RESULT,String.class);
  assertEquals(null,resultGet);
}
