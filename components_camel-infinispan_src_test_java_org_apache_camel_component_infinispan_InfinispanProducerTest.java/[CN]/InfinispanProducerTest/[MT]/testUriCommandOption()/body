{
  template.send("direct:put",new Processor(){
    @Override public void process(    Exchange exchange) throws Exception {
      exchange.getIn().setHeader(InfinispanConstants.KEY,COMMAND_KEY);
      exchange.getIn().setHeader(InfinispanConstants.VALUE,COMMAND_VALUE);
    }
  }
);
  String result=(String)currentCache().get(COMMAND_KEY);
  assertEquals(COMMAND_VALUE,result);
  Exchange exchange;
  exchange=template.send("direct:get",new Processor(){
    @Override public void process(    Exchange exchange) throws Exception {
      exchange.getIn().setHeader(InfinispanConstants.KEY,COMMAND_KEY);
    }
  }
);
  String resultGet=exchange.getIn().getHeader(InfinispanConstants.RESULT,String.class);
  assertEquals(COMMAND_VALUE,resultGet);
  exchange=template.send("direct:remove",new Processor(){
    @Override public void process(    Exchange exchange) throws Exception {
      exchange.getIn().setHeader(InfinispanConstants.KEY,COMMAND_KEY);
    }
  }
);
  String resultRemove=exchange.getIn().getHeader(InfinispanConstants.RESULT,String.class);
  assertEquals(COMMAND_VALUE,resultRemove);
  assertNull(currentCache().get(COMMAND_KEY));
  assertTrue(currentCache().isEmpty());
  currentCache().put(COMMAND_KEY,COMMAND_VALUE);
  currentCache().put("keyTest","valueTest");
  template.send("direct:clear",new Processor(){
    @Override public void process(    Exchange exchange) throws Exception {
    }
  }
);
  assertTrue(currentCache().isEmpty());
}
