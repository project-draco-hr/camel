{
  template.send("direct:putallasync",new Processor(){
    @Override public void process(    Exchange exchange) throws Exception {
      Map<String,String> map=new HashMap<String,String>();
      map.put(KEY_ONE,VALUE_ONE);
      map.put(KEY_TWO,VALUE_TWO);
      exchange.getIn().setHeader(InfinispanConstants.MAP,map);
      exchange.getIn().setHeader(InfinispanConstants.OPERATION,InfinispanConstants.PUT_ALL);
      exchange.getIn().setHeader(InfinispanConstants.LIFESPAN_TIME,new Long(LIFESPAN_FOR_MAX_IDLE));
      exchange.getIn().setHeader(InfinispanConstants.LIFESPAN_TIME_UNIT,TimeUnit.SECONDS.toString());
      exchange.getIn().setHeader(InfinispanConstants.MAX_IDLE_TIME,new Long(MAX_IDLE_TIME));
      exchange.getIn().setHeader(InfinispanConstants.MAX_IDLE_TIME_UNIT,TimeUnit.SECONDS.toString());
    }
  }
);
  Thread.sleep(100);
  assertEquals(currentCache().size(),2);
  Thread.sleep(10000);
  Exchange exchange=template.send("direct:get",new Processor(){
    @Override public void process(    Exchange exchange) throws Exception {
      exchange.getIn().setHeader(InfinispanConstants.KEY,KEY_ONE);
    }
  }
);
  String resultGet=exchange.getIn().getHeader(InfinispanConstants.RESULT,String.class);
  assertEquals(null,resultGet);
  exchange=template.send("direct:get",new Processor(){
    @Override public void process(    Exchange exchange) throws Exception {
      exchange.getIn().setHeader(InfinispanConstants.KEY,KEY_TWO);
    }
  }
);
  resultGet=exchange.getIn().getHeader(InfinispanConstants.RESULT,String.class);
  assertEquals(null,resultGet);
}
