{
  try {
    ruleNestingLevel++;
    int _type=STRING;
    int _start=getCharIndex();
    int _line=getLine();
    int _charPosition=getCharPositionInLine();
    int _channel=Token.DEFAULT_CHANNEL;
    int alt3=2;
    int LA3_0=input.LA(1);
    if ((LA3_0 == '\"')) {
      alt3=1;
    }
 else     if ((LA3_0 == '\'')) {
      alt3=2;
    }
 else {
      NoViableAltException nvae=new NoViableAltException("122:1: STRING : ( '\"' ( '\\\\' ('b'|'t'|'n'|'f'|'r'|'\\\"'|'\\''|'\\\\') | ~ ('\\\\'|'\"'))* '\"' | '\\'' ( '\\\\' ('b'|'t'|'n'|'f'|'r'|'\\\"'|'\\''|'\\\\') | ~ ('\\\\'|'\\''))* '\\'' );",3,0,input);
      throw nvae;
    }
switch (alt3) {
case 1:
{
        match('\"');
        loop1:         do {
          int alt1=3;
          int LA1_0=input.LA(1);
          if ((LA1_0 == '\\')) {
            alt1=1;
          }
 else           if (((LA1_0 >= '\u0000' && LA1_0 <= '!') || (LA1_0 >= '#' && LA1_0 <= '[') || (LA1_0 >= ']' && LA1_0 <= '\uFFFE'))) {
            alt1=2;
          }
switch (alt1) {
case 1:
{
              match('\\');
              if (input.LA(1) == '\"' || input.LA(1) == '\'' || input.LA(1) == '\\' || input.LA(1) == 'b' || input.LA(1) == 'f' || input.LA(1) == 'n' || input.LA(1) == 'r' || input.LA(1) == 't') {
                input.consume();
              }
 else {
                MismatchedSetException mse=new MismatchedSetException(null,input);
                recover(mse);
                throw mse;
              }
            }
          break;
case 2:
{
          if ((input.LA(1) >= '\u0000' && input.LA(1) <= '!') || (input.LA(1) >= '#' && input.LA(1) <= '[') || (input.LA(1) >= ']' && input.LA(1) <= '\uFFFE')) {
            input.consume();
          }
 else {
            MismatchedSetException mse=new MismatchedSetException(null,input);
            recover(mse);
            throw mse;
          }
        }
      break;
default :
    break loop1;
}
}
 while (true);
match('\"');
}
break;
case 2:
{
match('\'');
loop2: do {
int alt2=3;
int LA2_0=input.LA(1);
if ((LA2_0 == '\\')) {
alt2=1;
}
 else if (((LA2_0 >= '\u0000' && LA2_0 <= '&') || (LA2_0 >= '(' && LA2_0 <= '[') || (LA2_0 >= ']' && LA2_0 <= '\uFFFE'))) {
alt2=2;
}
switch (alt2) {
case 1:
{
match('\\');
if (input.LA(1) == '\"' || input.LA(1) == '\'' || input.LA(1) == '\\' || input.LA(1) == 'b' || input.LA(1) == 'f' || input.LA(1) == 'n' || input.LA(1) == 'r' || input.LA(1) == 't') {
  input.consume();
}
 else {
  MismatchedSetException mse=new MismatchedSetException(null,input);
  recover(mse);
  throw mse;
}
}
break;
case 2:
{
if ((input.LA(1) >= '\u0000' && input.LA(1) <= '&') || (input.LA(1) >= '(' && input.LA(1) <= '[') || (input.LA(1) >= ']' && input.LA(1) <= '\uFFFE')) {
input.consume();
}
 else {
MismatchedSetException mse=new MismatchedSetException(null,input);
recover(mse);
throw mse;
}
}
break;
default :
break loop2;
}
}
 while (true);
match('\'');
}
break;
}
if (token == null && ruleNestingLevel == 1) {
emit(_type,_line,_charPosition,_channel,_start,getCharIndex() - 1);
}
}
  finally {
ruleNestingLevel--;
}
}
