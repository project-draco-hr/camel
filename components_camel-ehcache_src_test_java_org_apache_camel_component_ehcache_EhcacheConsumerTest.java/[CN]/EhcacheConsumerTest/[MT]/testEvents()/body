{
  String key=generateRandomString();
  String[] values=generateRandomArrayOfStrings(2);
  MockEndpoint created=getMockEndpoint("mock:created");
  created.expectedMinimumMessageCount(1);
  created.expectedHeaderReceived(EhcacheConstants.KEY,key);
  created.expectedHeaderReceived(EhcacheConstants.EVENT_TYPE,EventType.CREATED);
  MockEndpoint updated=getMockEndpoint("mock:updated");
  updated.expectedMinimumMessageCount(1);
  updated.expectedHeaderReceived(EhcacheConstants.KEY,key);
  updated.expectedHeaderReceived(EhcacheConstants.OLD_VALUE,values[0]);
  updated.expectedHeaderReceived(EhcacheConstants.EVENT_TYPE,EventType.UPDATED);
  MockEndpoint all=getMockEndpoint("mock:all");
  all.expectedMinimumMessageCount(2);
  all.expectedHeaderValuesReceivedInAnyOrder(EhcacheConstants.KEY,key,key);
  all.expectedHeaderValuesReceivedInAnyOrder(EhcacheConstants.OLD_VALUE,null,values[0]);
  all.expectedHeaderValuesReceivedInAnyOrder(EhcacheConstants.EVENT_TYPE,EventType.CREATED,EventType.UPDATED);
  all.expectedBodiesReceived(values);
  Cache<Object,Object> cache=getCache(TEST_CACHE_NAME);
  cache.put(key,values[0]);
  cache.put(key,values[1]);
  assertMockEndpointsSatisfied();
}
