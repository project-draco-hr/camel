{
  final List<Exchange> ordered=new ArrayList<Exchange>();
  final CountingLatch latch=new CountingLatch();
  int total=0;
  for (  ProcessorExchangePair pair : pairs) {
    final Processor producer=pair.getProcessor();
    final Exchange subExchange=pair.getExchange();
    updateNewExchange(subExchange,total,pairs);
    ordered.add(subExchange);
    latch.increment();
    executorService.submit(new Runnable(){
      public void run(){
        try {
          producer.process(subExchange);
        }
 catch (        Exception e) {
          subExchange.setException(e);
        }
        latch.decrement();
      }
    }
);
    total++;
  }
  latch.await();
  for (  Exchange subExchange : ordered) {
    if (aggregationStrategy != null) {
      doAggregate(result,subExchange);
    }
  }
  if (LOG.isTraceEnabled()) {
    LOG.trace("Done parallel processing " + total + " exchanges");
  }
}
