{
  AtomicInteger total=new AtomicInteger();
  Iterator<ProcessorExchangePair> it=pairs.iterator();
  while (it.hasNext()) {
    ProcessorExchangePair pair=it.next();
    Exchange subExchange=pair.getExchange();
    updateNewExchange(subExchange,total.get(),pairs,it);
    boolean sync=doProcessSequential(original,result,pairs,it,pair,callback,total);
    if (!sync) {
      if (LOG.isTraceEnabled()) {
        LOG.trace("Processing exchangeId: {} is continued being processed asynchronously",pair.getExchange().getExchangeId());
      }
      return false;
    }
    if (LOG.isTraceEnabled()) {
      LOG.trace("Processing exchangeId: {} is continued being processed synchronously",pair.getExchange().getExchangeId());
    }
    boolean continueProcessing=PipelineHelper.continueProcessing(subExchange,"Sequential processing failed for number " + total.get(),LOG);
    if (stopOnException && !continueProcessing) {
      if (subExchange.getException() != null) {
        CamelExchangeException cause=new CamelExchangeException("Sequential processing failed for number " + total.get(),subExchange,subExchange.getException());
        subExchange.setException(cause);
      }
      result.set(subExchange);
      return true;
    }
    LOG.trace("Sequential processing complete for number {} exchange: {}",total,subExchange);
    doAggregate(getAggregationStrategy(subExchange),result,subExchange);
    total.incrementAndGet();
  }
  LOG.debug("Done sequential processing {} exchanges",total);
  return true;
}
