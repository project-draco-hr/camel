{
  int total=0;
  Iterator<ProcessorExchangePair> it=pairs.iterator();
  while (it.hasNext()) {
    ProcessorExchangePair pair=it.next();
    Exchange subExchange=pair.getExchange();
    updateNewExchange(subExchange,total,pairs);
    boolean sync=doProcess(original,result,it,pair,callback);
    if (!sync) {
      if (LOG.isTraceEnabled()) {
        LOG.trace("Processing exchangeId: " + pair.getExchange().getExchangeId() + " is continued being processed asynchronously");
      }
      return false;
    }
    if (LOG.isTraceEnabled()) {
      LOG.trace("Processing exchangeId: " + pair.getExchange().getExchangeId() + " is continued being processed synchronously");
    }
    if (stopOnException && subExchange.getException() != null) {
      throw new CamelExchangeException("Sequential processing failed for number " + total,subExchange,subExchange.getException());
    }
    if (LOG.isTraceEnabled()) {
      LOG.trace("Sequential processing complete for number " + total + " exchange: "+ subExchange);
    }
    if (aggregationStrategy != null) {
      doAggregate(result,subExchange);
    }
    total++;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Done sequential processing " + total + " exchanges");
  }
  return true;
}
