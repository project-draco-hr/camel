{
  int total=0;
  for (  ProcessorExchangePair pair : pairs) {
    Processor processor=pair.getProcessor();
    Processor prepared=pair.getPrepared();
    Exchange subExchange=pair.getExchange();
    updateNewExchange(subExchange,total,pairs);
    doProcess(processor,prepared,subExchange);
    if (stopOnException && subExchange.getException() != null) {
      throw new CamelExchangeException("Sequential processing failed for number " + total,subExchange,subExchange.getException());
    }
    if (LOG.isTraceEnabled()) {
      LOG.trace("Sequential processing complete for number " + total + " exchange: "+ subExchange);
    }
    if (aggregationStrategy != null) {
      doAggregate(result,subExchange);
    }
    total++;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Done sequential processing " + total + " exchanges");
  }
}
