{
  final CompletionService<Exchange> completion;
  if (streaming) {
    completion=new ExecutorCompletionService<Exchange>(executorService);
  }
 else {
    completion=new SubmitOrderedCompletionService<Exchange>(executorService);
  }
  final AtomicBoolean running=new AtomicBoolean(true);
  final AtomicInteger total=new AtomicInteger(0);
  final AtomicBoolean allTasksSubmitted=new AtomicBoolean();
  final CountDownLatch aggregationOnTheFlyDone=new CountDownLatch(1);
  final AtomicException executionException=new AtomicException();
  final Iterator<ProcessorExchangePair> it=pairs.iterator();
  if (it.hasNext()) {
    AggregateOnTheFlyTask task=new AggregateOnTheFlyTask(result,original,total,completion,running,aggregationOnTheFlyDone,allTasksSubmitted,executionException);
    aggregationExecutorService.submit(task);
  }
  LOG.trace("Starting to submit parallel tasks");
  while (it.hasNext()) {
    final ProcessorExchangePair pair=it.next();
    final Exchange subExchange=pair.getExchange();
    updateNewExchange(subExchange,total.intValue(),pairs,it);
    completion.submit(new Callable<Exchange>(){
      public Exchange call() throws Exception {
        if (!running.get()) {
          return subExchange;
        }
        try {
          doProcessParallel(pair);
        }
 catch (        Throwable e) {
          subExchange.setException(e);
        }
        Integer number=getExchangeIndex(subExchange);
        boolean continueProcessing=PipelineHelper.continueProcessing(subExchange,"Parallel processing failed for number " + number,LOG);
        if (stopOnException && !continueProcessing) {
          running.set(false);
          if (subExchange.getException() != null) {
            throw new CamelExchangeException("Parallel processing failed for number " + number,subExchange,subExchange.getException());
          }
        }
        if (LOG.isTraceEnabled()) {
          LOG.trace("Parallel processing complete for exchange: " + subExchange);
        }
        return subExchange;
      }
    }
);
    total.incrementAndGet();
  }
  if (LOG.isTraceEnabled()) {
    LOG.trace("Signaling that all " + total.get() + " tasks has been submitted.");
  }
  allTasksSubmitted.set(true);
  if (LOG.isDebugEnabled()) {
    LOG.debug("Waiting for on-the-fly aggregation to complete aggregating " + total.get() + " responses.");
  }
  aggregationOnTheFlyDone.await();
  if (executionException.get() != null) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Parallel processing failed due " + executionException.get().getMessage());
    }
    throw executionException.get();
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Done parallel processing " + total + " exchanges");
  }
}
