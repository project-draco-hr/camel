{
  final AtomicExchange result=new AtomicExchange();
  final Iterable<ProcessorExchangePair> pairs=createProcessorExchangePairs(exchange);
  try {
    if (isParallelProcessing()) {
      doProcessParallel(result,pairs,isStreaming());
    }
 else {
      doProcessSequential(result,pairs);
    }
    if (result.get() != null) {
      ExchangeHelper.copyResults(exchange,result.get());
    }
  }
 catch (  Exception e) {
    exchange.setProperty(Exchange.REDELIVERY_EXHAUSTED,Boolean.TRUE);
    exchange.setException(e);
  }
}
