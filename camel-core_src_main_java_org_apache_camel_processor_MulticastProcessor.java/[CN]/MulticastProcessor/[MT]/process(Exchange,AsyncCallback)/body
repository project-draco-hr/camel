{
  final AtomicExchange result=new AtomicExchange();
  final Iterable<ProcessorExchangePair> pairs;
  try {
    boolean sync=true;
    pairs=createProcessorExchangePairs(exchange);
    if (isParallelProcessing()) {
      ObjectHelper.notNull(executorService,"executorService",this);
      doProcessParallel(exchange,result,pairs,isStreaming(),callback);
    }
 else {
      sync=doProcessSequential(exchange,result,pairs,callback);
    }
    if (!sync) {
      return false;
    }
  }
 catch (  Throwable e) {
    exchange.setException(e);
    doDone(exchange,null,callback,true,false);
    return true;
  }
  Exchange subExchange=result.get() != null ? result.get() : null;
  doDone(exchange,subExchange,callback,true,true);
  return true;
}
