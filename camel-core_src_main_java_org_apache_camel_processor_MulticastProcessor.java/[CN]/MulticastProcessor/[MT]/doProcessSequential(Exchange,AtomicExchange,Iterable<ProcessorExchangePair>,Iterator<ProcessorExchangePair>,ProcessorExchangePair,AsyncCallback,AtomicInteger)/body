{
  boolean sync=true;
  final Exchange exchange=pair.getExchange();
  Processor processor=pair.getProcessor();
  final Producer producer=pair.getProducer();
  TracedRouteNodes traced=exchange.getUnitOfWork() != null ? exchange.getUnitOfWork().getTracedRouteNodes() : null;
  final StopWatch watch=producer != null ? new StopWatch() : null;
  try {
    if (traced != null) {
      traced.pushBlock();
    }
    if (producer != null) {
      EventHelper.notifyExchangeSending(exchange.getContext(),exchange,producer.getEndpoint());
    }
    AsyncProcessor async=AsyncProcessorConverterHelper.convert(processor);
    pair.begin();
    sync=async.process(exchange,new AsyncCallback(){
      public void done(      boolean doneSync){
        pair.done();
        if (producer != null) {
          long timeTaken=watch.stop();
          Endpoint endpoint=producer.getEndpoint();
          EventHelper.notifyExchangeSent(exchange.getContext(),exchange,endpoint,timeTaken);
        }
        if (doneSync) {
          return;
        }
        Exchange subExchange=exchange;
        boolean continueProcessing=PipelineHelper.continueProcessing(subExchange,"Sequential processing failed for number " + total.get(),LOG);
        if (stopOnException && !continueProcessing) {
          if (subExchange.getException() != null) {
            subExchange.setException(new CamelExchangeException("Sequential processing failed for number " + total,subExchange,subExchange.getException()));
          }
 else {
            result.set(subExchange);
          }
          doDone(original,subExchange,pairs,callback,false,true);
          return;
        }
        try {
          doAggregate(getAggregationStrategy(subExchange),result,subExchange);
        }
 catch (        Throwable e) {
          subExchange.setException(new CamelExchangeException("Sequential processing failed for number " + total,subExchange,e));
          doDone(original,subExchange,pairs,callback,false,true);
          return;
        }
        total.incrementAndGet();
        while (it.hasNext()) {
          ProcessorExchangePair pair=it.next();
          subExchange=pair.getExchange();
          updateNewExchange(subExchange,total.get(),pairs,it);
          boolean sync=doProcessSequential(original,result,pairs,it,pair,callback,total);
          if (!sync) {
            LOG.trace("Processing exchangeId: {} is continued being processed asynchronously",original.getExchangeId());
            return;
          }
          continueProcessing=PipelineHelper.continueProcessing(subExchange,"Sequential processing failed for number " + total.get(),LOG);
          if (stopOnException && !continueProcessing) {
            if (subExchange.getException() != null) {
              subExchange.setException(new CamelExchangeException("Sequential processing failed for number " + total,subExchange,subExchange.getException()));
            }
 else {
              result.set(subExchange);
            }
            doDone(original,subExchange,pairs,callback,false,true);
            return;
          }
          try {
            doAggregate(getAggregationStrategy(subExchange),result,subExchange);
          }
 catch (          Throwable e) {
            subExchange.setException(new CamelExchangeException("Sequential processing failed for number " + total,subExchange,e));
            doDone(original,subExchange,pairs,callback,false,true);
            return;
          }
          total.incrementAndGet();
        }
        subExchange=result.get() != null ? result.get() : null;
        doDone(original,subExchange,pairs,callback,false,true);
      }
    }
);
  }
  finally {
    if (traced != null) {
      traced.popBlock();
    }
  }
  return sync;
}
