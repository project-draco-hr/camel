{
  final AtomicBoolean timedOut=new AtomicBoolean();
  boolean stoppedOnException=false;
  final StopWatch watch=new StopWatch();
  final AtomicInteger aggregated=new AtomicInteger();
  boolean done=false;
  while (!done) {
    if (allTasksSubmitted.get() && aggregated.intValue() >= total.get()) {
      LOG.debug("Done aggregating {} exchanges on the fly.",aggregated);
      break;
    }
    Future<Exchange> future;
    if (timedOut.get()) {
      future=completion.poll();
      LOG.trace("Polled completion task #{} after timeout to grab already completed tasks: {}",aggregated,future);
    }
 else     if (timeout > 0) {
      long left=timeout - watch.taken();
      if (left < 0) {
        left=0;
      }
      LOG.trace("Polling completion task #{} using timeout {} millis.",aggregated,left);
      future=completion.poll(left,TimeUnit.MILLISECONDS);
    }
 else {
      LOG.trace("Polling completion task #{}",aggregated);
      future=completion.poll(1,TimeUnit.SECONDS);
      if (future == null) {
        continue;
      }
    }
    if (future == null) {
      ParallelAggregateTimeoutTask task=new ParallelAggregateTimeoutTask(original,result,completion,aggregated,total,timedOut);
      if (parallelAggregate) {
        aggregateExecutorService.submit(task);
      }
 else {
        task.run();
      }
    }
 else {
      Exchange subExchange=future.get();
      Integer number=getExchangeIndex(subExchange);
      boolean continueProcessing=PipelineHelper.continueProcessing(subExchange,"Parallel processing failed for number " + number,LOG);
      if (stopOnException && !continueProcessing) {
        result.set(subExchange);
        stoppedOnException=true;
        break;
      }
      ParallelAggregateTask task=new ParallelAggregateTask(result,subExchange,aggregated);
      if (parallelAggregate) {
        aggregateExecutorService.submit(task);
      }
 else {
        task.run();
      }
    }
  }
  if (timedOut.get() || stoppedOnException) {
    if (timedOut.get()) {
      LOG.debug("Cancelling tasks due timeout after {} millis.",timeout);
    }
    if (stoppedOnException) {
      LOG.debug("Cancelling tasks due stopOnException.");
    }
    running.set(false);
  }
}
