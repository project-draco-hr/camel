{
  boolean timedOut=false;
  boolean stoppedOnException=false;
  final StopWatch watch=new StopWatch();
  int aggregated=0;
  boolean done=false;
  while (!done) {
    if (allTasksSubmitted.get() && aggregated >= total.get()) {
      LOG.debug("Done aggregating {} exchanges on the fly.",aggregated);
      break;
    }
    Future<Exchange> future;
    if (timedOut) {
      future=completion.poll();
      LOG.trace("Polled completion task #{} after timeout to grab already completed tasks: {}",aggregated,future);
    }
 else     if (timeout > 0) {
      long left=timeout - watch.taken();
      if (left < 0) {
        left=0;
      }
      LOG.trace("Polling completion task #{} using timeout {} millis.",aggregated,left);
      future=completion.poll(left,TimeUnit.MILLISECONDS);
    }
 else {
      LOG.trace("Polling completion task #{}",aggregated);
      future=completion.poll(1,TimeUnit.SECONDS);
      if (future == null) {
        continue;
      }
    }
    if (future == null && timedOut) {
      break;
    }
 else     if (future == null) {
      AggregationStrategy strategy=getAggregationStrategy(null);
      if (strategy instanceof TimeoutAwareAggregationStrategy) {
        Exchange oldExchange=result.get();
        if (oldExchange == null) {
          oldExchange=original;
        }
        ((TimeoutAwareAggregationStrategy)strategy).timeout(oldExchange,aggregated,total.intValue(),timeout);
      }
 else {
        LOG.warn("Parallel processing timed out after " + timeout + " millis for number "+ aggregated+ ". This task will be cancelled and will not be aggregated.");
      }
      LOG.debug("Timeout occurred after {} millis for number {} task.",timeout,aggregated);
      timedOut=true;
      ExecutorServiceHelper.timeoutTask(completion);
    }
 else {
      Exchange subExchange=future.get();
      Integer number=getExchangeIndex(subExchange);
      boolean continueProcessing=PipelineHelper.continueProcessing(subExchange,"Parallel processing failed for number " + number,LOG);
      if (stopOnException && !continueProcessing) {
        result.set(subExchange);
        stoppedOnException=true;
        break;
      }
      AggregationStrategy strategy=getAggregationStrategy(subExchange);
      doAggregate(strategy,result,subExchange);
    }
    aggregated++;
  }
  if (timedOut || stoppedOnException) {
    if (timedOut) {
      LOG.debug("Cancelling tasks due timeout after {} millis.",timeout);
    }
    if (stoppedOnException) {
      LOG.debug("Cancelling tasks due stopOnException.");
    }
    running.set(false);
  }
}
