{
  MockEndpoint a=getMockEndpoint("mock:a");
  a.expectedMessageCount(1);
  MockEndpoint b=getMockEndpoint("mock:b");
  b.expectedMessageCount(1);
  MockEndpoint c=getMockEndpoint("mock:c");
  c.expectedMessageCount(1);
  Exchange outA=template.send("direct:a",new Processor(){
    public void process(    Exchange exchange) throws Exception {
      Message message=exchange.getFault();
      message.setBody(new IllegalArgumentException("A"));
    }
  }
);
  assertTrue("Should be failed",outA.isFailed());
  assertIsInstanceOf(IllegalArgumentException.class,outA.getException());
  assertEquals("A",outA.getException().getMessage());
  Exchange outB=template.send("direct:b",new Processor(){
    public void process(    Exchange exchange) throws Exception {
      Message message=exchange.getFault();
      message.setBody(new IllegalArgumentException("B"));
    }
  }
);
  assertTrue("Should be failed",outB.isFailed());
  assertNull("Should not handle fault",outB.getException());
  assertTrue(outB.getOut() != null && outB.getOut().isFault());
  assertIsInstanceOf(IllegalArgumentException.class,outB.getOut().getBody());
  Exchange outC=template.send("direct:c",new Processor(){
    public void process(    Exchange exchange) throws Exception {
      Message message=exchange.getFault();
      message.setBody(new IllegalArgumentException("C"));
    }
  }
);
  assertTrue("Should be failed",outC.isFailed());
  assertIsInstanceOf(IllegalArgumentException.class,outC.getException());
  assertEquals("C",outC.getException().getMessage());
}
