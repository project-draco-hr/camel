{
  getMockEndpoint("mock:result").expectedMessageCount(files);
  ExecutorService executor=Executors.newFixedThreadPool(poolSize);
  Map<Integer,Future<String>> responses=new HashMap<Integer,Future<String>>();
  for (int i=0; i < files; i++) {
    final int index=i;
    Future<String> out=executor.submit(new Callable<String>(){
      public String call() throws Exception {
        return template.requestBody("mina:tcp://localhost:{{port}}?sync=true",index,String.class);
      }
    }
);
    responses.put(index,out);
  }
  assertMockEndpointsSatisfied();
  assertEquals(files,responses.size());
  Set<String> unique=new HashSet<String>();
  for (  Future<String> future : responses.values()) {
    unique.add(future.get());
  }
  assertEquals("Should be " + files + " unique responses",files,unique.size());
  executor.shutdownNow();
}
