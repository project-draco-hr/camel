{
  String path=getResourceUri();
  ObjectHelper.notNull(configuration,"configuration");
  ObjectHelper.notNull(path,"resourceUri");
  String newResourceUri=exchange.getIn().getHeader(FreemarkerConstants.FREEMARKER_RESOURCE_URI,String.class);
  if (newResourceUri != null) {
    exchange.getIn().removeHeader(FreemarkerConstants.FREEMARKER_RESOURCE_URI);
    if (log.isDebugEnabled()) {
      log.debug(FreemarkerConstants.FREEMARKER_RESOURCE_URI + " set to " + newResourceUri+ " creating new endpoint to handle exchange");
    }
    FreemarkerEndpoint newEndpoint=findOrCreateEndpoint(getEndpointUri(),newResourceUri);
    newEndpoint.onExchange(exchange);
    return;
  }
  Reader reader=null;
  String content=exchange.getIn().getHeader(FreemarkerConstants.FREEMARKER_TEMPLATE,String.class);
  if (content != null) {
    reader=new StringReader(content);
    exchange.getIn().removeHeader(FreemarkerConstants.FREEMARKER_TEMPLATE);
  }
  Map variableMap=ExchangeHelper.createVariableMap(exchange);
  Template template;
  if (reader != null) {
    if (log.isDebugEnabled()) {
      log.debug("Freemarker is evaluating template read from header " + FreemarkerConstants.FREEMARKER_TEMPLATE + " using context: "+ variableMap);
    }
    template=new Template("temp",reader,new Configuration());
  }
 else {
    if (log.isDebugEnabled()) {
      log.debug("Freemarker is evaluating " + path + " using context: "+ variableMap);
    }
    if (encoding != null) {
      template=configuration.getTemplate(path,encoding);
    }
 else {
      template=configuration.getTemplate(path);
    }
  }
  StringWriter buffer=new StringWriter();
  template.process(variableMap,buffer);
  buffer.flush();
  Message out=exchange.getOut();
  out.setBody(buffer.toString());
  Map<String,Object> headers=(Map<String,Object>)variableMap.get("headers");
  for (  String key : headers.keySet()) {
    out.setHeader(key,headers.get(key));
  }
}
