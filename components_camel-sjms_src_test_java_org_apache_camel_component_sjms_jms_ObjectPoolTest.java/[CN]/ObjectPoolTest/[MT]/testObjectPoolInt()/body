{
  final int maxPoolObjects=5;
  ObjectPool<MyPooledObject> testPool=new TestPool(maxPoolObjects);
  testPool.fillPool();
  List<MyPooledObject> poolObjects=new ArrayList<MyPooledObject>();
  for (int i=0; i < maxPoolObjects; i++) {
    poolObjects.add(testPool.borrowObject());
  }
  for (int i=0; i < maxPoolObjects; i++) {
    MyPooledObject pooledObject=poolObjects.get(i);
    assertNotNull("MyPooledObject was null for borrow attempt: " + i,pooledObject);
    assertTrue("Expected a value in the range of 1-5.  Returned: " + pooledObject.getObjectId(),pooledObject.getObjectId() > 0 && pooledObject.getObjectId() < 6);
    LOGGER.info("MyPooledObject has an ID of: " + pooledObject.getObjectId());
  }
  assertNull("Pool should be empty",testPool.borrowObject());
  for (  MyPooledObject myPooledObject : poolObjects) {
    testPool.returnObject(myPooledObject);
  }
  MyPooledObject pooledObject=testPool.borrowObject();
  assertNotNull(pooledObject);
  assertTrue("Expected a value in the range of 1-5.  Returned: " + pooledObject.getObjectId(),pooledObject.getObjectId() > 0 && pooledObject.getObjectId() < 6);
  testPool.drainPool();
}
