{
  executorService=ExecutorServiceHelper.getConfiguredExecutorService(routeContext,this);
  if (executorService == null) {
    String name=getThreadName() != null ? getThreadName() : "Threads";
    if (poolSize == null || poolSize <= 0) {
      executorService=routeContext.getCamelContext().getExecutorServiceStrategy().newDefaultThreadPool(this,name);
    }
 else {
      ThreadPoolProfile profile=routeContext.getCamelContext().getExecutorServiceStrategy().getDefaultThreadPoolProfile();
      int max=getMaxPoolSize() != null ? getMaxPoolSize() : profile.getMaxPoolSize();
      long keepAlive=getKeepAliveTime() != null ? getKeepAliveTime() : profile.getKeepAliveTime();
      int maxQueue=getMaxQueueSize() != null ? getMaxQueueSize() : profile.getMaxQueueSize();
      TimeUnit tu=getTimeUnit() != null ? getTimeUnit() : profile.getTimeUnit();
      RejectedExecutionHandler rejected=profile.getRejectedExecutionHandler();
      if (rejectedPolicy != null) {
        rejected=rejectedPolicy.asRejectedExecutionHandler();
      }
      executorService=routeContext.getCamelContext().getExecutorServiceStrategy().newThreadPool(this,name,poolSize,max,keepAlive,tu,maxQueue,rejected,true);
    }
  }
  Processor childProcessor=routeContext.createProcessor(this);
  UnitOfWorkProcessor uow=new UnitOfWorkProcessor(routeContext,childProcessor);
  return new ThreadsProcessor(routeContext.getCamelContext(),uow,executorService,waitForTaskToComplete);
}
