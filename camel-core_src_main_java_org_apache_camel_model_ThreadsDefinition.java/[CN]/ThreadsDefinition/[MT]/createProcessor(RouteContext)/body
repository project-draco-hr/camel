{
  String name=getThreadName() != null ? getThreadName() : "Threads";
  executorService=ProcessorDefinitionHelper.getConfiguredExecutorService(routeContext,name,this);
  if (executorService == null) {
    ExecutorServiceManager manager=routeContext.getCamelContext().getExecutorServiceManager();
    ThreadPoolProfile profile=new ThreadPoolProfileBuilder(name).poolSize(getPoolSize()).maxPoolSize(getMaxPoolSize()).keepAliveTime(getKeepAliveTime(),getTimeUnit()).maxQueueSize(getMaxQueueSize()).rejectedPolicy(getRejectedPolicy()).build();
    executorService=manager.newThreadPool(this,name,profile);
  }
  ThreadsProcessor thread=new ThreadsProcessor(routeContext.getCamelContext(),executorService);
  if (getCallerRunsWhenRejected() == null) {
    thread.setCallerRunsWhenRejected(true);
  }
 else {
    thread.setCallerRunsWhenRejected(getCallerRunsWhenRejected());
  }
  List<Processor> pipe=new ArrayList<Processor>(2);
  pipe.add(thread);
  pipe.add(createChildProcessor(routeContext,true));
  return new Pipeline(routeContext.getCamelContext(),pipe){
    @Override public String toString(){
      return "Threads[" + getOutputs() + "]";
    }
  }
;
}
