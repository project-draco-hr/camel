{
  String name=getThreadName() != null ? getThreadName() : "Threads";
  executorService=ExecutorServiceHelper.getConfiguredExecutorService(routeContext,name,this);
  if (executorService == null) {
    if (poolSize == null || poolSize <= 0) {
      executorService=routeContext.getCamelContext().getExecutorServiceStrategy().newDefaultThreadPool(this,name);
    }
 else {
      ThreadPoolProfile profile=routeContext.getCamelContext().getExecutorServiceStrategy().getDefaultThreadPoolProfile();
      int max=getMaxPoolSize() != null ? getMaxPoolSize() : profile.getMaxPoolSize();
      long keepAlive=getKeepAliveTime() != null ? getKeepAliveTime() : profile.getKeepAliveTime();
      int maxQueue=getMaxQueueSize() != null ? getMaxQueueSize() : profile.getMaxQueueSize();
      TimeUnit tu=getTimeUnit() != null ? getTimeUnit() : profile.getTimeUnit();
      RejectedExecutionHandler rejected=profile.getRejectedExecutionHandler();
      if (rejectedPolicy != null) {
        rejected=rejectedPolicy.asRejectedExecutionHandler();
      }
      executorService=routeContext.getCamelContext().getExecutorServiceStrategy().newThreadPool(this,name,poolSize,max,keepAlive,tu,maxQueue,rejected,true);
    }
  }
  ThreadsProcessor thread=new ThreadsProcessor(routeContext.getCamelContext(),executorService);
  if (getCallerRunsWhenRejected() != null) {
    thread.setCallerRunsWhenRejected(getCallerRunsWhenRejected());
  }
  List<Processor> pipe=new ArrayList<Processor>(2);
  pipe.add(thread);
  pipe.add(createChildProcessor(routeContext,true));
  return new Pipeline(routeContext.getCamelContext(),pipe);
}
