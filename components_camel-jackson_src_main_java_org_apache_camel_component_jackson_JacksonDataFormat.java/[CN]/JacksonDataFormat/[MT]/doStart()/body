{
  if (objectMapper == null) {
    objectMapper=new ObjectMapper();
  }
  if (enableJaxbAnnotationModule) {
    JaxbAnnotationModule module=new JaxbAnnotationModule();
    LOG.debug("Registering JaxbAnnotationModule: {}",module);
    objectMapper.registerModule(module);
  }
  if (useList) {
    setCollectionType(ArrayList.class);
  }
  if (include != null) {
    JsonInclude.Include inc=getCamelContext().getTypeConverter().mandatoryConvertTo(JsonInclude.Include.class,include);
    objectMapper.setSerializationInclusion(inc);
  }
  if (prettyPrint) {
    objectMapper.enable(SerializationFeature.INDENT_OUTPUT);
  }
  if (enableFeatures != null) {
    Iterator<Object> it=ObjectHelper.createIterator(enableFeatures);
    while (it.hasNext()) {
      String enable=it.next().toString();
      SerializationFeature sf=getCamelContext().getTypeConverter().tryConvertTo(SerializationFeature.class,enable);
      if (sf != null) {
        objectMapper.enable(sf);
        continue;
      }
      DeserializationFeature df=getCamelContext().getTypeConverter().tryConvertTo(DeserializationFeature.class,enable);
      if (df != null) {
        objectMapper.enable(df);
        continue;
      }
      MapperFeature mf=getCamelContext().getTypeConverter().tryConvertTo(MapperFeature.class,enable);
      if (mf != null) {
        objectMapper.enable(mf);
        continue;
      }
      throw new IllegalArgumentException("Enable feature: " + enable + " cannot be converted to an accepted enum of types [SerializationFeature,DeserializationFeature,MapperFeature]");
    }
  }
  if (disableFeatures != null) {
    Iterator<Object> it=ObjectHelper.createIterator(disableFeatures);
    while (it.hasNext()) {
      String disable=it.next().toString();
      SerializationFeature sf=getCamelContext().getTypeConverter().tryConvertTo(SerializationFeature.class,disable);
      if (sf != null) {
        objectMapper.disable(sf);
        continue;
      }
      DeserializationFeature df=getCamelContext().getTypeConverter().tryConvertTo(DeserializationFeature.class,disable);
      if (df != null) {
        objectMapper.disable(df);
        continue;
      }
      MapperFeature mf=getCamelContext().getTypeConverter().tryConvertTo(MapperFeature.class,disable);
      if (mf != null) {
        objectMapper.disable(mf);
        continue;
      }
      throw new IllegalArgumentException("Disable feature: " + disable + " cannot be converted to an accepted enum of types [SerializationFeature,DeserializationFeature,MapperFeature]");
    }
  }
  if (modules != null) {
    for (    Module module : modules) {
      LOG.debug("Registering module: {}",module);
      objectMapper.registerModules(module);
    }
  }
  if (moduleClassNames != null) {
    Iterable<Object> it=ObjectHelper.createIterable(moduleClassNames);
    for (    Object o : it) {
      String name=o.toString();
      Class<Module> clazz=camelContext.getClassResolver().resolveMandatoryClass(name,Module.class);
      Module module=camelContext.getInjector().newInstance(clazz);
      LOG.debug("Registering module: {} -> {}",name,module);
      objectMapper.registerModule(module);
    }
  }
  if (moduleRefs != null) {
    Iterable<Object> it=ObjectHelper.createIterable(moduleRefs);
    for (    Object o : it) {
      String name=o.toString();
      if (name.startsWith("#")) {
        name=name.substring(1);
      }
      Module module=CamelContextHelper.mandatoryLookup(camelContext,name,Module.class);
      LOG.debug("Registering module: {} -> {}",name,module);
      objectMapper.registerModule(module);
    }
  }
}
