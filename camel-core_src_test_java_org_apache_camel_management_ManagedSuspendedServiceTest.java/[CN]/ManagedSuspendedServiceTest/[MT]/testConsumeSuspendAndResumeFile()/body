{
  MBeanServer mbeanServer=getMBeanServer();
  Set<ObjectName> set=mbeanServer.queryNames(new ObjectName("*:type=consumers,*"),null);
  assertEquals(1,set.size());
  ObjectName on=set.iterator().next();
  boolean registered=mbeanServer.isRegistered(on);
  assertEquals("Should be registered",true,registered);
  Boolean ss=(Boolean)mbeanServer.getAttribute(on,"SupportSuspension");
  assertEquals(true,ss.booleanValue());
  Boolean suspended=(Boolean)mbeanServer.getAttribute(on,"Suspended");
  assertEquals(false,suspended.booleanValue());
  MockEndpoint mock=getMockEndpoint("mock:result");
  mock.expectedMessageCount(1);
  template.sendBodyAndHeader("file://target/suspended","Bye World",Exchange.FILE_NAME,"bye.txt");
  template.sendBodyAndHeader("file://target/suspended","Hello World",Exchange.FILE_NAME,"hello.txt");
  assertMockEndpointsSatisfied();
  Thread.sleep(1000);
  suspended=(Boolean)mbeanServer.getAttribute(on,"Suspended");
  assertEquals(true,suspended.booleanValue());
  String[] files=new File("target/suspended/").list();
  assertNotNull(files);
  assertEquals("The file should exists",1,files.length);
  mock.reset();
  mock.expectedMessageCount(1);
  mbeanServer.invoke(on,"resume",null,null);
  assertMockEndpointsSatisfied();
  suspended=(Boolean)mbeanServer.getAttribute(on,"Suspended");
  assertEquals(false,suspended.booleanValue());
  Thread.sleep(500);
  files=new File("target/suspended/").list();
  assertNotNull(files);
  assertEquals("The file should exists",0,files.length);
}
