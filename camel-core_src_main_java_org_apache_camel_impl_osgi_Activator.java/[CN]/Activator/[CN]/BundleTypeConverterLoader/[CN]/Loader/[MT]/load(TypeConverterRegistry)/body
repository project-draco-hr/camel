{
  PackageScanFilter test=new AnnotatedWithPackageScanFilter(Converter.class,true);
  Set<Class<?>> classes=new LinkedHashSet<Class<?>>();
  Set<String> packages=getConverterPackages(bundle.getEntry(META_INF_TYPE_CONVERTER));
  if (LOG.isTraceEnabled()) {
    LOG.trace("Found {} {} packages: {}",new Object[]{packages.size(),META_INF_TYPE_CONVERTER,packages});
  }
  if (packages.size() == 1 && "org.apache.camel.core".equals(packages.iterator().next())) {
    LOG.debug("No additional package names found in classpath for annotated type converters.");
    return;
  }
  packages.remove("org.apache.camel.core");
  for (  String pkg : packages) {
    if (StringHelper.isClassName(pkg)) {
      LOG.trace("Loading {} class",pkg);
      try {
        Class<?> clazz=bundle.loadClass(pkg);
        if (test.matches(clazz)) {
          classes.add(clazz);
        }
        continue;
      }
 catch (      Throwable t) {
        LOG.trace("Failed to load " + pkg + " class due "+ t.getMessage()+ ". This exception will be ignored.",t);
      }
    }
    Enumeration<URL> e=bundle.findEntries("/" + pkg.replace('.','/'),"*.class",true);
    while (e != null && e.hasMoreElements()) {
      String path=e.nextElement().getPath();
      String externalName=path.substring(path.charAt(0) == '/' ? 1 : 0,path.indexOf('.')).replace('/','.');
      LOG.trace("Loading {} class",externalName);
      try {
        Class<?> clazz=bundle.loadClass(externalName);
        if (test.matches(clazz)) {
          classes.add(clazz);
        }
      }
 catch (      Throwable t) {
        LOG.trace("Failed to load " + externalName + " class due "+ t.getMessage()+ ". This exception will be ignored.",t);
      }
    }
  }
  LOG.debug("Found {} @Converter classes to load",classes.size());
  for (  Class<?> type : classes) {
    if (LOG.isTraceEnabled()) {
      LOG.trace("Loading converter class: {}",ObjectHelper.name(type));
    }
    loadConverterMethods(registry,type);
  }
  URL fallbackUrl=bundle.getEntry(META_INF_FALLBACK_TYPE_CONVERTER);
  if (fallbackUrl != null) {
    LOG.debug("Found {} to load the FallbackTypeConverter",META_INF_FALLBACK_TYPE_CONVERTER);
    TypeConverter tc=createInstance("FallbackTypeConverter",fallbackUrl,registry.getInjector());
    registry.addFallbackTypeConverter(tc,false);
  }
  visitedClasses.clear();
  visitedURIs.clear();
}
