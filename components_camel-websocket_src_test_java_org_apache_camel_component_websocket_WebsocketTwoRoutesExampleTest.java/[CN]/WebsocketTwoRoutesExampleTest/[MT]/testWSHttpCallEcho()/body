{
  received.clear();
  latch=new CountDownLatch(1);
  AsyncHttpClient c=new DefaultAsyncHttpClient();
  WebSocket websocket=c.prepareGet("ws://localhost:" + port + "/bar").execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new WebSocketTextListener(){
    @Override public void onMessage(    String message){
      received.add(message);
      log.info("received --> " + message);
      latch.countDown();
    }
    @Override public void onOpen(    WebSocket websocket){
    }
    @Override public void onClose(    WebSocket websocket){
    }
    @Override public void onError(    Throwable t){
      t.printStackTrace();
    }
  }
).build()).get();
  websocket.sendMessage("Beer");
  assertTrue(latch.await(10,TimeUnit.SECONDS));
  assertEquals(1,received.size());
  assertEquals("The bar has Beer",received.get(0));
  websocket.close();
  c.close();
  received.clear();
  latch=new CountDownLatch(1);
  c=new DefaultAsyncHttpClient();
  websocket=c.prepareGet("ws://localhost:" + port + "/pub").execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new WebSocketTextListener(){
    @Override public void onMessage(    String message){
      received.add(message);
      log.info("received --> " + message);
      latch.countDown();
    }
    @Override public void onOpen(    WebSocket websocket){
    }
    @Override public void onClose(    WebSocket websocket){
    }
    @Override public void onError(    Throwable t){
      t.printStackTrace();
    }
  }
).build()).get();
  websocket.sendMessage("wine");
  assertTrue(latch.await(10,TimeUnit.SECONDS));
  assertEquals(1,received.size());
  assertEquals("The pub has wine",received.get(0));
  websocket.close();
  c.close();
}
