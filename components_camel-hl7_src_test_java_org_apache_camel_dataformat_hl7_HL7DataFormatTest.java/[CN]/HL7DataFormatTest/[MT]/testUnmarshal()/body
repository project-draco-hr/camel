{
  MockEndpoint mock=getMockEndpoint("mock:unmarshal");
  mock.expectedMessageCount(1);
  mock.message(0).body().isInstanceOf(Message.class);
  mock.expectedHeaderReceived("hl7.msh.sendingApplication","MYSERVER");
  mock.expectedHeaderReceived("hl7.msh.sendingFacility","MYSENDERAPP");
  mock.expectedHeaderReceived("hl7.msh.receivingApplication","MYCLIENT");
  mock.expectedHeaderReceived("hl7.msh.receivingFacility","MYCLIENTAPP");
  mock.expectedHeaderReceived("hl7.msh.timestamp","200612211200");
  mock.expectedHeaderReceived("hl7.msh.security",null);
  mock.expectedHeaderReceived("hl7.msh.messageType","QRY");
  mock.expectedHeaderReceived("hl7.msh.triggerEvent","A19");
  mock.expectedHeaderReceived("hl7.msh.messageType","QRY");
  mock.expectedHeaderReceived("hl7.msh.triggerEvent","A19");
  mock.expectedHeaderReceived("hl7.msh.messageControl","1234");
  mock.expectedHeaderReceived("hl7.msh.processingId","P");
  mock.expectedHeaderReceived("hl7.msh.versionId","2.4");
  String body=createHL7AsString();
  template.sendBody("direct:unmarshal",body);
  assertMockEndpointsSatisifed();
  Message msg=mock.getExchanges().get(0).getIn().getBody(Message.class);
  assertEquals("2.4",msg.getVersion());
  QRD qrd=(QRD)msg.get("QRD");
  assertEquals("0101701234",qrd.getWhoSubjectFilter(0).getIDNumber().getValue());
}
