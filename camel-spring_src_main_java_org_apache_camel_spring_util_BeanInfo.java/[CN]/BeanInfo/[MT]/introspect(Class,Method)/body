{
  Class[] parameterTypes=method.getParameterTypes();
  Annotation[][] parameterAnnotations=method.getParameterAnnotations();
  final Expression[] parameterExpressions=new Expression[parameterTypes.length];
  for (int i=0; i < parameterTypes.length; i++) {
    Class parameterType=parameterTypes[i];
    Expression expression=createParameterUnmarshalExpression(clazz,method,parameterType,parameterAnnotations[i]);
    if (expression == null) {
      if (log.isDebugEnabled()) {
        log.debug("No expression available for method: " + method.toString() + " parameter: "+ i+ " so ignoring method");
      }
      if (parameterTypes.length == 1) {
        expression=ExpressionBuilder.bodyExpression(parameterType);
      }
 else {
        return null;
      }
    }
    parameterExpressions[i]=expression;
  }
  String opName=method.getName();
  Expression parametersExpression=createMethodParametersExpression(parameterExpressions);
  MethodInfo methodInfo=new MethodInfo(clazz,method,parametersExpression);
  operations.put(opName,methodInfo);
  return methodInfo;
}
