{
  File filePayload=null;
  Object obj=exchange.getIn().getMandatoryBody();
  if (obj instanceof WrappedFile) {
    obj=((WrappedFile<?>)obj).getFile();
  }
  if (obj instanceof File) {
    filePayload=(File)obj;
  }
 else {
    throw new InvalidArgumentException("aws-s3: MultiPart upload requires a File input.");
  }
  ObjectMetadata objectMetadata=determineMetadata(exchange);
  if (objectMetadata.getContentLength() == 0) {
    objectMetadata.setContentLength(filePayload.length());
  }
  final String keyName=determineKey(exchange);
  final InitiateMultipartUploadRequest initRequest=new InitiateMultipartUploadRequest(getConfiguration().getBucketName(),keyName,objectMetadata);
  String storageClass=determineStorageClass(exchange);
  if (storageClass != null) {
    initRequest.setStorageClass(StorageClass.fromValue(storageClass));
  }
  String cannedAcl=exchange.getIn().getHeader(S3Constants.CANNED_ACL,String.class);
  if (cannedAcl != null) {
    CannedAccessControlList objectAcl=CannedAccessControlList.valueOf(cannedAcl);
    initRequest.setCannedACL(objectAcl);
  }
  AccessControlList acl=exchange.getIn().getHeader(S3Constants.ACL,AccessControlList.class);
  if (acl != null) {
    initRequest.setAccessControlList(acl);
  }
  LOG.trace("Initiating multipart upload [{}] from exchange [{}]...",initRequest,exchange);
  final InitiateMultipartUploadResult initResponse=getEndpoint().getS3Client().initiateMultipartUpload(initRequest);
  final long contentLength=objectMetadata.getContentLength();
  final List<PartETag> partETags=new ArrayList<PartETag>();
  long partSize=getConfiguration().getPartSize();
  CompleteMultipartUploadResult uploadResult=null;
  long filePosition=0;
  try {
    for (int part=1; filePosition < contentLength; part++) {
      partSize=Math.min(partSize,contentLength - filePosition);
      UploadPartRequest uploadRequest=new UploadPartRequest().withBucketName(getConfiguration().getBucketName()).withKey(keyName).withUploadId(initResponse.getUploadId()).withPartNumber(part).withFileOffset(filePosition).withFile(filePayload).withPartSize(partSize);
      LOG.trace("Uploading part [{}] for {}",part,keyName);
      partETags.add(getEndpoint().getS3Client().uploadPart(uploadRequest).getPartETag());
      filePosition+=partSize;
    }
    CompleteMultipartUploadRequest compRequest=new CompleteMultipartUploadRequest(getConfiguration().getBucketName(),keyName,initResponse.getUploadId(),partETags);
    uploadResult=getEndpoint().getS3Client().completeMultipartUpload(compRequest);
  }
 catch (  Exception e) {
    getEndpoint().getS3Client().abortMultipartUpload(new AbortMultipartUploadRequest(getConfiguration().getBucketName(),keyName,initResponse.getUploadId()));
    throw e;
  }
  Message message=getMessageForResponse(exchange);
  message.setHeader(S3Constants.E_TAG,uploadResult.getETag());
  if (uploadResult.getVersionId() != null) {
    message.setHeader(S3Constants.VERSION_ID,uploadResult.getVersionId());
  }
  if (getConfiguration().isDeleteAfterWrite() && filePayload != null) {
    FileUtil.deleteFile(filePayload);
  }
}
