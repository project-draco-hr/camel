{
  String bucketNameDestination;
  String destinationKey;
  String sourceKey;
  String bucketName;
  String versionId;
  bucketName=exchange.getIn().getHeader(S3Constants.BUCKET_NAME,String.class);
  if (ObjectHelper.isEmpty(bucketName)) {
    bucketName=getConfiguration().getBucketName();
  }
  sourceKey=exchange.getIn().getHeader(S3Constants.KEY,String.class);
  destinationKey=exchange.getIn().getHeader(S3Constants.DESTINATION_KEY,String.class);
  bucketNameDestination=exchange.getIn().getHeader(S3Constants.BUCKET_DESTINATION_NAME,String.class);
  versionId=exchange.getIn().getHeader(S3Constants.VERSION_ID,String.class);
  if (ObjectHelper.isEmpty(bucketName)) {
    throw new IllegalArgumentException("Bucket Name must be specified for copyObject Operation");
  }
  if (ObjectHelper.isEmpty(bucketNameDestination)) {
    throw new IllegalArgumentException("Bucket Name Destination must be specified for copyObject Operation");
  }
  if (ObjectHelper.isEmpty(sourceKey)) {
    throw new IllegalArgumentException("Source Key must be specified for copyObject Operation");
  }
  if (ObjectHelper.isEmpty(destinationKey)) {
    throw new IllegalArgumentException("Destination Key must be specified for copyObject Operation");
  }
  CopyObjectRequest copyObjectRequest;
  if (ObjectHelper.isEmpty(versionId)) {
    copyObjectRequest=new CopyObjectRequest(bucketName,sourceKey,bucketNameDestination,destinationKey);
  }
 else {
    copyObjectRequest=new CopyObjectRequest(bucketName,sourceKey,versionId,bucketNameDestination,destinationKey);
  }
  CopyObjectResult copyObjectResult=s3Client.copyObject(copyObjectRequest);
  Message message=getMessageForResponse(exchange);
  message.setHeader(S3Constants.E_TAG,copyObjectResult.getETag());
  if (copyObjectResult.getVersionId() != null) {
    message.setHeader(S3Constants.VERSION_ID,copyObjectResult.getVersionId());
  }
}
