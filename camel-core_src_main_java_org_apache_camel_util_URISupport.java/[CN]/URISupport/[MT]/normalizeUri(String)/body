{
  URI u=new URI(UnsafeUriCharactersEncoder.encode(uri));
  String path=u.getSchemeSpecificPart();
  String scheme=u.getScheme();
  if (scheme == null || path == null) {
    return uri;
  }
  if (path.startsWith("//")) {
    path=path.substring(2);
  }
  int idx=path.indexOf('?');
  if (idx != -1) {
    path=path.substring(0,idx);
  }
  path=UnsafeUriCharactersEncoder.encode(path);
  String userInfoPath=path;
  if (userInfoPath.contains("/")) {
    userInfoPath=userInfoPath.substring(0,userInfoPath.indexOf("/"));
  }
  if (StringHelper.countChar(userInfoPath,'@') > 1) {
    int max=userInfoPath.lastIndexOf('@');
    String before=userInfoPath.substring(0,max);
    String after=path.substring(max);
    before=StringHelper.replaceAll(before,"@","%40");
    path=before + after;
  }
  Map<String,Object> parameters=URISupport.parseParameters(u);
  if (parameters.isEmpty()) {
    return buildUri(scheme,path,null);
  }
 else {
    List<String> keys=new ArrayList<String>(parameters.keySet());
    Collections.sort(keys);
    Map<String,Object> sorted=new LinkedHashMap<String,Object>(parameters.size());
    for (    String key : keys) {
      sorted.put(key,parameters.get(key));
    }
    String query=URISupport.createQueryString(sorted);
    return buildUri(scheme,path,query);
  }
}
