{
  final ServiceArgs args=new ServiceArgs();
  if (host != null) {
    args.setHost(host);
  }
  if (port > 0) {
    args.setPort(port);
  }
  if (scheme != null) {
    args.setScheme(scheme);
  }
  if (app != null) {
    args.setApp(app);
  }
  if (owner != null) {
    args.setOwner(owner);
  }
  args.setUsername(username);
  args.setPassword(password);
  if (isUseSunHttpsHandler()) {
    String sunHandlerClassName="sun.net.www.protocol.https.Handler";
    Class<URLStreamHandler> clazz=camelContext.getClassResolver().resolveClass(sunHandlerClassName,URLStreamHandler.class);
    if (clazz != null) {
      URLStreamHandler handler=camelContext.getInjector().newInstance(clazz);
      args.setHTTPSHandler(handler);
      LOG.debug("using the URLStreamHandler {} for {}",handler,args);
    }
 else {
      LOG.warn("could not resolve and use the URLStreamHandler class '{}'",sunHandlerClassName);
    }
  }
  ExecutorService executor=camelContext.getExecutorServiceManager().newSingleThreadExecutor(this,"DefaultSplunkConnectionFactory");
  Future<Service> future=executor.submit(new Callable<Service>(){
    public Service call() throws Exception {
      return Service.connect(args);
    }
  }
);
  try {
    Service service=null;
    if (connectionTimeout > 0) {
      service=future.get(connectionTimeout,TimeUnit.MILLISECONDS);
    }
 else {
      service=future.get();
    }
    LOG.info("Successfully connected to Splunk");
    return service;
  }
 catch (  Exception e) {
    throw new RuntimeException(String.format("could not connect to Splunk Server @ %s:%d - %s",host,port,e.getMessage()));
  }
 finally {
    if (executor != null) {
      camelContext.getExecutorServiceManager().shutdownNow(executor);
    }
  }
}
