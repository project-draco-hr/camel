{
  File zipFile;
  Exchange answer=oldExchange;
  if (newExchange == null) {
    return oldExchange;
  }
  if (oldExchange == null) {
    try {
      zipFile=FileUtil.createTempFile(this.filePrefix,this.fileSuffix);
    }
 catch (    IOException e) {
      throw new GenericFileOperationFailedException(e.getMessage(),e);
    }
    answer=newExchange;
    answer.addOnCompletion(new DeleteZipFileOnCompletion(zipFile));
  }
 else {
    zipFile=oldExchange.getIn().getBody(File.class);
  }
  if (GenericFileMessage.class.isAssignableFrom(newExchange.getIn().getClass())) {
    try {
      File appendFile=newExchange.getIn().getMandatoryBody(File.class);
      if (appendFile != null) {
        addFileToZip(zipFile,appendFile,this.preserveFolderStructure ? newExchange.getIn().toString() : null);
        GenericFile<File> genericFile=FileConsumer.asGenericFile(zipFile.getParent(),zipFile,Charset.defaultCharset().toString());
        genericFile.bindToExchange(answer);
      }
    }
 catch (    Exception e) {
      throw new GenericFileOperationFailedException(e.getMessage(),e);
    }
  }
 else {
    try {
      byte[] buffer=newExchange.getIn().getMandatoryBody(byte[].class);
      addEntryToZip(zipFile,newExchange.getIn().getMessageId(),buffer,buffer.length);
      GenericFile<File> genericFile=FileConsumer.asGenericFile(zipFile.getParent(),zipFile,Charset.defaultCharset().toString());
      genericFile.bindToExchange(answer);
    }
 catch (    Exception e) {
      throw new GenericFileOperationFailedException(e.getMessage(),e);
    }
  }
  return answer;
}
