{
  if (!validate) {
    getLog().info("Validation disabled");
  }
 else {
    final Set<File> jsonFiles=new TreeSet<File>();
    PackageHelper.findJsonFiles(outDir,jsonFiles,new PackageHelper.CamelComponentsModelFilter());
    boolean failed=false;
    for (    File file : jsonFiles) {
      final String name=asName(file);
      final ErrorDetail detail=new ErrorDetail();
      getLog().debug("Validating file " + file);
      validate(file,detail);
      if (detail.hasErrors()) {
        failed=true;
        getLog().warn("The " + detail.getKind() + ": "+ name+ " has validation errors");
        if (detail.isMissingDescription()) {
          getLog().warn("Missing description on: " + detail.getKind());
        }
        if (detail.isMissingLabel()) {
          getLog().warn("Missing label on: " + detail.getKind());
        }
        if (detail.isMissingSyntax()) {
          getLog().warn("Missing syntax on endpoint");
        }
        if (detail.isMissingUriPath()) {
          getLog().warn("Missing @UriPath on endpoint");
        }
        if (!detail.getMissingComponentDocumentation().isEmpty()) {
          getLog().warn("Missing component documentation for the following options:" + indentCollection("\n\t",detail.getMissingComponentDocumentation()));
        }
        if (!detail.getMissingEndpointDocumentation().isEmpty()) {
          getLog().warn("Missing endpoint documentation for the following options:" + indentCollection("\n\t",detail.getMissingEndpointDocumentation()));
        }
      }
    }
    if (failed) {
      throw new MojoFailureException("Validating failed, see errors above!");
    }
 else {
      getLog().info("Validation complete");
    }
  }
}
