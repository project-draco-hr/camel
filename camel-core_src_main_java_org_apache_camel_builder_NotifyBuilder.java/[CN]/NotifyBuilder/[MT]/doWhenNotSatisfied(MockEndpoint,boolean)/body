{
  stack.push(new EventPredicateSupport(){
    private Producer producer;
    @Override public boolean onExchangeCreated(    Exchange exchange){
      if (received) {
        sendToMock(exchange);
      }
      return true;
    }
    @Override public boolean onExchangeFailure(    Exchange exchange){
      if (!received) {
        sendToMock(exchange);
      }
      return true;
    }
    @Override public boolean onExchangeCompleted(    Exchange exchange){
      if (!received) {
        sendToMock(exchange);
      }
      return true;
    }
    private void sendToMock(    Exchange exchange){
      try {
        if (producer == null) {
          producer=mock.createProducer();
        }
        producer.process(exchange);
      }
 catch (      Exception e) {
        throw ObjectHelper.wrapRuntimeCamelException(e);
      }
    }
    public boolean matches(){
      try {
        return !mock.await(0,TimeUnit.SECONDS);
      }
 catch (      InterruptedException e) {
        throw ObjectHelper.wrapRuntimeCamelException(e);
      }
    }
    @Override public void reset(){
      mock.reset();
    }
    @Override public String toString(){
      if (received) {
        return "whenReceivedNotSatisfied(" + mock + ")";
      }
 else {
        return "whenDoneNotSatisfied(" + mock + ")";
      }
    }
  }
);
  return this;
}
