{
  stack.add(new EventPredicateSupport(){
    private volatile boolean matches;
    private final AtomicInteger current=new AtomicInteger();
    @Override public boolean onExchangeCreated(    Exchange exchange){
      if (received) {
        matchBody(exchange);
      }
      return true;
    }
    @Override public boolean onExchangeFailed(    Exchange exchange){
      if (!received) {
        matchBody(exchange);
      }
      return true;
    }
    @Override public boolean onExchangeCompleted(    Exchange exchange){
      if (!received) {
        matchBody(exchange);
      }
      return true;
    }
    private void matchBody(    Exchange exchange){
      if (current.incrementAndGet() > bodies.size()) {
        return;
      }
      Object actual=exchange.getIn().getBody();
      Object expected=bodies.get(current.get() - 1);
      matches=ObjectHelper.equal(expected,actual);
    }
    public boolean matches(){
      if (exact) {
        return matches && current.get() == bodies.size();
      }
 else {
        return matches && current.get() >= bodies.size();
      }
    }
    @Override public void reset(){
      matches=false;
      current.set(0);
    }
    @Override public String toString(){
      if (received) {
        return "" + (exact ? "whenExactBodiesReceived(" : "whenBodiesReceived(") + bodies+ ")";
      }
 else {
        return "" + (exact ? "whenExactBodiesDone(" : "whenBodiesDone(") + bodies+ ")";
      }
    }
  }
);
  return this;
}
