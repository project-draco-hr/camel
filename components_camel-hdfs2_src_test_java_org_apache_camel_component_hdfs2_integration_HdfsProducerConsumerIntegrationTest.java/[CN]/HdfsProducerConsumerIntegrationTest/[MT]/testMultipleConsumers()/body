{
  int ITERATIONS=400;
  Path p=new Path("hdfs://localhost:9000/tmp/test/multiple-consumers");
  FileSystem fs=FileSystem.get(p.toUri(),new Configuration());
  fs.mkdirs(p);
  for (int i=1; i <= ITERATIONS; i++) {
    FSDataOutputStream os=fs.create(new Path(p,String.format("file-%03d.txt",i)));
    os.write(String.format("hello (%03d)\n",i).getBytes());
    os.close();
  }
  final Set<String> fileNames=new HashSet<String>();
  final CountDownLatch latch=new CountDownLatch(ITERATIONS);
  MockEndpoint resultEndpoint=context.getEndpoint("mock:result",MockEndpoint.class);
  resultEndpoint.whenAnyExchangeReceived(new Processor(){
    @Override public void process(    Exchange exchange) throws Exception {
      fileNames.add(exchange.getIn().getHeader(Exchange.FILE_NAME,String.class));
      latch.countDown();
    }
  }
);
  context.addRoutes(new RouteBuilder(){
    @Override public void configure(){
      from("hdfs2://localhost:9000/tmp/test/multiple-consumers?pattern=*.txt&fileSystemType=HDFS&chunkSize=128").to("mock:result");
      from("hdfs2://localhost:9000/tmp/test/multiple-consumers?pattern=*.txt&fileSystemType=HDFS&chunkSize=256").to("mock:result");
      from("hdfs2://localhost:9000/tmp/test/multiple-consumers?pattern=*.txt&fileSystemType=HDFS&chunkSize=512").to("mock:result");
      from("hdfs2://localhost:9000/tmp/test/multiple-consumers?pattern=*.txt&fileSystemType=HDFS&chunkSize=1024").to("mock:result");
    }
  }
);
  context.start();
  resultEndpoint.expectedMessageCount(ITERATIONS);
  latch.await(30,TimeUnit.SECONDS);
  resultEndpoint.assertIsSatisfied();
  assertThat(fileNames.size(),equalTo(ITERATIONS));
}
