{
  final MockEndpoint mockEndpoint=camelContext.getEndpoint("mock:results",MockEndpoint.class);
  mockEndpoint.expectedBodiesReceived("b","d");
  Observable<Order> observable=reactiveCamel.toObservable("seda:orders",Order.class);
  Observable<String> largeOrderIds=observable.filter(new Func1<Order,Boolean>(){
    public Boolean call(    Order order){
      return order.getAmount() > 100.0;
    }
  }
).map(new Func1<Order,String>(){
    public String call(    Order order){
      return order.getId();
    }
  }
);
  largeOrderIds.take(2).subscribe(new Action1<String>(){
    @Override public void call(    String body){
      LOG.info("Processing  " + body);
      producerTemplate.sendBody(mockEndpoint,body);
    }
  }
);
  Order[] orders={new Order("a",49.95),new Order("b",125.50),new Order("c",22.95),new Order("d",259.95),new Order("e",1.25)};
  for (  Order order : orders) {
    producerTemplate.sendBody("seda:orders",order);
  }
  mockEndpoint.assertIsSatisfied();
}
