{
  if (encryptedStream == null) {
    return null;
  }
  PGPPrivateKey key=PGPDataFormatUtil.findPrivateKey(exchange.getContext(),findKeyFileName(exchange),encryptedStream,findKeyPassword(exchange));
  if (key == null) {
    throw new IllegalArgumentException("Private key is null, cannot proceed");
  }
  InputStream in;
  try {
    byte[] encryptedData=IOUtils.toByteArray(encryptedStream);
    InputStream byteStream=new ByteArrayInputStream(encryptedData);
    in=PGPUtil.getDecoderStream(byteStream);
  }
  finally {
    IOUtils.closeQuietly(encryptedStream);
  }
  PGPObjectFactory pgpF=new PGPObjectFactory(in);
  PGPEncryptedDataList enc;
  Object o=pgpF.nextObject();
  if (o instanceof PGPEncryptedDataList) {
    enc=(PGPEncryptedDataList)o;
  }
 else {
    enc=(PGPEncryptedDataList)pgpF.nextObject();
  }
  IOHelper.close(in);
  PGPPublicKeyEncryptedData pbe=(PGPPublicKeyEncryptedData)enc.get(0);
  InputStream clear=pbe.getDataStream(key,"BC");
  PGPObjectFactory pgpFact=new PGPObjectFactory(clear);
  PGPCompressedData cData=(PGPCompressedData)pgpFact.nextObject();
  pgpFact=new PGPObjectFactory(cData.getDataStream());
  PGPLiteralData ld=(PGPLiteralData)pgpFact.nextObject();
  byte[] answer;
  try {
    answer=Streams.readAll(ld.getInputStream());
  }
  finally {
    IOHelper.close(clear);
  }
  return answer;
}
