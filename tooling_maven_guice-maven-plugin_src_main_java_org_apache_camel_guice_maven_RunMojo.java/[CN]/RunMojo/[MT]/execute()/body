{
  if (killAfter != -1) {
    getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.");
  }
  List<String> args=new ArrayList<String>();
  if (jndiProperties != null) {
    args.add("-j");
    args.add(jndiProperties);
  }
  if (debug) {
    args.add("-x");
  }
  if (trace) {
    args.add("-t");
  }
  args.add("-d");
  args.add(duration);
  if (arguments != null) {
    args.addAll(Arrays.asList(arguments));
  }
  arguments=new String[args.size()];
  args.toArray(arguments);
  if (getLog().isDebugEnabled()) {
    StringBuilder msg=new StringBuilder("Invoking : ");
    msg.append(mainClass);
    msg.append(".main(");
    for (int i=0; i < arguments.length; i++) {
      if (i > 0) {
        msg.append(", ");
      }
      msg.append(arguments[i]);
    }
    msg.append(")");
    getLog().debug(msg);
  }
  IsolatedThreadGroup threadGroup=new IsolatedThreadGroup(mainClass);
  Thread bootstrapThread=new Thread(threadGroup,new Runnable(){
    public void run(){
      try {
        Method main=Thread.currentThread().getContextClassLoader().loadClass(mainClass).getMethod("main",String[].class);
        main.invoke(null,new Object[]{arguments});
      }
 catch (      Exception e) {
        getLog().error("*************************************");
        getLog().error("Error occurred while running main from: " + mainClass);
        getLog().error(e);
        getLog().error("*************************************");
        Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(),e);
      }
    }
  }
,mainClass + ".main()");
  bootstrapThread.setContextClassLoader(getClassLoader());
  setSystemProperties();
  bootstrapThread.start();
  joinNonDaemonThreads(threadGroup);
  if (keepAlive) {
    getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.");
    waitFor(0);
  }
  if (cleanupDaemonThreads) {
    terminateThreads(threadGroup);
    try {
      threadGroup.destroy();
    }
 catch (    IllegalThreadStateException e) {
      getLog().warn("Couldn't destroy thread group " + threadGroup,e);
    }
  }
  if (originalSystemProperties != null) {
    System.setProperties(originalSystemProperties);
  }
synchronized (threadGroup) {
    if (threadGroup.uncaughtException != null) {
      throw new MojoExecutionException(null,threadGroup.uncaughtException);
    }
  }
  registerSourceRoots();
}
