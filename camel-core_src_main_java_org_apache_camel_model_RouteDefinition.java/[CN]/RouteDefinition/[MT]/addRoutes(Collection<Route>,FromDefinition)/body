{
  RouteContext routeContext=new DefaultRouteContext(getCamelContext(),this,fromType,routes);
  if (trace != null) {
    routeContext.setTracing(isTrace());
    if (isTrace()) {
      if (log.isDebugEnabled()) {
        log.debug("Tracing is enabled on route: " + this);
      }
    }
  }
  if (streamCache != null) {
    routeContext.setStreamCaching(isStreamCache());
    if (isStreamCache()) {
      if (log.isDebugEnabled()) {
        log.debug("StramCaching is enabled on route: " + this);
      }
      if (StreamCaching.getStreamCaching(getCamelContext()) == null) {
        addInterceptStrategy(new StreamCaching());
      }
    }
  }
  if (handleFault != null) {
    routeContext.setHandleFault(isHandleFault());
    if (isHandleFault()) {
      if (log.isDebugEnabled()) {
        log.debug("HandleFault is enabled on route: " + this);
      }
      if (HandleFault.getHandleFault(getCamelContext()) == null) {
        addInterceptStrategy(new HandleFault());
      }
    }
  }
  if (delayer != null) {
    routeContext.setDelayer(getDelayer());
    if (getDelayer() != null) {
      long millis=getDelayer();
      if (millis > 0) {
        if (log.isDebugEnabled()) {
          log.debug("Delayer is enabled with: " + millis + " ms. on route: "+ this);
        }
        addInterceptStrategy(new Delayer(millis));
      }
 else {
        if (log.isDebugEnabled()) {
          log.debug("Delayer is disabled on route: " + this);
        }
      }
    }
  }
  if (routePolicy != null) {
    if (log.isDebugEnabled()) {
      log.debug("RoutePolicy is enabled: " + routePolicy + " on route: "+ this);
    }
    routeContext.setRoutePolicy(getRoutePolicy());
  }
 else   if (routePolicyRef != null) {
    RoutePolicy policy=CamelContextHelper.mandatoryLookup(getCamelContext(),routePolicyRef,RoutePolicy.class);
    if (log.isDebugEnabled()) {
      log.debug("RoutePolicy is enabled: " + policy + " on route: "+ this);
    }
    routeContext.setRoutePolicy(policy);
  }
  if (autoStartup != null) {
    routeContext.setAutoStartup(isAutoStartup());
  }
  routeContext.setInterceptStrategies(this.getInterceptStrategies());
  routeContext.getEndpoint();
  if (camelContext != null) {
    for (    LifecycleStrategy strategy : camelContext.getLifecycleStrategies()) {
      strategy.onRouteContextCreate(routeContext);
    }
  }
  List<ProcessorDefinition<?>> list=new ArrayList<ProcessorDefinition<?>>(outputs);
  for (  ProcessorDefinition<?> output : list) {
    output.addRoutes(routeContext,routes);
  }
  routeContext.commit();
  return routeContext;
}
