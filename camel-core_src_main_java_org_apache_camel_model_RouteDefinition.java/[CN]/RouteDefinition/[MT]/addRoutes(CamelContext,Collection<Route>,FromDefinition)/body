{
  RouteContext routeContext=new DefaultRouteContext(camelContext,this,fromType,routes);
  if (trace != null) {
    Boolean isTrace=CamelContextHelper.parseBoolean(camelContext,getTrace());
    if (isTrace != null) {
      routeContext.setTracing(isTrace);
      if (isTrace) {
        log.debug("Tracing is enabled on route: {}",getId());
      }
    }
  }
  if (messageHistory != null) {
    Boolean isMessageHistory=CamelContextHelper.parseBoolean(camelContext,getMessageHistory());
    if (isMessageHistory != null) {
      routeContext.setMessageHistory(isMessageHistory);
      if (isMessageHistory) {
        log.debug("Message history is enabled on route: {}",getId());
      }
    }
  }
  if (streamCache != null) {
    Boolean isStreamCache=CamelContextHelper.parseBoolean(camelContext,getStreamCache());
    if (isStreamCache != null) {
      routeContext.setStreamCaching(isStreamCache);
      if (isStreamCache) {
        log.debug("StreamCaching is enabled on route: {}",getId());
      }
    }
  }
  if (handleFault != null) {
    Boolean isHandleFault=CamelContextHelper.parseBoolean(camelContext,getHandleFault());
    if (isHandleFault != null) {
      routeContext.setHandleFault(isHandleFault);
      if (isHandleFault) {
        log.debug("HandleFault is enabled on route: {}",getId());
        if (HandleFault.getHandleFault(camelContext) == null) {
          addInterceptStrategy(new HandleFault());
        }
      }
    }
  }
  if (delayer != null) {
    Long delayer=CamelContextHelper.parseLong(camelContext,getDelayer());
    if (delayer != null) {
      routeContext.setDelayer(delayer);
      if (delayer > 0) {
        log.debug("Delayer is enabled with: {} ms. on route: {}",delayer,getId());
        addInterceptStrategy(new Delayer(delayer));
      }
 else {
        log.debug("Delayer is disabled on route: {}",getId());
      }
    }
  }
  if (routePolicies != null && !routePolicies.isEmpty()) {
    for (    RoutePolicy policy : routePolicies) {
      log.debug("RoutePolicy is enabled: {} on route: {}",policy,getId());
      routeContext.getRoutePolicyList().add(policy);
    }
  }
  if (routePolicyRef != null) {
    StringTokenizer policyTokens=new StringTokenizer(routePolicyRef,",");
    while (policyTokens.hasMoreTokens()) {
      String ref=policyTokens.nextToken().trim();
      RoutePolicy policy=CamelContextHelper.mandatoryLookup(camelContext,ref,RoutePolicy.class);
      log.debug("RoutePolicy is enabled: {} on route: {}",policy,getId());
      routeContext.getRoutePolicyList().add(policy);
    }
  }
  Boolean isAutoStartup=CamelContextHelper.parseBoolean(camelContext,getAutoStartup());
  if (isAutoStartup != null) {
    log.debug("Using AutoStartup {} on route: {}",isAutoStartup,getId());
    routeContext.setAutoStartup(isAutoStartup);
  }
  if (shutdownRoute != null) {
    log.debug("Using ShutdownRoute {} on route: {}",getShutdownRoute(),getId());
    routeContext.setShutdownRoute(getShutdownRoute());
  }
  if (shutdownRunningTask != null) {
    log.debug("Using ShutdownRunningTask {} on route: {}",getShutdownRunningTask(),getId());
    routeContext.setShutdownRunningTask(getShutdownRunningTask());
  }
  routeContext.setInterceptStrategies(this.getInterceptStrategies());
  routeContext.getEndpoint();
  if (camelContext != null) {
    for (    LifecycleStrategy strategy : camelContext.getLifecycleStrategies()) {
      strategy.onRouteContextCreate(routeContext);
    }
  }
  if (!ProcessorDefinitionHelper.hasOutputs(outputs,true)) {
    RouteDefinition route=routeContext.getRoute();
    String at=fromType.toString();
    Exception cause=new IllegalArgumentException("Route " + route.getId() + " has no output processors."+ " You need to add outputs to the route such as to(\"log:foo\").");
    throw new FailedToCreateRouteException(route.getId(),route.toString(),at,cause);
  }
  List<ProcessorDefinition<?>> list=new ArrayList<ProcessorDefinition<?>>(outputs);
  for (  ProcessorDefinition<?> output : list) {
    try {
      output.addRoutes(routeContext,routes);
    }
 catch (    Exception e) {
      RouteDefinition route=routeContext.getRoute();
      throw new FailedToCreateRouteException(route.getId(),route.toString(),output.toString(),e);
    }
  }
  routeContext.commit();
  return routeContext;
}
