{
  MockEndpoint mock=getMockEndpoint("mock:result");
  mock.expectedBodiesReceived("Bye World","Hello World","Goodday World");
  assertMockEndpointsSatisfied();
  Exchange exchange=mock.getExchanges().get(0);
  RemoteFile<?> file=(RemoteFile<?>)exchange.getProperty(FileComponent.FILE_EXCHANGE_FILE);
  assertNotNull(file);
  assertDirectoryEquals("multidir/bye.txt",file.getAbsoluteFilePath());
  assertDirectoryEquals("bye.txt",file.getRelativeFilePath());
  assertEquals("bye.txt",file.getFileName());
  exchange=mock.getExchanges().get(1);
  file=(RemoteFile<?>)exchange.getProperty(FileComponent.FILE_EXCHANGE_FILE);
  assertNotNull(file);
  assertDirectoryEquals("multidir/sub/hello.txt",file.getAbsoluteFilePath());
  assertDirectoryEquals("sub/hello.txt",file.getRelativeFilePath());
  assertEquals("sub/hello.txt",file.getFileName());
  assertEquals("hello.txt",file.getFileNameOnly());
  exchange=mock.getExchanges().get(2);
  file=(RemoteFile<?>)exchange.getProperty(FileComponent.FILE_EXCHANGE_FILE);
  assertNotNull(file);
  assertDirectoryEquals("multidir/sub/sub2/godday.txt",file.getAbsoluteFilePath());
  assertDirectoryEquals("sub/sub2/godday.txt",file.getRelativeFilePath());
  assertEquals("sub/sub2/godday.txt",file.getFileName());
  assertEquals("godday.txt",file.getFileNameOnly());
}
