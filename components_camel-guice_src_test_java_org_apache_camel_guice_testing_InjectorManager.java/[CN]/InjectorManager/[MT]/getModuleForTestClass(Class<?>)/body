{
  String modules=System.getProperty(Injectors.MODULE_CLASS_NAMES);
  if (modules != null) {
    modules=modules.trim();
    if (modules.length() > 0) {
      System.out.println("Overloading Guice Modules: " + modules);
      return null;
    }
  }
  Class<? extends Module> moduleType;
  UseModule config=objectType.getAnnotation(UseModule.class);
  if (config != null) {
    moduleType=config.value();
  }
 else {
    String name=objectType.getName() + "$" + NESTED_MODULE_CLASS;
    Class<?> type;
    try {
      type=objectType.getClassLoader().loadClass(name);
    }
 catch (    ClassNotFoundException e) {
      try {
        type=Thread.currentThread().getContextClassLoader().loadClass(name);
      }
 catch (      ClassNotFoundException e2) {
        throw new ClassNotFoundException("Class " + objectType.getName() + " does not have a @UseModule annotation nor does it have a nested class called "+ NESTED_MODULE_CLASS+ " available on the classpath. Please see: http://code.google.com/p/guiceyfruit/wiki/Testing"+ e,e);
      }
    }
    try {
      moduleType=(Class<? extends Module>)type;
    }
 catch (    Exception e) {
      throw new IllegalArgumentException("Class " + type.getName() + " is not a Guice Module!",e);
    }
  }
  int modifiers=moduleType.getModifiers();
  if (Modifier.isAbstract(modifiers) || !Modifier.isPublic(modifiers)) {
    throw new IllegalArgumentException("Class " + moduleType.getName() + " must be a public class which is non abstract");
  }
  try {
    moduleType.getConstructor();
  }
 catch (  NoSuchMethodException e) {
    throw new IllegalArgumentException("Class " + moduleType.getName() + " must have a zero argument constructor",e);
  }
  return moduleType;
}
