{
  Map<String,Object> schedulerProperties=IntrospectionSupport.extractProperties(options,"scheduler.");
  if (schedulerProperties != null && !schedulerProperties.isEmpty()) {
    setSchedulerProperties(schedulerProperties);
  }
  if (scheduler == null && schedulerName != null) {
    if ("none".equals(schedulerName)) {
      scheduler=null;
    }
 else     if ("spring".equals(schedulerName)) {
      try {
        Class<? extends ScheduledPollConsumerScheduler> clazz=getCamelContext().getClassResolver().resolveMandatoryClass(SPRING_SCHEDULER,ScheduledPollConsumerScheduler.class);
        setScheduler(getCamelContext().getInjector().newInstance(clazz));
      }
 catch (      ClassNotFoundException e) {
        throw new IllegalArgumentException("Cannot load " + SPRING_SCHEDULER + " from classpath. Make sure camel-spring.jar is on the classpath.",e);
      }
    }
 else     if ("quartz2".equals(schedulerName)) {
      try {
        Class<? extends ScheduledPollConsumerScheduler> clazz=getCamelContext().getClassResolver().resolveMandatoryClass(QUARTZ_2_SCHEDULER,ScheduledPollConsumerScheduler.class);
        setScheduler(getCamelContext().getInjector().newInstance(clazz));
      }
 catch (      ClassNotFoundException e) {
        throw new IllegalArgumentException("Cannot load " + QUARTZ_2_SCHEDULER + " from classpath. Make sure camel-quartz2.jar is on the classpath.",e);
      }
    }
 else {
      setScheduler(CamelContextHelper.mandatoryLookup(getCamelContext(),schedulerName,ScheduledPollConsumerScheduler.class));
    }
  }
}
