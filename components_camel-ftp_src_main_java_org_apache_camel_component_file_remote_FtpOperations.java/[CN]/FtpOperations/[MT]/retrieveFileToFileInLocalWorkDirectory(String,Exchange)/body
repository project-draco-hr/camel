{
  File temp;
  File local=new File(FileUtil.normalizePath(endpoint.getLocalWorkDirectory()));
  OutputStream os;
  try {
    GenericFile<FTPFile> target=(GenericFile<FTPFile>)exchange.getProperty(FileComponent.FILE_EXCHANGE_FILE);
    ObjectHelper.notNull(target,"Exchange should have the " + FileComponent.FILE_EXCHANGE_FILE + " set");
    String relativeName=target.getRelativeFilePath();
    temp=new File(local,relativeName + ".inprogress");
    local=new File(local,relativeName);
    local.mkdirs();
    if (temp.exists()) {
      if (!FileUtil.deleteFile(temp)) {
        throw new GenericFileOperationFailedException("Cannot delete existing local work file: " + temp);
      }
    }
    if (local.exists()) {
      if (!FileUtil.deleteFile(local)) {
        throw new GenericFileOperationFailedException("Cannot delete existing local work file: " + local);
      }
    }
    if (!temp.createNewFile()) {
      throw new GenericFileOperationFailedException("Cannot create new local work file: " + temp);
    }
    os=new FileOutputStream(temp);
    exchange.getIn().setHeader(Exchange.FILE_LOCAL_WORK_PATH,local.getPath());
  }
 catch (  Exception e) {
    throw new GenericFileOperationFailedException("Cannot create new local work file: " + local);
  }
  boolean result;
  try {
    GenericFile<FTPFile> target=(GenericFile<FTPFile>)exchange.getProperty(FileComponent.FILE_EXCHANGE_FILE);
    target.setBody(local);
    String remoteName=name;
    String currentDir=null;
    if (endpoint.getConfiguration().isStepwise()) {
      currentDir=getCurrentDirectory();
      String path=FileUtil.onlyPath(name);
      if (path != null) {
        changeCurrentDirectory(path);
      }
      remoteName=FileUtil.stripPath(name);
    }
    result=client.retrieveFile(remoteName,os);
    if (endpoint.getConfiguration().isStepwise()) {
      changeCurrentDirectory(currentDir);
    }
  }
 catch (  IOException e) {
    if (log.isTraceEnabled()) {
      log.trace("Error occurred during retrieving file: " + name + " to local directory. Deleting local work file: "+ temp);
    }
    IOHelper.close(os,"retrieve: " + name,log);
    boolean deleted=FileUtil.deleteFile(temp);
    if (!deleted) {
      log.warn("Error occurred during retrieving file: " + name + " to local directory. Cannot delete local work file: "+ temp);
    }
    throw new GenericFileOperationFailedException(client.getReplyCode(),client.getReplyString(),e.getMessage(),e);
  }
 finally {
    IOHelper.close(os,"retrieve: " + name,log);
  }
  if (log.isDebugEnabled()) {
    log.debug("Retrieve file to local work file result: " + result);
  }
  if (result) {
    if (log.isTraceEnabled()) {
      log.trace("Renaming local in progress file from: " + temp + " to: "+ local);
    }
    if (!FileUtil.renameFile(temp,local)) {
      throw new GenericFileOperationFailedException("Cannot rename local work file from: " + temp + " to: "+ local);
    }
  }
  return result;
}
