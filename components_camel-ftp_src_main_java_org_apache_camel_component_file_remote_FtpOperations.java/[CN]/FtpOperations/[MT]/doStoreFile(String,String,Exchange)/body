{
  log.trace("doStoreFile({})",targetName);
  if (endpoint.getFileExist() == GenericFileExist.Ignore || endpoint.getFileExist() == GenericFileExist.Fail || endpoint.getFileExist() == GenericFileExist.Move) {
    boolean existFile=existsFile(targetName);
    if (existFile && endpoint.getFileExist() == GenericFileExist.Ignore) {
      log.trace("An existing file already exists: {}. Ignore and do not override it.",name);
      return true;
    }
 else     if (existFile && endpoint.getFileExist() == GenericFileExist.Fail) {
      throw new GenericFileOperationFailedException("File already exist: " + name + ". Cannot write new file.");
    }
 else     if (existFile && endpoint.getFileExist() == GenericFileExist.Move) {
      doMoveExistingFile(name,targetName);
    }
  }
  InputStream is=null;
  if (exchange.getIn().getBody() == null) {
    if (endpoint.isAllowNullBody()) {
      log.trace("Writing empty file.");
      is=new ByteArrayInputStream(new byte[]{});
    }
 else {
      throw new GenericFileOperationFailedException("Cannot write null body to file: " + name);
    }
  }
  try {
    if (is == null) {
      String charset=endpoint.getCharset();
      if (charset != null) {
        is=new ByteArrayInputStream(exchange.getIn().getMandatoryBody(String.class).getBytes(charset));
        log.trace("Using InputStream {} with charset {}.",is,charset);
      }
 else {
        is=exchange.getIn().getMandatoryBody(InputStream.class);
      }
    }
    final StopWatch watch=new StopWatch();
    boolean answer;
    log.debug("About to store file: {} using stream: {}",targetName,is);
    if (endpoint.getFileExist() == GenericFileExist.Append) {
      log.trace("Client appendFile: {}",targetName);
      answer=client.appendFile(targetName,is);
    }
 else {
      log.trace("Client storeFile: {}",targetName);
      answer=client.storeFile(targetName,is);
    }
    watch.stop();
    if (log.isDebugEnabled()) {
      log.debug("Took {} ({} millis) to store file: {} and FTP client returned: {}",new Object[]{TimeUtils.printDuration(watch.taken()),watch.taken(),targetName,answer});
    }
    String chmod=((FtpConfiguration)endpoint.getConfiguration()).getChmod();
    if (ObjectHelper.isNotEmpty(chmod)) {
      log.debug("Setting chmod: {} on file: {}",chmod,targetName);
      String command="chmod " + chmod + " "+ targetName;
      log.trace("Client sendSiteCommand: {}",command);
      boolean success=client.sendSiteCommand(command);
      log.trace("Client sendSiteCommand successful: {}",success);
    }
    exchange.getIn().setHeader(FtpConstants.FTP_REPLY_CODE,client.getReplyCode());
    exchange.getIn().setHeader(FtpConstants.FTP_REPLY_STRING,client.getReplyString());
    return answer;
  }
 catch (  IOException e) {
    throw new GenericFileOperationFailedException(client.getReplyCode(),client.getReplyString(),e.getMessage(),e);
  }
catch (  InvalidPayloadException e) {
    throw new GenericFileOperationFailedException("Cannot store file: " + name,e);
  }
 finally {
    IOHelper.close(is,"store: " + name,log);
  }
}
