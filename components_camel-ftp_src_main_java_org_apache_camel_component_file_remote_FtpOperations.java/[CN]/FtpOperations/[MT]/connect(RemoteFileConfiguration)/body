{
  if (log.isTraceEnabled()) {
    log.trace("Connecting using FTPClient: " + client);
  }
  String host=configuration.getHost();
  int port=configuration.getPort();
  String username=configuration.getUsername();
  if (clientConfig != null) {
    log.trace("Configuring FTPClient with config: " + clientConfig);
    client.configure(clientConfig);
  }
  if (log.isTraceEnabled()) {
    log.trace("Connecting to " + configuration.remoteServerInformation() + " using connection timeout: "+ client.getConnectTimeout());
  }
  boolean connected=false;
  int attempt=0;
  while (!connected) {
    try {
      if (log.isTraceEnabled() && attempt > 0) {
        log.trace("Reconnect attempt #" + attempt + " connecting to + "+ configuration.remoteServerInformation());
      }
      client.connect(host,port);
      int reply=client.getReplyCode();
      if (FTPReply.isPositiveCompletion(reply)) {
        connected=true;
      }
 else {
        throw new GenericFileOperationFailedException(client.getReplyCode(),client.getReplyString(),"Server refused connection");
      }
    }
 catch (    Exception e) {
      if (Thread.currentThread().isInterrupted()) {
        throw new GenericFileOperationFailedException("Interrupted during connecting",new InterruptedException("Interrupted during connecting"));
      }
      GenericFileOperationFailedException failed;
      if (e instanceof GenericFileOperationFailedException) {
        failed=(GenericFileOperationFailedException)e;
      }
 else {
        failed=new GenericFileOperationFailedException(client.getReplyCode(),client.getReplyString(),e.getMessage(),e);
      }
      if (log.isTraceEnabled()) {
        log.trace("Cannot connect due: " + failed.getMessage());
      }
      attempt++;
      if (attempt > endpoint.getMaximumReconnectAttempts()) {
        throw failed;
      }
      if (endpoint.getReconnectDelay() > 0) {
        try {
          Thread.sleep(endpoint.getReconnectDelay());
        }
 catch (        InterruptedException ie) {
          Thread.currentThread().interrupt();
          throw new GenericFileOperationFailedException("Interrupted during sleeping",ie);
        }
      }
    }
  }
  if (configuration.isPassiveMode()) {
    log.trace("Using passive mode connections");
    client.enterLocalPassiveMode();
  }
  if (endpoint instanceof FtpEndpoint) {
    FtpEndpoint ftpEndpoint=(FtpEndpoint)endpoint;
    if (ftpEndpoint.getSoTimeout() > 0) {
      log.trace("Using SoTimeout=" + ftpEndpoint.getSoTimeout());
      try {
        client.setSoTimeout(ftpEndpoint.getSoTimeout());
      }
 catch (      IOException e) {
        throw new GenericFileOperationFailedException(client.getReplyCode(),client.getReplyString(),e.getMessage(),e);
      }
    }
  }
  try {
    boolean login;
    if (username != null) {
      if (log.isTraceEnabled()) {
        log.trace("Attempting to login user: " + username + " using password: "+ configuration.getPassword());
      }
      login=client.login(username,configuration.getPassword());
    }
 else {
      log.trace("Attempting to login anonymous");
      login=client.login("anonymous",null);
    }
    if (log.isTraceEnabled()) {
      log.trace("User " + (username != null ? username : "anonymous") + " logged in: "+ login);
    }
    if (!login) {
      throw new GenericFileOperationFailedException(client.getReplyCode(),client.getReplyString());
    }
    client.setFileType(configuration.isBinary() ? FTPClient.BINARY_FILE_TYPE : FTPClient.ASCII_FILE_TYPE);
  }
 catch (  IOException e) {
    throw new GenericFileOperationFailedException(client.getReplyCode(),client.getReplyString(),e.getMessage(),e);
  }
  if (endpoint.getConfiguration().getSiteCommand() != null) {
    Iterator it=ObjectHelper.createIterator(endpoint.getConfiguration().getSiteCommand(),"\n");
    while (it.hasNext()) {
      Object next=it.next();
      String command=endpoint.getCamelContext().getTypeConverter().convertTo(String.class,next);
      if (log.isTraceEnabled()) {
        log.trace("Site command to send: " + command);
      }
      if (command != null) {
        boolean result=sendSiteCommand(command);
        if (!result) {
          throw new GenericFileOperationFailedException("Site command: " + command + " returned false");
        }
      }
    }
  }
  return true;
}
