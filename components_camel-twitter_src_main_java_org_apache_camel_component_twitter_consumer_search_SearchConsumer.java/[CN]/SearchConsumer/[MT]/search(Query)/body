{
  Integer numberOfPages=1;
  if (ObjectHelper.isNotEmpty(endpoint.getProperties().getLang())) {
    query.setLang(endpoint.getProperties().getLang());
  }
  if (ObjectHelper.isNotEmpty(endpoint.getProperties().getCount())) {
    query.setCount(endpoint.getProperties().getCount());
  }
  if (ObjectHelper.isNotEmpty(endpoint.getProperties().getNumberOfPages())) {
    numberOfPages=endpoint.getProperties().getNumberOfPages();
  }
  if (ObjectHelper.isNotEmpty(endpoint.getProperties().getLatitude()) && ObjectHelper.isNotEmpty(endpoint.getProperties().getLongitude()) && ObjectHelper.isNotEmpty(endpoint.getProperties().getRadius())) {
    GeoLocation location=new GeoLocation(endpoint.getProperties().getLatitude(),endpoint.getProperties().getLongitude());
    query.setGeoCode(location,endpoint.getProperties().getRadius(),Unit.valueOf(endpoint.getProperties().getDistanceMetric()));
    LOG.debug("Searching with additional geolocation parameters.");
  }
  LOG.debug("Searching with {} pages.",numberOfPages);
  Twitter twitter=getTwitter();
  QueryResult qr=twitter.search(query);
  List<Status> tweets=qr.getTweets();
  for (int i=1; i < numberOfPages; i++) {
    if (!qr.hasNext()) {
      break;
    }
    qr=twitter.search(qr.nextQuery());
    tweets.addAll(qr.getTweets());
  }
  if (endpoint.getProperties().isFilterOld()) {
    for (int i=0; i < tweets.size(); i++) {
      setLastIdIfGreater(tweets.get(i).getId());
    }
  }
  return TwitterEventType.STATUS.createExchangeList(endpoint,tweets);
}
