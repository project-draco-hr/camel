{
  if (isSuccess()) {
    return null;
  }
  if (incapable != null) {
    return "Incapable of parsing uri " + incapable;
  }
 else   if (syntaxError != null) {
    return "Syntax error " + syntaxError;
  }
 else   if (unknownComponent != null) {
    return "Unknown component " + unknownComponent;
  }
  Map<String,String> options=new LinkedHashMap<String,String>();
  if (unknown != null) {
    for (    String name : unknown) {
      if (unknownSuggestions != null && unknownSuggestions.containsKey(name)) {
        String[] suggestions=unknownSuggestions.get(name);
        if (suggestions != null && suggestions.length > 0) {
          String str=Arrays.asList(suggestions).toString();
          options.put(name,"Unknown option. Did you mean: " + str);
        }
 else {
          options.put(name,"Unknown option");
        }
      }
 else {
        options.put(name,"Unknown option");
      }
    }
  }
  if (required != null) {
    for (    String name : required) {
      options.put(name,"Missing required option");
    }
  }
  if (invalidEnum != null) {
    for (    Map.Entry<String,String> entry : invalidEnum.entrySet()) {
      String[] choices=invalidEnumChoices.get(entry.getKey());
      String defaultValue=defaultValues != null ? defaultValues.get(entry.getKey()) : null;
      String str=Arrays.asList(choices).toString();
      String msg="Invalid enum value: " + entry.getValue() + ". Possible values: "+ str;
      if (defaultValue != null) {
        msg+=". Default value: " + defaultValue;
      }
      options.put(entry.getKey(),msg);
    }
  }
  if (invalidReference != null) {
    for (    Map.Entry<String,String> entry : invalidReference.entrySet()) {
      boolean empty=isEmpty(entry.getValue());
      if (empty) {
        options.put(entry.getKey(),"Empty reference value");
      }
 else       if (!entry.getValue().startsWith("#")) {
        options.put(entry.getKey(),"Invalid reference value: " + entry.getValue() + " must start with #");
      }
 else {
        options.put(entry.getKey(),"Invalid reference value: " + entry.getValue());
      }
    }
  }
  if (invalidBoolean != null) {
    for (    Map.Entry<String,String> entry : invalidBoolean.entrySet()) {
      boolean empty=isEmpty(entry.getValue());
      if (empty) {
        options.put(entry.getKey(),"Empty boolean value");
      }
 else {
        options.put(entry.getKey(),"Invalid boolean value: " + entry.getValue());
      }
    }
  }
  if (invalidInteger != null) {
    for (    Map.Entry<String,String> entry : invalidInteger.entrySet()) {
      boolean empty=isEmpty(entry.getValue());
      if (empty) {
        options.put(entry.getKey(),"Empty integer value");
      }
 else {
        options.put(entry.getKey(),"Invalid integer value: " + entry.getValue());
      }
    }
  }
  if (invalidNumber != null) {
    for (    Map.Entry<String,String> entry : invalidNumber.entrySet()) {
      boolean empty=isEmpty(entry.getValue());
      if (empty) {
        options.put(entry.getKey(),"Empty number value");
      }
 else {
        options.put(entry.getKey(),"Invalid number value: " + entry.getValue());
      }
    }
  }
  int maxLen=24;
  for (  String key : options.keySet()) {
    maxLen=Math.max(maxLen,key.length());
  }
  String format="%" + maxLen + "s    %s";
  StringBuilder sb=new StringBuilder();
  if (includeHeader) {
    sb.append("Endpoint validator error\n");
    sb.append("---------------------------------------------------------------------------------------------------------------------------------------\n");
    sb.append("\n");
  }
  sb.append("\t").append(uri).append("\n");
  for (  Map.Entry<String,String> option : options.entrySet()) {
    String out=String.format(format,option.getKey(),option.getValue());
    sb.append("\n\t").append(out);
  }
  return sb.toString();
}
