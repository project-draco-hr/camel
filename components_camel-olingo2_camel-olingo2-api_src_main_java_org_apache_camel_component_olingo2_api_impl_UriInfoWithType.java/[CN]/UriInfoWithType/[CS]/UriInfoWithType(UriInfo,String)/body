{
  this.uriInfo=uriInfo;
  UriType uriType;
  final List<NavigationSegment> segments=uriInfo.getNavigationSegments();
  final boolean isLinks=uriInfo.isLinks();
  if (segments.isEmpty() && uriInfo.getTargetType() == null) {
    uriType=UriType.URI0;
    if (resourcePath.endsWith("$metadata")) {
      uriType=UriType.URI8;
    }
 else     if (resourcePath.endsWith("$batch")) {
      uriType=UriType.URI9;
    }
  }
 else {
    final EdmEntitySet targetEntitySet=uriInfo.getTargetEntitySet();
    if (targetEntitySet != null) {
      final boolean isCount=uriInfo.isCount();
      final List<KeyPredicate> keyPredicates=uriInfo.getKeyPredicates();
      if (keyPredicates.isEmpty()) {
        if (!isCount) {
          uriType=UriType.URI1;
        }
 else {
          uriType=UriType.URI15;
        }
      }
 else {
        uriType=UriType.URI2;
        if (isCount) {
          uriType=UriType.URI16;
        }
 else         if (uriInfo.isValue()) {
          uriType=UriType.URI17;
        }
        final EdmTypeKind targetKind=uriInfo.getTargetType().getKind();
switch (targetKind) {
case SIMPLE:
          if (segments.isEmpty()) {
            uriType=UriType.URI5;
          }
 else {
            uriType=UriType.URI4;
          }
        break;
case COMPLEX:
      uriType=UriType.URI3;
    break;
case ENTITY:
  final List<EdmProperty> propertyPath=uriInfo.getPropertyPath();
if (!segments.isEmpty() || !propertyPath.isEmpty()) {
  boolean many=false;
  if (!propertyPath.isEmpty()) {
    final EdmProperty lastProperty=propertyPath.get(propertyPath.size() - 1);
    many=lastProperty.getMultiplicity() == EdmMultiplicity.MANY;
  }
 else {
    final NavigationSegment lastSegment=segments.get(segments.size() - 1);
    many=lastSegment.getKeyPredicates().isEmpty() && lastSegment.getNavigationProperty().getMultiplicity() == EdmMultiplicity.MANY;
  }
  if (isCount) {
    if (many) {
      uriType=isLinks ? UriType.URI50B : UriType.URI15;
    }
 else {
      uriType=UriType.URI50A;
    }
  }
 else {
    if (many) {
      uriType=isLinks ? UriType.URI7B : UriType.URI6B;
    }
 else {
      uriType=isLinks ? UriType.URI7A : UriType.URI6A;
    }
  }
}
break;
default :
throw new ODataApplicationException("Unexpected property type " + targetKind,Locale.ENGLISH);
}
}
}
 else {
final EdmFunctionImport functionImport=uriInfo.getFunctionImport();
final EdmType targetType=uriInfo.getTargetType();
final boolean isCollection=functionImport.getReturnType().getMultiplicity() == EdmMultiplicity.MANY;
switch (targetType.getKind()) {
case SIMPLE:
uriType=isCollection ? UriType.URI13 : UriType.URI14;
break;
case COMPLEX:
uriType=isCollection ? UriType.URI11 : UriType.URI12;
break;
case ENTITY:
uriType=UriType.URI10;
break;
default :
throw new ODataApplicationException("Invalid function return type " + targetType,Locale.ENGLISH);
}
}
}
this.uriType=uriType;
}
