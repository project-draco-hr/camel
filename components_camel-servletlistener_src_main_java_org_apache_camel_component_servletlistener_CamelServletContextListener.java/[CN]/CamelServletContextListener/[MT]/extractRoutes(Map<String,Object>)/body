{
  List<Object> answer=new ArrayList<Object>();
  List<String> names=new ArrayList<String>();
  for (  Map.Entry<String,Object> entry : map.entrySet()) {
    if (entry.getKey().toLowerCase(Locale.UK).startsWith("routebuilder")) {
      names.add(entry.getKey());
      String value=(String)entry.getValue();
      Iterator<Object> it=ObjectHelper.createIterator(value);
      while (it.hasNext()) {
        value=(String)it.next();
        if (ObjectHelper.isNotEmpty(value)) {
          value=value.trim();
          Object target=null;
          if (value.startsWith("#")) {
            value=value.substring(1);
            target=lookupRegistryByName(value);
          }
 else           if (ResourceHelper.hasScheme(value)) {
            InputStream is=null;
            try {
              is=ResourceHelper.resolveMandatoryResourceAsInputStream(camelContext,value);
              target=camelContext.loadRoutesDefinition(is);
            }
 catch (            Exception e) {
              throw new RuntimeException("Error loading routes from resource: " + value,e);
            }
 finally {
              IOHelper.close(is,entry.getKey(),LOG);
            }
          }
 else           if (value.startsWith("packagescan:")) {
            String path=value.substring(12);
            Set<Class<?>> classes=camelContext.getPackageScanClassResolver().findImplementations(RouteBuilder.class,path);
            if (!classes.isEmpty()) {
              Set<RouteBuilder> builders=new LinkedHashSet<RouteBuilder>();
              target=builders;
              for (              Class<?> clazz : classes) {
                try {
                  RouteBuilder route=(RouteBuilder)camelContext.getInjector().newInstance(clazz);
                  builders.add(route);
                }
 catch (                Exception e) {
                  throw new RuntimeException("Error creating RouteBuilder " + clazz,e);
                }
              }
            }
          }
 else {
            try {
              Class<RouteBuilder> clazz=camelContext.getClassResolver().resolveMandatoryClass(value,RouteBuilder.class);
              target=camelContext.getInjector().newInstance(clazz);
            }
 catch (            Exception e) {
              throw new RuntimeException("Error creating RouteBuilder " + value,e);
            }
          }
          if (target != null) {
            answer.add(target);
          }
        }
      }
    }
  }
  for (  String name : names) {
    map.remove(name);
  }
  return answer;
}
