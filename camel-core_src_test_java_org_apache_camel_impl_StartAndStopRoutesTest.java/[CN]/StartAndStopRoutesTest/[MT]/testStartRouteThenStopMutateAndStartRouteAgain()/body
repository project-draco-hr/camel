{
  List<RouteType> routes=context.getRouteDefinitions();
  assertCollectionSize("Route",routes,1);
  RouteType route=routes.get(0);
  endpointA=getMandatoryEndpoint("seda:test.a",SedaEndpoint.class);
  endpointB=getMandatoryEndpoint("seda:test.b",SedaEndpoint.class);
  endpointC=getMandatoryEndpoint("seda:test.C",SedaEndpoint.class);
  assertProduceConsumers("endpointA",endpointA,0,1);
  assertProduceConsumers("endpointB",endpointB,1,0);
  assertProduceConsumers("endpointC",endpointC,0,0);
  context.stopRoute(route);
  assertProduceConsumers("endpointA",endpointA,0,0);
  assertProduceConsumers("endpointB",endpointB,0,0);
  assertProduceConsumers("endpointC",endpointC,0,0);
  FromType fromType=assertOneElement(route.getInputs());
  fromType.setUri("seda:test.C");
  context.startRoute(route);
  assertProduceConsumers("endpointA",endpointA,0,0);
  assertProduceConsumers("endpointB",endpointB,1,0);
  assertProduceConsumers("endpointC",endpointC,0,1);
  MockEndpoint results=getMockEndpoint("mock:results");
  results.expectedBodiesReceived(expectedBody);
  template.sendBody(endpointC,expectedBody);
  assertMockEndpointsSatisfied();
}
