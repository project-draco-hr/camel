{
  context.start();
  PollingConsumer consumer=context.getEndpoint(uri).createPollingConsumer();
  consumer.start();
  assertNotNull(consumer);
  EventDrivenPollingConsumer edpc=assertIsInstanceOf(EventDrivenPollingConsumer.class,consumer);
  assertEquals(0,edpc.getQueueSize());
  assertEquals(10,edpc.getQueueCapacity());
  assertFalse(edpc.isBlockWhenFull());
  for (int i=0; i < 10; i++) {
    template.sendBody(uri,"Message " + i);
  }
  assertEquals(10,edpc.getQueueSize());
  try {
    template.sendBody(uri,"Message 10");
    fail("Should have thrown exception");
  }
 catch (  CamelExecutionException e) {
    assertIsInstanceOf(IllegalStateException.class,e.getCause());
  }
  Exchange out=consumer.receive(5000);
  assertNotNull(out);
  assertEquals("Message 0",out.getIn().getBody());
  assertEquals(9,edpc.getQueueSize());
  assertEquals(10,edpc.getQueueCapacity());
  template.sendBody(uri,"Message 10");
  assertEquals(10,edpc.getQueueSize());
  assertEquals(10,edpc.getQueueCapacity());
  ServiceHelper.stopService(consumer);
  assertEquals(10,edpc.getQueueSize());
  assertEquals(10,edpc.getQueueCapacity());
  ServiceHelper.stopAndShutdownService(consumer);
  assertEquals(0,edpc.getQueueSize());
  assertEquals(10,edpc.getQueueCapacity());
}
