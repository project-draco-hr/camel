{
  assertEquals(2 + 3,context.getRoutes().size());
  RestDefinition rest=context.getRestDefinitions().get(0);
  assertNotNull(rest);
  assertNotNull(context.getRouteDefinition("hello"));
  assertNotNull(context.getRouteDefinition("bye"));
  PathDefinition path=rest.getPaths().get(0);
  assertNotNull(0);
  assertEquals("/say",path.getUri());
  assertEquals("/hello",path.getVerbs().get(0).getUri());
  ToDefinition to=assertIsInstanceOf(ToDefinition.class,path.getVerbs().get(0).getOutputs().get(0));
  assertEquals("direct:hello",to.getUri());
  assertEquals("/bye",path.getVerbs().get(1).getUri());
  assertEquals("application/json",path.getVerbs().get(1).getAccept());
  to=assertIsInstanceOf(ToDefinition.class,path.getVerbs().get(1).getOutputs().get(0));
  assertEquals("direct:bye",to.getUri());
  assertEquals(null,path.getVerbs().get(2).getUri());
  getMockEndpoint("mock:update").expectedMessageCount(1);
  template.sendBody("seda:post-say","I was here");
  assertMockEndpointsSatisfied();
  String out=template.requestBody("seda:get-say-hello","Me",String.class);
  assertEquals("Hello World",out);
  String out2=template.requestBody("seda:get-say-bye","Me",String.class);
  assertEquals("Bye World",out2);
}
