{
  getMockEndpoint("mock:result").expectedMessageCount(1);
  template.sendBody("direct:start","Hello World");
  assertMockEndpointsSatisfied();
  MBeanServer mbeanServer=getMBeanServer();
  Set<ObjectName> set=mbeanServer.queryNames(new ObjectName("*:type=services,*"),null);
  List<ObjectName> list=new ArrayList<ObjectName>(set);
  ObjectName on=null;
  for (  ObjectName name : list) {
    if (name.getCanonicalName().contains("ProducerCache")) {
      on=name;
      break;
    }
  }
  assertNotNull("Should have found ProducerCache",on);
  Integer max=(Integer)mbeanServer.getAttribute(on,"MaximumCacheSize");
  assertEquals(1000,max.intValue());
  Integer current=(Integer)mbeanServer.getAttribute(on,"Size");
  assertEquals(1,current.intValue());
  String source=(String)mbeanServer.getAttribute(on,"Source");
  assertEquals("sendTo(Endpoint[mock://result])",source);
  mbeanServer.invoke(on,"purge",null,null);
  current=(Integer)mbeanServer.getAttribute(on,"Size");
  assertEquals(0,current.intValue());
}
