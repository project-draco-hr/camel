{
  producer=delegate.createProducer();
  return new Producer(){
    public Endpoint getEndpoint(){
      return producer.getEndpoint();
    }
    public Exchange createExchange(){
      return producer.createExchange();
    }
    public Exchange createExchange(    ExchangePattern pattern){
      return producer.createExchange(pattern);
    }
    public Exchange createExchange(    Exchange exchange){
      return producer.createExchange(exchange);
    }
    public void process(    Exchange exchange) throws Exception {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Sending to endpoint: " + getEndpointUri() + " is intercepted and detoured to: "+ detour+ " for exchange: "+ exchange);
      }
      exchange.getIn().setHeader(Exchange.INTERCEPTED_ENDPOINT,delegate.getEndpointUri());
      try {
        detour.process(exchange);
      }
 catch (      Exception e) {
        exchange.setException(e);
      }
      boolean exceptionHandled=hasExceptionBeenHandledByErrorHandler(exchange);
      if (exchange.isFailed() || exchange.isRollbackOnly() || exceptionHandled) {
        if (LOG.isDebugEnabled()) {
          StringBuilder sb=new StringBuilder();
          sb.append("Message exchange has failed so skip sending to original intended destination: ").append(getEndpointUri());
          sb.append(" for Exchange: ").append(exchange);
          if (exchange.isRollbackOnly()) {
            sb.append(" Marked as rollback only.");
          }
          if (exchange.getException() != null) {
            sb.append(" Exception: ").append(exchange.getException());
          }
          if (exchange.hasOut() && exchange.getOut().isFault()) {
            sb.append(" Fault: ").append(exchange.getOut());
          }
          if (exceptionHandled) {
            sb.append(" Handled by the error handler.");
          }
          LOG.debug(sb.toString());
        }
        return;
      }
      if (!skip) {
        if (exchange.hasOut()) {
          exchange.setIn(exchange.getOut());
          exchange.setOut(null);
        }
        producer.process(exchange);
      }
 else {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Stop() means skip sending exchange to original intended destination: " + getEndpointUri() + " for exchange: "+ exchange);
        }
      }
    }
    public boolean isSingleton(){
      return producer.isSingleton();
    }
    public void start() throws Exception {
      ServiceHelper.startService(detour);
    }
    public void stop() throws Exception {
      ServiceHelper.stopService(detour);
    }
  }
;
}
