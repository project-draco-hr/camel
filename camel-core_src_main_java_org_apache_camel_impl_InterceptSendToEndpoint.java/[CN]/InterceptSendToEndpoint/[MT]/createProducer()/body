{
  producer=delegate.createProducer();
  return new DefaultAsyncProducer(delegate){
    public Endpoint getEndpoint(){
      return producer.getEndpoint();
    }
    public Exchange createExchange(){
      return producer.createExchange();
    }
    public Exchange createExchange(    ExchangePattern pattern){
      return producer.createExchange(pattern);
    }
    @Deprecated public Exchange createExchange(    Exchange exchange){
      return producer.createExchange(exchange);
    }
    @Override public boolean process(    Exchange exchange,    AsyncCallback callback){
      if (LOG.isDebugEnabled()) {
        LOG.debug("Sending to endpoint: {} is intercepted and detoured to: {} for exchange: {}",new Object[]{getEndpoint(),detour,exchange});
      }
      exchange.getIn().setHeader(Exchange.INTERCEPTED_ENDPOINT,delegate.getEndpointUri());
      try {
        detour.process(exchange);
      }
 catch (      Exception e) {
        exchange.setException(e);
        callback.done(true);
        return true;
      }
      if (!continueProcessing(exchange,"skip sending to original intended destination: " + getEndpoint(),LOG)) {
        callback.done(true);
        return true;
      }
      boolean shouldSkip=skip;
      Boolean whenMatches=(Boolean)exchange.removeProperty(Exchange.INTERCEPT_SEND_TO_ENDPOINT_WHEN_MATCHED);
      if (whenMatches != null) {
        shouldSkip=skip && whenMatches;
      }
      if (!shouldSkip) {
        if (exchange.hasOut()) {
          exchange.setIn(exchange.getOut());
          exchange.setOut(null);
        }
        if (producer instanceof AsyncProcessor) {
          AsyncProcessor async=(AsyncProcessor)producer;
          return async.process(exchange,callback);
        }
 else {
          try {
            producer.process(exchange);
          }
 catch (          Exception e) {
            exchange.setException(e);
          }
          callback.done(true);
          return true;
        }
      }
 else {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Stop() means skip sending exchange to original intended destination: {} for exchange: {}",getEndpoint(),exchange);
        }
        callback.done(true);
        return true;
      }
    }
    public boolean isSingleton(){
      return producer.isSingleton();
    }
    public void start() throws Exception {
      ServiceHelper.startService(detour);
      ServiceHelper.startService(producer);
    }
    public void stop() throws Exception {
      ServiceHelper.stopService(producer);
    }
  }
;
}
