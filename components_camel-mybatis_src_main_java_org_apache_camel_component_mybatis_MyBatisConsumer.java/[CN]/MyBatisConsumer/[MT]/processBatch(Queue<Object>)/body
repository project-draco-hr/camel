{
  final MyBatisEndpoint endpoint=getEndpoint();
  int total=exchanges.size();
  if (maxMessagesPerPoll > 0 && total > maxMessagesPerPoll) {
    LOG.debug("Limiting to maximum messages to poll " + maxMessagesPerPoll + " as there was "+ total+ " messages in this poll.");
    total=maxMessagesPerPoll;
  }
  for (int index=0; index < total && isBatchAllowed(); index++) {
    DataHolder holder=ObjectHelper.cast(DataHolder.class,exchanges.poll());
    Exchange exchange=holder.exchange;
    Object data=holder.data;
    exchange.setProperty(Exchange.BATCH_INDEX,index);
    exchange.setProperty(Exchange.BATCH_SIZE,total);
    exchange.setProperty(Exchange.BATCH_COMPLETE,index == total - 1);
    pendingExchanges=total - index - 1;
    LOG.debug("Processing exchange: {} with properties: {}",exchange,exchange.getProperties());
    getProcessor().process(exchange);
    try {
      if (onConsume != null) {
        endpoint.getProcessingStrategy().commit(endpoint,exchange,data,onConsume);
      }
    }
 catch (    Exception e) {
      handleException(e);
    }
    if (getEndpoint().isTransacted() && exchange.isFailed()) {
      Exception cause=exchange.getException();
      if (cause != null) {
        throw cause;
      }
 else {
        throw new RollbackExchangeException("Rollback transaction due error processing exchange",exchange);
      }
    }
  }
  return total;
}
