{
  return new RemoteFileConsumer<Object>(remoteFileEndpoint,null,null){
    @Override protected boolean doPollDirectory(    String absolutePath,    String dirName,    List<GenericFile<Object>> genericFiles,    int depth){
      if ("IllegalStateException".equals(doPollResult)) {
        throw new IllegalStateException("Problem");
      }
 else       if ("GenericFileOperationFailedException".equals(doPollResult)) {
        throw new GenericFileOperationFailedException("Perm error");
      }
 else       if ("true".equals(doPollResult)) {
        return true;
      }
 else {
        return false;
      }
    }
    @Override protected boolean pollDirectory(    String fileName,    List<GenericFile<Object>> genericFiles,    int depth){
      return false;
    }
    @Override protected boolean isMatched(    GenericFile<Object> file,    String doneFileName,    List<Object> files){
      return false;
    }
    @Override protected boolean ignoreCannotRetrieveFile(    String name,    Exchange exchange,    Exception cause){
      return ignoreCannotRetrieveFile;
    }
  }
;
}
