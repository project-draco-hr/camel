{
  Repository repository=getTestRepository();
  File fileToAdd=new File(GIT_LOCAL_REPO,FILENAME_TO_ADD);
  fileToAdd.createNewFile();
  template.send("direct:add",new Processor(){
    @Override public void process(    Exchange exchange) throws Exception {
      exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME,FILENAME_TO_ADD);
    }
  }
);
  File gitDir=new File(GIT_LOCAL_REPO,".git");
  assertEquals(gitDir.exists(),true);
  Status status=new Git(repository).status().call();
  assertTrue(status.getAdded().contains(FILENAME_TO_ADD));
  template.send("direct:remove",new Processor(){
    @Override public void process(    Exchange exchange) throws Exception {
      exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME,FILENAME_TO_ADD);
    }
  }
);
  gitDir=new File(GIT_LOCAL_REPO,".git");
  assertEquals(gitDir.exists(),true);
  template.send("direct:commit",new Processor(){
    @Override public void process(    Exchange exchange) throws Exception {
      exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE,COMMIT_MESSAGE);
    }
  }
);
  Iterable<RevCommit> logs=new Git(repository).log().call();
  int count=0;
  for (  RevCommit rev : logs) {
    assertEquals(rev.getShortMessage(),COMMIT_MESSAGE);
    count++;
  }
  assertEquals(count,1);
  status=new Git(repository).status().call();
  assertFalse(status.getAdded().contains(FILENAME_TO_ADD));
  repository.close();
}
