{
  String path=getResourceUri();
  ObjectHelper.notNull(path,"resourceUri");
  String newResourceUri=exchange.getIn().getHeader(VelocityConstants.VELOCITY_RESOURCE_URI,String.class);
  if (newResourceUri != null) {
    exchange.getIn().removeHeader(VelocityConstants.VELOCITY_RESOURCE_URI);
    log.debug("{} set to {} creating new endpoint to handle exchange",VelocityConstants.VELOCITY_RESOURCE_URI,newResourceUri);
    VelocityEndpoint newEndpoint=findOrCreateEndpoint(getEndpointUri(),newResourceUri);
    newEndpoint.onExchange(exchange);
    return;
  }
  Reader reader;
  String content=exchange.getIn().getHeader(VelocityConstants.VELOCITY_TEMPLATE,String.class);
  if (content != null) {
    reader=new StringReader(content);
    if (log.isDebugEnabled()) {
      log.debug("Velocity content read from header {} for endpoint {}",VelocityConstants.VELOCITY_TEMPLATE,getEndpointUri());
    }
    exchange.getIn().removeHeader(VelocityConstants.VELOCITY_TEMPLATE);
  }
 else {
    if (log.isDebugEnabled()) {
      log.debug("Velocity content read from resource {} with resourceUri: {} for endpoint {}",new Object[]{getResourceUri(),path,getEndpointUri()});
    }
    reader=getEncoding() != null ? new InputStreamReader(getResourceAsInputStream(),getEncoding()) : new InputStreamReader(getResourceAsInputStream());
  }
  StringWriter buffer=new StringWriter();
  String logTag=getClass().getName();
  Context velocityContext=exchange.getIn().getHeader(VelocityConstants.VELOCITY_CONTEXT,Context.class);
  if (velocityContext == null) {
    Map<String,Object> variableMap=ExchangeHelper.createVariableMap(exchange);
    velocityContext=new VelocityContext(variableMap);
  }
  VelocityEngine engine=getVelocityEngine();
  log.debug("Velocity is evaluating using velocity context: {}",velocityContext);
  engine.evaluate(velocityContext,buffer,logTag,reader);
  Message out=exchange.getOut();
  out.setBody(buffer.toString());
  out.setHeaders(exchange.getIn().getHeaders());
  out.setAttachments(exchange.getIn().getAttachments());
}
