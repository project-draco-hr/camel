{
  String path=getResourceUri();
  ObjectHelper.notNull(path,"resourceUri");
  String newResourceUri=exchange.getIn().getHeader(VelocityConstants.VELOCITY_RESOURCE_URI,String.class);
  if (newResourceUri != null) {
    exchange.getIn().removeHeader(VelocityConstants.VELOCITY_RESOURCE_URI);
    if (log.isDebugEnabled()) {
      log.debug(VelocityConstants.VELOCITY_RESOURCE_URI + " set to " + newResourceUri+ " creating new endpoint to handle exchange");
    }
    VelocityEndpoint newEndpoint=findOrCreateEndpoint(getEndpointUri(),newResourceUri);
    newEndpoint.onExchange(exchange);
    return;
  }
  Resource resource=getResource();
  ObjectHelper.notNull(resource,"resource");
  if (log.isDebugEnabled()) {
    log.debug("Using resource: " + resource + " with resourceUri: "+ path+ " for endpoint "+ getEndpointUri());
  }
  Reader reader=encoding != null ? new InputStreamReader(getResourceAsInputStream(),encoding) : new InputStreamReader(getResourceAsInputStream());
  StringWriter buffer=new StringWriter();
  String logTag=getClass().getName();
  Map variableMap=ExchangeHelper.createVariableMap(exchange);
  Context velocityContext=new VelocityContext(variableMap);
  VelocityEngine engine=getVelocityEngine();
  if (log.isDebugEnabled()) {
    log.debug("Velocity is evaluating using velocity context: " + variableMap);
  }
  engine.evaluate(velocityContext,buffer,logTag,reader);
  Message out=exchange.getOut();
  out.setBody(buffer.toString());
  out.setHeader(VelocityConstants.VELOCITY_RESOURCE,resource);
  out.setHeader(VelocityConstants.VELOCITY_RESOURCE_URI,path);
  Map<String,Object> headers=(Map<String,Object>)velocityContext.get("headers");
  for (  String key : headers.keySet()) {
    out.setHeader(key,headers.get(key));
  }
}
