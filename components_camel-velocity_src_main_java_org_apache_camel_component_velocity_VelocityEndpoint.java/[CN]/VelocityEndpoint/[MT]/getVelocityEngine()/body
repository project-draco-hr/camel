{
  if (velocityEngine == null) {
    velocityEngine=new VelocityEngine();
    velocityEngine.addProperty("CamelClassResolver",getCamelContext().getClassResolver());
    Properties properties=new Properties();
    properties.setProperty(RuntimeConstants.FILE_RESOURCE_LOADER_CACHE,isLoaderCache() ? "true" : "false");
    properties.setProperty(RuntimeConstants.RESOURCE_LOADER,"file, class");
    properties.setProperty("class.resource.loader.description","Camel Velocity Classpath Resource Loader");
    properties.setProperty("class.resource.loader.class",CamelVelocityClasspathResourceLoader.class.getName());
    properties.setProperty(RuntimeConstants.RUNTIME_LOG_LOGSYSTEM_CLASS,CommonsLogLogChute.class.getName());
    properties.setProperty(CommonsLogLogChute.LOGCHUTE_COMMONS_LOG_NAME,VelocityEndpoint.class.getName());
    if (ObjectHelper.isNotEmpty(getPropertiesFile())) {
      InputStream reader=ResourceHelper.resolveMandatoryResourceAsInputStream(getCamelContext().getClassResolver(),getPropertiesFile());
      try {
        properties.load(reader);
        log.info("Loaded the velocity configuration file " + getPropertiesFile());
      }
  finally {
        IOHelper.close(reader,getPropertiesFile(),log);
      }
    }
    log.debug("Initializing VelocityEngine with properties {}",properties);
    ClassLoader old=Thread.currentThread().getContextClassLoader();
    try {
      ClassLoader delegate=new CamelVelocityDelegateClassLoader(old);
      Thread.currentThread().setContextClassLoader(delegate);
      velocityEngine.init(properties);
    }
  finally {
      Thread.currentThread().setContextClassLoader(old);
    }
  }
  return velocityEngine;
}
