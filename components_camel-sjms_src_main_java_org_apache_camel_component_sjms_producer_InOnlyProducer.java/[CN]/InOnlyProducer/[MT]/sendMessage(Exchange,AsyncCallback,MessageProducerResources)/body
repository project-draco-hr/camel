{
  try {
    Collection<Message> messages=new ArrayList<Message>(1);
    if (exchange.getIn().getBody() != null) {
      if (exchange.getIn().getBody() instanceof List) {
        Iterable<?> payload=(Iterable<?>)exchange.getIn().getBody();
        for (        final Object object : payload) {
          Message message;
          if (BatchMessage.class.isInstance(object)) {
            BatchMessage<?> batchMessage=(BatchMessage<?>)object;
            message=JmsMessageHelper.createMessage(exchange,producer.getSession(),batchMessage.getPayload(),batchMessage.getHeaders(),getEndpoint());
          }
 else {
            message=JmsMessageHelper.createMessage(exchange,producer.getSession(),object,exchange.getIn().getHeaders(),getEndpoint());
          }
          messages.add(message);
        }
      }
 else {
        Object payload=exchange.getIn().getBody();
        Message message=JmsMessageHelper.createMessage(exchange,producer.getSession(),payload,exchange.getIn().getHeaders(),getEndpoint());
        messages.add(message);
      }
    }
 else {
      Message message=JmsMessageHelper.createMessage(exchange,producer.getSession(),null,exchange.getIn().getHeaders(),getEndpoint());
      messages.add(message);
    }
    if (isEndpointTransacted()) {
      exchange.getUnitOfWork().addSynchronization(new SessionTransactionSynchronization(producer.getSession(),producer.getCommitStrategy()));
    }
    for (    final Message message : messages) {
      producer.getMessageProducer().send(message);
    }
  }
 catch (  Exception e) {
    exchange.setException(new Exception("Unable to complete sending the message: ",e));
  }
 finally {
    if (producer != null) {
      getProducers().returnObject(producer);
    }
    callback.done(isSynchronous());
  }
}
