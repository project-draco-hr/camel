{
  Map<String,Object> responseContext=new HashMap<String,Object>();
  org.apache.camel.Message response;
  if (camelExchange.getPattern().isOutCapable()) {
    if (camelExchange.hasOut()) {
      response=camelExchange.getOut();
      LOG.trace("Get the response from the out message");
    }
 else {
      response=camelExchange.getIn();
      LOG.trace("Get the response from the in message as a fallback");
    }
  }
 else {
    response=camelExchange.getIn();
    LOG.trace("Get the response from the in message");
  }
  Map<String,Object> camelHeaders=response.getHeaders();
  extractInvocationContextFromCamel(camelExchange,camelHeaders,responseContext,Client.RESPONSE_CONTEXT);
  propagateHeadersFromCamelToCxf(camelExchange,camelHeaders,cxfExchange,responseContext);
  Endpoint ep=cxfExchange.get(Endpoint.class);
  Message outMessage=ep.getBinding().createMessage();
  cxfExchange.setOutMessage(outMessage);
  DataFormat dataFormat=camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,DataFormat.class);
  responseContext.remove(Message.REQUESTOR_ROLE);
  outMessage.putAll(responseContext);
  outMessage.put(Client.RESPONSE_CONTEXT,responseContext);
  LOG.trace("Set out response context = {}",responseContext);
  Object outBody=DefaultCxfBinding.getBodyFromCamel(response,dataFormat);
  if (outBody != null) {
    if (dataFormat == DataFormat.PAYLOAD) {
      CxfPayload<?> payload=(CxfPayload<?>)outBody;
      outMessage.setContent(List.class,getResponsePayloadList(cxfExchange,payload.getBodySources()));
      outMessage.put(Header.HEADER_LIST,payload.getHeaders());
    }
 else {
      if (responseContext.get(Header.HEADER_LIST) != null) {
        outMessage.put(Header.HEADER_LIST,responseContext.get(Header.HEADER_LIST));
      }
      MessageContentsList resList=null;
      if (outBody instanceof List) {
        resList=new MessageContentsList((List<?>)outBody);
      }
 else       if (outBody.getClass().isArray()) {
        resList=new MessageContentsList((Object[])outBody);
      }
 else {
        resList=new MessageContentsList(outBody);
      }
      if (resList != null) {
        outMessage.setContent(List.class,resList);
        LOG.trace("Set Out CXF message content = {}",resList);
      }
    }
  }
 else   if (!cxfExchange.isOneWay() && cxfExchange.getInMessage() != null && MessageUtils.isTrue(cxfExchange.getInMessage().getContextualProperty("jaxws.provider.interpretNullAsOneway"))) {
    changeToOneway(cxfExchange);
    return;
  }
  if (!DataFormat.POJO.equals(dataFormat)) {
    Set<Attachment> attachments=null;
    boolean isXop=Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED,String.class));
    for (    Map.Entry<String,DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {
      if (attachments == null) {
        attachments=new HashSet<Attachment>();
      }
      AttachmentImpl attachment=new AttachmentImpl(entry.getKey(),entry.getValue());
      attachment.setXOP(isXop);
      attachments.add(attachment);
    }
    if (attachments != null) {
      outMessage.setAttachments(attachments);
    }
  }
  BindingOperationInfo boi=cxfExchange.get(BindingOperationInfo.class);
  if (boi != null) {
    cxfExchange.put(BindingMessageInfo.class,boi.getOutput());
  }
}
