{
  Map<String,String> bodyNC=CastUtils.cast((Map<?,?>)message.get("soap.body.ns.context"));
  if (bodyNC != null) {
    nsMap.putAll(bodyNC);
  }
 else {
    Document soapEnv=(Document)message.getContent(Node.class);
    if (soapEnv != null) {
      NamedNodeMap attrs=soapEnv.getFirstChild().getAttributes();
      for (int i=0; i < attrs.getLength(); i++) {
        Node node=attrs.item(i);
        if (!node.getNodeValue().equals(Soap11.SOAP_NAMESPACE) && !node.getNodeValue().equals(Soap12.SOAP_NAMESPACE)) {
          nsMap.put(node.getLocalName(),node.getNodeValue());
        }
      }
    }
  }
  MessageContentsList inObjects=MessageContentsList.getContentsList(message);
  if (inObjects == null) {
    return new ArrayList<Source>(0);
  }
  org.apache.cxf.message.Exchange exchange=message.getExchange();
  BindingOperationInfo boi=exchange.getBindingOperationInfo();
  OperationInfo op=boi.getOperationInfo();
  if (boi.isUnwrapped()) {
    op=boi.getWrappedOperation().getOperationInfo();
  }
  List<MessagePartInfo> partInfos=null;
  boolean client=Boolean.TRUE.equals(message.get(Message.REQUESTOR_ROLE));
  if (client) {
    partInfos=op.getOutput().getMessageParts();
  }
 else {
    partInfos=op.getInput().getMessageParts();
  }
  List<Source> answer=new ArrayList<Source>();
  for (  MessagePartInfo partInfo : partInfos) {
    if (!inObjects.hasValue(partInfo)) {
      continue;
    }
    Object part=inObjects.get(partInfo);
    if (part instanceof Holder) {
      part=((Holder<?>)part).value;
    }
    if (part instanceof Source) {
      Element element=null;
      if (part instanceof DOMSource) {
        element=getFirstElement(((DOMSource)part).getNode());
      }
      if (element != null) {
        addNamespace(element,nsMap);
        answer.add(new DOMSource(element));
      }
 else {
        answer.add((Source)part);
      }
      if (LOG.isTraceEnabled()) {
        LOG.trace("Extract body element {}",element == null ? "null" : getXMLString(element));
      }
    }
 else     if (part instanceof Element) {
      addNamespace((Element)part,nsMap);
      answer.add(new DOMSource((Element)part));
    }
 else {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Unhandled part type '{}'",part.getClass());
      }
    }
  }
  return answer;
}
