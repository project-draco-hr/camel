{
  Method method=null;
  QName operationName=null;
  ExchangePattern mep=ExchangePattern.InOut;
  BindingOperationInfo boi=camelExchange.getProperty(BindingOperationInfo.class.getName(),BindingOperationInfo.class);
  if (boi != null) {
    Service service=cxfExchange.get(Service.class);
    if (service != null) {
      @SuppressWarnings("deprecation") org.apache.cxf.frontend.MethodDispatcher md=(org.apache.cxf.frontend.MethodDispatcher)service.get(org.apache.cxf.frontend.MethodDispatcher.class.getName());
      if (md != null) {
        method=md.getMethod(boi);
      }
    }
    if (boi.getOperationInfo().isOneWay()) {
      mep=ExchangePattern.InOnly;
    }
    operationName=boi.getName();
  }
  if (operationName != null) {
    camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE,boi.getName().getNamespaceURI());
    camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME,boi.getName().getLocalPart());
    if (LOG.isTraceEnabled()) {
      LOG.trace("Set IN header: {}={}",CxfConstants.OPERATION_NAMESPACE,boi.getName().getNamespaceURI());
      LOG.trace("Set IN header: {}={}",CxfConstants.OPERATION_NAME,boi.getName().getLocalPart());
    }
  }
 else   if (method != null) {
    camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME,method.getName());
    if (LOG.isTraceEnabled()) {
      LOG.trace("Set IN header: {}={}",CxfConstants.OPERATION_NAME,method.getName());
    }
  }
  camelExchange.setPattern(mep);
  LOG.trace("Set exchange MEP: {}",mep);
  Message cxfMessage=cxfExchange.getInMessage();
  propagateHeadersFromCxfToCamel(cxfMessage,camelExchange.getIn(),camelExchange);
  SecurityContext securityContext=cxfMessage.get(SecurityContext.class);
  if (securityContext != null && securityContext.getUserPrincipal() != null) {
    Subject subject=new Subject();
    subject.getPrincipals().add(securityContext.getUserPrincipal());
    camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION,subject);
  }
  Object value=cxfMessage.get(Client.REQUEST_CONTEXT);
  if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(Client.REQUEST_CONTEXT,value,camelExchange)) {
    camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT,value);
    LOG.trace("Populate context from CXF message {} value={}",Client.REQUEST_CONTEXT,value);
  }
  Object body=DefaultCxfBinding.getContentFromCxf(cxfMessage,camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,DataFormat.class));
  if (body != null) {
    camelExchange.getIn().setBody(body);
  }
  if (cxfMessage.getAttachments() != null && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,DataFormat.class).equals(DataFormat.POJO)) {
    for (    Attachment attachment : cxfMessage.getAttachments()) {
      camelExchange.getIn().addAttachment(attachment.getId(),attachment.getDataHandler());
    }
  }
}
