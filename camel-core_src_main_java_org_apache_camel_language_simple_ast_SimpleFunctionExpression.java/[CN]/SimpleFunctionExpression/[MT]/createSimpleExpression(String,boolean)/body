{
  Expression answer=createSimpleExpressionDirectly(function);
  if (answer != null) {
    return answer;
  }
  answer=createSimpleExpressionBodyOrHeader(function,strict);
  if (answer != null) {
    return answer;
  }
  String remainder=ifStartsWithReturnRemainder("camelContext",function);
  if (remainder != null) {
    boolean invalid=OgnlHelper.isInvalidValidOgnlExpression(remainder);
    if (invalid) {
      throw new SimpleParserException("Valid syntax: ${camelContext.OGNL} was: " + function,token.getIndex());
    }
    return ExpressionBuilder.camelContextOgnlExpression(remainder);
  }
  remainder=ifStartsWithReturnRemainder("exception",function);
  if (remainder != null) {
    boolean invalid=OgnlHelper.isInvalidValidOgnlExpression(remainder);
    if (invalid) {
      throw new SimpleParserException("Valid syntax: ${exception.OGNL} was: " + function,token.getIndex());
    }
    return ExpressionBuilder.exchangeExceptionOgnlExpression(remainder);
  }
  remainder=ifStartsWithReturnRemainder("property",function);
  if (remainder == null) {
    remainder=ifStartsWithReturnRemainder("exchangeProperty",function);
  }
  if (remainder != null) {
    if (remainder.startsWith(".") || remainder.startsWith("?")) {
      remainder=remainder.substring(1);
    }
    if (remainder.startsWith("[") && remainder.endsWith("]")) {
      remainder=remainder.substring(1,remainder.length() - 1);
    }
    boolean invalid=OgnlHelper.isInvalidValidOgnlExpression(remainder);
    if (invalid) {
      throw new SimpleParserException("Valid syntax: ${exchangeProperty.OGNL} was: " + function,token.getIndex());
    }
    if (OgnlHelper.isValidOgnlExpression(remainder)) {
      return ExpressionBuilder.propertyOgnlExpression(remainder);
    }
 else {
      return ExpressionBuilder.exchangePropertyExpression(remainder);
    }
  }
  remainder=ifStartsWithReturnRemainder("sys.",function);
  if (remainder != null) {
    return ExpressionBuilder.systemPropertyExpression(remainder);
  }
  remainder=ifStartsWithReturnRemainder("sysenv.",function);
  if (remainder != null) {
    return ExpressionBuilder.systemEnvironmentExpression(remainder);
  }
  remainder=ifStartsWithReturnRemainder("exchange",function);
  if (remainder != null) {
    boolean invalid=OgnlHelper.isInvalidValidOgnlExpression(remainder);
    if (invalid) {
      throw new SimpleParserException("Valid syntax: ${exchange.OGNL} was: " + function,token.getIndex());
    }
    return ExpressionBuilder.exchangeOgnlExpression(remainder);
  }
  remainder=ifStartsWithReturnRemainder("file:",function);
  if (remainder != null) {
    Expression fileExpression=createSimpleFileExpression(remainder,strict);
    if (fileExpression != null) {
      return fileExpression;
    }
  }
  remainder=ifStartsWithReturnRemainder("date:",function);
  if (remainder != null) {
    String[] parts=remainder.split(":",2);
    if (parts.length == 1) {
      return ExpressionBuilder.dateExpression(parts[0]);
    }
 else     if (parts.length == 2) {
      return ExpressionBuilder.dateExpression(parts[0],parts[1]);
    }
  }
  remainder=ifStartsWithReturnRemainder("date-with-timezone:",function);
  if (remainder != null) {
    String[] parts=remainder.split(":",3);
    if (parts.length < 3) {
      throw new SimpleParserException("Valid syntax: ${date-with-timezone:command:timezone:pattern} was: " + function,token.getIndex());
    }
    return ExpressionBuilder.dateExpression(parts[0],parts[1],parts[2]);
  }
  remainder=ifStartsWithReturnRemainder("bean:",function);
  if (remainder != null) {
    return ExpressionBuilder.beanExpression(remainder);
  }
  remainder=ifStartsWithReturnRemainder("properties:",function);
  if (remainder != null) {
    String[] parts=remainder.split(":");
    if (parts.length > 2) {
      throw new SimpleParserException("Valid syntax: ${properties:key[:default]} was: " + function,token.getIndex());
    }
    return ExpressionBuilder.propertiesComponentExpression(remainder,null,null);
  }
  remainder=ifStartsWithReturnRemainder("properties-location:",function);
  if (remainder != null) {
    String[] parts=remainder.split(":");
    if (parts.length > 3) {
      throw new SimpleParserException("Valid syntax: ${properties-location:location:key[:default]} was: " + function,token.getIndex());
    }
    String locations=null;
    String key=remainder;
    if (parts.length >= 2) {
      locations=ObjectHelper.before(remainder,":");
      key=ObjectHelper.after(remainder,":");
    }
    return ExpressionBuilder.propertiesComponentExpression(key,locations,null);
  }
  remainder=ifStartsWithReturnRemainder("ref:",function);
  if (remainder != null) {
    return ExpressionBuilder.refExpression(remainder);
  }
  remainder=ifStartsWithReturnRemainder("type:",function);
  if (remainder != null) {
    Expression exp=ExpressionBuilder.typeExpression(remainder);
    return ExpressionBuilder.cacheExpression(exp);
  }
  Expression misc=createSimpleExpressionMisc(function);
  if (misc != null) {
    return misc;
  }
  if (strict) {
    throw new SimpleParserException("Unknown function: " + function,token.getIndex());
  }
 else {
    return null;
  }
}
