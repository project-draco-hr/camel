{
  Expression answer=createSimpleExpressionDirectly(function);
  if (answer != null) {
    return answer;
  }
  String remainder=ifStartsWithReturnRemainder("bodyAs",function);
  if (remainder != null) {
    String type=ObjectHelper.between(remainder,"(",")");
    if (type == null) {
      throw new SimpleParserException("Valid syntax: ${bodyAs(type)} was: " + function,token.getIndex());
    }
    type=StringHelper.removeQuotes(type);
    return ExpressionBuilder.bodyExpression(type);
  }
  remainder=ifStartsWithReturnRemainder("mandatoryBodyAs",function);
  if (remainder != null) {
    String type=ObjectHelper.between(remainder,"(",")");
    if (type == null) {
      throw new SimpleParserException("Valid syntax: ${mandatoryBodyAs(type)} was: " + function,token.getIndex());
    }
    type=StringHelper.removeQuotes(type);
    return ExpressionBuilder.mandatoryBodyExpression(type);
  }
  remainder=ifStartsWithReturnRemainder("body",function);
  if (remainder == null) {
    remainder=ifStartsWithReturnRemainder("in.body",function);
  }
  if (remainder != null) {
    boolean invalid=OgnlHelper.isInvalidValidOgnlExpression(remainder);
    if (invalid) {
      throw new SimpleParserException("Valid syntax: ${body.OGNL} was: " + function,token.getIndex());
    }
    return ExpressionBuilder.bodyOgnlExpression(remainder);
  }
  remainder=ifStartsWithReturnRemainder("exception",function);
  if (remainder != null) {
    boolean invalid=OgnlHelper.isInvalidValidOgnlExpression(remainder);
    if (invalid) {
      throw new SimpleParserException("Valid syntax: ${exception.OGNL} was: " + function,token.getIndex());
    }
    return ExpressionBuilder.exchangeExceptionOgnlExpression(remainder);
  }
  remainder=ifStartsWithReturnRemainder("headerAs",function);
  if (remainder != null) {
    String keyAndType=ObjectHelper.between(remainder,"(",")");
    if (keyAndType == null) {
      throw new SimpleParserException("Valid syntax: ${headerAs(key, type)} was: " + function,token.getIndex());
    }
    String key=ObjectHelper.before(keyAndType,",");
    String type=ObjectHelper.after(keyAndType,",");
    if (ObjectHelper.isEmpty(key) || ObjectHelper.isEmpty(type)) {
      throw new SimpleParserException("Valid syntax: ${headerAs(key, type)} was: " + function,token.getIndex());
    }
    key=StringHelper.removeQuotes(key);
    type=StringHelper.removeQuotes(type);
    return ExpressionBuilder.headerExpression(key,type);
  }
  if ("in.headers".equals(function) || "headers".equals(function)) {
    return ExpressionBuilder.headersExpression();
  }
  remainder=ifStartsWithReturnRemainder("in.headers",function);
  if (remainder == null) {
    remainder=ifStartsWithReturnRemainder("in.header",function);
  }
  if (remainder == null) {
    remainder=ifStartsWithReturnRemainder("headers",function);
  }
  if (remainder == null) {
    remainder=ifStartsWithReturnRemainder("header",function);
  }
  if (remainder != null) {
    if (remainder.startsWith(".") || remainder.startsWith("?")) {
      remainder=remainder.substring(1);
    }
    if (remainder.startsWith("[") && remainder.endsWith("]")) {
      remainder=remainder.substring(1,remainder.length() - 1);
    }
    boolean invalid=OgnlHelper.isInvalidValidOgnlExpression(remainder);
    if (invalid) {
      throw new SimpleParserException("Valid syntax: ${header.name[key]} was: " + function,token.getIndex());
    }
    if (OgnlHelper.isValidOgnlExpression(remainder)) {
      return ExpressionBuilder.headersOgnlExpression(remainder);
    }
 else {
      return ExpressionBuilder.headerExpression(remainder);
    }
  }
  remainder=ifStartsWithReturnRemainder("out.header.",function);
  if (remainder == null) {
    remainder=ifStartsWithReturnRemainder("out.headers.",function);
  }
  if (remainder != null) {
    return ExpressionBuilder.outHeaderExpression(remainder);
  }
  remainder=ifStartsWithReturnRemainder("property",function);
  if (remainder != null) {
    if (remainder.startsWith(".") || remainder.startsWith("?")) {
      remainder=remainder.substring(1);
    }
    if (remainder.startsWith("[") && remainder.endsWith("]")) {
      remainder=remainder.substring(1,remainder.length() - 1);
    }
    boolean invalid=OgnlHelper.isInvalidValidOgnlExpression(remainder);
    if (invalid) {
      throw new SimpleParserException("Valid syntax: ${property.OGNL} was: " + function,token.getIndex());
    }
    if (OgnlHelper.isValidOgnlExpression(remainder)) {
      return ExpressionBuilder.propertyOgnlExpression(remainder);
    }
 else {
      return ExpressionBuilder.propertyExpression(remainder);
    }
  }
  remainder=ifStartsWithReturnRemainder("sys.",function);
  if (remainder != null) {
    return ExpressionBuilder.systemPropertyExpression(remainder);
  }
  remainder=ifStartsWithReturnRemainder("sysenv.",function);
  if (remainder != null) {
    return ExpressionBuilder.systemEnvironmentExpression(remainder);
  }
  remainder=ifStartsWithReturnRemainder("file:",function);
  if (remainder != null) {
    Expression fileExpression=createSimpleFileExpression(remainder);
    if (function != null) {
      return fileExpression;
    }
  }
  remainder=ifStartsWithReturnRemainder("date:",function);
  if (remainder != null) {
    String[] parts=remainder.split(":");
    if (parts.length < 2) {
      throw new SimpleParserException("Valid syntax: ${date:command:pattern} was: " + function,token.getIndex());
    }
    String command=ObjectHelper.before(remainder,":");
    String pattern=ObjectHelper.after(remainder,":");
    return ExpressionBuilder.dateExpression(command,pattern);
  }
  remainder=ifStartsWithReturnRemainder("bean:",function);
  if (remainder != null) {
    return ExpressionBuilder.beanExpression(remainder);
  }
  remainder=ifStartsWithReturnRemainder("properties:",function);
  if (remainder != null) {
    String[] parts=remainder.split(":");
    if (parts.length > 2) {
      throw new SimpleParserException("Valid syntax: ${properties:[locations]:key} was: " + function,token.getIndex());
    }
    String locations=null;
    String key=remainder;
    if (parts.length == 2) {
      locations=ObjectHelper.before(remainder,":");
      key=ObjectHelper.after(remainder,":");
    }
    return ExpressionBuilder.propertiesComponentExpression(key,locations);
  }
  remainder=ifStartsWithReturnRemainder("ref:",function);
  if (remainder != null) {
    return ExpressionBuilder.refExpression(remainder);
  }
  if (strict) {
    throw new SimpleParserException("Unknown function: " + function,token.getIndex());
  }
 else {
    return null;
  }
}
