{
  if (ObjectHelper.isEmpty(configuration.getCategory())) {
    throw new IllegalArgumentException("A producer category must be specified");
  }
 else {
    String category=configuration.getCategory();
switch (category) {
case KubernetesCategory.NAMESPACES:
      return new KubernetesNamespacesProducer(this);
case KubernetesCategory.SERVICES:
    return new KubernetesServicesProducer(this);
case KubernetesCategory.REPLICATION_CONTROLLERS:
  return new KubernetesReplicationControllersProducer(this);
case KubernetesCategory.PODS:
return new KubernetesPodsProducer(this);
case KubernetesCategory.PERSISTENT_VOLUMES:
return new KubernetesPersistentVolumesProducer(this);
case KubernetesCategory.PERSISTENT_VOLUMES_CLAIMS:
return new KubernetesPersistentVolumesClaimsProducer(this);
case KubernetesCategory.SECRETS:
return new KubernetesSecretsProducer(this);
case KubernetesCategory.RESOURCES_QUOTA:
return new KubernetesResourcesQuotaProducer(this);
case KubernetesCategory.SERVICE_ACCOUNTS:
return new KubernetesServiceAccountsProducer(this);
case KubernetesCategory.NODES:
return new KubernetesNodesProducer(this);
case KubernetesCategory.CONFIGMAPS:
return new KubernetesConfigMapsProducer(this);
case KubernetesCategory.BUILDS:
return new KubernetesBuildsProducer(this);
case KubernetesCategory.BUILD_CONFIGS:
return new KubernetesBuildConfigsProducer(this);
default :
throw new IllegalArgumentException("The " + category + " producer category doesn't exist");
}
}
}
