{
  Map<String,Object> answer=new LinkedHashMap<String,Object>();
  CamelContext context=getLocalCamelContext(name);
  if (context != null) {
    answer.put("name",context.getName());
    answer.put("managementName",context.getManagementName());
    answer.put("version",context.getVersion());
    answer.put("status",context.getStatus().name());
    answer.put("uptime",context.getUptime());
    answer.put("suspended",context.getStatus().isSuspended());
    answer.put("allowUseOriginalMessage",context.isAllowUseOriginalMessage());
    answer.put("messageHistory",context.isMessageHistory());
    answer.put("tracing",context.isTracing());
    answer.put("shutdownTimeout",context.getShutdownStrategy().getTimeUnit().toSeconds(context.getShutdownStrategy().getTimeout()));
    answer.put("classResolver",context.getClassResolver().toString());
    answer.put("packageScanClassResolver",context.getPackageScanClassResolver().toString());
    answer.put("applicationContextClassLoader",context.getApplicationContextClassLoader().toString());
    for (    Map.Entry<String,String> entry : context.getProperties().entrySet()) {
      answer.put("property." + entry.getKey(),entry.getValue());
    }
    long activeRoutes=0;
    long inactiveRoutes=0;
    List<Route> routeList=context.getRoutes();
    for (    Route route : routeList) {
      if (context.getRouteStatus(route.getId()).isStarted()) {
        activeRoutes++;
      }
 else {
        inactiveRoutes++;
      }
    }
    answer.put("startedRoutes",activeRoutes);
    answer.put("totalRoutes",activeRoutes + inactiveRoutes);
    answer.put("typeConverter.numberOfTypeConverters",context.getTypeConverterRegistry().size());
    answer.put("typeConverter.statisticsEnabled",context.getTypeConverterRegistry().getStatistics().isStatisticsEnabled());
    answer.put("typeConverter.noopCounter",context.getTypeConverterRegistry().getStatistics().getNoopCounter());
    answer.put("typeConverter.attemptCounter",context.getTypeConverterRegistry().getStatistics().getAttemptCounter());
    answer.put("typeConverter.hitCounter",context.getTypeConverterRegistry().getStatistics().getHitCounter());
    answer.put("typeConverter.missCounter",context.getTypeConverterRegistry().getStatistics().getMissCounter());
    answer.put("typeConverter.failedCounter",context.getTypeConverterRegistry().getStatistics().getFailedCounter());
    if (context.getStreamCachingStrategy().isEnabled()) {
      answer.put("streamCachingEnabled",true);
      answer.put("streamCaching.spoolDirectory",context.getStreamCachingStrategy().getSpoolDirectory());
      answer.put("streamCaching.spoolChiper",context.getStreamCachingStrategy().getSpoolChiper());
      answer.put("streamCaching.spoolThreshold",context.getStreamCachingStrategy().getSpoolThreshold());
      answer.put("streamCaching.spoolUsedHeapMemoryThreshold",context.getStreamCachingStrategy().getSpoolUsedHeapMemoryThreshold());
      answer.put("streamCaching.spoolUsedHeapMemoryLimit",context.getStreamCachingStrategy().getSpoolUsedHeapMemoryLimit());
      answer.put("streamCaching.anySpoolRules",context.getStreamCachingStrategy().isAnySpoolRules());
      answer.put("streamCaching.bufferSize",context.getStreamCachingStrategy().getBufferSize());
      answer.put("streamCaching.removeSpoolDirectoryWhenStopping",context.getStreamCachingStrategy().isRemoveSpoolDirectoryWhenStopping());
      answer.put("streamCaching.statisticsEnabled",context.getStreamCachingStrategy().getStatistics().isStatisticsEnabled());
      if (context.getStreamCachingStrategy().getStatistics().isStatisticsEnabled()) {
        answer.put("streamCaching.cacheMemoryCounter",context.getStreamCachingStrategy().getStatistics().getCacheMemoryCounter());
        answer.put("streamCaching.cacheMemorySize",context.getStreamCachingStrategy().getStatistics().getCacheMemorySize());
        answer.put("streamCaching.cacheMemoryAverageSize",context.getStreamCachingStrategy().getStatistics().getCacheMemoryAverageSize());
        answer.put("streamCaching.cacheSpoolCounter",context.getStreamCachingStrategy().getStatistics().getCacheSpoolCounter());
        answer.put("streamCaching.cacheSpoolSize",context.getStreamCachingStrategy().getStatistics().getCacheSpoolSize());
        answer.put("streamCaching.cacheSpoolAverageSize",context.getStreamCachingStrategy().getStatistics().getCacheSpoolAverageSize());
      }
    }
 else {
      answer.put("streamCachingEnabled",false);
    }
  }
  return answer;
}
