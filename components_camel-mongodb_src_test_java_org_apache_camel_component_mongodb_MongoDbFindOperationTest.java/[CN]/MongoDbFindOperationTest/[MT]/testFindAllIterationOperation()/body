{
  assertEquals(0,testCollection.count());
  pumpDataIntoTestCollection();
  int numToSkip=0;
  final int limit=100;
  for (int i=0; i < 10; i++) {
    Map<String,Object> headers=new HashMap<String,Object>();
    headers.put(MongoDbConstants.NUM_TO_SKIP,numToSkip);
    headers.put(MongoDbConstants.LIMIT,100);
    Object result=template.requestBodyAndHeaders("direct:findAll",(Object)null,headers);
    assertTrue("Result is not of type List",result instanceof List);
    @SuppressWarnings("unchecked") List<DBObject> resultList=(List<DBObject>)result;
    assertListSize("Result does not contain 100 elements",resultList,100);
    assertEquals("Id of first record is not as expected",numToSkip + 1,Integer.parseInt((String)resultList.get(0).get("_id")));
    for (    DBObject dbObject : resultList) {
      assertNotNull("DBObject in returned list should contain all fields",dbObject.get("_id"));
      assertNotNull("DBObject in returned list should contain all fields",dbObject.get("scientist"));
      assertNotNull("DBObject in returned list should contain all fields",dbObject.get("fixedField"));
    }
    numToSkip=numToSkip + limit;
  }
  for (  Exchange resultExchange : getMockEndpoint("mock:resultFindAll").getReceivedExchanges()) {
    assertEquals("Result page size header should equal 100",100,resultExchange.getIn().getHeader(MongoDbConstants.RESULT_PAGE_SIZE));
  }
}
