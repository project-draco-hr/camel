{
  final Map<String,Object> headers=new HashMap<>();
  final Cache<Object,Object> cache=getCacheFromEndpoint("jcache://test-cache");
  Map<Object,Object> values=new HashMap<>();
  values.put(randomString(),randomString());
  values.put(randomString(),randomString());
  cache.putAll(values);
  headers.clear();
  headers.put(JCacheConstants.ACTION,"GETALL");
  headers.put(JCacheConstants.KEYS,values.keySet());
  sendBody("direct:get-all",values,headers);
  MockEndpoint mock=getMockEndpoint("mock:get-all");
  mock.expectedMinimumMessageCount(1);
  mock.expectedHeaderReceived(JCacheConstants.KEYS,values.keySet());
  mock.expectedMessagesMatches(new Predicate(){
    @Override public boolean matches(    Exchange exchange){
      Map<Object,Object> values=exchange.getIn().getBody(Map.class);
      assertThat(values,is(values));
      return true;
    }
  }
);
  mock.assertIsSatisfied();
}
