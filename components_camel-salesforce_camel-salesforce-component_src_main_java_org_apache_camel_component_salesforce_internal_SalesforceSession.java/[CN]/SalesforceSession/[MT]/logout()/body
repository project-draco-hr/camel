{
  if (accessToken == null) {
    return;
  }
  StatusExceptionExchange logoutGet=new StatusExceptionExchange(true);
  logoutGet.setURL(config.getLoginUrl() + OAUTH2_REVOKE_PATH + accessToken);
  logoutGet.setMethod(HttpMethods.GET);
  try {
    httpClient.send(logoutGet);
    final int done=logoutGet.waitForDone();
switch (done) {
case HttpExchange.STATUS_COMPLETED:
      final int statusCode=logoutGet.getResponseStatus();
    final String reason=logoutGet.getReason();
  if (statusCode == HttpStatus.OK_200) {
    LOG.info("Logout successful");
  }
 else {
    throw new SalesforceException(String.format("Logout error, code: [%s] reason: [%s]",statusCode,reason),statusCode);
  }
break;
case HttpExchange.STATUS_EXCEPTED:
final Throwable ex=logoutGet.getException();
throw new SalesforceException("Unexpected logout exception: " + ex.getMessage(),ex);
case HttpExchange.STATUS_CANCELLED:
throw new SalesforceException("Logout request CANCELLED!",null);
case HttpExchange.STATUS_EXPIRED:
throw new SalesforceException("Logout request TIMEOUT!",null);
}
}
 catch (SalesforceException e) {
throw e;
}
catch (Exception e) {
String msg="Logout error: " + e.getMessage();
throw new SalesforceException(msg,e);
}
 finally {
accessToken=null;
instanceUrl=null;
for (SalesforceSessionListener listener : listeners) {
try {
listener.onLogout();
}
 catch (Throwable t) {
LOG.warn("Unexpected error from listener {}: {}",listener,t.getMessage());
}
}
}
}
