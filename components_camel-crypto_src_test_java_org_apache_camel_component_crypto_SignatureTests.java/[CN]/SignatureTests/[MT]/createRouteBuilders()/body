{
  return new RouteBuilder[]{new RouteBuilder(){
    public void configure() throws Exception {
      from("direct:keypair").to("sign://basic?privateKey=myPrivateKey","verify://basic?publicKey=myPublicKey","mock:result");
    }
  }
,new RouteBuilder(){
    public void configure() throws Exception {
      KeyPairGenerator keyGen=KeyPairGenerator.getInstance("RSA");
      keyGen.initialize(512,new SecureRandom());
      keyPair=keyGen.generateKeyPair();
      PrivateKey privateKey=keyPair.getPrivate();
      PublicKey publicKey=keyPair.getPublic();
      context.getEndpoint("sign://rsa?algorithm=MD5withRSA",DigitalSignatureEndpoint.class).setPrivateKey(privateKey);
      context.getEndpoint("verify://rsa?algorithm=MD5withRSA",DigitalSignatureEndpoint.class).setPublicKey(publicKey);
      from("direct:algorithm").to("sign://rsa?algorithm=MD5withRSA","verify://rsa?algorithm=MD5withRSA","mock:result");
    }
  }
,new RouteBuilder(){
    public void configure() throws Exception {
      from("direct:buffersize").to("sign://buffer?privateKey=myPrivateKey&buffersize=1024","verify://buffer?publicKey=myPublicKey&buffersize=1024","mock:result");
    }
  }
,new RouteBuilder(){
    public void configure() throws Exception {
      from("direct:provider").to("sign://provider?privateKey=myPrivateKey&provider=SUN","verify://provider?publicKey=myPublicKey&provider=SUN","mock:result");
    }
  }
,new RouteBuilder(){
    public void configure() throws Exception {
      from("direct:certificate").to("sign://withcert?privateKey=myPrivateKey","verify://withcert?certificate=myCert","mock:result");
    }
  }
,new RouteBuilder(){
    public void configure() throws Exception {
      from("direct:keystore").to("sign://keystore?keystore=keystore&alias=bob&password=letmein","verify://keystore?keystore=keystore&alias=bob","mock:result");
    }
  }
,new RouteBuilder(){
    public void configure() throws Exception {
      from("direct:signature-header").to("sign://another?privateKey=myPrivateKey&signatureHeader=AnotherDigitalSignature","verify://another?publicKey=myPublicKey&signatureHeader=AnotherDigitalSignature","mock:result");
    }
  }
,new RouteBuilder(){
    public void configure() throws Exception {
      from("direct:random").to("sign://another?privateKey=myPrivateKey&secureRandom=someRandom","verify://another?publicKey=myPublicKey&secureRandom=someRandom","mock:result");
    }
  }
,new RouteBuilder(){
    public void configure() throws Exception {
      from("direct:alias-sign").to("sign://alias?keystore=keystore");
      from("direct:alias-verify").to("verify://alias?keystore=keystore","mock:result");
    }
  }
,new RouteBuilder(){
    public void configure() throws Exception {
      from("direct:headerkey-sign").to("sign://alais");
      from("direct:headerkey-verify").to("verify://alias","mock:result");
    }
  }
};
}
