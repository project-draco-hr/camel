{
  return new RouteBuilder[]{new RouteBuilder(){
    public void configure() throws Exception {
      from("direct:keypair").to("crypto:sign://basic?privateKey=#myPrivateKey","crypto:verify://basic?publicKey=#myPublicKey","mock:result");
    }
  }
,new RouteBuilder(){
    public void configure() throws Exception {
      keyPair=getKeyPair("RSA");
      PrivateKey privateKey=keyPair.getPrivate();
      PublicKey publicKey=keyPair.getPublic();
      context.getEndpoint("crypto:sign://rsa?algorithm=MD5withRSA",DigitalSignatureEndpoint.class).setPrivateKey(privateKey);
      context.getEndpoint("crypto:verify://rsa?algorithm=MD5withRSA",DigitalSignatureEndpoint.class).setPublicKey(publicKey);
      from("direct:algorithm").to("crypto:sign://rsa?algorithm=MD5withRSA","crypto:verify://rsa?algorithm=MD5withRSA","mock:result");
    }
  }
,new RouteBuilder(){
    public void configure() throws Exception {
      keyPair=getKeyPair("RSA");
      PrivateKey privateKey=keyPair.getPrivate();
      PublicKey publicKey=keyPair.getPublic();
      context.getEndpoint("crypto:sign://rsa?algorithm=SHA1withRSA",DigitalSignatureEndpoint.class).setPrivateKey(privateKey);
      context.getEndpoint("crypto:verify://rsa?algorithm=SHA1withRSA",DigitalSignatureEndpoint.class).setPublicKey(publicKey);
      from("direct:rsa-sha1").to("crypto:sign://rsa?algorithm=SHA1withRSA","crypto:verify://rsa?algorithm=SHA1withRSA","mock:result");
    }
  }
,new RouteBuilder(){
    public void configure() throws Exception {
      keyPair=getKeyPair("RSA");
      PrivateKey privateKey=keyPair.getPrivate();
      PublicKey publicKey=keyPair.getPublic();
      context.getEndpoint("crypto:sign://rsa?algorithm=SHA256withRSA",DigitalSignatureEndpoint.class).setPrivateKey(privateKey);
      context.getEndpoint("crypto:verify://rsa?algorithm=SHA256withRSA",DigitalSignatureEndpoint.class).setPublicKey(publicKey);
      from("direct:rsa-sha256").to("crypto:sign://rsa?algorithm=SHA256withRSA","crypto:verify://rsa?algorithm=SHA256withRSA","mock:result");
    }
  }
,new RouteBuilder(){
    public void configure() throws Exception {
      from("direct:buffersize").to("crypto:sign://buffer?privateKey=#myPrivateKey&buffersize=1024","crypto:verify://buffer?publicKey=#myPublicKey&buffersize=1024","mock:result");
    }
  }
,new RouteBuilder(){
    public void configure() throws Exception {
      from("direct:provider").to("crypto:sign://provider?privateKey=#myPrivateKey&provider=SUN","crypto:verify://provider?publicKey=#myPublicKey&provider=SUN","mock:result");
    }
  }
,new RouteBuilder(){
    public void configure() throws Exception {
      from("direct:certificate").to("crypto:sign://withcert?privateKey=#myPrivateKey","crypto:verify://withcert?certificate=#myCert","mock:result");
    }
  }
,new RouteBuilder(){
    public void configure() throws Exception {
      from("direct:keystore").to("crypto:sign://keystore?keystore=#keystore&alias=bob&password=letmein","crypto:verify://keystore?keystore=#keystore&alias=bob","mock:result");
    }
  }
,new RouteBuilder(){
    public void configure() throws Exception {
      from("direct:signature-header").to("crypto:sign://another?privateKey=#myPrivateKey&signatureHeader=AnotherDigitalSignature","crypto:verify://another?publicKey=#myPublicKey&signatureHeader=AnotherDigitalSignature","mock:result");
    }
  }
,new RouteBuilder(){
    public void configure() throws Exception {
      from("direct:random").to("crypto:sign://another?privateKey=#myPrivateKey&secureRandom=#someRandom","crypto:verify://another?publicKey=#myPublicKey&secureRandom=#someRandom","mock:result");
    }
  }
,new RouteBuilder(){
    public void configure() throws Exception {
      from("direct:alias-sign").to("crypto:sign://alias?keystore=#keystore");
      from("direct:alias-verify").to("crypto:verify://alias?keystore=#keystore","mock:result");
    }
  }
,new RouteBuilder(){
    public void configure() throws Exception {
      from("direct:headerkey-sign").to("crypto:sign://alias");
      from("direct:headerkey-verify").to("crypto:verify://alias","mock:result");
    }
  }
,new RouteBuilder(){
    public void configure() throws Exception {
      from("direct:headers").to("crypto:sign://headers?privateKey=#myPrivateKey","crypto:verify://headers?publicKey=#myPublicKey&clearHeaders=false","mock:result");
    }
  }
};
}
