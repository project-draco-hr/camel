{
  VelocityContext context=getCommonContext(models);
  context.put("configName",getConfigName());
  context.put("componentName",componentName);
  context.put("componentPackage",componentPackage);
  Map<String,ApiMethodArg> parameters=new TreeMap<String,ApiMethodArg>();
  for (  ApiMethodParser.ApiMethodModel model : models) {
    for (    ApiMethodArg argument : model.getArguments()) {
      final String name=argument.getName();
      final Class<?> type=argument.getType();
      final String typeName=type.getCanonicalName();
      if (!parameters.containsKey(name) && (propertyNamePattern == null || !propertyNamePattern.matcher(name).matches()) && (propertyTypePattern == null || !propertyTypePattern.matcher(typeName).matches())) {
        parameters.put(name,argument);
      }
    }
  }
  if (extraOptions != null && extraOptions.length > 0) {
    for (    ExtraOption option : extraOptions) {
      final String name=option.getName();
      final String argWithTypes=option.getType().replaceAll(" ","");
      final int rawEnd=argWithTypes.indexOf('<');
      String typeArgs=null;
      Class<?> argType;
      try {
        if (rawEnd != -1) {
          argType=getProjectClassLoader().loadClass(argWithTypes.substring(0,rawEnd));
          typeArgs=argWithTypes.substring(rawEnd + 1,argWithTypes.lastIndexOf('>'));
        }
 else {
          argType=getProjectClassLoader().loadClass(argWithTypes);
        }
      }
 catch (      ClassNotFoundException e) {
        throw new MojoExecutionException(String.format("Error loading extra option [%s %s] : %s",argWithTypes,name,e.getMessage()),e);
      }
      parameters.put(name,new ApiMethodArg(name,argType,typeArgs));
    }
  }
  context.put("parameters",parameters);
  return context;
}
