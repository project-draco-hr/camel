{
  VelocityContext context=getCommonContext(models);
  context.put("configName",getConfigName());
  context.put("componentName",componentName);
  context.put("componentPackage",componentPackage);
  Map<String,Class<?>> parameters=new TreeMap<String,Class<?>>();
  for (  ApiMethodParser.ApiMethodModel model : models) {
    for (    ApiMethodParser.Argument argument : model.getArguments()) {
      final String name=argument.getName();
      Class<?> type=argument.getType();
      final String typeName=type.getCanonicalName();
      if (!parameters.containsKey(name) && (propertyNamePattern == null || !propertyNamePattern.matcher(name).matches()) && (propertyTypePattern == null || !propertyTypePattern.matcher(typeName).matches())) {
        if (type.isPrimitive()) {
          type=ClassUtils.primitiveToWrapper(type);
        }
        parameters.put(name,type);
      }
    }
  }
  context.put("parameters",parameters);
  return context;
}
