{
  registerParser("routes",routesParser);
  registerParser("routeBuilder",routesParser);
  registerParser("endpoint",endpointParser);
  registerParser("camelContext",new BeanDefinitionParser(CamelContextFactoryBean.class){
    @Override protected void doParse(    Element element,    ParserContext parserContext,    BeanDefinitionBuilder builder){
      super.doParse(element,parserContext,builder);
      String contextId=element.getAttribute("id");
      if (ObjectHelper.isNullOrBlank(contextId)) {
        contextId="camelContext";
        element.setAttribute("id",contextId);
      }
      Element routes=element.getOwnerDocument().createElement("routes");
      NodeList list=element.getChildNodes();
      for (int size=list.getLength(), i=0; i < size; i++) {
        Node child=list.item(i);
        if (child instanceof Element) {
          Element childElement=(Element)child;
          if (child.getLocalName().equals("beanPostProcessor")) {
            String beanPostProcessorId=contextId + ":beanPostProcessor";
            childElement.setAttribute("id",beanPostProcessorId);
            BeanDefinition definition=beanPostProcessorParser.parse(childElement,parserContext);
            definition.getPropertyValues().addPropertyValue("camelContext",new RuntimeBeanReference(contextId));
          }
 else {
            element.removeChild(child);
            routes.appendChild(child);
          }
        }
      }
      String routeId=contextId + ":routes";
      routes.setAttribute("id",routeId);
      BeanDefinition definition=routesParser.parse(routes,parserContext);
      definition.getPropertyValues().addPropertyValue("context",new RuntimeBeanReference(contextId));
      parserContext.registerComponent(new BeanComponentDefinition(definition,routeId));
      list=routes.getElementsByTagName("endpoint");
      for (int size=list.getLength(), i=0; i < size; i++) {
        Element node=(Element)list.item(i);
        definition=endpointParser.parse(node,parserContext);
        String id=node.getAttribute("id");
        if (isNotNullAndNonEmpty(id)) {
          definition.getPropertyValues().addPropertyValue("context",new RuntimeBeanReference(contextId));
          parserContext.registerComponent(new BeanComponentDefinition(definition,id));
        }
      }
    }
  }
);
  registerParser("xpath",new BeanDefinitionParser(XPathBuilder.class){
    @Override protected void doParse(    Element element,    ParserContext parserContext,    BeanDefinitionBuilder builder){
      String xpath=DomUtils.getTextValue(element);
      builder.addConstructorArg(xpath);
      super.doParse(element,parserContext,builder);
      builder.addPropertyValue("namespacesFromDom",element);
    }
  }
);
  registerScriptParser("script",null);
  registerScriptParser("groovy","groovy");
  registerScriptParser("ruby","jruby");
  registerScriptParser("javaScript","js");
  registerScriptParser("python","python");
  registerScriptParser("php","php");
}
