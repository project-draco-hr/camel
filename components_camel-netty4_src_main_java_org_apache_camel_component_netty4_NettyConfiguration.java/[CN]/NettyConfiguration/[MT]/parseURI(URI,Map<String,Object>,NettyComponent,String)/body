{
  protocol=uri.getScheme();
  boolean found=false;
  for (  String supportedProtocol : supportedProtocols) {
    if (protocol != null && protocol.equalsIgnoreCase(supportedProtocol)) {
      found=true;
      break;
    }
  }
  if (!found) {
    throw new IllegalArgumentException("Unrecognized Netty protocol: " + protocol + " for uri: "+ uri);
  }
  setHost(uri.getHost());
  if (uri.getPort() != -1) {
    setPort(uri.getPort());
  }
  ssl=component.getAndRemoveOrResolveReferenceParameter(parameters,"ssl",boolean.class,false);
  sslHandler=component.getAndRemoveOrResolveReferenceParameter(parameters,"sslHandler",SslHandler.class,sslHandler);
  passphrase=component.getAndRemoveOrResolveReferenceParameter(parameters,"passphrase",String.class,passphrase);
  keyStoreFormat=component.getAndRemoveOrResolveReferenceParameter(parameters,"keyStoreFormat",String.class,keyStoreFormat == null ? "JKS" : keyStoreFormat);
  securityProvider=component.getAndRemoveOrResolveReferenceParameter(parameters,"securityProvider",String.class,securityProvider == null ? "SunX509" : securityProvider);
  keyStoreFile=component.getAndRemoveOrResolveReferenceParameter(parameters,"keyStoreFile",File.class,keyStoreFile);
  trustStoreFile=component.getAndRemoveOrResolveReferenceParameter(parameters,"trustStoreFile",File.class,trustStoreFile);
  keyStoreResource=component.getAndRemoveOrResolveReferenceParameter(parameters,"keyStoreResource",String.class,keyStoreResource);
  trustStoreResource=component.getAndRemoveOrResolveReferenceParameter(parameters,"trustStoreResource",String.class,trustStoreResource);
  clientInitializerFactory=component.getAndRemoveOrResolveReferenceParameter(parameters,"clientPipelineFactory",ClientInitializerFactory.class,clientInitializerFactory);
  clientInitializerFactory=component.getAndRemoveOrResolveReferenceParameter(parameters,"clientInitializerFactory",ClientInitializerFactory.class,clientInitializerFactory);
  serverInitializerFactory=component.getAndRemoveOrResolveReferenceParameter(parameters,"serverPipelineFactory",ServerInitializerFactory.class,serverInitializerFactory);
  serverInitializerFactory=component.getAndRemoveOrResolveReferenceParameter(parameters,"serverInitializerFactory",ServerInitializerFactory.class,serverInitializerFactory);
  List<ChannelHandler> referencedEncoders=component.resolveAndRemoveReferenceListParameter(parameters,"encoders",ChannelHandler.class,null);
  addToHandlersList(encoders,referencedEncoders,ChannelHandler.class);
  List<ChannelHandler> referencedDecoders=component.resolveAndRemoveReferenceListParameter(parameters,"decoders",ChannelHandler.class,null);
  addToHandlersList(decoders,referencedDecoders,ChannelHandler.class);
  EndpointHelper.setReferenceProperties(component.getCamelContext(),this,parameters);
  EndpointHelper.setProperties(component.getCamelContext(),this,parameters);
  options=IntrospectionSupport.extractProperties(parameters,"option.");
  if (options != null && options.isEmpty()) {
    options=null;
  }
  if (encoders.isEmpty() && decoders.isEmpty()) {
    if (isAllowDefaultCodec()) {
      if ("udp".equalsIgnoreCase(protocol)) {
        encoders.add(ChannelHandlerFactories.newDatagramPacketEncoder());
      }
      if (isTextline()) {
        Charset charset=getEncoding() != null ? Charset.forName(getEncoding()) : CharsetUtil.UTF_8;
        encoders.add(ChannelHandlerFactories.newStringEncoder(charset,protocol));
        ByteBuf[] delimiters=delimiter == TextLineDelimiter.LINE ? Delimiters.lineDelimiter() : Delimiters.nulDelimiter();
        decoders.add(ChannelHandlerFactories.newDelimiterBasedFrameDecoder(decoderMaxLineLength,delimiters,protocol));
        decoders.add(ChannelHandlerFactories.newStringDecoder(charset,protocol));
        if (LOG.isDebugEnabled()) {
          LOG.debug("Using textline encoders and decoders with charset: {}, delimiter: {} and decoderMaxLineLength: {}",new Object[]{charset,delimiter,decoderMaxLineLength});
        }
      }
 else       if ("udp".equalsIgnoreCase(protocol) && isUdpByteArrayCodec()) {
        encoders.add(ChannelHandlerFactories.newByteArrayEncoder(protocol));
        decoders.add(ChannelHandlerFactories.newByteArrayDecoder(protocol));
      }
 else {
        encoders.add(ChannelHandlerFactories.newObjectEncoder(protocol));
        decoders.add(ChannelHandlerFactories.newObjectDecoder(protocol));
        LOG.debug("Using object encoders and decoders");
      }
      if ("udp".equalsIgnoreCase(protocol)) {
        decoders.add(ChannelHandlerFactories.newDatagramPacketDecoder());
      }
    }
 else {
      LOG.debug("No encoders and decoders will be used");
    }
  }
 else {
    LOG.debug("Using configured encoders and/or decoders");
  }
}
