{
  Message in=exchange.getIn();
  StringBuilder sb=new StringBuilder();
  if (showAll || showExchangeId) {
    if (multiline) {
      sb.append(SEPARATOR);
    }
    sb.append(style("Id")).append(exchange.getExchangeId());
  }
  if (showAll || showExchangePattern) {
    if (multiline) {
      sb.append(SEPARATOR);
    }
    sb.append(style("ExchangePattern")).append(exchange.getPattern());
  }
  if (showAll || showProperties) {
    if (multiline) {
      sb.append(SEPARATOR);
    }
    sb.append(style("Properties")).append(sortMap(exchange.getProperties()));
  }
  if (showAll || showHeaders) {
    if (multiline) {
      sb.append(SEPARATOR);
    }
    sb.append(style("Headers")).append(sortMap(in.getHeaders()));
  }
  if (showAll || showBodyType) {
    if (multiline) {
      sb.append(SEPARATOR);
    }
    sb.append(style("BodyType")).append(getBodyTypeAsString(in));
  }
  if (showAll || showBody) {
    if (multiline) {
      sb.append(SEPARATOR);
    }
    String body=getBodyAsString(in);
    if (skipBodyLineSeparator) {
      body=StringHelper.replaceAll(body,LS,"");
    }
    sb.append(style("Body")).append(body);
  }
  if (showAll || showException || showCaughtException) {
    Exception exception=exchange.getException();
    boolean caught=false;
    if ((showAll || showCaughtException) && exception == null) {
      exception=exchange.getProperty(Exchange.EXCEPTION_CAUGHT,Exception.class);
      caught=true;
    }
    if (exception != null) {
      if (multiline) {
        sb.append(SEPARATOR);
      }
      if (caught) {
        sb.append(style("CaughtExceptionType")).append(exception.getClass().getCanonicalName());
        sb.append(style("CaughtExceptionMessage")).append(exception.getMessage());
      }
 else {
        sb.append(style("ExceptionType")).append(exception.getClass().getCanonicalName());
        sb.append(style("ExceptionMessage")).append(exception.getMessage());
      }
      if (showAll || showStackTrace) {
        StringWriter sw=new StringWriter();
        exception.printStackTrace(new PrintWriter(sw));
        sb.append(style("StackTrace")).append(sw.toString());
      }
    }
  }
  if (showAll || showOut) {
    if (exchange.hasOut()) {
      Message out=exchange.getOut();
      if (showAll || showHeaders) {
        if (multiline) {
          sb.append(SEPARATOR);
        }
        sb.append(style("OutHeaders")).append(sortMap(out.getHeaders()));
      }
      if (showAll || showBodyType) {
        if (multiline) {
          sb.append(SEPARATOR);
        }
        sb.append(style("OutBodyType")).append(getBodyTypeAsString(out));
      }
      if (showAll || showBody) {
        if (multiline) {
          sb.append(SEPARATOR);
        }
        String body=getBodyAsString(out);
        if (skipBodyLineSeparator) {
          body=StringHelper.replaceAll(body,LS,"");
        }
        sb.append(style("OutBody")).append(body);
      }
    }
 else {
      if (multiline) {
        sb.append(SEPARATOR);
      }
      sb.append(style("Out: null"));
    }
  }
  if (maxChars > 0) {
    StringBuilder answer=new StringBuilder();
    for (    String s : sb.toString().split(SEPARATOR)) {
      if (s != null) {
        if (s.length() > maxChars) {
          s=s.substring(0,maxChars);
          answer.append(s).append("...");
        }
 else {
          answer.append(s);
        }
        if (multiline) {
          answer.append(LS);
        }
      }
    }
    sb=answer;
  }
  if (multiline) {
    sb.insert(0,"Exchange[");
    sb.append("]");
    return sb.toString();
  }
 else {
    if (sb.length() > 0 && sb.charAt(0) == ',' && sb.charAt(1) == ' ') {
      sb.replace(0,2,"");
    }
    sb.insert(0,"Exchange[");
    sb.append("]");
    return sb.toString();
  }
}
