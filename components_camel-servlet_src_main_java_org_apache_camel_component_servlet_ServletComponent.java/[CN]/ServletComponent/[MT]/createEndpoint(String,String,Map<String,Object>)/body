{
  uri=uri.startsWith("servlet:") ? remaining : uri;
  HttpClientParams params=new HttpClientParams();
  IntrospectionSupport.setProperties(params,parameters,"httpClient.");
  final Set<AuthMethod> authMethods=new LinkedHashSet<AuthMethod>();
  HttpClientConfigurer configurer=createHttpClientConfigurer(parameters,authMethods);
  Boolean throwExceptionOnFailure=getAndRemoveParameter(parameters,"throwExceptionOnFailure",Boolean.class);
  Boolean transferException=getAndRemoveParameter(parameters,"transferException",Boolean.class);
  Boolean bridgeEndpoint=getAndRemoveParameter(parameters,"bridgeEndpoint",Boolean.class);
  HttpBinding binding=resolveAndRemoveReferenceParameter(parameters,"httpBindingRef",HttpBinding.class);
  Boolean matchOnUriPrefix=getAndRemoveParameter(parameters,"matchOnUriPrefix",Boolean.class);
  String servletName=getAndRemoveParameter(parameters,"servletName",String.class,getServletName());
  URI httpUri=URISupport.createRemainingURI(new URI(UnsafeUriCharactersEncoder.encode(uri)),CastUtils.cast(parameters));
  uri=httpUri.toString();
  ServletEndpoint endpoint=createServletEndpoint(uri,this,httpUri,params,getHttpConnectionManager(),configurer);
  endpoint.setServletName(servletName);
  setEndpointHeaderFilterStrategy(endpoint);
  if (binding == null) {
    binding=getHttpBinding();
  }
  if (binding != null) {
    endpoint.setBinding(binding);
  }
  if (throwExceptionOnFailure != null) {
    endpoint.setThrowExceptionOnFailure(throwExceptionOnFailure);
  }
  if (transferException != null) {
    endpoint.setTransferException(transferException);
  }
  if (bridgeEndpoint != null) {
    endpoint.setBridgeEndpoint(bridgeEndpoint);
  }
  if (matchOnUriPrefix != null) {
    endpoint.setMatchOnUriPrefix(matchOnUriPrefix);
  }
  setProperties(endpoint,parameters);
  return endpoint;
}
