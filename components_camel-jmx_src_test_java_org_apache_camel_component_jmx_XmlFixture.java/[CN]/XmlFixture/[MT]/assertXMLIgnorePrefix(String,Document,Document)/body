{
  XMLUnit.setIgnoreComments(true);
  XMLUnit.setIgnoreWhitespace(true);
  XMLUnit.setIgnoreAttributeOrder(true);
  Diff diff=new Diff(aExpected,aActual);
  diff.overrideDifferenceListener(new DifferenceListener(){
    public void skippedComparison(    Node aArg0,    Node aArg1){
    }
    public int differenceFound(    Difference aDifference){
      if (aDifference.getId() == DifferenceConstants.NAMESPACE_PREFIX_ID) {
        return DifferenceListener.RETURN_IGNORE_DIFFERENCE_NODES_IDENTICAL;
      }
      return DifferenceListener.RETURN_ACCEPT_DIFFERENCE;
    }
  }
);
  try {
    XMLAssert.assertXMLEqual(diff,true);
  }
 catch (  Throwable t) {
    XMLUnit.getTransformerFactory().newTransformer().transform(new DOMSource(aActual),new StreamResult(System.out));
    StringWriter sw=new StringWriter();
    t.printStackTrace(new PrintWriter(sw));
    fail(sw.toString());
  }
}
