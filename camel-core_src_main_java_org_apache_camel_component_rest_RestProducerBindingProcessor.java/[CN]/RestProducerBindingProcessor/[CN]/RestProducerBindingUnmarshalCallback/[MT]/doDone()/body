{
  if (exchange.getException() != null) {
    return;
  }
  if (skipBindingOnErrorCode) {
    Integer code=exchange.hasOut() ? exchange.getOut().getHeader(Exchange.HTTP_RESPONSE_CODE,Integer.class) : exchange.getIn().getHeader(Exchange.HTTP_RESPONSE_CODE,Integer.class);
    if (code != null && code >= 300) {
      return;
    }
  }
  boolean isXml=false;
  boolean isJson=false;
  String contentType=ExchangeHelper.getContentType(exchange);
  if (contentType != null) {
    isXml=contentType.toLowerCase(Locale.ENGLISH).contains("xml");
    isJson=contentType.toLowerCase(Locale.ENGLISH).contains("json");
  }
  if (bindingMode != null) {
    isXml&=bindingMode.equals("off") || bindingMode.equals("auto") || bindingMode.contains("xml");
    isJson&=bindingMode.equals("off") || bindingMode.equals("auto") || bindingMode.contains("json");
    if (!isJson && !isXml) {
      isXml=bindingMode.equals("auto") || bindingMode.contains("xml");
      isJson=bindingMode.equals("auto") || bindingMode.contains("json");
    }
  }
  if (isXml && isJson) {
    isXml=wasXml;
    isJson=!wasXml;
  }
  ExchangeHelper.prepareOutToIn(exchange);
  ensureHeaderContentType(isXml,isJson,exchange);
  if (bindingMode == null || "off".equals(bindingMode)) {
    return;
  }
  if (jsonUnmarshal == null && xmlUnmarshal == null) {
    return;
  }
  if ((exchange.hasOut() && exchange.getOut().getBody() == null) || (!exchange.hasOut() && exchange.getIn().getBody() == null)) {
    return;
  }
  contentType=exchange.getIn().getHeader(Exchange.CONTENT_TYPE,String.class);
  contentType=contentType.toLowerCase(Locale.US);
  try {
    if (isJson && jsonUnmarshal != null) {
      if (contentType.contains("json")) {
        jsonUnmarshal.process(exchange);
      }
    }
 else     if (isXml && xmlUnmarshal != null) {
      if (contentType.contains("xml")) {
        xmlUnmarshal.process(exchange);
      }
    }
 else {
      if (bindingMode.equals("auto")) {
      }
 else {
        if (bindingMode.contains("xml")) {
          exchange.setException(new BindingException("Cannot bind from xml as message body is not xml compatible",exchange));
        }
 else {
          exchange.setException(new BindingException("Cannot bind from json as message body is not json compatible",exchange));
        }
      }
    }
  }
 catch (  Throwable e) {
    exchange.setException(e);
  }
}
