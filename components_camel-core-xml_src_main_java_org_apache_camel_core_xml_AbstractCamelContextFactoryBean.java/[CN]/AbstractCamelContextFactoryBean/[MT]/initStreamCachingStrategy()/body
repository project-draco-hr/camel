{
  CamelStreamCachingStrategyDefinition streamCaching=getCamelStreamCachingStrategy();
  if (streamCaching == null) {
    return;
  }
  Boolean enabled=CamelContextHelper.parseBoolean(getContext(),streamCaching.getEnabled());
  if (enabled != null) {
    getContext().getStreamCachingStrategy().setEnabled(enabled);
  }
  String spoolDirectory=CamelContextHelper.parseText(getContext(),streamCaching.getSpoolDirectory());
  if (spoolDirectory != null) {
    getContext().getStreamCachingStrategy().setSpoolDirectory(spoolDirectory);
  }
  Long spoolThreshold=CamelContextHelper.parseLong(getContext(),streamCaching.getSpoolThreshold());
  if (spoolThreshold != null) {
    getContext().getStreamCachingStrategy().setSpoolThreshold(spoolThreshold);
  }
  Integer spoolUsedHeap=CamelContextHelper.parseInteger(getContext(),streamCaching.getSpoolUsedHeapMemoryThreshold());
  if (spoolUsedHeap != null) {
    getContext().getStreamCachingStrategy().setSpoolUsedHeapMemoryThreshold(spoolUsedHeap);
  }
  String limit=CamelContextHelper.parseText(getContext(),streamCaching.getSpoolUsedHeapMemoryLimit());
  if (limit != null) {
    StreamCachingStrategy.SpoolUsedHeapMemoryLimit ul=CamelContextHelper.mandatoryConvertTo(getContext(),StreamCachingStrategy.SpoolUsedHeapMemoryLimit.class,limit);
    getContext().getStreamCachingStrategy().setSpoolUsedHeapMemoryLimit(ul);
  }
  String spoolChiper=CamelContextHelper.parseText(getContext(),streamCaching.getSpoolChiper());
  if (spoolChiper != null) {
    getContext().getStreamCachingStrategy().setSpoolChiper(spoolChiper);
  }
  Boolean remove=CamelContextHelper.parseBoolean(getContext(),streamCaching.getRemoveSpoolDirectoryWhenStopping());
  if (remove != null) {
    getContext().getStreamCachingStrategy().setRemoveSpoolDirectoryWhenStopping(remove);
  }
  Boolean statisticsEnabled=CamelContextHelper.parseBoolean(getContext(),streamCaching.getStatisticsEnabled());
  if (statisticsEnabled != null) {
    getContext().getStreamCachingStrategy().getStatistics().setStatisticsEnabled(statisticsEnabled);
  }
  Boolean anySpoolRules=CamelContextHelper.parseBoolean(getContext(),streamCaching.getAnySpoolRules());
  if (anySpoolRules != null) {
    getContext().getStreamCachingStrategy().setAnySpoolRules(anySpoolRules);
  }
  String spoolRules=CamelContextHelper.parseText(getContext(),streamCaching.getSpoolRules());
  if (spoolRules != null) {
    Iterator<Object> it=ObjectHelper.createIterator(spoolRules);
    while (it.hasNext()) {
      String name=it.next().toString();
      StreamCachingStrategy.SpoolRule rule=getContext().getRegistry().lookupByNameAndType(name,StreamCachingStrategy.SpoolRule.class);
      if (rule != null) {
        getContext().getStreamCachingStrategy().addSpoolRule(rule);
      }
    }
  }
}
