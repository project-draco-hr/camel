{
  CamelStreamCachingStrategyDefinition streamCaching=getCamelStreamCachingStrategy();
  if (streamCaching == null) {
    return;
  }
  Boolean enabled=CamelContextHelper.parseBoolean(getContext(),streamCaching.getEnabled());
  if (enabled != null) {
    getContext().getStreamCachingStrategy().setEnabled(enabled);
  }
  String spoolDirectory=CamelContextHelper.parseText(getContext(),streamCaching.getSpoolDirectory());
  if (spoolDirectory != null) {
    getContext().getStreamCachingStrategy().setSpoolDirectory(spoolDirectory);
  }
  Long spoolThreshold=CamelContextHelper.parseLong(getContext(),streamCaching.getSpoolThreshold());
  if (spoolThreshold != null) {
    getContext().getStreamCachingStrategy().setSpoolThreshold(spoolThreshold);
  }
  String spoolChiper=CamelContextHelper.parseText(getContext(),streamCaching.getSpoolChiper());
  if (spoolChiper != null) {
    getContext().getStreamCachingStrategy().setSpoolChiper(spoolChiper);
  }
  Boolean remove=CamelContextHelper.parseBoolean(getContext(),streamCaching.getRemoveSpoolDirectoryWhenStopping());
  if (remove != null) {
    getContext().getStreamCachingStrategy().setRemoveSpoolDirectoryWhenStopping(remove);
  }
  Boolean statisticsEnabled=CamelContextHelper.parseBoolean(getContext(),streamCaching.getStatisticsEnabled());
  if (statisticsEnabled != null) {
    getContext().getStreamCachingStrategy().getStatistics().setStatisticsEnabled(statisticsEnabled);
  }
}
