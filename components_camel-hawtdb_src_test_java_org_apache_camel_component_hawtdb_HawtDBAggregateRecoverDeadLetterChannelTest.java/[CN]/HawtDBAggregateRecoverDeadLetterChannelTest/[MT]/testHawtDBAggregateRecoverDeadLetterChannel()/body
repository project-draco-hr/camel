{
  getMockEndpoint("mock:result").expectedMessageCount(0);
  getMockEndpoint("mock:aggregated").expectedMessageCount(4);
  getMockEndpoint("mock:aggregated").message(0).header(Exchange.REDELIVERED).isNull();
  getMockEndpoint("mock:aggregated").message(1).header(Exchange.REDELIVERED).isEqualTo(Boolean.TRUE);
  getMockEndpoint("mock:aggregated").message(1).header(Exchange.REDELIVERY_COUNTER).isEqualTo(1);
  getMockEndpoint("mock:aggregated").message(1).header(Exchange.REDELIVERY_MAX_COUNTER).isEqualTo(3);
  getMockEndpoint("mock:aggregated").message(2).header(Exchange.REDELIVERED).isEqualTo(Boolean.TRUE);
  getMockEndpoint("mock:aggregated").message(2).header(Exchange.REDELIVERY_COUNTER).isEqualTo(2);
  getMockEndpoint("mock:aggregated").message(2).header(Exchange.REDELIVERY_MAX_COUNTER).isEqualTo(3);
  getMockEndpoint("mock:aggregated").message(3).header(Exchange.REDELIVERED).isEqualTo(Boolean.TRUE);
  getMockEndpoint("mock:aggregated").message(3).header(Exchange.REDELIVERY_COUNTER).isEqualTo(3);
  getMockEndpoint("mock:aggregated").message(3).header(Exchange.REDELIVERY_MAX_COUNTER).isEqualTo(3);
  getMockEndpoint("mock:dead").expectedBodiesReceived("ABCDE");
  getMockEndpoint("mock:dead").message(0).header(Exchange.REDELIVERED).isEqualTo(Boolean.TRUE);
  getMockEndpoint("mock:dead").message(0).header(Exchange.REDELIVERY_COUNTER).isEqualTo(3);
  getMockEndpoint("mock:dead").message(0).header(Exchange.REDELIVERY_MAX_COUNTER).isNull();
  template.sendBodyAndHeader("direct:start","A","id",123);
  template.sendBodyAndHeader("direct:start","B","id",123);
  template.sendBodyAndHeader("direct:start","C","id",123);
  template.sendBodyAndHeader("direct:start","D","id",123);
  template.sendBodyAndHeader("direct:start","E","id",123);
  assertMockEndpointsSatisfied();
}
