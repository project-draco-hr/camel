{
  boolean skip="true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"));
  if (skip) {
    LOG.info("Skipping starting CamelContext(s) as system property " + "skipStartingCamelContext is set to be true.");
  }
 else   if (testClass.isAnnotationPresent(UseAdviceWith.class)) {
    if (testClass.getAnnotation(UseAdviceWith.class).value()) {
      LOG.info("Skipping starting CamelContext(s) as UseAdviceWith annotation was found " + "and isUseAdviceWith is set to true.");
      skip=true;
    }
 else {
      LOG.info("Starting CamelContext(s) as UseAdviceWith annotation was found, but " + "isUseAdviceWith is set to false.");
      skip=false;
    }
  }
  if (!skip) {
    CamelSpringTestHelper.doToSpringCamelContexts(context,new DoToSpringCamelContextsStrategy(){
      @Override public void execute(      String contextName,      SpringCamelContext camelContext) throws Exception {
        LOG.info("Starting CamelContext with name [{}].",contextName);
        camelContext.start();
      }
    }
);
  }
}
