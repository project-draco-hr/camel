{
  MockEndpoint endpoint=(MockEndpoint)camelContext.getEndpoint("mock:endpoint");
  endpoint.expectedMessageCount(2);
  for (int i=0; i < 2; i++) {
    template.sendBodyAndHeader("jms:queue:loanRequestQueue","Quote for the lowerst rate of loaning bank",Constants.PROPERTY_SSN,"Client-A" + i);
    Thread.sleep(100);
  }
  endpoint.assertIsSatisfied();
  List<Exchange> exchanges=endpoint.getExchanges();
  int index=0;
  for (  Exchange exchange : exchanges) {
    String ssn="Client-A" + index;
    String result=exchange.getIn().getBody(String.class);
    assertNotNull("The result should not be null",result);
    assertTrue("The result is wrong",result.startsWith("Loan quotion for Client " + ssn));
    index++;
  }
  Exchange exchange=template.send("jms:queue2:parallelLoanRequestQueue",new Processor(){
    public void process(    Exchange exchange) throws Exception {
      exchange.setPattern(ExchangePattern.InOut);
      exchange.getIn().setBody("Quote for the lowerst rate of loaning bank");
      exchange.getIn().setHeader(Constants.PROPERTY_SSN,"Client-B");
    }
  }
);
  String bank=(String)exchange.getOut().getHeader(Constants.PROPERTY_BANK);
  Double rate=(Double)exchange.getOut().getHeader(Constants.PROPERTY_RATE);
  String ssn=(String)exchange.getOut().getHeader(Constants.PROPERTY_SSN);
  assertNotNull("The ssn should not be null.",ssn);
  assertEquals("Get a wrong ssn","Client-B",ssn);
  assertNotNull("The bank should not be null",bank);
  assertNotNull("The rate should not be null",rate);
}
