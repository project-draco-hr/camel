{
  mockEndpoint.expectedMessageCount(files);
  ExecutorService executor=Executors.newFixedThreadPool(poolSize);
  Map<Integer,Future<List<?>>> responses=new HashMap<Integer,Future<List<?>>>();
  for (int i=0; i < files; i++) {
    final int index=i;
    Future<List<?>> out=executor.submit(new Callable<List<?>>(){
      public List<?> call() throws Exception {
        int id=(index % 3) + 1;
        return template.requestBody("direct:simple","" + id,List.class);
      }
    }
);
    responses.put(index,out);
  }
  assertMockEndpointsSatisfied();
  assertEquals(files,responses.size());
  for (int i=0; i < files; i++) {
    List<?> rows=responses.get(i).get();
    Map<?,?> columns=assertIsInstanceOf(Map.class,rows.get(0));
    if (i % 3 == 0) {
      assertEquals("Camel",columns.get("PROJECT"));
    }
 else     if (i % 3 == 1) {
      assertEquals("AMQ",columns.get("PROJECT"));
    }
 else {
      assertEquals("Linux",columns.get("PROJECT"));
    }
  }
  executor.shutdownNow();
}
