{
  final String messageId=messageIdExpression.evaluate(exchange,String.class);
  if (messageId == null) {
    throw new NoMessageIdException(exchange,messageIdExpression);
  }
  boolean newKey;
  if (eager) {
    if (idempotentRepository instanceof ExchangeIdempotentRepository) {
      newKey=((ExchangeIdempotentRepository<String>)idempotentRepository).add(exchange,messageId);
    }
 else {
      newKey=idempotentRepository.add(messageId);
    }
  }
 else {
    if (idempotentRepository instanceof ExchangeIdempotentRepository) {
      newKey=((ExchangeIdempotentRepository<String>)idempotentRepository).contains(exchange,messageId);
    }
 else {
      newKey=!idempotentRepository.contains(messageId);
    }
  }
  if (!newKey) {
    exchange.setProperty(Exchange.DUPLICATE_MESSAGE,Boolean.TRUE);
    onDuplicate(exchange,messageId);
    if (skipDuplicate) {
      LOG.debug("Ignoring duplicate message with id: {} for exchange: {}",messageId,exchange);
      callback.done(true);
      return true;
    }
  }
  exchange.addOnCompletion(new IdempotentOnCompletion(idempotentRepository,messageId,eager,removeOnFailure));
  return processor.process(exchange,callback);
}
