{
  if (accept(TokenType.logicalOperator)) {
    LogicalOperatorType operatorType=LogicalOperatorType.asOperator(token.getText());
    nextToken();
    expectAndAcceptMore(TokenType.whiteSpace);
    if (singleQuotedLiteralWithFunctionsText() || doubleQuotedLiteralWithFunctionsText() || functionText()|| numericValue()|| booleanValue()|| nullValue()) {
      nextToken();
      if (!token.getType().isEol()) {
        expect(TokenType.whiteSpace);
      }
    }
 else {
      throw new SimpleParserException("Logical operator " + operatorType + " does not support token "+ token,token.getIndex());
    }
    return true;
  }
  return false;
}
