{
  try {
    final ODataResponse response=writeContent(edm,uriInfo,content);
    for (    String header : response.getHeaderNames()) {
      httpEntityRequest.setHeader(header,response.getHeader(header));
    }
    if (response.getEntity() instanceof InputStream) {
      httpEntityRequest.setEntity(new InputStreamEntity((InputStream)response.getEntity()));
    }
    execute(httpEntityRequest,contentType,new AbstractFutureCallback<T>(responseHandler){
      @SuppressWarnings("unchecked") @Override public void onCompleted(      HttpResponse result) throws IOException, EntityProviderException, BatchException, ODataApplicationException {
        HttpStatusCodes statusCode=HttpStatusCodes.fromStatusCode(result.getStatusLine().getStatusCode());
        final boolean noEntity=result.getEntity() == null || result.getEntity().getContentLength() == 0;
        if (statusCode == HttpStatusCodes.NO_CONTENT || noEntity) {
          responseHandler.onResponse((T)HttpStatusCodes.fromStatusCode(result.getStatusLine().getStatusCode()));
        }
 else {
switch (uriInfo.getUriType()) {
case URI9:
            final List<BatchSingleResponse> singleResponses=EntityProvider.parseBatchResponse(result.getEntity().getContent(),result.getFirstHeader(HttpHeaders.CONTENT_TYPE).getValue());
          final List<Olingo2BatchResponse> responses=new ArrayList<Olingo2BatchResponse>();
        Map<String,String> contentIdLocationMap=new HashMap<String,String>();
      final List<Olingo2BatchRequest> batchRequests=(List<Olingo2BatchRequest>)content;
    final Iterator<Olingo2BatchRequest> iterator=batchRequests.iterator();
  for (  BatchSingleResponse response : singleResponses) {
    final Olingo2BatchRequest request=iterator.next();
    if (request instanceof Olingo2BatchChangeRequest && ((Olingo2BatchChangeRequest)request).getContentId() != null) {
      contentIdLocationMap.put("$" + ((Olingo2BatchChangeRequest)request).getContentId(),response.getHeader(HttpHeaders.LOCATION));
    }
    try {
      responses.add(parseResponse(edm,contentIdLocationMap,request,response));
    }
 catch (    Exception e) {
      responses.add(new Olingo2BatchResponse(Integer.parseInt(response.getStatusCode()),response.getStatusInfo(),response.getContentId(),response.getHeaders(),new ODataApplicationException("Error parsing response for " + request + ": "+ e.getMessage(),Locale.ENGLISH,e)));
    }
  }
responseHandler.onResponse((T)responses);
break;
case URI4:
case URI5:
final List<EdmProperty> simplePropertyPath=uriInfo.getPropertyPath();
final EdmProperty simpleProperty=simplePropertyPath.get(simplePropertyPath.size() - 1);
if (uriInfo.isValue()) {
responseHandler.onResponse((T)EntityProvider.readPropertyValue(simpleProperty,result.getEntity().getContent()));
}
 else {
responseHandler.onResponse((T)EntityProvider.readProperty(getContentType(),simpleProperty,result.getEntity().getContent(),EntityProviderReadProperties.init().build()));
}
break;
case URI3:
final List<EdmProperty> complexPropertyPath=uriInfo.getPropertyPath();
final EdmProperty complexProperty=complexPropertyPath.get(complexPropertyPath.size() - 1);
responseHandler.onResponse((T)EntityProvider.readProperty(getContentType(),complexProperty,result.getEntity().getContent(),EntityProviderReadProperties.init().build()));
break;
case URI7A:
final EdmEntitySet targetLinkEntitySet=uriInfo.getTargetEntitySet();
responseHandler.onResponse((T)EntityProvider.readLink(getContentType(),targetLinkEntitySet,result.getEntity().getContent()));
break;
case URI7B:
final EdmEntitySet targetLinksEntitySet=uriInfo.getTargetEntitySet();
responseHandler.onResponse((T)EntityProvider.readLinks(getContentType(),targetLinksEntitySet,result.getEntity().getContent()));
break;
case URI1:
case URI2:
case URI6A:
case URI6B:
responseHandler.onResponse((T)EntityProvider.readEntry(response.getContentHeader(),uriInfo.getTargetEntitySet(),result.getEntity().getContent(),EntityProviderReadProperties.init().build()));
break;
default :
throw new ODataApplicationException("Unsupported resource type " + uriInfo.getTargetType(),Locale.ENGLISH);
}
}
}
}
);
}
 catch (ODataException e) {
responseHandler.onException(e);
}
catch (URISyntaxException e) {
responseHandler.onException(e);
}
catch (UnsupportedEncodingException e) {
responseHandler.onException(e);
}
catch (IOException e) {
responseHandler.onException(e);
}
}
