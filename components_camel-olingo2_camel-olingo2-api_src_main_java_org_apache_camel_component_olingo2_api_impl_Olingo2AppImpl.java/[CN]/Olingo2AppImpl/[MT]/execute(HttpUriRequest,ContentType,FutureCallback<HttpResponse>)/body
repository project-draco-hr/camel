{
  final String contentTypeString=contentType.toString();
  if (!ContentType.APPLICATION_FORM_URLENCODED.getMimeType().equals(contentType.getMimeType()) && !contentType.getMimeType().startsWith(MULTIPART_MIME_TYPE)) {
    httpUriRequest.addHeader(HttpHeaders.ACCEPT,contentTypeString);
  }
  if (httpUriRequest instanceof HttpEntityEnclosingRequestBase && httpUriRequest.getFirstHeader(HttpHeaders.CONTENT_TYPE) == null) {
    httpUriRequest.addHeader(HttpHeaders.CONTENT_TYPE,contentTypeString);
  }
  if (httpHeaders != null && !httpHeaders.isEmpty()) {
    for (    Map.Entry<String,String> entry : httpHeaders.entrySet()) {
      httpUriRequest.setHeader(entry.getKey(),entry.getValue());
    }
  }
  if (!httpUriRequest.containsHeader(ODataHttpHeaders.DATASERVICEVERSION)) {
    httpUriRequest.addHeader(ODataHttpHeaders.DATASERVICEVERSION,ODataServiceVersion.V20);
  }
  if (!httpUriRequest.containsHeader(MAX_DATA_SERVICE_VERSION)) {
    httpUriRequest.addHeader(MAX_DATA_SERVICE_VERSION,ODataServiceVersion.V30);
  }
  if (client instanceof CloseableHttpAsyncClient) {
    ((CloseableHttpAsyncClient)client).execute(httpUriRequest,callback);
  }
 else {
    try {
      CloseableHttpResponse result=((CloseableHttpClient)client).execute(httpUriRequest);
      callback.completed(result);
    }
 catch (    IOException e) {
      callback.failed(e);
    }
  }
}
