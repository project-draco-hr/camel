{
  if (isSuspended()) {
    LOG.trace("Cannot start to poll: {} as its suspended",this.getEndpoint());
    return;
  }
  int retryCounter=-1;
  boolean done=false;
  Throwable cause=null;
  while (!done) {
    try {
      cause=null;
      done=true;
      if (isPollAllowed()) {
        if (retryCounter == -1) {
          LOG.trace("Starting to poll: {}",this.getEndpoint());
        }
 else {
          LOG.debug("Retrying attempt {} to poll: {}",retryCounter,this.getEndpoint());
        }
        polling=true;
        try {
          boolean begin=pollStrategy.begin(this,getEndpoint());
          if (begin) {
            retryCounter++;
            int polledMessages=poll();
            if (polledMessages == 0 && isSendEmptyMessageWhenIdle()) {
              processEmptyMessage();
            }
            pollStrategy.commit(this,getEndpoint(),polledMessages);
          }
 else {
            LOG.debug("Cannot begin polling as pollStrategy returned false: {}",pollStrategy);
          }
        }
  finally {
          polling=false;
        }
      }
      LOG.trace("Finished polling: {}",this.getEndpoint());
    }
 catch (    Exception e) {
      try {
        boolean retry=pollStrategy.rollback(this,getEndpoint(),retryCounter,e);
        if (retry) {
          done=false;
        }
 else {
          cause=e;
          done=true;
        }
      }
 catch (      Throwable t) {
        cause=t;
        done=true;
      }
    }
catch (    Throwable t) {
      cause=t;
      done=true;
    }
    if (cause != null && isRunAllowed()) {
      try {
        getExceptionHandler().handleException("Consumer " + this + " failed polling endpoint: "+ getEndpoint()+ ". Will try again at next poll",cause);
      }
 catch (      Throwable e) {
        LOG.warn("Error handling exception. This exception will be ignored.",e);
      }
      cause=null;
    }
  }
}
