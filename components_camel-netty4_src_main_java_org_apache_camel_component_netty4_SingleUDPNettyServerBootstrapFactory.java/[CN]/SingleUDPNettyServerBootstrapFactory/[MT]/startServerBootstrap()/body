{
  EventLoopGroup wg=configuration.getWorkerGroup();
  if (wg == null) {
    workerGroup=new NettyWorkerPoolBuilder().withWorkerCount(configuration.getWorkerCount()).withName("NettyServerTCPWorker").build();
    wg=workerGroup;
  }
  Bootstrap bootstrap=new Bootstrap();
  bootstrap.group(wg).channel(NioDatagramChannel.class);
  bootstrap.option(ChannelOption.SO_REUSEADDR,configuration.isReuseAddress());
  bootstrap.option(ChannelOption.SO_SNDBUF,configuration.getSendBufferSize());
  bootstrap.option(ChannelOption.SO_RCVBUF,configuration.getReceiveBufferSize());
  bootstrap.option(ChannelOption.SO_BROADCAST,configuration.isBroadcast());
  bootstrap.option(ChannelOption.CONNECT_TIMEOUT_MILLIS,configuration.getConnectTimeout());
  if (configuration.getReceiveBufferSizePredictor() > 0) {
    bootstrap.option(ChannelOption.RCVBUF_ALLOCATOR,new FixedRecvByteBufAllocator(configuration.getReceiveBufferSizePredictor()));
  }
  if (configuration.getBacklog() > 0) {
    bootstrap.option(ChannelOption.SO_BACKLOG,configuration.getBacklog());
  }
  Map<String,Object> options=configuration.getOptions();
  if (options != null) {
    for (    Map.Entry<String,Object> entry : options.entrySet()) {
      String value=entry.getValue().toString();
      ChannelOption<Object> option=ChannelOption.valueOf(entry.getKey());
      if (EndpointHelper.isReferenceParameter(value)) {
        String name=value.substring(1);
        Object o=CamelContextHelper.mandatoryLookup(camelContext,name);
        bootstrap.option(option,o);
      }
 else {
        bootstrap.option(ChannelOption.valueOf(entry.getKey()),value);
        bootstrap.option(option,value);
      }
    }
  }
  LOG.debug("Created Bootstrap {}",bootstrap);
  bootstrap.handler(pipelineFactory);
  InetSocketAddress hostAddress=new InetSocketAddress(configuration.getHost(),configuration.getPort());
  SubnetUtils multicastSubnet=new SubnetUtils(MULTICAST_SUBNET);
  if (multicastSubnet.getInfo().isInRange(configuration.getHost())) {
    ChannelFuture channelFuture=bootstrap.bind(configuration.getPort()).sync();
    channel=channelFuture.channel();
    DatagramChannel datagramChannel=(DatagramChannel)channel;
    String networkInterface=configuration.getNetworkInterface() == null ? LOOPBACK_INTERFACE : configuration.getNetworkInterface();
    multicastNetworkInterface=NetworkInterface.getByName(networkInterface);
    ObjectHelper.notNull(multicastNetworkInterface,"No network interface found for '" + networkInterface + "'.");
    LOG.info("ConnectionlessBootstrap joining {}:{} using network interface: {}",new Object[]{configuration.getHost(),configuration.getPort(),multicastNetworkInterface.getName()});
    datagramChannel.joinGroup(hostAddress,multicastNetworkInterface).syncUninterruptibly();
    allChannels.add(datagramChannel);
  }
 else {
    LOG.info("ConnectionlessBootstrap binding to {}:{}",configuration.getHost(),configuration.getPort());
    ChannelFuture channelFuture=bootstrap.bind(hostAddress).sync();
    channel=channelFuture.channel();
    allChannels.add(channel);
  }
}
