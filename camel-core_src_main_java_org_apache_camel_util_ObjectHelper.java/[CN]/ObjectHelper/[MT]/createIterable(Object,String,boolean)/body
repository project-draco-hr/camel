{
  if (value instanceof Message) {
    value=((Message)value).getBody();
  }
  if (value == null) {
    return Collections.emptyList();
  }
 else   if (value instanceof Iterator) {
    final Iterator<Object> iterator=(Iterator<Object>)value;
    return new Iterable<Object>(){
      @Override public Iterator<Object> iterator(){
        return iterator;
      }
    }
;
  }
 else   if (value instanceof Iterable) {
    return (Iterable<Object>)value;
  }
 else   if (value.getClass().isArray()) {
    if (isPrimitiveArrayType(value.getClass())) {
      final Object array=value;
      return new Iterable<Object>(){
        @Override public Iterator<Object> iterator(){
          return new Iterator<Object>(){
            private int idx;
            public boolean hasNext(){
              return idx < Array.getLength(array);
            }
            public Object next(){
              if (!hasNext()) {
                throw new NoSuchElementException("no more element available for '" + array + "' at the index "+ idx);
              }
              return Array.get(array,idx++);
            }
            public void remove(){
              throw new UnsupportedOperationException();
            }
          }
;
        }
      }
;
    }
 else {
      return Arrays.asList((Object[])value);
    }
  }
 else   if (value instanceof NodeList) {
    final NodeList nodeList=(NodeList)value;
    return new Iterable<Object>(){
      @Override public Iterator<Object> iterator(){
        return new Iterator<Object>(){
          private int idx;
          public boolean hasNext(){
            return idx < nodeList.getLength();
          }
          public Object next(){
            if (!hasNext()) {
              throw new NoSuchElementException("no more element available for '" + nodeList + "' at the index "+ idx);
            }
            return nodeList.item(idx++);
          }
          public void remove(){
            throw new UnsupportedOperationException();
          }
        }
;
      }
    }
;
  }
 else   if (value instanceof String) {
    final String s=(String)value;
    if (delimiter != null && s.contains(delimiter)) {
      final Scanner scanner=new Scanner((String)value);
      if (DEFAULT_DELIMITER.equals(delimiter)) {
        delimiter=",(?!(?:[^\\(,]|[^\\)],[^\\)])+\\))";
      }
      scanner.useDelimiter(delimiter);
      return new Iterable<Object>(){
        @Override public Iterator<Object> iterator(){
          return CastUtils.cast(scanner);
        }
      }
;
    }
 else {
      return new Iterable<Object>(){
        @Override public Iterator<Object> iterator(){
          return new Iterator<Object>(){
            private int idx;
            public boolean hasNext(){
              return idx == 0 && (allowEmptyValues || ObjectHelper.isNotEmpty(s));
            }
            public Object next(){
              if (!hasNext()) {
                throw new NoSuchElementException("no more element available for '" + s + "' at the index "+ idx);
              }
              idx++;
              return s;
            }
            public void remove(){
              throw new UnsupportedOperationException();
            }
          }
;
        }
      }
;
    }
  }
 else {
    return Collections.singletonList(value);
  }
}
