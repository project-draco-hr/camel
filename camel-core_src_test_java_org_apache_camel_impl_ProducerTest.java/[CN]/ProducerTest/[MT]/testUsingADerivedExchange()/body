{
  DefaultEndpoint endpoint=new DefaultEndpoint("foo",new DefaultComponent(){
    @Override protected Endpoint createEndpoint(    String uri,    String remaining,    Map parameters) throws Exception {
      return null;
    }
  }
){
    public Consumer createConsumer(    Processor processor) throws Exception {
      return null;
    }
    public Exchange createExchange(    ExchangePattern pattern){
      return new MyExchange(getCamelContext(),pattern);
    }
    public Producer createProducer() throws Exception {
      return null;
    }
    public boolean isSingleton(){
      return false;
    }
  }
;
  DefaultProducer producer=new DefaultProducer(endpoint){
    public void process(    Exchange exchange) throws Exception {
      log.debug("Received: " + exchange);
    }
  }
;
  Exchange exchange=new DefaultExchange(context);
  producer.process(exchange);
  MyExchange actual=(MyExchange)endpoint.createExchange(exchange);
  assertNotNull(actual);
  assertTrue("Not same exchange",actual != exchange);
  MyExchange expected=new MyExchange(context,pattern);
  actual=(MyExchange)endpoint.createExchange(expected);
}
