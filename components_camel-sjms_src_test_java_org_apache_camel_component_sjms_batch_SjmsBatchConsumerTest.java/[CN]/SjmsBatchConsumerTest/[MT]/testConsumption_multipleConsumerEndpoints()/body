{
  final int completionTimeout=2000;
  final int completionSize=5;
  final String queueName=getQueueName();
  context.addRoutes(new RouteBuilder(){
    public void configure() throws Exception {
      from("direct:in").split().body().multicast().toF("sjms:%s",queueName + "A").toF("sjms:%s",queueName + "B").end();
      fromF("sjmsbatch:%s?completionTimeout=%s&completionSize=%s&aggregationStrategy=#testStrategy",queueName + "A",completionTimeout,completionSize).routeId("batchConsumerA").to("mock:outA");
      fromF("sjmsbatch:%s?completionTimeout=%s&completionSize=%s&aggregationStrategy=#testStrategy",queueName + "B",completionTimeout,completionSize).routeId("batchConsumerB").to("mock:outB");
    }
  }
);
  context.start();
  int messageCount=5;
  assertTrue(messageCount < SjmsBatchEndpoint.DEFAULT_COMPLETION_SIZE);
  MockEndpoint mockOutA=getMockEndpoint("mock:outA");
  mockOutA.expectedMessageCount(1);
  MockEndpoint mockOutB=getMockEndpoint("mock:outB");
  mockOutB.expectedMessageCount(1);
  template.sendBody("direct:in",generateStrings(messageCount));
  assertMockEndpointsSatisfied();
  assertFirstMessageBodyOfLength(mockOutA,messageCount);
  assertFirstMessageBodyOfLength(mockOutB,messageCount);
}
