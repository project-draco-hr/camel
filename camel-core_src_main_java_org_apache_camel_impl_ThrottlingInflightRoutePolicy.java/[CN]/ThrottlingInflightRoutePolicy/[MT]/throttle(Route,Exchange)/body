{
  Consumer consumer=route.getConsumer();
  int size=getSize(consumer,exchange);
  boolean stop=maxInflightExchanges > 0 && size > maxInflightExchanges;
  if (log.isTraceEnabled()) {
    log.trace("{} > 0 && {} > {} evaluated as {}",new Object[]{maxInflightExchanges,size,maxInflightExchanges,stop});
  }
  if (stop) {
    try {
      lock.lock();
      stopConsumer(size,consumer);
    }
 catch (    Exception e) {
      handleException(e);
    }
 finally {
      lock.unlock();
    }
  }
  size=getSize(consumer,exchange);
  boolean start=size <= resumeInflightExchanges;
  if (log.isTraceEnabled()) {
    log.trace("{} <= {} evaluated as {}",new Object[]{size,resumeInflightExchanges,start});
  }
  if (start) {
    try {
      lock.lock();
      startConsumer(size,consumer);
    }
 catch (    Exception e) {
      handleException(e);
    }
 finally {
      lock.unlock();
    }
  }
}
