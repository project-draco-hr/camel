{
  final String originalText="Test";
  final String textToAppend="Append";
  PDDocument document=new PDDocument();
  PDPage page=new PDPage(PDPage.PAGE_SIZE_A4);
  document.addPage(page);
  PDPageContentStream contentStream=new PDPageContentStream(document,page);
  contentStream.setFont(PDType1Font.HELVETICA,12);
  contentStream.beginText();
  contentStream.moveTextPositionByAmount(20,400);
  contentStream.drawString(originalText);
  contentStream.endText();
  contentStream.close();
  template.sendBodyAndHeader("direct:start",textToAppend,PdfHeaderConstants.PDF_DOCUMENT_HEADER_NAME,document);
  resultEndpoint.setExpectedMessageCount(1);
  resultEndpoint.expectedMessagesMatches(new Predicate(){
    @Override public boolean matches(    Exchange exchange){
      Object body=exchange.getIn().getBody();
      assertThat(body,instanceOf(ByteArrayOutputStream.class));
      try {
        PDDocument doc=PDDocument.load(new ByteArrayInputStream(((ByteArrayOutputStream)body).toByteArray()));
        PDFTextStripper pdfTextStripper=new PDFTextStripper();
        String text=pdfTextStripper.getText(doc);
        assertEquals(2,doc.getNumberOfPages());
        assertThat(text,containsString(originalText));
        assertThat(text,containsString(textToAppend));
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
      return true;
    }
  }
);
  resultEndpoint.assertIsSatisfied();
}
