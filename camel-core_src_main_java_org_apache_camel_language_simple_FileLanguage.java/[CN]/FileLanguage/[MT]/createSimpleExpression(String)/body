{
  String remainder=ifStartsWithReturnRemainder("file:",expression);
  if (remainder != null) {
    if (ObjectHelper.equal(remainder,"name")) {
      return FileExpressionBuilder.fileNameExpression();
    }
 else     if (ObjectHelper.equal(remainder,"name.noext")) {
      return FileExpressionBuilder.fileNameNoExtensionExpression();
    }
 else     if (ObjectHelper.equal(remainder,"parent")) {
      return FileExpressionBuilder.fileParentExpression();
    }
 else     if (ObjectHelper.equal(remainder,"path")) {
      return FileExpressionBuilder.filePathExpression();
    }
 else     if (ObjectHelper.equal(remainder,"absolute")) {
      return FileExpressionBuilder.fileAbsoluteExpression();
    }
 else     if (ObjectHelper.equal(remainder,"canonical.path")) {
      return FileExpressionBuilder.fileCanoicalPathExpression();
    }
  }
  remainder=ifStartsWithReturnRemainder("date:",expression);
  if (remainder != null) {
    String[] parts=remainder.split(":");
    if (parts.length != 2) {
      throw new IllegalSyntaxException(this,expression + " ${date:command:pattern} is the correct syntax.");
    }
    String command=parts[0];
    String pattern=parts[1];
    return FileExpressionBuilder.dateExpression(command,pattern);
  }
  return FileExpressionBuilder.simpleExpression(expression);
}
