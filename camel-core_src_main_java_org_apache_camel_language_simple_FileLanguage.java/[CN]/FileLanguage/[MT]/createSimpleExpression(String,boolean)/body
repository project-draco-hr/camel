{
  String remainder=ifStartsWithReturnRemainder("file:",expression);
  if (remainder != null) {
    if (ObjectHelper.equal(remainder,"name")) {
      return FileExpressionBuilder.fileNameExpression();
    }
 else     if (ObjectHelper.equal(remainder,"name.noext")) {
      return FileExpressionBuilder.fileNameNoExtensionExpression();
    }
 else     if (ObjectHelper.equal(remainder,"onlyname")) {
      return FileExpressionBuilder.fileOnlyNameExpression();
    }
 else     if (ObjectHelper.equal(remainder,"onlyname.noext")) {
      return FileExpressionBuilder.fileOnlyNameNoExtensionExpression();
    }
 else     if (ObjectHelper.equal(remainder,"ext")) {
      return FileExpressionBuilder.fileExtensionExpression();
    }
 else     if (ObjectHelper.equal(remainder,"parent")) {
      return FileExpressionBuilder.fileParentExpression();
    }
 else     if (ObjectHelper.equal(remainder,"path")) {
      return FileExpressionBuilder.filePathExpression();
    }
 else     if (ObjectHelper.equal(remainder,"absolute")) {
      return FileExpressionBuilder.fileAbsoluteExpression();
    }
 else     if (ObjectHelper.equal(remainder,"absolute.path")) {
      return FileExpressionBuilder.fileAbsolutePathExpression();
    }
 else     if (ObjectHelper.equal(remainder,"length")) {
      return FileExpressionBuilder.fileSizeExpression();
    }
 else     if (ObjectHelper.equal(remainder,"modified")) {
      return FileExpressionBuilder.fileLastModifiedExpression();
    }
  }
  remainder=ifStartsWithReturnRemainder("date:",expression);
  if (remainder != null) {
    String[] parts=remainder.split(":");
    if (parts.length != 2) {
      throw new ExpressionIllegalSyntaxException("Valid syntax: ${date:command:pattern} was: " + expression);
    }
    String command=parts[0];
    String pattern=parts[1];
    return FileExpressionBuilder.dateExpression(command,pattern);
  }
  return SIMPLE.createSimpleExpression(expression,strict);
}
