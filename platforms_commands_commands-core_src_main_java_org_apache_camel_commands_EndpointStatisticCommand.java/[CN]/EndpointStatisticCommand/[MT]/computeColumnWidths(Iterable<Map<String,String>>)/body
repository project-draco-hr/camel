{
  if (endpoints == null) {
    throw new IllegalArgumentException("Unable to determine column widths from null Iterable<Endpoint>");
  }
 else {
    int maxUriLen=0;
    int maxRouteIdLen=0;
    int maxDirectionLen=0;
    int maxStaticLen=0;
    int maxDynamicLen=0;
    int maxHitsLen=0;
    for (    Map<String,String> row : endpoints) {
      final String name=row.get("camelContextName");
      String uri=row.get("uri");
      if (decode) {
        uri=URLDecoder.decode(uri,"UTF-8");
      }
      uri=URISupport.sanitizeUri(uri);
      maxUriLen=Math.max(maxUriLen,uri == null ? 0 : uri.length());
      final String routeId=row.get("routeId");
      maxRouteIdLen=Math.max(maxRouteIdLen,routeId == null ? 0 : routeId.length());
      final String direction=row.get("direction");
      maxDirectionLen=Math.max(maxDirectionLen,direction == null ? 0 : direction.length());
      final String isStatic=row.get("static");
      maxStaticLen=Math.max(maxStaticLen,isStatic == null ? 0 : isStatic.length());
      final String isDynamic=row.get("dynamic");
      maxDynamicLen=Math.max(maxDynamicLen,isDynamic == null ? 0 : isDynamic.length());
      final String hits=row.get("hits");
      maxHitsLen=Math.max(maxHitsLen,hits == null ? 0 : hits.length());
    }
    final Map<String,Integer> retval=new Hashtable<String,Integer>();
    retval.put(URI_COLUMN_LABEL,maxUriLen);
    retval.put(ROUTE_COLUMN_LABEL,maxRouteIdLen);
    retval.put(DIRECTION_COLUMN_LABEL,maxDirectionLen);
    retval.put(STATIC_COLUMN_LABEL,maxStaticLen);
    retval.put(DYNAMIC_COLUMN_LABEL,maxDynamicLen);
    retval.put(HITS_COLUMN_LABEL,maxHitsLen);
    return retval;
  }
}
