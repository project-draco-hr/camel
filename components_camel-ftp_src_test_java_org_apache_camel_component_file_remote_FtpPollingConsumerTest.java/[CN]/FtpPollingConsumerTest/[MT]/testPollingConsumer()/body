{
  MockEndpoint result=getMockEndpoint("mock:result");
  result.expectedBodiesReceivedInAnyOrder("Message 1","Message 2","Message 3","Message 4","Message 5");
  result.expectedFileExists(FTP_ROOT_DIR + "polling/done/1.txt");
  result.expectedFileExists(FTP_ROOT_DIR + "polling/done/2.txt");
  result.expectedFileExists(FTP_ROOT_DIR + "polling/done/3.txt");
  result.expectedFileExists(FTP_ROOT_DIR + "polling/done/4.txt");
  result.expectedFileExists(FTP_ROOT_DIR + "polling/done/5.txt");
  PollingConsumer consumer=context.getEndpoint(getFtpUrl()).createPollingConsumer();
  consumer.start();
  boolean done=false;
  while (!done) {
    Exchange exchange=consumer.receive(5000);
    if (exchange == null) {
      done=true;
      break;
    }
    String body=exchange.getIn().getBody(String.class);
    template.sendBody("mock:result",body);
    if (exchange.getUnitOfWork() == null) {
      UnitOfWork uow=new DefaultUnitOfWork(exchange);
      exchange.setUnitOfWork(uow);
    }
    exchange.getUnitOfWork().done(exchange);
  }
  consumer.stop();
  assertMockEndpointsSatisfied();
}
