{
  return new RouteBuilder(){
    @Override public void configure() throws Exception {
      XmlJsonDataFormat format=new XmlJsonDataFormat();
      from("direct:marshal").marshal(format).to("mock:json");
      from("direct:unmarshal").unmarshal(format).to("mock:xml");
      from("direct:marshalInline").marshal().xmljson().to("mock:jsonInline");
      from("direct:unmarshalInline").unmarshal().xmljson().to("mock:xmlInline");
      Map<String,String> xmlJsonOptions=new HashMap<String,String>();
      xmlJsonOptions.put(org.apache.camel.model.dataformat.XmlJsonDataFormat.ENCODING,"UTF-8");
      xmlJsonOptions.put(org.apache.camel.model.dataformat.XmlJsonDataFormat.FORCE_TOP_LEVEL_OBJECT,"true");
      xmlJsonOptions.put(org.apache.camel.model.dataformat.XmlJsonDataFormat.TRIM_SPACES,"true");
      xmlJsonOptions.put(org.apache.camel.model.dataformat.XmlJsonDataFormat.ROOT_NAME,"newRoot");
      xmlJsonOptions.put(org.apache.camel.model.dataformat.XmlJsonDataFormat.SKIP_NAMESPACES,"true");
      xmlJsonOptions.put(org.apache.camel.model.dataformat.XmlJsonDataFormat.REMOVE_NAMESPACE_PREFIXES,"true");
      xmlJsonOptions.put(org.apache.camel.model.dataformat.XmlJsonDataFormat.EXPANDABLE_PROPERTIES,"d e");
      from("direct:marshalInlineOptions").marshal().xmljson(xmlJsonOptions).to("mock:jsonInlineOptions");
      from("direct:unmarshalInlineOptions").unmarshal().xmljson(xmlJsonOptions).to("mock:xmlInlineOptions");
    }
  }
;
}
