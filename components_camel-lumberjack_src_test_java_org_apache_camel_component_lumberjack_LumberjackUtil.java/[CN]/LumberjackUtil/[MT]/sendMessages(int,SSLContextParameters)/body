{
  NioEventLoopGroup eventLoopGroup=new NioEventLoopGroup();
  try {
    List<Integer> responses=new ArrayList<>();
    ChannelInitializer<Channel> initializer=new ChannelInitializer<Channel>(){
      @Override protected void initChannel(      Channel ch) throws Exception {
        ChannelPipeline pipeline=ch.pipeline();
        if (sslContextParameters != null) {
          SSLEngine sslEngine=sslContextParameters.createSSLContext(null).createSSLEngine();
          sslEngine.setUseClientMode(true);
          pipeline.addLast(new SslHandler(sslEngine));
        }
        pipeline.addLast(new SimpleChannelInboundHandler<ByteBuf>(){
          @Override protected void channelRead0(          ChannelHandlerContext ctx,          ByteBuf msg) throws Exception {
            assertEquals(msg.readUnsignedByte(),(short)'2');
            assertEquals(msg.readUnsignedByte(),(short)'A');
synchronized (responses) {
              responses.add(msg.readInt());
            }
          }
        }
);
      }
    }
;
    Channel channel=new Bootstrap().group(eventLoopGroup).channel(NioSocketChannel.class).handler(initializer).connect("127.0.0.1",port).sync().channel();
    TimeUnit.MILLISECONDS.sleep(100);
    channel.writeAndFlush(readSample("io/window10"));
    TimeUnit.MILLISECONDS.sleep(100);
    channel.writeAndFlush(readSample("io/window15"));
    TimeUnit.MILLISECONDS.sleep(100);
    channel.close();
synchronized (responses) {
      return responses;
    }
  }
  finally {
    eventLoopGroup.shutdownGracefully();
  }
}
