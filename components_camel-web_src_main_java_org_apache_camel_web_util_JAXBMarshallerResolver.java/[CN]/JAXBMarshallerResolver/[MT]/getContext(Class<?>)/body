{
  try {
    JAXBContext context=contextResolver.getContext();
    Marshaller marshaller=context.createMarshaller();
    NamespacePrefixMapper namespaceMapper=new NamespacePrefixMapper(){
      /** 
 * Returns a preferred prefix for the given namespace URI.
 * This method is intended to be overrided by a derived class.
 * @param namespaceUriThe namespace URI for which the prefix needs to be found.
 * Never be null. "" is used to denote the default namespace.
 * @param suggestionWhen the content tree has a suggestion for the prefix
 * to the given namespaceUri, that suggestion is passed as a
 * parameter. Typically this value comes from QName.getPrefix()
 * to show the preference of the content tree. This parameter
 * may be null, and this parameter may represent an already
 * occupied prefix.
 * @param requirePrefixIf this method is expected to return non-empty prefix.
 * When this flag is true, it means that the given namespace URI
 * cannot be set as the default namespace.
 * @returnnull if there's no preferred prefix for the namespace URI.
 * In this case, the system will generate a prefix for you.
 * Otherwise the system will try to use the returned prefix,
 * but generally there's no guarantee if the prefix will be
 * actually used or not.
 * return "" to map this namespace URI to the default namespace.
 * Again, there's no guarantee that this preference will be
 * honored.
 * If this method returns "" when requirePrefix=true, the return
 * value will be ignored and the system will generate one.
 */
      @Override public String getPreferredPrefix(      String namespaceUri,      String suggestion,      boolean requirePrefix){
        if (namespaceUri.equals("http://camel.apache.org/schema/web")) {
          return "w";
        }
 else         if (namespaceUri.equals("http://camel.apache.org/schema/spring")) {
          if (requirePrefix) {
            return "c";
          }
          return "";
        }
 else {
          return suggestion;
        }
      }
    }
;
    marshaller.setProperty("com.sun.xml.bind.namespacePrefixMapper",namespaceMapper);
    return marshaller;
  }
 catch (  JAXBException e) {
    throw new RuntimeException(e);
  }
}
