{
  final StAX2SAXAttributes attributes=new StAX2SAXAttributes();
  try {
    while (true) {
switch (streamReader.getEventType()) {
case XMLStreamConstants.ATTRIBUTE:
        break;
case XMLStreamConstants.CDATA:
{
        if (lexicalHandler != null) {
          lexicalHandler.startCDATA();
        }
        int length=streamReader.getTextLength();
        int start=streamReader.getTextStart();
        char[] chars=streamReader.getTextCharacters();
        contentHandler.characters(chars,start,length);
        if (lexicalHandler != null) {
          lexicalHandler.endCDATA();
        }
        break;
      }
case XMLStreamConstants.CHARACTERS:
{
      int length=streamReader.getTextLength();
      int start=streamReader.getTextStart();
      char[] chars=streamReader.getTextCharacters();
      contentHandler.characters(chars,start,length);
      break;
    }
case XMLStreamConstants.SPACE:
{
    int length=streamReader.getTextLength();
    int start=streamReader.getTextStart();
    char[] chars=streamReader.getTextCharacters();
    contentHandler.ignorableWhitespace(chars,start,length);
    break;
  }
case XMLStreamConstants.COMMENT:
if (lexicalHandler != null) {
  int length=streamReader.getTextLength();
  int start=streamReader.getTextStart();
  char[] chars=streamReader.getTextCharacters();
  lexicalHandler.comment(chars,start,length);
}
break;
case XMLStreamConstants.DTD:
break;
case XMLStreamConstants.END_DOCUMENT:
contentHandler.endDocument();
return;
case XMLStreamConstants.END_ELEMENT:
{
String uri=nullToEmpty(streamReader.getNamespaceURI());
String localName=streamReader.getLocalName();
String qname=getPrefixedName(streamReader.getPrefix(),localName);
contentHandler.endElement(uri,localName,qname);
for (int i=0; i < streamReader.getNamespaceCount(); i++) {
String nsPrefix=streamReader.getNamespacePrefix(i);
contentHandler.endPrefixMapping(nsPrefix);
}
break;
}
case XMLStreamConstants.ENTITY_DECLARATION:
case XMLStreamConstants.ENTITY_REFERENCE:
case XMLStreamConstants.NAMESPACE:
case XMLStreamConstants.NOTATION_DECLARATION:
break;
case XMLStreamConstants.PROCESSING_INSTRUCTION:
break;
case XMLStreamConstants.START_DOCUMENT:
contentHandler.startDocument();
break;
case XMLStreamConstants.START_ELEMENT:
{
for (int i=0; i < streamReader.getNamespaceCount(); i++) {
String nsPrefix=streamReader.getNamespacePrefix(i);
String nsUri=nullToEmpty(streamReader.getNamespaceURI(i));
contentHandler.startPrefixMapping(nsPrefix,nsUri);
}
String uri=nullToEmpty(streamReader.getNamespaceURI());
String localName=streamReader.getLocalName();
String qname=getPrefixedName(streamReader.getPrefix(),localName);
attributes.init();
contentHandler.startElement(uri,localName,qname,attributes);
attributes.reset();
break;
}
default :
break;
}
if (!streamReader.hasNext()) {
return;
}
streamReader.next();
}
}
 catch (XMLStreamException e) {
SAXParseException spe;
if (e.getLocation() != null) {
spe=new SAXParseException(e.getMessage(),null,null,e.getLocation().getLineNumber(),e.getLocation().getColumnNumber(),e);
}
 else {
spe=new SAXParseException(e.getMessage(),null,null,-1,-1,e);
}
spe.initCause(e);
throw spe;
}
}
