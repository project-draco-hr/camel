{
  if (getCompletionTimeout() <= 0 && getCompletionInterval() <= 0 && getCompletionSize() <= 0 && getCompletionPredicate() == null && !isCompletionFromBatchConsumer() && getCompletionTimeoutExpression() == null && getCompletionSizeExpression() == null) {
    throw new IllegalStateException("At least one of the completions options" + " [completionTimeout, completionInterval, completionSize, completionPredicate, completionFromBatchConsumer] must be set");
  }
  if (getCloseCorrelationKeyOnCompletion() != null) {
    if (getCloseCorrelationKeyOnCompletion() > 0) {
      LOG.info("Using ClosedCorrelationKeys with a LRUCache with a capacity of " + getCloseCorrelationKeyOnCompletion());
      closedCorrelationKeys=new LRUCache<Object,Object>(getCloseCorrelationKeyOnCompletion());
    }
 else {
      LOG.info("Using ClosedCorrelationKeys with unbounded capacity");
      closedCorrelationKeys=new HashMap<Object,Object>();
    }
  }
  ServiceHelper.startServices(processor,aggregationRepository);
  if (aggregationRepository instanceof RecoverableAggregationRepository) {
    RecoverableAggregationRepository recoverable=(RecoverableAggregationRepository)aggregationRepository;
    if (recoverable.isUseRecovery()) {
      long interval=recoverable.getRecoveryIntervalInMillis();
      if (interval <= 0) {
        throw new IllegalArgumentException("AggregationRepository has recovery enabled and the RecoveryInterval option must be a positive number, was: " + interval);
      }
      recoverService=camelContext.getExecutorServiceManager().newScheduledThreadPool(this,"AggregateRecoverChecker",1);
      Runnable recoverTask=new RecoverTask(recoverable);
      LOG.info("Using RecoverableAggregationRepository by scheduling recover checker to run every " + interval + " millis.");
      recoverService.scheduleWithFixedDelay(recoverTask,1000L,interval,TimeUnit.MILLISECONDS);
      if (recoverable.getDeadLetterUri() != null) {
        int max=recoverable.getMaximumRedeliveries();
        if (max <= 0) {
          throw new IllegalArgumentException("Option maximumRedeliveries must be a positive number, was: " + max);
        }
        LOG.info("After " + max + " failed redelivery attempts Exchanges will be moved to deadLetterUri: "+ recoverable.getDeadLetterUri());
        Endpoint endpoint=camelContext.getEndpoint(recoverable.getDeadLetterUri());
        if (endpoint == null) {
          throw new NoSuchEndpointException(recoverable.getDeadLetterUri());
        }
        deadLetterProducerTemplate=camelContext.createProducerTemplate();
      }
    }
  }
  if (getCompletionInterval() > 0 && getCompletionTimeout() > 0) {
    throw new IllegalArgumentException("Only one of completionInterval or completionTimeout can be used, not both.");
  }
  if (getCompletionInterval() > 0) {
    LOG.info("Using CompletionInterval to run every " + getCompletionInterval() + " millis.");
    if (getTimeoutCheckerExecutorService() == null) {
      setTimeoutCheckerExecutorService(camelContext.getExecutorServiceManager().newScheduledThreadPool(this,AGGREGATE_TIMEOUT_CHECKER,1));
    }
    getTimeoutCheckerExecutorService().scheduleAtFixedRate(new AggregationIntervalTask(),getCompletionInterval(),getCompletionInterval(),TimeUnit.MILLISECONDS);
  }
  if (getCompletionTimeout() > 0 || getCompletionTimeoutExpression() != null) {
    LOG.info("Using CompletionTimeout to trigger after " + getCompletionTimeout() + " millis of inactivity.");
    if (getTimeoutCheckerExecutorService() == null) {
      setTimeoutCheckerExecutorService(camelContext.getExecutorServiceManager().newScheduledThreadPool(this,AGGREGATE_TIMEOUT_CHECKER,1));
    }
    timeoutMap=new AggregationTimeoutMap(getTimeoutCheckerExecutorService(),1000L);
    restoreTimeoutMapFromAggregationRepository();
    ServiceHelper.startService(timeoutMap);
  }
}
