{
  if (getCompletionTimeout() <= 0 && getCompletionSize() <= 0 && getCompletionPredicate() == null && !isCompletionFromBatchConsumer() && getCompletionTimeoutExpression() == null && getCompletionSizeExpression() == null) {
    throw new IllegalStateException("At least one of the completions options" + " [completionTimeout, completionSize, completionPredicate, completionFromBatchConsumer] must be set");
  }
  if (getCloseCorrelationKeyOnCompletion() != null) {
    if (getCloseCorrelationKeyOnCompletion() > 0) {
      LOG.info("Using ClosedCorrelationKeys with a LRUCache with a capacity of " + getCloseCorrelationKeyOnCompletion());
      closedCorrelationKeys=new LRUCache<Object,Object>(getCloseCorrelationKeyOnCompletion());
    }
 else {
      LOG.info("Using ClosedCorrelationKeys with unbounded capacity");
      closedCorrelationKeys=new HashMap<Object,Object>();
    }
  }
  ServiceHelper.startService(aggregationRepository);
  if (aggregationRepository instanceof RecoverableAggregationRepository) {
    RecoverableAggregationRepository<Object> recoverable=(RecoverableAggregationRepository<Object>)aggregationRepository;
    if (recoverable.isUseRecovery()) {
      long interval=recoverable.getRecoveryIntervalInMillis();
      if (interval <= 0) {
        throw new IllegalArgumentException("AggregationRepository has recovery enabled and the CheckInterval option must be a positive number, was: " + interval);
      }
      recoverService=camelContext.getExecutorServiceStrategy().newScheduledThreadPool(this,"AggregateRecoverChecker",1);
      Runnable recoverTask=new RecoverTask(recoverable);
      LOG.info("Using RecoverableAggregationRepository by scheduling recover checker to run every " + interval + " millis.");
      recoverService.scheduleAtFixedRate(recoverTask,1000L,interval,TimeUnit.MILLISECONDS);
    }
  }
  if (getCompletionTimeout() > 0 || getCompletionTimeoutExpression() != null) {
    ScheduledExecutorService scheduler=camelContext.getExecutorServiceStrategy().newScheduledThreadPool(this,"AggregateTimeoutChecker",1);
    timeoutMap=new AggregationTimeoutMap(scheduler,1000L);
    ServiceHelper.startService(timeoutMap);
  }
}
