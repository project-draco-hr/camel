{
  LOG.trace("onAggregation +++ start +++ with correlation key: {}",key);
  List<Exchange> list=new ArrayList<Exchange>();
  String complete=null;
  Exchange answer;
  Exchange originalExchange=aggregationRepository.get(newExchange.getContext(),key);
  Exchange oldExchange=originalExchange;
  Integer size=1;
  if (oldExchange != null) {
    if (optimisticLocking && aggregationRepository instanceof MemoryAggregationRepository) {
      oldExchange=originalExchange.copy();
    }
    size=oldExchange.getProperty(Exchange.AGGREGATED_SIZE,0,Integer.class);
    size++;
  }
  ExchangeHelper.prepareAggregation(oldExchange,newExchange);
  if (preCompletion) {
    try {
      newExchange.setProperty(Exchange.AGGREGATED_SIZE,size);
      complete=isPreCompleted(key,oldExchange,newExchange);
      if (complete == null) {
        trackTimeout(key,newExchange);
      }
      newExchange.removeProperty(Exchange.AGGREGATED_SIZE);
    }
 catch (    Throwable e) {
      throw new CamelExchangeException("Error occurred during preComplete",newExchange,e);
    }
  }
 else   if (isEagerCheckCompletion()) {
    newExchange.setProperty(Exchange.AGGREGATED_SIZE,size);
    complete=isCompleted(key,newExchange);
    if (complete == null) {
      trackTimeout(key,newExchange);
    }
    newExchange.removeProperty(Exchange.AGGREGATED_SIZE);
  }
  if (preCompletion && complete != null) {
    doAggregationComplete(complete,list,key,originalExchange,oldExchange);
    complete=null;
    oldExchange=null;
    originalExchange=null;
    size=1;
  }
  try {
    answer=onAggregation(oldExchange,newExchange);
  }
 catch (  Throwable e) {
    throw new CamelExchangeException("Error occurred during aggregation",newExchange,e);
  }
  if (answer == null) {
    throw new CamelExchangeException("AggregationStrategy " + aggregationStrategy + " returned null which is not allowed",newExchange);
  }
  answer.setProperty(Exchange.AGGREGATED_SIZE,size);
  if (!preCompletion && !isEagerCheckCompletion()) {
    complete=isCompleted(key,answer);
    if (complete == null) {
      trackTimeout(key,newExchange);
    }
  }
  if (complete == null) {
    doAggregationRepositoryAdd(newExchange.getContext(),key,originalExchange,answer);
  }
 else {
    doAggregationComplete(complete,list,key,originalExchange,answer);
  }
  LOG.trace("onAggregation +++  end  +++ with correlation key: {}",key);
  return list;
}
