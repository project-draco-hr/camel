{
  String addressUri=uri.startsWith("jetty:") ? remaining : uri;
  Map<String,Object> httpClientParameters=new HashMap<String,Object>(parameters);
  List<Handler> handlerList=resolveAndRemoveReferenceListParameter(parameters,"handlers",Handler.class);
  HttpBinding binding=resolveAndRemoveReferenceParameter(parameters,"httpBindingRef",HttpBinding.class);
  JettyHttpBinding jettyBinding=resolveAndRemoveReferenceParameter(parameters,"jettyHttpBindingRef",JettyHttpBinding.class);
  Boolean throwExceptionOnFailure=getAndRemoveParameter(parameters,"throwExceptionOnFailure",Boolean.class);
  Boolean transferException=getAndRemoveParameter(parameters,"transferException",Boolean.class);
  Boolean bridgeEndpoint=getAndRemoveParameter(parameters,"bridgeEndpoint",Boolean.class);
  Boolean matchOnUriPrefix=getAndRemoveParameter(parameters,"matchOnUriPrefix",Boolean.class);
  Boolean enableJmx=getAndRemoveParameter(parameters,"enableJmx",Boolean.class);
  Boolean enableMultipartFilter=getAndRemoveParameter(parameters,"enableMultipartFilter",Boolean.class,true);
  Filter multipartFilter=resolveAndRemoveReferenceParameter(parameters,"multipartFilterRef",Filter.class);
  Long continuationTimeout=getAndRemoveParameter(parameters,"continuationTimeout",Long.class);
  Boolean useContinuation=getAndRemoveParameter(parameters,"useContinuation",Boolean.class);
  HttpClient client=null;
  if (IntrospectionSupport.hasProperties(parameters,"httpClient.")) {
    client=getHttpClient();
    IntrospectionSupport.setProperties(client,parameters,"httpClient.");
    validateParameters(uri,parameters,"httpClient.");
  }
  for (  String key : parameters.keySet()) {
    httpClientParameters.remove(key);
  }
  URI endpointUri=URISupport.createRemainingURI(new URI(addressUri),CastUtils.cast(httpClientParameters));
  URI httpUri=URISupport.createRemainingURI(new URI(addressUri),CastUtils.cast(parameters));
  JettyHttpEndpoint endpoint=new JettyHttpEndpoint(this,endpointUri.toString(),httpUri);
  setEndpointHeaderFilterStrategy(endpoint);
  if (client != null) {
    endpoint.setClient(client);
  }
  if (handlerList.size() > 0) {
    endpoint.setHandlers(handlerList);
  }
  if (binding == null) {
    binding=getHttpBinding();
  }
  if (binding != null) {
    endpoint.setBinding(binding);
  }
  if (jettyBinding == null) {
    jettyBinding=getJettyHttpBinding();
  }
  if (jettyBinding != null) {
    endpoint.setJettyBinding(jettyBinding);
  }
  if (throwExceptionOnFailure != null) {
    endpoint.setThrowExceptionOnFailure(throwExceptionOnFailure);
  }
  if (transferException != null) {
    endpoint.setTransferException(transferException);
  }
  if (bridgeEndpoint != null) {
    endpoint.setBridgeEndpoint(bridgeEndpoint);
  }
  if (matchOnUriPrefix != null) {
    endpoint.setMatchOnUriPrefix(matchOnUriPrefix);
  }
  if (enableJmx != null) {
    endpoint.setEnableJmx(enableJmx);
  }
 else {
    endpoint.setEnableJmx(isEnableJmx());
  }
  endpoint.setEnableMultipartFilter(enableMultipartFilter);
  if (multipartFilter != null) {
    endpoint.setMultipartFilter(multipartFilter);
    endpoint.setEnableMultipartFilter(true);
  }
  if (continuationTimeout != null) {
    endpoint.setContinuationTimeout(continuationTimeout);
  }
  if (useContinuation != null) {
    endpoint.setUseContinuation(useContinuation);
  }
  setProperties(endpoint,parameters);
  return endpoint;
}
