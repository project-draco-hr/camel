{
  CamelHttpClient httpClient=new CamelHttpClient();
  httpClient.setConnectorType(HttpClient.CONNECTOR_SELECT_CHANNEL);
  if (System.getProperty("http.proxyHost") != null && System.getProperty("http.proxyPort") != null) {
    String host=System.getProperty("http.proxyHost");
    int port=Integer.parseInt(System.getProperty("http.proxyPort"));
    if (LOG.isDebugEnabled()) {
      LOG.debug("Java System Property http.proxyHost and http.proxyPort detected. Using http proxy host: {} port: {}",host,port);
    }
    httpClient.setProxy(new Address(host,port));
  }
  if (minThreads != null || maxThreads != null) {
    if (minThreads == null || maxThreads == null) {
      throw new IllegalArgumentException("Both min and max thread pool sizes must be provided.");
    }
    QueuedThreadPool qtp=new QueuedThreadPool();
    qtp.setMinThreads(minThreads.intValue());
    qtp.setMaxThreads(maxThreads.intValue());
    qtp.setName("CamelJettyClient(" + ObjectHelper.getIdentityHashCode(httpClient) + ")");
    try {
      qtp.start();
    }
 catch (    Exception e) {
      throw new RuntimeCamelException("Error starting JettyHttpClient thread pool: " + qtp,e);
    }
    httpClient.setThreadPool(qtp);
  }
  if (ssl != null) {
    httpClient.setSSLContext(ssl.createSSLContext());
  }
  if (LOG.isDebugEnabled()) {
    if (minThreads != null) {
      LOG.debug("Created HttpClient with thread pool {}-{} -> {}",new Object[]{minThreads,maxThreads,httpClient});
    }
 else {
      LOG.debug("Created HttpClient with default thread pool size -> {}",httpClient);
    }
  }
  return httpClient;
}
