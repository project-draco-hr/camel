{
  Exchange exchange=endpoint.createExchange();
  HttpRequestBase method=createMethod();
  if (timeout > 0) {
    HttpConnectionParams.setSoTimeout(method.getParams(),timeout);
  }
  HttpEntity responeEntity=null;
  try {
    HttpResponse response=httpClient.execute(method);
    int responseCode=response.getStatusLine().getStatusCode();
    responeEntity=response.getEntity();
    LoadingByteArrayOutputStream bos=new LoadingByteArrayOutputStream();
    InputStream is=responeEntity.getContent();
    try {
      IOHelper.copy(is,bos);
      bos.flush();
    }
  finally {
      IOHelper.close(is,"input stream",null);
    }
    Message message=exchange.getIn();
    message.setBody(bos.createInputStream());
    Header[] headers=response.getAllHeaders();
    HeaderFilterStrategy strategy=endpoint.getHeaderFilterStrategy();
    for (    Header header : headers) {
      String name=header.getName();
      String value=header.getValue();
      if (strategy != null && !strategy.applyFilterToExternalHeaders(name,value,exchange)) {
        message.setHeader(name,value);
      }
    }
    message.setHeader(Exchange.HTTP_RESPONSE_CODE,responseCode);
    return exchange;
  }
 catch (  IOException e) {
    throw new RuntimeCamelException(e);
  }
 finally {
    if (responeEntity != null) {
      try {
        responeEntity.consumeContent();
      }
 catch (      IOException e) {
      }
    }
  }
}
