{
  final Cache<Object,Object> cache=getTestCache();
  final String key=generateRandomString();
  final String val1=generateRandomString();
  final String val2=generateRandomString();
  final String val3=generateRandomString();
  cache.put(key,val1);
  MockEndpoint mock=getMockEndpoint("mock:result");
  mock.expectedMinimumMessageCount(3);
  mock.expectedHeaderValuesReceivedInAnyOrder(EhcacheConstants.ACTION_HAS_RESULT,false,false,false);
  mock.expectedHeaderValuesReceivedInAnyOrder(EhcacheConstants.ACTION_SUCCEEDED,true,false,true);
  assertEquals(val1,cache.get(key));
  fluentTemplate().clearHeaders().clearBody().withHeader(EhcacheConstants.ACTION,EhcacheConstants.ACTION_REPLACE).withHeader(EhcacheConstants.KEY,key).withBody(val2).to("direct://start").send();
  assertEquals(val2,cache.get(key));
  fluentTemplate().clearHeaders().clearBody().withHeader(EhcacheConstants.ACTION,EhcacheConstants.ACTION_REPLACE).withHeader(EhcacheConstants.KEY,key).withHeader(EhcacheConstants.OLD_VALUE,val1).withBody(val3).to("direct://start").send();
  assertEquals(val2,cache.get(key));
  fluentTemplate().clearHeaders().clearBody().withHeader(EhcacheConstants.ACTION,EhcacheConstants.ACTION_REPLACE).withHeader(EhcacheConstants.KEY,key).withHeader(EhcacheConstants.OLD_VALUE,val2).withBody(val3).to("direct://start").send();
  assertEquals(val3,cache.get(key));
  assertMockEndpointsSatisfied();
}
