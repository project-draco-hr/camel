{
  final Cache<Object,Object> cache=getTestCache();
  final String key=generateRandomString();
  final String val1=generateRandomString();
  final String val2=generateRandomString();
  MockEndpoint mock=getMockEndpoint("mock:result");
  mock.expectedMinimumMessageCount(2);
  mock.expectedBodiesReceived(val1,val2);
  mock.expectedHeaderValuesReceivedInAnyOrder(EhcacheConstants.ACTION_HAS_RESULT,false,true);
  mock.expectedHeaderValuesReceivedInAnyOrder(EhcacheConstants.ACTION_SUCCEEDED,true,true);
  mock.expectedHeaderValuesReceivedInAnyOrder(EhcacheConstants.OLD_VALUE,null,val1);
  fluentTemplate().clearHeaders().clearBody().withHeader(EhcacheConstants.ACTION,EhcacheConstants.ACTION_PUT_IF_ABSENT).withHeader(EhcacheConstants.KEY,key).withBody(val1).to("direct://start").send();
  fluentTemplate().clearHeaders().clearBody().withHeader(EhcacheConstants.ACTION,EhcacheConstants.ACTION_PUT_IF_ABSENT).withHeader(EhcacheConstants.KEY,key).withBody(val2).to("direct://start").send();
  assertMockEndpointsSatisfied();
  assertTrue(cache.containsKey(key));
  assertEquals(val1,cache.get(key));
}
