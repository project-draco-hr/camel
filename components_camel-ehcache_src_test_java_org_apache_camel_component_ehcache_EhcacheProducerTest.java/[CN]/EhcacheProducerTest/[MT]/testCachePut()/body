{
  final Cache<Object,Object> cache=getCache(TEST_CACHE_NAME);
  final String key=generateRandomString();
  final String val=generateRandomString();
  MockEndpoint mock=getMockEndpoint("mock:result");
  mock.expectedMinimumMessageCount(1);
  mock.expectedBodiesReceived(val);
  mock.expectedHeaderReceived(EhcacheConstants.ACTION_HAS_RESULT,false);
  mock.expectedHeaderReceived(EhcacheConstants.ACTION_SUCCEEDED,true);
  fluentTemplate().withHeader(EhcacheConstants.ACTION,EhcacheConstants.ACTION_PUT).withHeader(EhcacheConstants.KEY,key).withBody(val).to("direct://start").send();
  assertMockEndpointsSatisfied();
  assertTrue(cache.containsKey(key));
  assertEquals(val,cache.get(key));
}
