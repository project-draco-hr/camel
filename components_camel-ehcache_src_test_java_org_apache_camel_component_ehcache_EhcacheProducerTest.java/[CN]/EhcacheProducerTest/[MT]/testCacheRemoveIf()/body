{
  final Cache<Object,Object> cache=getCache(TEST_CACHE_NAME);
  final String key=generateRandomString();
  final String val1=generateRandomString();
  final String val2=generateRandomString();
  cache.put(key,val1);
  MockEndpoint mock=getMockEndpoint("mock:result");
  mock.expectedMinimumMessageCount(2);
  mock.expectedHeaderValuesReceivedInAnyOrder(EhcacheConstants.ACTION_HAS_RESULT,false,false);
  mock.expectedHeaderValuesReceivedInAnyOrder(EhcacheConstants.ACTION_SUCCEEDED,false,true);
  fluentTemplate().clearHeaders().clearBody().withHeader(EhcacheConstants.ACTION,EhcacheConstants.ACTION_REMOVE).withHeader(EhcacheConstants.KEY,key).withHeader(EhcacheConstants.OLD_VALUE,val2).to("direct://start").send();
  assertTrue(cache.containsKey(key));
  fluentTemplate().clearHeaders().clearBody().withHeader(EhcacheConstants.ACTION,EhcacheConstants.ACTION_REMOVE).withHeader(EhcacheConstants.KEY,key).withHeader(EhcacheConstants.OLD_VALUE,val1).to("direct://start").send();
  assertMockEndpointsSatisfied();
  assertFalse(cache.containsKey(key));
}
