{
  SslContextFactory sslContextFactory=createSslContextFactory(ssl);
  HttpClientTransport transport=createHttpClientTransport(maxThreads);
  CamelHttpClient httpClient=createCamelHttpClient(transport,sslContextFactory);
  CamelContext context=endpoint.getCamelContext();
  if (context != null && ObjectHelper.isNotEmpty(context.getProperty("http.proxyHost")) && ObjectHelper.isNotEmpty(context.getProperty("http.proxyPort"))) {
    String host=context.getProperty("http.proxyHost");
    int port=Integer.parseInt(context.getProperty("http.proxyPort"));
    LOG.debug("CamelContext properties http.proxyHost and http.proxyPort detected. Using http proxy host: {} port: {}",host,port);
    httpClient.setProxy(host,port);
  }
  if (ObjectHelper.isNotEmpty(endpoint.getProxyHost()) && endpoint.getProxyPort() > 0) {
    String host=endpoint.getProxyHost();
    int port=endpoint.getProxyPort();
    LOG.debug("proxyHost and proxyPort options detected. Using http proxy host: {} port: {}",host,port);
    httpClient.setProxy(host,port);
  }
  if (minThreads != null || maxThreads != null) {
    if (minThreads == null || maxThreads == null) {
      throw new IllegalArgumentException("Both min and max thread pool sizes must be provided.");
    }
    QueuedThreadPool qtp=new QueuedThreadPool();
    qtp.setMinThreads(minThreads.intValue());
    qtp.setMaxThreads(maxThreads.intValue());
    qtp.setDaemon(true);
    qtp.setName("CamelJettyClient(" + ObjectHelper.getIdentityHashCode(httpClient) + ")");
    httpClient.setThreadPoolOrExecutor(qtp);
  }
  if (LOG.isDebugEnabled()) {
    if (minThreads != null) {
      LOG.debug("Created HttpClient with thread pool {}-{} -> {}",new Object[]{minThreads,maxThreads,httpClient});
    }
 else {
      LOG.debug("Created HttpClient with default thread pool size -> {}",httpClient);
    }
  }
  return httpClient;
}
