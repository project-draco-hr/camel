{
  if (isPlatform("aix")) {
    return;
  }
  getMockEndpoint("mock:foo").whenExchangeReceived(1,new Processor(){
    @Override public void process(    Exchange exchange) throws Exception {
      throw new SQLException("Forced");
    }
  }
);
  MockEndpoint foo=getMockEndpoint("mock:foo");
  foo.expectedBodiesReceived("Hello World","Bye World");
  try {
    template.sendBodyAndHeader("direct:start","Hello World","foo","123");
    fail("Should fail");
  }
 catch (  Exception e) {
    assertIsInstanceOf(SQLException.class,e.getCause());
    assertEquals("Forced",e.getCause().getMessage());
  }
  template.sendBodyAndHeader("direct:start","Bye World","foo","123");
  assertMockEndpointsSatisfied();
  MBeanServer mbeanServer=getMBeanServer();
  ObjectName on=ObjectName.getInstance("org.apache.camel:context=camel-1,type=processors,name=\"mysend\"");
  String routeId=(String)mbeanServer.getAttribute(on,"RouteId");
  assertEquals("route1",routeId);
  String camelId=(String)mbeanServer.getAttribute(on,"CamelId");
  assertEquals("camel-1",camelId);
  String state=(String)mbeanServer.getAttribute(on,"State");
  assertEquals(ServiceStatus.Started.name(),state);
  Integer size=(Integer)mbeanServer.getAttribute(on,"Size");
  assertEquals(1,size.intValue());
  Long half=(Long)mbeanServer.getAttribute(on,"HalfOpenAfter");
  assertEquals(5000,half.longValue());
  Integer attempts=(Integer)mbeanServer.getAttribute(on,"Threshold");
  assertEquals(2,attempts.intValue());
  String exceptions=(String)mbeanServer.getAttribute(on,"Exceptions");
  assertEquals("java.io.IOException,java.sql.SQLException",exceptions);
  String cbState=(String)mbeanServer.getAttribute(on,"CircuitBreakerState");
  assertEquals("closed",cbState);
  String dump=(String)mbeanServer.invoke(on,"dumpState",null,null);
  assertTrue(dump.startsWith("State closed, failures 0, closed since"));
  TabularData data=(TabularData)mbeanServer.invoke(on,"exceptionStatistics",null,null);
  assertNotNull(data);
  assertEquals(2,data.size());
  data=(TabularData)mbeanServer.invoke(on,"explain",new Object[]{false},new String[]{"boolean"});
  assertNotNull(data);
  assertEquals(2,data.size());
  data=(TabularData)mbeanServer.invoke(on,"explain",new Object[]{true},new String[]{"boolean"});
  assertNotNull(data);
  assertEquals(5,data.size());
  String json=(String)mbeanServer.invoke(on,"informationJson",null,null);
  assertNotNull(json);
  assertTrue(json.contains("\"description\": \"Balances message processing among a number of nodes"));
}
