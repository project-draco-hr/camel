{
  getMockEndpoint("mock:result").setExpectedCount(1);
  CloudBalancingGenerator generator=new CloudBalancingGenerator(true);
  final CloudBalance planningProblem=generator.createCloudBalance(4,12);
  assertNull(planningProblem.getScore());
  assertNull(planningProblem.getProcessList().get(0).getComputer());
  template.requestBody("direct:in",planningProblem);
  getMockEndpoint("mock:result").assertIsSatisfied();
  getMockEndpoint("mock:result").reset();
  getMockEndpoint("mock:result").setExpectedCount(1);
  template.requestBody("direct:in",new ProblemFactChange(){
    @Override public void doChange(    ScoreDirector scoreDirector){
      CloudBalance cloudBalance=(CloudBalance)scoreDirector.getWorkingSolution();
      CloudComputer computer=null;
      for (      CloudProcess process : cloudBalance.getProcessList()) {
        computer=process.getComputer();
        if (ObjectUtils.equals(process.getComputer(),computer)) {
          scoreDirector.beforeVariableChanged(process,"computer");
          process.setComputer(null);
          scoreDirector.afterVariableChanged(process,"computer");
        }
      }
      cloudBalance.setComputerList(new ArrayList<CloudComputer>(cloudBalance.getComputerList()));
      for (Iterator<CloudComputer> it=cloudBalance.getComputerList().iterator(); it.hasNext(); ) {
        CloudComputer workingComputer=it.next();
        if (ObjectUtils.equals(workingComputer,computer)) {
          scoreDirector.beforeProblemFactRemoved(workingComputer);
          it.remove();
          scoreDirector.beforeProblemFactRemoved(workingComputer);
          break;
        }
      }
    }
  }
);
  getMockEndpoint("mock:result").assertIsSatisfied();
  CloudBalance bestSolution=(CloudBalance)template.requestBody("direct:in","foo");
  assertEquals(3,bestSolution.getComputerList().size());
}
