{
  QName qname=QName.valueOf("{http://apache.org/camel/component/cxf/soap/headers}SOAPHeaderInfo");
  String uri="cxf:bean:routerNoRelayNoServiceClassEndpoint?headerFilterStrategy=#dropAllMessageHeadersStrategy";
  String requestHeader="<ns2:SOAPHeaderInfo xmlns:ns2=\"http://apache.org/camel/" + "component/cxf/soap/headers\"><originator>CxfSoapHeaderRoutePropagationTest.testInOutHeader Requestor" + "</originator><message>Invoking CxfSoapHeaderRoutePropagationTest.testInOutHeader() Request"+ "</message></ns2:SOAPHeaderInfo>";
  String requestBody="<ns2:inoutHeader xmlns:ns2=\"http://apache.org/camel/component/cxf/soap/headers\">" + "<requestType>CXF user</requestType></ns2:inoutHeader>";
  List<Source> elements=new ArrayList<Source>();
  elements.add(new DOMSource(StaxUtils.read(new StringReader(requestBody)).getDocumentElement()));
  final List<SoapHeader> headers=new ArrayList<SoapHeader>();
  headers.add(new SoapHeader(qname,StaxUtils.read(new StringReader(requestHeader)).getDocumentElement()));
  final CxfPayload<SoapHeader> cxfPayload=new CxfPayload<SoapHeader>(headers,elements,null);
  Exchange exchange=template.request(uri,new Processor(){
    public void process(    Exchange exchange) throws Exception {
      exchange.getIn().setBody(cxfPayload);
      exchange.getIn().setHeader(CxfConstants.OPERATION_NAME,"inoutHeader");
      exchange.getIn().setHeader(Header.HEADER_LIST,headers);
    }
  }
);
  CxfPayload<?> out=exchange.getOut().getBody(CxfPayload.class);
  assertEquals(1,out.getBodySources().size());
  assertTrue(out.getBodySources().get(0) instanceof DOMSource);
  assertEquals(0,out.getHeaders().size());
  String responseExp="<ns2:inoutHeaderResponse xmlns:ns2=\"http://apache.org/camel/" + "component/cxf/soap/headers\"><responseType>pass</responseType>" + "</ns2:inoutHeaderResponse>";
  String response=StaxUtils.toString(out.getBody().get(0));
  assertTrue(response,response.contains(responseExp));
}
