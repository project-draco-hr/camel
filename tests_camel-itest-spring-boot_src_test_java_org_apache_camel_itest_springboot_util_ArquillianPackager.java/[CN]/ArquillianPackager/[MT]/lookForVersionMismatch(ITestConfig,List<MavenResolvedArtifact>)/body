{
  Set<String> ignore=new HashSet<>();
  ignore.addAll(config.getIgnoreLibraryMismatch());
  ignore.add("org.apache.commons");
  ignore.add("commons-beanutils:commons-beanutils");
  ignore.add("io.netty:netty:jar");
  ignore.add("xml-apis:xml-apis-ext");
  ignore.add("org.scala-lang:scala-compiler");
  ignore.add("org.mortbay.jetty:servlet-api-2.5");
  ignore.add("org.apache.geronimo.specs");
  ignore.add("org.apache.qpid:qpid-jms-client");
  ignore.add("com.github.jnr");
  ignore.add("stax:stax-api");
  ignore.add("net.openhft");
  ignore.add("org.easytesting");
  ignore.add("com.sun.xml.bind:jaxb-xjc");
  ignore.add("io.swagger:swagger-parser");
  ignore.add("io.fabric8:kubernetes-");
  ignore.add("org.apache.maven");
  ignore.add("org.codehaus.plexus");
  ignore.add("org.jboss.arquillian.container");
  ignore.add("org.apache.curator");
  ignore.add("org.apache.parquet");
  ignore.add("org.springframework.data");
  ignore.add("org.apache.velocity");
  ignore.add("org.apache.cxf:cxf-api");
  Map<String,Map<String,String>> status=new TreeMap<>();
  Set<String> mismatches=new TreeSet<>();
  for (  MavenResolvedArtifact a : dependencyArtifacts) {
    boolean ignoreCheck=false;
    for (    String i : ignore) {
      if (getIdentifier(a).startsWith(i)) {
        ignoreCheck=true;
        break;
      }
    }
    if (ignoreCheck) {
      continue;
    }
    String group=a.getCoordinate().getGroupId();
    String artifact=a.getCoordinate().getArtifactId();
    String version=a.getCoordinate().getVersion();
    String artifactPrefix=artifact;
    if (artifactPrefix.contains("-")) {
      artifactPrefix=artifactPrefix.substring(0,artifactPrefix.indexOf("-"));
    }
    String prefixId=group + ":" + artifactPrefix;
    if (!status.containsKey(prefixId)) {
      status.put(prefixId,new TreeMap<>());
    }
    for (    String anotherVersion : status.get(prefixId).values()) {
      if (!sameVersion(anotherVersion,version)) {
        mismatches.add(prefixId);
      }
    }
    status.get(prefixId).put(getIdentifier(a),version);
  }
  StringBuilder message=new StringBuilder();
  for (  String mismatch : mismatches) {
    message.append("Found mismatch for dependency " + mismatch + ":\n");
    for (    String art : status.get(mismatch).keySet()) {
      String ver=status.get(mismatch).get(art);
      message.append(" - " + art + " --> "+ ver+ "\n");
    }
  }
  if (message.length() > 0) {
    String alert="Library version mismatch found.\n" + message;
    if (FAIL_ON_RELATED_LIBRARY_MISMATCH) {
      throw new RuntimeException(alert);
    }
 else {
      debug(alert);
    }
  }
}
