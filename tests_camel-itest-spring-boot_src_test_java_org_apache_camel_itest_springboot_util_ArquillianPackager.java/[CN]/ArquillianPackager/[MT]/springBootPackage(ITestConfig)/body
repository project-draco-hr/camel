{
  if (!new File(".").getCanonicalFile().getName().equals("camel-itest-spring-boot")) {
    throw new IllegalStateException("In order to run the integration tests, 'camel-itest-spring-boot' must be the working directory. Check your configuration.");
  }
  ExtensionLoader extensionLoader=new ServiceExtensionLoader(Collections.singleton(getExtensionClassloader()));
  extensionLoader.addOverride(ZipExporter.class,SpringBootZipExporterImpl.class);
  ConfigurationBuilder builder=new ConfigurationBuilder().extensionLoader(extensionLoader);
  Configuration conf=builder.build();
  Domain domain=ShrinkWrap.createDomain(conf);
  JavaArchive ark=domain.getArchiveFactory().create(JavaArchive.class,"test.jar");
  ark=ark.addAsManifestResource("BOOT-MANIFEST.MF","MANIFEST.MF");
  ark=ark.addAsDirectories(LIB_FOLDER);
  if (!CLASSES_FOLDER.equals("")) {
    ark=ark.addAsDirectories(CLASSES_FOLDER);
  }
  if (config.getUseCustomLog()) {
    ark=ark.addAsResource("spring-logback.xml",CLASSES_FOLDER + "/spring-logback.xml");
  }
  for (  Map.Entry<String,String> res : config.getResources().entrySet()) {
    ark=ark.addAsResource(res.getKey(),CLASSES_FOLDER + "/" + res.getValue());
  }
  String version=System.getProperty("version_org.apache.camel:camel-core");
  if (version == null) {
    config.getMavenVersion();
  }
  if (version == null) {
    List<MavenResolvedArtifact> resolved=Arrays.asList(resolver(config).loadPomFromFile("pom.xml").importRuntimeDependencies().resolve().withoutTransitivity().asResolvedArtifact());
    for (    MavenResolvedArtifact dep : resolved) {
      if (dep.getCoordinate().getGroupId().equals("org.apache.camel")) {
        version=dep.getCoordinate().getVersion();
        break;
      }
    }
  }
  debug("Resolved version: " + version);
  if (version == null) {
    throw new IllegalStateException("Cannot determine the current version of the camel component");
  }
  List<MavenDependencyExclusion> commonExclusions=new LinkedList<>();
  commonExclusions.add(MavenDependencies.createExclusion("commons-logging","commons-logging"));
  commonExclusions.add(MavenDependencies.createExclusion("org.slf4j","slf4j-log4j12"));
  commonExclusions.add(MavenDependencies.createExclusion("log4j","log4j"));
  commonExclusions.add(MavenDependencies.createExclusion("log4j","log4j-slf4j-impl"));
  commonExclusions.add(MavenDependencies.createExclusion("org.apache.logging.log4j","log4j"));
  commonExclusions.add(MavenDependencies.createExclusion("org.apache.logging.log4j","log4j-core"));
  commonExclusions.add(MavenDependencies.createExclusion("org.apache.logging.log4j","log4j-slf4j-impl"));
  commonExclusions.add(MavenDependencies.createExclusion("log4j","apache-log4j-extras"));
  commonExclusions.add(MavenDependencies.createExclusion("org.slf4j","slf4j-simple"));
  commonExclusions.add(MavenDependencies.createExclusion("org.slf4j","slf4j-jdk14"));
  commonExclusions.add(MavenDependencies.createExclusion("ch.qos.logback","logback-classic"));
  commonExclusions.add(MavenDependencies.createExclusion("ch.qos.logback","logback-core"));
  for (  String ex : config.getMavenExclusions()) {
    commonExclusions.add(MavenDependencies.createExclusion(ex));
  }
  List<MavenDependency> additionalDependencies=new LinkedList<>();
  for (  String canonicalForm : config.getAdditionalDependencies()) {
    MavenCoordinate coord=MavenCoordinates.createCoordinate(canonicalForm);
    MavenDependency dep=MavenDependencies.createDependency(coord,ScopeType.RUNTIME,false);
    additionalDependencies.add(dep);
  }
  List<String> testProvidedDependenciesXml=new LinkedList<>();
  List<ScopeType> scopes=new LinkedList<>();
  if (config.getIncludeProvidedDependencies() || config.getIncludeTestDependencies() || config.getUnitTestEnabled()) {
    if (config.getIncludeTestDependencies() || config.getUnitTestEnabled()) {
      testProvidedDependenciesXml.addAll(DependencyResolver.getDependencies(config.getModuleBasePath() + "/pom.xml",ScopeType.TEST.toString()));
      scopes.add(ScopeType.TEST);
    }
    if (config.getIncludeProvidedDependencies()) {
      testProvidedDependenciesXml.addAll(DependencyResolver.getDependencies(config.getModuleBasePath() + "/pom.xml",ScopeType.PROVIDED.toString()));
      scopes.add(ScopeType.PROVIDED);
    }
  }
  List<String> cleanTestProvidedDependenciesXml=new LinkedList<>();
  for (  String depXml : testProvidedDependenciesXml) {
    if (validTestDependency(config,depXml,commonExclusions)) {
      depXml=enforceExclusions(config,depXml,commonExclusions);
      depXml=switchToStarterIfPresent(config,depXml);
      cleanTestProvidedDependenciesXml.add(depXml);
    }
  }
  List<MavenResolvedArtifact> testDependencies=new LinkedList<>();
  if (!cleanTestProvidedDependenciesXml.isEmpty()) {
    File testProvidedResolverPom=createResolverPom(config,cleanTestProvidedDependenciesXml);
    testDependencies.addAll(Arrays.asList(resolver(config).loadPomFromFile(testProvidedResolverPom).importDependencies(scopes.toArray(new ScopeType[0])).resolve().withTransitivity().asResolvedArtifact()));
  }
  File moduleSpringBootPom=createUserPom(config);
  List<MavenResolvedArtifact> runtimeDependencies=new LinkedList<>();
  runtimeDependencies.addAll(Arrays.asList(resolver(config).loadPomFromFile(moduleSpringBootPom).importRuntimeDependencies().addDependencies(additionalDependencies).resolve().withTransitivity().asResolvedArtifact()));
  List<MavenResolvedArtifact> dependencyArtifacts=merge(config,runtimeDependencies,testDependencies);
  lookForVersionMismatch(config,dependencyArtifacts);
  List<File> dependencies=new LinkedList<>();
  for (  MavenResolvedArtifact a : dependencyArtifacts) {
    dependencies.add(a.asFile());
  }
  excludeDependencyRegex(dependencies,"^spring-boot-loader-[0-9].*");
  ark=addDependencies(ark,dependencies);
  ark=ark.addPackages(true,"org.jboss.shrinkwrap");
  ark=ark.addPackages(true,"org.apache.camel.itest.springboot");
  ark=addSpringbootPackage(ark,"org.apache.camel.itest.springboot");
  ark=ark.addPackages(true,"org.apache.camel.converter.myconverter");
  ark=ark.addPackages(true,"org.springframework.boot.loader");
  ClassPath.Builder external=ClassPath.builder().add(ark);
  external.addSystemProperty("javax.xml.accessExternalDTD","all");
  external.addSystemProperty("javax.xml.accessExternalSchema","all");
  if (config.getUnitTestEnabled()) {
    external.addSystemProperty("container.user.dir",new File(config.getModuleBasePath()).getCanonicalPath());
    external.addSystemProperty("container.test.resources.dir",new File(config.getModuleBasePath()).getCanonicalPath() + "/target/test-classes");
  }
  for (  Map.Entry<Object,Object> e : System.getProperties().entrySet()) {
    if (e.getKey() instanceof String && e.getValue() instanceof String) {
      String key=(String)e.getKey();
      if (key.startsWith(ITestConfigBuilder.CONFIG_PREFIX)) {
        external.addSystemProperty(key,(String)e.getValue());
      }
    }
  }
  for (  Map.Entry<String,String> e : config.getSystemProperties().entrySet()) {
    external.addSystemProperty(e.getKey(),e.getValue());
  }
  return external.build();
}
