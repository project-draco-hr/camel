{
  ExtensionLoader extensionLoader=new ServiceExtensionLoader(Collections.singleton(getExtensionClassloader()));
  extensionLoader.addOverride(ZipExporter.class,SpringBootZipExporterImpl.class);
  ConfigurationBuilder builder=new ConfigurationBuilder().extensionLoader(extensionLoader);
  Configuration conf=builder.build();
  Domain domain=ShrinkWrap.createDomain(conf);
  JavaArchive ark=domain.getArchiveFactory().create(JavaArchive.class,"test.jar");
  ark=ark.addAsManifestResource("BOOT-MANIFEST.MF","MANIFEST.MF");
  ark=ark.addAsDirectories(LIB_FOLDER);
  if (!CLASSES_FOLDER.equals("")) {
    ark=ark.addAsDirectories(CLASSES_FOLDER);
  }
  if (config.getUseCustomLog()) {
    ark=ark.addAsResource("spring-logback.xml",CLASSES_FOLDER + "/spring-logback.xml");
  }
  for (  Map.Entry<String,String> res : config.getResources().entrySet()) {
    ark=ark.addAsResource(res.getKey(),CLASSES_FOLDER + "/" + res.getValue());
  }
  String version=System.getProperty("version_org.apache.camel:camel-core");
  if (version == null) {
    config.getMavenVersion();
  }
  if (version == null) {
    List<MavenResolvedArtifact> resolved=Arrays.asList(resolver(config).loadPomFromFile("pom.xml").importRuntimeDependencies().resolve().withoutTransitivity().asResolvedArtifact());
    for (    MavenResolvedArtifact dep : resolved) {
      if (dep.getCoordinate().getGroupId().equals("org.apache.camel")) {
        version=dep.getCoordinate().getVersion();
        break;
      }
    }
  }
  debug("Resolved version: " + version);
  if (version == null) {
    throw new IllegalStateException("Cannot determine the current version of the camel component");
  }
  List<MavenDependencyExclusion> commonExclusions=new LinkedList<>();
  commonExclusions.add(MavenDependencies.createExclusion("org.slf4j","slf4j-log4j12"));
  commonExclusions.add(MavenDependencies.createExclusion("log4j","log4j"));
  commonExclusions.add(MavenDependencies.createExclusion("log4j","log4j-slf4j-impl"));
  commonExclusions.add(MavenDependencies.createExclusion("org.apache.logging.log4j","log4j"));
  commonExclusions.add(MavenDependencies.createExclusion("org.apache.logging.log4j","log4j-core"));
  commonExclusions.add(MavenDependencies.createExclusion("org.apache.logging.log4j","log4j-slf4j-impl"));
  commonExclusions.add(MavenDependencies.createExclusion("log4j","apache-log4j-extras"));
  commonExclusions.add(MavenDependencies.createExclusion("org.slf4j","slf4j-simple"));
  commonExclusions.add(MavenDependencies.createExclusion("org.slf4j","slf4j-jdk14"));
  commonExclusions.add(MavenDependencies.createExclusion("ch.qos.logback","logback-classic"));
  commonExclusions.add(MavenDependencies.createExclusion("ch.qos.logback","logback-core"));
  for (  String ex : config.getMavenExclusions()) {
    commonExclusions.add(MavenDependencies.createExclusion(ex));
  }
  MavenDependencyExclusion[] commonExclutionArray=commonExclusions.toArray(new MavenDependencyExclusion[]{});
  List<MavenDependency> moduleDependencies=new LinkedList<>();
  for (  String canonicalForm : config.getAdditionalDependencies()) {
    MavenCoordinate coord=MavenCoordinates.createCoordinate(canonicalForm);
    MavenDependency dep=MavenDependencies.createDependency(coord,ScopeType.RUNTIME,false);
    moduleDependencies.add(dep);
  }
  if (config.getIncludeProvidedDependencies() || config.getIncludeTestDependencies() || config.getUnitTestEnabled()) {
    StringBuilder dependencies=new StringBuilder();
    List<ScopeType> scopes=new LinkedList<>();
    if (config.getIncludeTestDependencies() || config.getUnitTestEnabled()) {
      dependencies.append(DependencyResolver.getDependencies(config.getModuleBasePath() + "/pom.xml",ScopeType.TEST.toString()));
      scopes.add(ScopeType.TEST);
    }
    if (config.getIncludeProvidedDependencies()) {
      dependencies.append(DependencyResolver.getDependencies(config.getModuleBasePath() + "/pom.xml",ScopeType.PROVIDED.toString()));
      scopes.add(ScopeType.PROVIDED);
    }
    File resolverFile=createResolverPom(config,dependencies.toString());
    boolean failIfNoDependencies=false;
    List<MavenResolvedArtifact> moduleArtifacts;
    try {
      moduleArtifacts=Arrays.asList(resolver(config).loadPomFromFile(resolverFile).importDependencies(scopes.toArray(new ScopeType[0])).resolve().withoutTransitivity().asResolvedArtifact());
    }
 catch (    IllegalArgumentException e) {
      if (failIfNoDependencies) {
        throw e;
      }
      debug("Error while getting dependencies for test or optional scopes. Message=" + e.getMessage());
      moduleArtifacts=new LinkedList<>();
    }
    List<MavenCoordinate> coordinates=new LinkedList<>();
    for (    MavenResolvedArtifact art : moduleArtifacts) {
      MavenCoordinate coord=art.getCoordinate();
      if (!validTestDependency(config,coord)) {
        continue;
      }
      coordinates.add(coord);
    }
    for (    MavenCoordinate c : coordinates) {
      Set<String> pomExclusions=DependencyResolver.getExclusions(config.getModuleBasePath() + "/pom.xml",c.getGroupId(),c.getArtifactId());
      MavenDependencyExclusion[] artExclusions;
      if (pomExclusions.isEmpty()) {
        artExclusions=commonExclutionArray;
      }
 else {
        List<MavenDependencyExclusion> specificExclusions=new LinkedList<>(Arrays.asList(commonExclutionArray));
        for (        String spEx : pomExclusions) {
          specificExclusions.add(MavenDependencies.createExclusion(spEx));
        }
        artExclusions=specificExclusions.toArray(new MavenDependencyExclusion[]{});
      }
      MavenDependency dep=MavenDependencies.createDependency(c,ScopeType.RUNTIME,false,artExclusions);
      moduleDependencies.add(dep);
    }
  }
  File moduleSpringBootPom=createUserPom(config);
  List<File> dependencies=new LinkedList<>();
  dependencies.addAll(Arrays.asList(resolver(config).loadPomFromFile(moduleSpringBootPom).importRuntimeDependencies().addDependencies(moduleDependencies).resolve().withTransitivity().asFile()));
  excludeDependencyRegex(dependencies,"^spring-boot-loader-[0-9].*");
  ark=addDependencies(ark,dependencies);
  ark=ark.addPackages(true,"org.jboss.shrinkwrap");
  ark=ark.addPackages(true,"org.apache.camel.itest.springboot");
  ark=addSpringbootPackage(ark,"org.apache.camel.itest.springboot");
  ark=ark.addPackages(true,"org.apache.camel.converter.myconverter");
  ark=ark.addPackages(true,"org.springframework.boot.loader");
  ClassPath.Builder external=ClassPath.builder().add(ark);
  external.addSystemProperty("javax.xml.accessExternalDTD","all");
  external.addSystemProperty("javax.xml.accessExternalSchema","all");
  if (config.getUnitTestEnabled()) {
    external.addSystemProperty("container.user.dir",new File(config.getModuleBasePath()).getCanonicalPath());
    external.addSystemProperty("container.test.resources.dir",new File(config.getModuleBasePath()).getCanonicalPath() + "/target/test-classes");
  }
  for (  Map.Entry<Object,Object> e : System.getProperties().entrySet()) {
    if (e.getKey() instanceof String && e.getValue() instanceof String) {
      String key=(String)e.getKey();
      if (key.startsWith(ITestConfigBuilder.CONFIG_PREFIX)) {
        external.addSystemProperty(key,(String)e.getValue());
      }
    }
  }
  for (  Map.Entry<String,String> e : config.getSystemProperties().entrySet()) {
    external.addSystemProperty(e.getKey(),e.getValue());
  }
  return external.build();
}
