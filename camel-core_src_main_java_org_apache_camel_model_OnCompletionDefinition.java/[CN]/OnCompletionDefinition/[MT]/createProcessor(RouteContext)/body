{
  if (routeScoped == null) {
    routeScoped=super.getParent() != null;
  }
  if (isOnCompleteOnly() && isOnFailureOnly()) {
    throw new IllegalArgumentException("Both onCompleteOnly and onFailureOnly cannot be true. Only one of them can be true. On node: " + this);
  }
  String routeId=routeContext.getRoute().idOrCreate(routeContext.getCamelContext().getNodeIdFactory());
  Processor childProcessor=this.createChildProcessor(routeContext,true);
  CamelInternalProcessor internal=new CamelInternalProcessor(childProcessor);
  internal.addAdvice(new CamelInternalProcessor.UnitOfWorkProcessorAdvice(routeId));
  internal.addAdvice(new CamelInternalProcessor.RouteContextAdvice(routeContext));
  onCompletions.put(routeId,internal);
  Predicate when=null;
  if (onWhen != null) {
    when=onWhen.getExpression().createPredicate(routeContext);
  }
  boolean shutdownThreadPool=ProcessorDefinitionHelper.willCreateNewThreadPool(routeContext,this,isParallelProcessing());
  ExecutorService threadPool=ProcessorDefinitionHelper.getConfiguredExecutorService(routeContext,"OnCompletion",this,isParallelProcessing());
  boolean afterConsumer=mode == null || mode == OnCompletionMode.AfterConsumer;
  boolean original=getUseOriginalMessagePolicy() != null ? getUseOriginalMessagePolicy() : false;
  OnCompletionProcessor answer=new OnCompletionProcessor(routeContext.getCamelContext(),internal,threadPool,shutdownThreadPool,isOnCompleteOnly(),isOnFailureOnly(),when,original,afterConsumer);
  return answer;
}
