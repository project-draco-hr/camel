{
  final Processor exceptionThrower=new Processor(){
    public void process(    Exchange exchange) throws Exception {
      String body=exchange.getIn().getBody(String.class);
      body=body.substring(1,body.length() - 2);
      boolean fatal=body.equals("exception") || body.indexOf(' ') != -1;
      String message=fatal ? "FATAL " : "";
      body=fatal ? message + body : "exception";
      exchange.getIn().setBody("<" + body + "/>");
      throw new IllegalArgumentException(message + "Exception thrown");
    }
  }
;
  return new RouteBuilder(){
    public void configure(){
      errorHandler(deadLetterChannel("mock:error").redeliveryDelay(0).maximumRedeliveries(3));
      if (getName().endsWith("WithLongHandler")) {
        log.debug("Using long exception handler");
        onException(IllegalArgumentException.class).setBody(constant("<handled/>")).to("mock:exception");
      }
 else       if (getName().endsWith("WithHandler")) {
        log.debug("Using exception handler");
        onException(IllegalArgumentException.class).to("mock:exception");
      }
 else       if (getName().endsWith("WithFatalException")) {
        log.debug("Using fatal exception");
        onException(IllegalArgumentException.class).process(exceptionThrower).to("mock:fatal");
      }
      from("direct:start").process(exceptionThrower).to("mock:result");
      from("direct:start2").to("direct:intermediate").to("mock:result");
      from("direct:intermediate").setBody(constant("<some-value/>")).process(exceptionThrower).to("mock:result");
    }
  }
;
}
