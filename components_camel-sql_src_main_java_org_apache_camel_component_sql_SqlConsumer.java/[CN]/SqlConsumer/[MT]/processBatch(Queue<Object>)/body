{
  int total=exchanges.size();
  if (maxMessagesPerPoll > 0 && total > maxMessagesPerPoll) {
    log.debug("Limiting to maximum messages to poll " + maxMessagesPerPoll + " as there was "+ total+ " messages in this poll.");
    total=maxMessagesPerPoll;
  }
  for (int index=0; index < total && isBatchAllowed(); index++) {
    DataHolder holder=ObjectHelper.cast(DataHolder.class,exchanges.poll());
    Exchange exchange=holder.exchange;
    Object data=holder.data;
    exchange.setProperty(Exchange.BATCH_INDEX,index);
    exchange.setProperty(Exchange.BATCH_SIZE,total);
    exchange.setProperty(Exchange.BATCH_COMPLETE,index == total - 1);
    pendingExchanges=total - index - 1;
    try {
      getProcessor().process(exchange);
    }
 catch (    Exception e) {
      exchange.setException(e);
    }
    String sql=exchange.isFailed() ? onConsumeFailed : onConsume;
    try {
      if (data != null && sql != null) {
        int updateCount=getEndpoint().getProcessingStrategy().commit(getEndpoint(),exchange,data,jdbcTemplate,sql);
        if (expectedUpdateCount > -1 && updateCount != expectedUpdateCount) {
          String msg="Expected update count " + expectedUpdateCount + " but was "+ updateCount+ " executing query: "+ sql;
          throw new SQLException(msg);
        }
      }
    }
 catch (    Exception e) {
      if (breakBatchOnConsumeFail) {
        throw e;
      }
 else {
        handleException("Error executing onConsume/onConsumeFailed query " + sql,e);
      }
    }
  }
  try {
    if (onConsumeBatchComplete != null) {
      int updateCount=getEndpoint().getProcessingStrategy().commitBatchComplete(getEndpoint(),jdbcTemplate,onConsumeBatchComplete);
      log.debug("onConsumeBatchComplete update count {}",updateCount);
    }
  }
 catch (  Exception e) {
    if (breakBatchOnConsumeFail) {
      throw e;
    }
 else {
      handleException("Error executing onConsumeBatchComplete query " + onConsumeBatchComplete,e);
    }
  }
  return total;
}
