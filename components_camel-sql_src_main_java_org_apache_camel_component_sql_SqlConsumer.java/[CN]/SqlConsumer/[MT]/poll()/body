{
  shutdownRunningTask=null;
  pendingExchanges=0;
  final String preparedQuery=sqlPrepareStatementStrategy.prepareQuery(query,getEndpoint().isAllowNamedParameters());
  Integer messagePolled=jdbcTemplate.execute(preparedQuery,new PreparedStatementCallback<Integer>(){
    @Override public Integer doInPreparedStatement(    PreparedStatement preparedStatement) throws SQLException, DataAccessException {
      Queue<DataHolder> answer=new LinkedList<DataHolder>();
      log.debug("Executing query: {}",preparedQuery);
      ResultSet rs=preparedStatement.executeQuery();
      SqlOutputType outputType=getEndpoint().getOutputType();
      try {
        log.trace("Got result list from query: {}, outputType={}",rs,outputType);
        if (outputType == SqlOutputType.SelectList) {
          List<Map<String,Object>> data=getEndpoint().queryForList(rs);
          addListToQueue(data,answer);
        }
 else         if (outputType == SqlOutputType.SelectOne) {
          Object data=getEndpoint().queryForObject(rs);
          if (data != null) {
            addListToQueue(data,answer);
          }
        }
 else {
          throw new IllegalArgumentException("Invalid outputType=" + outputType);
        }
      }
  finally {
        rs.close();
      }
      try {
        int rows=processBatch(CastUtils.cast(answer));
        return rows;
      }
 catch (      Exception e) {
        throw ObjectHelper.wrapRuntimeCamelException(e);
      }
    }
  }
);
  return messagePolled;
}
