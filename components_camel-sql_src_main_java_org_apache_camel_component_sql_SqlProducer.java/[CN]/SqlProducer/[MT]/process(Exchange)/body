{
  String queryHeader=exchange.getIn().getHeader(SqlConstants.SQL_QUERY,String.class);
  String sql=queryHeader != null ? queryHeader : query;
  jdbcTemplate.execute(sql,new PreparedStatementCallback<Map<?,?>>(){
    public Map<?,?> doInPreparedStatement(    PreparedStatement ps) throws SQLException {
      int expected=ps.getParameterMetaData().getParameterCount();
      if (exchange.getIn().getBody() != null) {
        Iterator<?> iterator=exchange.getIn().getBody(Iterator.class);
        if (batch) {
          while (iterator != null && iterator.hasNext()) {
            Object value=iterator.next();
            Iterator<?> i=exchange.getContext().getTypeConverter().convertTo(Iterator.class,value);
            populateStatement(ps,i,expected);
            ps.addBatch();
          }
        }
 else {
          populateStatement(ps,iterator,expected);
        }
      }
      if (batch) {
        int[] updateCounts=ps.executeBatch();
        int total=0;
        for (        int count : updateCounts) {
          total+=count;
        }
        exchange.getIn().setHeader(SqlConstants.SQL_UPDATE_COUNT,total);
      }
 else {
        boolean isResultSet=ps.execute();
        if (isResultSet) {
          RowMapperResultSetExtractor<Map<String,Object>> mapper=new RowMapperResultSetExtractor<Map<String,Object>>(new ColumnMapRowMapper());
          List<Map<String,Object>> result=mapper.extractData(ps.getResultSet());
          exchange.getOut().setBody(result);
          exchange.getIn().setHeader(SqlConstants.SQL_ROW_COUNT,result.size());
          exchange.getOut().setHeaders(exchange.getIn().getHeaders());
        }
 else {
          exchange.getIn().setHeader(SqlConstants.SQL_UPDATE_COUNT,ps.getUpdateCount());
        }
      }
      return null;
    }
  }
);
}
