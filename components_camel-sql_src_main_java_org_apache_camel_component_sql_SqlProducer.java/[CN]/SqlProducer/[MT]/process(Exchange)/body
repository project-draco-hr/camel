{
  final String sql;
  if (useMessageBodyForSql) {
    sql=exchange.getIn().getBody(String.class);
  }
 else {
    String queryHeader=exchange.getIn().getHeader(SqlConstants.SQL_QUERY,String.class);
    sql=queryHeader != null ? queryHeader : resolvedQuery;
  }
  final String preparedQuery=sqlPrepareStatementStrategy.prepareQuery(sql,getEndpoint().isAllowNamedParameters(),exchange);
  final Boolean shouldRetrieveGeneratedKeys=exchange.getIn().getHeader(SqlConstants.SQL_RETRIEVE_GENERATED_KEYS,false,Boolean.class);
  PreparedStatementCreator statementCreator=new PreparedStatementCreator(){
    @Override public PreparedStatement createPreparedStatement(    Connection con) throws SQLException {
      if (!shouldRetrieveGeneratedKeys) {
        return con.prepareStatement(preparedQuery);
      }
 else {
        Object expectedGeneratedColumns=exchange.getIn().getHeader(SqlConstants.SQL_GENERATED_COLUMNS);
        if (expectedGeneratedColumns == null) {
          return con.prepareStatement(preparedQuery,Statement.RETURN_GENERATED_KEYS);
        }
 else         if (expectedGeneratedColumns instanceof String[]) {
          return con.prepareStatement(preparedQuery,(String[])expectedGeneratedColumns);
        }
 else         if (expectedGeneratedColumns instanceof int[]) {
          return con.prepareStatement(preparedQuery,(int[])expectedGeneratedColumns);
        }
 else {
          throw new IllegalArgumentException("Header specifying expected returning columns isn't an instance of String[] or int[] but " + expectedGeneratedColumns.getClass());
        }
      }
    }
  }
;
  jdbcTemplate.execute(statementCreator,new PreparedStatementCallback<Map<?,?>>(){
    public Map<?,?> doInPreparedStatement(    PreparedStatement ps) throws SQLException {
      ResultSet rs=null;
      try {
        int expected=parametersCount > 0 ? parametersCount : ps.getParameterMetaData().getParameterCount();
        if (alwaysPopulateStatement || expected > 0) {
          if (batch) {
            Iterator<?> iterator;
            if (useMessageBodyForSql) {
              iterator=exchange.getIn().getHeader(SqlConstants.SQL_PARAMETERS,Iterator.class);
            }
 else {
              iterator=exchange.getIn().getBody(Iterator.class);
            }
            while (iterator != null && iterator.hasNext()) {
              Object value=iterator.next();
              Iterator<?> i=sqlPrepareStatementStrategy.createPopulateIterator(sql,preparedQuery,expected,exchange,value);
              sqlPrepareStatementStrategy.populateStatement(ps,i,expected);
              ps.addBatch();
            }
          }
 else {
            Object value;
            if (useMessageBodyForSql) {
              value=exchange.getIn().getHeader(SqlConstants.SQL_PARAMETERS);
            }
 else {
              value=exchange.getIn().getBody();
            }
            Iterator<?> i=sqlPrepareStatementStrategy.createPopulateIterator(sql,preparedQuery,expected,exchange,value);
            sqlPrepareStatementStrategy.populateStatement(ps,i,expected);
          }
        }
        boolean isResultSet=false;
        if (batch) {
          int[] updateCounts=ps.executeBatch();
          int total=0;
          for (          int count : updateCounts) {
            total+=count;
          }
          exchange.getIn().setHeader(SqlConstants.SQL_UPDATE_COUNT,total);
        }
 else {
          isResultSet=ps.execute();
          if (isResultSet) {
            exchange.getOut().getHeaders().putAll(exchange.getIn().getHeaders());
            rs=ps.getResultSet();
            SqlOutputType outputType=getEndpoint().getOutputType();
            log.trace("Got result list from query: {}, outputType={}",rs,outputType);
            if (outputType == SqlOutputType.SelectList) {
              List<?> data=getEndpoint().queryForList(rs,true);
              if (getEndpoint().isNoop()) {
                exchange.getOut().setBody(exchange.getIn().getBody());
              }
 else               if (getEndpoint().getOutputHeader() != null) {
                exchange.getOut().setBody(exchange.getIn().getBody());
                exchange.getOut().setHeader(getEndpoint().getOutputHeader(),data);
              }
 else {
                exchange.getOut().setBody(data);
              }
              exchange.getOut().setHeader(SqlConstants.SQL_ROW_COUNT,data.size());
            }
 else             if (outputType == SqlOutputType.SelectOne) {
              Object data=getEndpoint().queryForObject(rs);
              if (data != null) {
                if (getEndpoint().isNoop()) {
                  exchange.getOut().setBody(exchange.getIn().getBody());
                }
 else                 if (getEndpoint().getOutputHeader() != null) {
                  exchange.getOut().setBody(exchange.getIn().getBody());
                  exchange.getOut().setHeader(getEndpoint().getOutputHeader(),data);
                }
 else {
                  exchange.getOut().setBody(data);
                }
                exchange.getOut().setHeader(SqlConstants.SQL_ROW_COUNT,1);
              }
            }
 else {
              throw new IllegalArgumentException("Invalid outputType=" + outputType);
            }
          }
 else {
            exchange.getIn().setHeader(SqlConstants.SQL_UPDATE_COUNT,ps.getUpdateCount());
          }
        }
        if (shouldRetrieveGeneratedKeys) {
          if (!exchange.hasOut()) {
            exchange.getOut().getHeaders().putAll(exchange.getIn().getHeaders());
          }
          if (isResultSet) {
            exchange.getOut().setHeader(SqlConstants.SQL_GENERATED_KEYS_DATA,Collections.EMPTY_LIST);
            exchange.getOut().setHeader(SqlConstants.SQL_GENERATED_KEYS_ROW_COUNT,0);
          }
 else {
            List<?> generatedKeys=getEndpoint().queryForList(ps.getGeneratedKeys(),false);
            exchange.getOut().setHeader(SqlConstants.SQL_GENERATED_KEYS_DATA,generatedKeys);
            exchange.getOut().setHeader(SqlConstants.SQL_GENERATED_KEYS_ROW_COUNT,generatedKeys.size());
          }
        }
        return null;
      }
  finally {
        closeResultSet(rs);
      }
    }
  }
);
}
