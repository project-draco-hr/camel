{
  GlobalSettings settings=GlobalSettings.getInstance();
  try {
    log.info("Configuring GlobalSettings to use Camel classloader: {}",CamelToDozerClassResolverAdapter.class.getName());
    Field field=settings.getClass().getDeclaredField("classLoaderBeanName");
    ReflectionHelper.setField(field,settings,CamelToDozerClassResolverAdapter.class.getName());
  }
 catch (  Exception e) {
    throw new IllegalStateException("Cannot configure Dozer GlobalSettings to use CamelToDozerClassResolverAdapter as classloader due " + e.getMessage(),e);
  }
  CamelToDozerClassResolverAdapter adapter=new CamelToDozerClassResolverAdapter(camelContext);
  BeanContainer.getInstance().setClassLoader(adapter);
  log.info("Using DozerBeanMapperConfiguration: {}",configuration);
  DozerBeanMapper mapper=createDozerBeanMapper(configuration);
  this.camelContext=camelContext;
  this.mapper=mapper;
  this.configuration=configuration;
  try {
    camelContext.addService(this);
  }
 catch (  Exception e) {
    throw ObjectHelper.wrapRuntimeCamelException(e);
  }
}
