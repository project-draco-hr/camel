{
  Boolean redelivery=exchange.isTransactedRedelivered();
  final String redelivered=redelivery != null ? redelivery.toString() : "unknown";
  final String ids=ExchangeHelper.logIds(exchange);
  try {
    exchange.getUnitOfWork().beginTransactedBy(transactionKey);
    if (log.isDebugEnabled()) {
      log.debug("Transaction begin ({}) redelivered({}) for {})",new Object[]{transactionKey,redelivered,ids});
    }
    doInTransactionTemplate(exchange);
    if (log.isDebugEnabled()) {
      log.debug("Transaction commit ({}) redelivered({}) for {})",new Object[]{transactionKey,redelivered,ids});
    }
  }
 catch (  TransactionRollbackException e) {
    if (log.isDebugEnabled()) {
      log.debug("Transaction rollback ({}) redelivered({}) for {} due exchange was marked for rollbackOnly",new Object[]{transactionKey,redelivered,ids});
    }
  }
catch (  Throwable e) {
    log.warn("Transaction rollback ({}) redelivered({}) for {} caught: {}",new Object[]{transactionKey,redelivered,ids,e.getMessage()});
    exchange.setException(e);
  }
 finally {
    exchange.getUnitOfWork().endTransactedBy(transactionKey);
  }
  Boolean onlyLast=(Boolean)exchange.removeProperty(Exchange.ROLLBACK_ONLY_LAST);
  if (onlyLast != null && onlyLast) {
    if (log.isDebugEnabled()) {
      Exception cause=exchange.getException();
      if (cause != null) {
        log.debug("Transaction rollback (" + transactionKey + ") redelivered("+ redelivered+ ") for "+ ids+ " due exchange was marked for rollbackOnlyLast and caught: ",cause);
      }
 else {
        log.debug("Transaction rollback ({}) redelivered(" + redelivered + ") for {} due exchange was marked for rollbackOnlyLast",transactionKey,ids);
      }
    }
    exchange.setException(null);
  }
}
