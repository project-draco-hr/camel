{
  getLog().info("Copying all Camel language json descriptors");
  Set<File> jsonFiles=new TreeSet<File>();
  Set<File> duplicateJsonFiles=new TreeSet<File>();
  Set<File> languageFiles=new TreeSet<File>();
  Map<String,Set<String>> usedLabels=new TreeMap<String,Set<String>>();
  if (componentsDir != null && componentsDir.isDirectory()) {
    File[] languages=componentsDir.listFiles();
    if (languages != null) {
      for (      File dir : languages) {
        if (dir.isDirectory() && "camel-spring-dm".equals(dir.getName())) {
          continue;
        }
        if (dir.isDirectory() && !"target".equals(dir.getName())) {
          File target=new File(dir,"target/classes");
          findLanguageFilesRecursive(target,jsonFiles,languageFiles,new CamelLanguagesFileFilter());
        }
      }
    }
  }
  if (coreDir != null && coreDir.isDirectory()) {
    File target=new File(coreDir,"target/classes");
    findLanguageFilesRecursive(target,jsonFiles,languageFiles,new CamelLanguagesFileFilter());
  }
  getLog().info("Found " + languageFiles.size() + " language.properties files");
  getLog().info("Found " + jsonFiles.size() + " language json files");
  languagesOutDir.mkdirs();
  for (  File file : jsonFiles) {
    File to=new File(languagesOutDir,file.getName());
    if (to.exists()) {
      duplicateJsonFiles.add(to);
      getLog().warn("Duplicate language name detected: " + to);
    }
    try {
      copyFile(file,to);
    }
 catch (    IOException e) {
      throw new MojoFailureException("Cannot copy file from " + file + " -> "+ to,e);
    }
    try {
      String text=loadText(new FileInputStream(file));
      String name=asComponentName(file);
      Matcher matcher=LABEL_PATTERN.matcher(text);
      if (matcher.find()) {
        String label=matcher.group(1);
        String[] labels=label.split(",");
        for (        String s : labels) {
          Set<String> languages=usedLabels.get(s);
          if (languages == null) {
            languages=new TreeSet<String>();
            usedLabels.put(s,languages);
          }
          languages.add(name);
        }
      }
    }
 catch (    IOException e) {
    }
  }
  Set<String> answer=new LinkedHashSet<>();
  File all=new File(languagesOutDir,"../languages.properties");
  try {
    FileOutputStream fos=new FileOutputStream(all,false);
    String[] names=languagesOutDir.list();
    List<String> languages=new ArrayList<String>();
    for (    String name : names) {
      if (name.endsWith(".json")) {
        String languageName=name.substring(0,name.length() - 5);
        languages.add(languageName);
      }
    }
    Collections.sort(languages);
    for (    String name : languages) {
      fos.write(name.getBytes());
      fos.write("\n".getBytes());
      answer.add(name);
    }
    fos.close();
  }
 catch (  IOException e) {
    throw new MojoFailureException("Error writing to file " + all);
  }
  printLanguagesReport(jsonFiles,duplicateJsonFiles,usedLabels);
  return answer;
}
