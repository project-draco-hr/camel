{
  final JSch jsch=new JSch();
  JSch.setLogger(new JSchLogger());
  SftpConfiguration sftpConfig=(SftpConfiguration)configuration;
  if (isNotEmpty(sftpConfig.getCiphers())) {
    LOG.debug("Using ciphers: {}",sftpConfig.getCiphers());
    Hashtable<String,String> ciphers=new Hashtable<String,String>();
    ciphers.put("cipher.s2c",sftpConfig.getCiphers());
    ciphers.put("cipher.c2s",sftpConfig.getCiphers());
    JSch.setConfig(ciphers);
  }
  if (isNotEmpty(sftpConfig.getPrivateKeyFile())) {
    LOG.debug("Using private keyfile: {}",sftpConfig.getPrivateKeyFile());
    if (isNotEmpty(sftpConfig.getPrivateKeyFilePassphrase())) {
      jsch.addIdentity(sftpConfig.getPrivateKeyFile(),sftpConfig.getPrivateKeyFilePassphrase());
    }
 else {
      jsch.addIdentity(sftpConfig.getPrivateKeyFile());
    }
  }
  if (isNotEmpty(sftpConfig.getKnownHostsFile())) {
    LOG.debug("Using knownhosts file: {}",sftpConfig.getKnownHostsFile());
    jsch.setKnownHosts(sftpConfig.getKnownHostsFile());
  }
  final Session session=jsch.getSession(configuration.getUsername(),configuration.getHost(),configuration.getPort());
  if (isNotEmpty(sftpConfig.getStrictHostKeyChecking())) {
    LOG.debug("Using StrickHostKeyChecking: {}",sftpConfig.getStrictHostKeyChecking());
    session.setConfig("StrictHostKeyChecking",sftpConfig.getStrictHostKeyChecking());
  }
  session.setServerAliveInterval(sftpConfig.getServerAliveInterval());
  session.setServerAliveCountMax(sftpConfig.getServerAliveCountMax());
  if (sftpConfig.getCompression() > 0) {
    LOG.debug("Using compression: {}",sftpConfig.getCompression());
    session.setConfig("compression.s2c","zlib@openssh.com,zlib,none");
    session.setConfig("compression.c2s","zlib@openssh.com,zlib,none");
    session.setConfig("compression_level",Integer.toString(sftpConfig.getCompression()));
  }
  session.setUserInfo(new ExtendedUserInfo(){
    public String getPassphrase(){
      return null;
    }
    public String getPassword(){
      return configuration.getPassword();
    }
    public boolean promptPassword(    String s){
      return true;
    }
    public boolean promptPassphrase(    String s){
      return true;
    }
    public boolean promptYesNo(    String s){
      LOG.warn("Server asks for confirmation (yes|no): " + s + ". Camel will answer no.");
      return false;
    }
    public void showMessage(    String s){
      LOG.trace("Message received from Server: " + s);
    }
    public String[] promptKeyboardInteractive(    String destination,    String name,    String instruction,    String[] prompt,    boolean[] echo){
      return new String[]{configuration.getPassword()};
    }
  }
);
  return session;
}
