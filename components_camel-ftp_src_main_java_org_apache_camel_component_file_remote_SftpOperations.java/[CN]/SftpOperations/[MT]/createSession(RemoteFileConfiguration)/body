{
  final JSch jsch=new JSch();
  JSch.setLogger(new JSchLogger());
  SftpConfiguration sftpConfig=(SftpConfiguration)configuration;
  if (isNotEmpty(sftpConfig.getCiphers())) {
    LOG.debug("Using ciphers: {}",sftpConfig.getCiphers());
    Hashtable<String,String> ciphers=new Hashtable<String,String>();
    ciphers.put("cipher.s2c",sftpConfig.getCiphers());
    ciphers.put("cipher.c2s",sftpConfig.getCiphers());
    JSch.setConfig(ciphers);
  }
  if (isNotEmpty(sftpConfig.getPrivateKeyFile())) {
    LOG.debug("Using private keyfile: {}",sftpConfig.getPrivateKeyFile());
    if (isNotEmpty(sftpConfig.getPrivateKeyPassphrase())) {
      jsch.addIdentity(sftpConfig.getPrivateKeyFile(),sftpConfig.getPrivateKeyPassphrase());
    }
 else {
      jsch.addIdentity(sftpConfig.getPrivateKeyFile());
    }
  }
  if (sftpConfig.getPrivateKey() != null) {
    LOG.debug("Using private key information from byte array");
    byte[] passphrase=null;
    if (isNotEmpty(sftpConfig.getPrivateKeyPassphrase())) {
      try {
        passphrase=sftpConfig.getPrivateKeyPassphrase().getBytes("UTF-8");
      }
 catch (      UnsupportedEncodingException e) {
        throw new JSchException("Cannot transform passphrase to byte[]",e);
      }
    }
    jsch.addIdentity("ID",sftpConfig.getPrivateKey(),null,passphrase);
  }
  if (sftpConfig.getPrivateKeyUri() != null) {
    LOG.debug("Using private key uri : {}",sftpConfig.getPrivateKeyUri());
    byte[] passphrase=null;
    if (isNotEmpty(sftpConfig.getPrivateKeyPassphrase())) {
      try {
        passphrase=sftpConfig.getPrivateKeyPassphrase().getBytes("UTF-8");
      }
 catch (      UnsupportedEncodingException e) {
        throw new JSchException("Cannot transform passphrase to byte[]",e);
      }
    }
    try {
      InputStream is=ResourceHelper.resolveMandatoryResourceAsInputStream(endpoint.getCamelContext().getClassResolver(),sftpConfig.getPrivateKeyUri());
      ByteArrayOutputStream bos=new ByteArrayOutputStream();
      IOHelper.copyAndCloseInput(is,bos);
      jsch.addIdentity("ID",bos.toByteArray(),null,passphrase);
    }
 catch (    IOException e) {
      throw new JSchException("Cannot read resource: " + sftpConfig.getPrivateKeyUri(),e);
    }
  }
  if (sftpConfig.getKeyPair() != null) {
    LOG.debug("Using private key information from key pair");
    KeyPair keyPair=sftpConfig.getKeyPair();
    if (keyPair.getPrivate() != null && keyPair.getPublic() != null) {
      if (keyPair.getPrivate() instanceof RSAPrivateKey && keyPair.getPublic() instanceof RSAPublicKey) {
        jsch.addIdentity(new RSAKeyPairIdentity("ID",keyPair),null);
      }
 else       if (keyPair.getPrivate() instanceof DSAPrivateKey && keyPair.getPublic() instanceof DSAPublicKey) {
        jsch.addIdentity(new DSAKeyPairIdentity("ID",keyPair),null);
      }
 else {
        LOG.warn("Only RSA and DSA key pairs are supported");
      }
    }
 else {
      LOG.warn("PrivateKey and PublicKey in the KeyPair must be filled");
    }
  }
  if (isNotEmpty(sftpConfig.getKnownHostsFile())) {
    LOG.debug("Using knownhosts file: {}",sftpConfig.getKnownHostsFile());
    jsch.setKnownHosts(sftpConfig.getKnownHostsFile());
  }
  if (isNotEmpty(sftpConfig.getKnownHostsUri())) {
    LOG.debug("Using knownhosts uri: {}",sftpConfig.getKnownHostsUri());
    try {
      InputStream is=ResourceHelper.resolveMandatoryResourceAsInputStream(endpoint.getCamelContext().getClassResolver(),sftpConfig.getKnownHostsUri());
      jsch.setKnownHosts(is);
    }
 catch (    IOException e) {
      throw new JSchException("Cannot read resource: " + sftpConfig.getKnownHostsUri(),e);
    }
  }
  if (sftpConfig.getKnownHosts() != null) {
    LOG.debug("Using knownhosts information from byte array");
    jsch.setKnownHosts(new ByteArrayInputStream(sftpConfig.getKnownHosts()));
  }
  final Session session=jsch.getSession(configuration.getUsername(),configuration.getHost(),configuration.getPort());
  if (isNotEmpty(sftpConfig.getStrictHostKeyChecking())) {
    LOG.debug("Using StrickHostKeyChecking: {}",sftpConfig.getStrictHostKeyChecking());
    session.setConfig("StrictHostKeyChecking",sftpConfig.getStrictHostKeyChecking());
  }
  session.setServerAliveInterval(sftpConfig.getServerAliveInterval());
  session.setServerAliveCountMax(sftpConfig.getServerAliveCountMax());
  if (sftpConfig.getCompression() > 0) {
    LOG.debug("Using compression: {}",sftpConfig.getCompression());
    session.setConfig("compression.s2c","zlib@openssh.com, zlib, none");
    session.setConfig("compression.c2s","zlib@openssh.com, zlib, none");
    session.setConfig("compression_level",Integer.toString(sftpConfig.getCompression()));
  }
  session.setUserInfo(new ExtendedUserInfo(){
    public String getPassphrase(){
      return null;
    }
    public String getPassword(){
      return configuration.getPassword();
    }
    public boolean promptPassword(    String s){
      return true;
    }
    public boolean promptPassphrase(    String s){
      return true;
    }
    public boolean promptYesNo(    String s){
      LOG.warn("Server asks for confirmation (yes|no): " + s + ". Camel will answer no.");
      return false;
    }
    public void showMessage(    String s){
      LOG.trace("Message received from Server: " + s);
    }
    public String[] promptKeyboardInteractive(    String destination,    String name,    String instruction,    String[] prompt,    boolean[] echo){
      if (configuration.getPassword() == null) {
        return new String[0];
      }
 else {
        return new String[]{configuration.getPassword()};
      }
    }
  }
);
  if (proxy != null) {
    session.setProxy(proxy);
  }
  return session;
}
