{
  final JSch jsch=new JSch();
  JSch.setLogger(new JSchLogger());
  SftpConfiguration sftpConfig=(SftpConfiguration)configuration;
  if (isNotEmpty(sftpConfig.getPrivateKeyFile())) {
    LOG.debug("Using private keyfile: " + sftpConfig.getPrivateKeyFile());
    if (isNotEmpty(sftpConfig.getPrivateKeyFilePassphrase())) {
      jsch.addIdentity(sftpConfig.getPrivateKeyFile(),sftpConfig.getPrivateKeyFilePassphrase());
    }
 else {
      jsch.addIdentity(sftpConfig.getPrivateKeyFile());
    }
  }
  if (isNotEmpty(sftpConfig.getKnownHostsFile())) {
    LOG.debug("Using knownhosts file: " + sftpConfig.getKnownHostsFile());
    jsch.setKnownHosts(sftpConfig.getKnownHostsFile());
  }
  final Session session=jsch.getSession(configuration.getUsername(),configuration.getHost(),configuration.getPort());
  if (isNotEmpty(sftpConfig.getStrictHostKeyChecking())) {
    LOG.debug("Using StrickHostKeyChecking: " + sftpConfig.getStrictHostKeyChecking());
    session.setConfig("StrictHostKeyChecking",sftpConfig.getStrictHostKeyChecking());
  }
  session.setUserInfo(new UserInfo(){
    public String getPassphrase(){
      return null;
    }
    public String getPassword(){
      return configuration.getPassword();
    }
    public boolean promptPassword(    String s){
      return true;
    }
    public boolean promptPassphrase(    String s){
      return true;
    }
    public boolean promptYesNo(    String s){
      LOG.warn("Server asks for confirmation (yes|no): " + s + ". Camel will answer no.");
      return false;
    }
    public void showMessage(    String s){
      LOG.trace("Message received from Server: " + s);
    }
  }
);
  return session;
}
