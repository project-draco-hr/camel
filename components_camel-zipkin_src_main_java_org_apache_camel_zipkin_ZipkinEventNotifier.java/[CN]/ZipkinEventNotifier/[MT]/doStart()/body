{
  super.doStart();
  ObjectHelper.notNull(camelContext,"CamelContext",this);
  if (spanCollector == null) {
    if (hostName != null && port > 0) {
      log.info("Configuring Zipkin ScribeSpanCollector using host: {} and port: {}",hostName,port);
      spanCollector=new ScribeSpanCollector(hostName,port);
    }
 else {
      String host=new ServiceHostPropertiesFunction().apply("zipkin");
      String port=new ServicePortPropertiesFunction().apply("zipkin");
      if (ObjectHelper.isNotEmpty(host) && ObjectHelper.isNotEmpty(port)) {
        log.info("Auto-configuring Zipkin ScribeSpanCollector using host: {} and port: {}",host,port);
        int num=camelContext.getTypeConverter().mandatoryConvertTo(Integer.class,port);
        spanCollector=new ScribeSpanCollector(host,num);
      }
    }
  }
  ObjectHelper.notNull(spanCollector,"SpanCollector",this);
  if (clientServiceMappings.isEmpty()) {
    log.warn("No service name(s) has been configured. Camel will fallback and use endpoint uris as service names.");
    useFallbackServiceNames=true;
  }
  for (  Map.Entry<String,String> entry : clientServiceMappings.entrySet()) {
    String pattern=entry.getKey();
    String serviceName=entry.getValue();
    Brave brave=braves.get(pattern);
    if (brave == null) {
      Brave.Builder builder=new Brave.Builder(serviceName);
      builder=builder.traceSampler(Sampler.create(rate));
      if (spanCollector != null) {
        builder=builder.spanCollector(spanCollector);
      }
      brave=builder.build();
      braves.put(serviceName,brave);
    }
  }
  ServiceHelper.startService(spanCollector);
}
