{
  Element<E> element=new Element<E>(o);
  if (!sequence.comparator().isValid(element)) {
    throw new IllegalArgumentException("Element cannot be used in comparator: " + sequence.comparator());
  }
  if (rejectOld != null && rejectOld.booleanValue() && beforeLastDelivered(element)) {
    throw new MessageRejectedException("rejecting message [" + element.getObject() + "], it should have been sent before the last delivered message ["+ lastDelivered.getObject()+ "]");
  }
  sequence.add(element);
  Element<E> successor=sequence.successor(element);
  if (successor != null) {
    successor.cancel();
  }
  if (successorOfLastDelivered(element)) {
  }
 else   if (sequence.predecessor(element) != null) {
  }
 else {
    element.schedule(defineTimeout());
  }
}
