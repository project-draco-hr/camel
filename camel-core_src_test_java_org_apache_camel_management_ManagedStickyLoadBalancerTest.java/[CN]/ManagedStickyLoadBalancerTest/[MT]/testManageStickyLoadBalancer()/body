{
  if (isPlatform("aix")) {
    return;
  }
  template.sendBodyAndHeader("direct:start","Hello World","num","123");
  MBeanServer mbeanServer=getMBeanServer();
  ObjectName on=ObjectName.getInstance("org.apache.camel:context=camel-1,type=processors,name=\"mysend\"");
  String routeId=(String)mbeanServer.getAttribute(on,"RouteId");
  assertEquals("route1",routeId);
  String camelId=(String)mbeanServer.getAttribute(on,"CamelId");
  assertEquals("camel-1",camelId);
  String state=(String)mbeanServer.getAttribute(on,"State");
  assertEquals(ServiceStatus.Started.name(),state);
  Integer size=(Integer)mbeanServer.getAttribute(on,"Size");
  assertEquals(2,size.intValue());
  String lan=(String)mbeanServer.getAttribute(on,"ExpressionLanguage");
  assertEquals("header",lan);
  String uri=(String)mbeanServer.getAttribute(on,"Expression");
  assertEquals("num",uri);
  String last=(String)mbeanServer.getAttribute(on,"LastChosenProcessorId");
  assertTrue("foo".equals(last) || "bar".equals(last));
  template.sendBodyAndHeader("direct:start","Bye World","num","123");
  String last2=(String)mbeanServer.getAttribute(on,"LastChosenProcessorId");
  assertEquals("Should be sticky",last,last2);
  TabularData data=(TabularData)mbeanServer.invoke(on,"explain",new Object[]{false},new String[]{"boolean"});
  assertNotNull(data);
  assertEquals(2,data.size());
  data=(TabularData)mbeanServer.invoke(on,"explain",new Object[]{true},new String[]{"boolean"});
  assertNotNull(data);
  assertEquals(5,data.size());
  String json=(String)mbeanServer.invoke(on,"informationJson",null,null);
  assertNotNull(json);
  assertTrue(json.contains("\"description\": \"Balances message processing among a number of nodes"));
}
