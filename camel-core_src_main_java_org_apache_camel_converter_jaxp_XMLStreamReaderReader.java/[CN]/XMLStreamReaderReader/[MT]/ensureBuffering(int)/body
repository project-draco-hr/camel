{
  if (size < bpos) {
    return bpos;
  }
  try {
    if (XMLStreamConstants.START_DOCUMENT == reader.getEventType()) {
      writer.writeStartDocument("utf-8","1.0");
    }
    if (chunk.size() < buffer.length) {
      while (reader.hasNext()) {
        int code=reader.next();
switch (code) {
case XMLStreamConstants.END_DOCUMENT:
          writer.writeEndDocument();
        break;
case XMLStreamConstants.START_ELEMENT:
      QName qname=reader.getName();
    writer.writeStartElement(qname.getPrefix(),qname.getLocalPart(),qname.getNamespaceURI());
  for (int i=0; i < reader.getAttributeCount(); i++) {
    writer.writeAttribute(reader.getAttributePrefix(i),reader.getAttributeNamespace(i),reader.getAttributeLocalName(i),reader.getAttributeValue(i));
  }
for (int i=0; i < reader.getNamespaceCount(); i++) {
  writer.writeNamespace(reader.getNamespacePrefix(i),reader.getNamespaceURI(i));
}
break;
case XMLStreamConstants.END_ELEMENT:
writer.writeEndElement();
break;
case XMLStreamConstants.CHARACTERS:
writer.writeCharacters(reader.getText());
break;
case XMLStreamConstants.COMMENT:
writer.writeComment(reader.getText());
break;
case XMLStreamConstants.CDATA:
writer.writeCData(reader.getText());
break;
default :
break;
}
final int csize=buffer.length - bpos;
if (chunk.size() > csize) {
System.arraycopy(chunk.getCharArray(),0,buffer,bpos,csize);
bpos=buffer.length;
chunk.trim(csize,0);
return buffer.length;
}
}
}
final int csize=chunk.size() < buffer.length - bpos ? chunk.size() : buffer.length - bpos;
if (csize > 0) {
System.arraycopy(chunk.getCharArray(),0,buffer,bpos,csize);
bpos+=csize;
chunk.trim(csize,0);
return bpos;
}
 else {
return bpos > 0 ? bpos : -1;
}
}
 catch (XMLStreamException e) {
throw new IOException(e);
}
}
