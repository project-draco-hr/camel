{
  if (fromType != null) {
    Class fromSuperClass=fromType.getSuperclass();
    if (fromSuperClass != null && !fromSuperClass.equals(Object.class)) {
      TypeConverter converter=getTypeConverter(toType,fromSuperClass);
      if (converter == null) {
        converter=findTypeConverter(toType,fromSuperClass,value);
      }
      if (converter != null) {
        return converter;
      }
    }
    for (    Class type : fromType.getInterfaces()) {
      TypeConverter converter=getTypeConverter(toType,type);
      if (converter != null) {
        return converter;
      }
    }
    if (fromType.isArray() && !fromType.getComponentType().isPrimitive()) {
      if (!fromType.equals(Object[].class)) {
        fromSuperClass=Object[].class;
        TypeConverter converter=getTypeConverter(toType,fromSuperClass);
        if (converter == null) {
          converter=findTypeConverter(toType,fromSuperClass,value);
        }
        if (converter != null) {
          return converter;
        }
      }
    }
    if (!fromType.equals(Object.class)) {
      TypeConverter converter=getTypeConverter(toType,Object.class);
      if (converter != null) {
        return converter;
      }
    }
  }
  if (fromType != null) {
    Set<Map.Entry<TypeMapping,TypeConverter>> entries=typeMappings.entrySet();
    for (    Map.Entry<TypeMapping,TypeConverter> entry : entries) {
      TypeMapping key=entry.getKey();
      Class aToType=key.getToType();
      if (toType.isAssignableFrom(aToType)) {
        if (key.getFromType().isAssignableFrom(fromType)) {
          return entry.getValue();
        }
      }
    }
  }
  return null;
}
