{
  if (LOG.isTraceEnabled()) {
    LOG.trace("Converting " + (value == null ? "null" : value.getClass().getCanonicalName()) + " -> "+ type.getCanonicalName()+ " with value: "+ value);
  }
  if (value == null) {
    if (boolean.class.isAssignableFrom(type) || Boolean.class.isAssignableFrom(type)) {
      return Boolean.FALSE;
    }
    return null;
  }
  if (type.isInstance(value)) {
    return type.cast(value);
  }
  TypeMapping key=new TypeMapping(type,value.getClass());
  if (misses.containsKey(key)) {
    return Void.TYPE;
  }
  checkLoaded();
  TypeConverter converter=getOrFindTypeConverter(type,value);
  if (converter != null) {
    Object rc=converter.convertTo(type,exchange,value);
    if (rc != null) {
      return rc;
    }
  }
  for (  TypeConverter fallback : fallbackConverters) {
    Object rc=fallback.convertTo(type,exchange,value);
    if (Void.TYPE.equals(rc)) {
      return Void.TYPE;
    }
    if (rc != null) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Adding fallback type converter as a known type converter to convert from: " + type.getCanonicalName() + " to: "+ value.getClass().getCanonicalName());
      }
      addTypeConverter(type,value.getClass(),fallback);
      return rc;
    }
  }
  if (type.isPrimitive()) {
    Class primitiveType=ObjectHelper.convertPrimitiveTypeToWrapperType(type);
    if (primitiveType != type) {
      return convertTo(primitiveType,exchange,value);
    }
  }
synchronized (misses) {
    misses.put(key,key);
  }
  return Void.TYPE;
}
