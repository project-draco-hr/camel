{
  while (true) {
    if (!isRunAllowed()) {
      if (exchange.getException() == null) {
        exchange.setException(new RejectedExecutionException());
      }
      callback.done(data.sync);
      return data.sync;
    }
    if (exchange.isTransacted() && exchange.getException() != null) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("This is a transacted exchange, bypassing this DeadLetterChannel: " + this + " for exchange: "+ exchange);
      }
      return data.sync;
    }
    if (exchange.getException() != null) {
      Throwable e=exchange.getException();
      exchange.setProperty(EXCEPTION_CAUSE_PROPERTY,e);
      ExceptionType exceptionPolicy=getExceptionPolicy(exchange,e);
      if (exceptionPolicy != null) {
        data.currentRedeliveryPolicy=exceptionPolicy.createRedeliveryPolicy(data.currentRedeliveryPolicy);
        data.handledPredicate=exceptionPolicy.getHandledPolicy();
        Processor processor=exceptionPolicy.getErrorHandler();
        if (processor != null) {
          data.failureProcessor=processor;
        }
      }
      logFailedDelivery("Failed delivery for exchangeId: " + exchange.getExchangeId() + ". On delivery attempt: "+ data.redeliveryCounter+ " caught: "+ e,data,e);
      data.redeliveryCounter=incrementRedeliveryCounter(exchange,e);
    }
    if (!data.currentRedeliveryPolicy.shouldRedeliver(data.redeliveryCounter)) {
      setFailureHandled(exchange);
      decrementRedeliveryCounter(exchange);
      AsyncProcessor afp=AsyncProcessorTypeConverter.convert(data.failureProcessor);
      boolean sync=afp.process(exchange,new AsyncCallback(){
        public void done(        boolean sync){
          restoreExceptionOnExchange(exchange,data.handledPredicate);
          callback.done(data.sync);
        }
      }
);
      logFailedDelivery("Failed delivery for exchangeId: " + exchange.getExchangeId() + ". Handled by the failure processor: "+ data.failureProcessor,data,null);
      return sync;
    }
    if (data.redeliveryCounter > 0) {
      if (exchange.getException() != null) {
        exchange.setException(null);
      }
      data.redeliveryDelay=data.currentRedeliveryPolicy.sleep(data.redeliveryDelay);
    }
    boolean sync=outputAsync.process(exchange,new AsyncCallback(){
      public void done(      boolean sync){
        if (sync) {
          return;
        }
        data.sync=false;
        if (exchange.getException() != null && !isFailureHandled(exchange)) {
          process(exchange,callback,data);
        }
 else {
          callback.done(sync);
        }
      }
    }
);
    if (!sync) {
      return false;
    }
    if (exchange.getException() == null || isFailureHandled(exchange)) {
      callback.done(true);
      return true;
    }
  }
}
