{
  List<RouteDefinition> answer=new ArrayList<RouteDefinition>();
  for (  VerbDefinition verb : getVerbs()) {
    RouteDefinition route=verb.getRoute();
    if (route == null) {
      route=new RouteDefinition();
      route.getOutputs().add(verb.getTo());
    }
    RestBindingDefinition binding=new RestBindingDefinition();
    binding.setType(verb.getType());
    binding.setOutType(verb.getOutType());
    if (verb.getConsumes() != null) {
      binding.setConsumes(verb.getConsumes());
    }
 else {
      binding.setConsumes(getConsumes());
    }
    if (verb.getProduces() != null) {
      binding.setProduces(verb.getProduces());
    }
 else {
      binding.setProduces(getProduces());
    }
    if (verb.getBindingMode() != null) {
      binding.setBindingMode(verb.getBindingMode());
    }
 else {
      binding.setBindingMode(getBindingMode());
    }
    if (verb.getSkipBindingOnErrorCode() != null) {
      binding.setSkipBindingOnErrorCode(verb.getSkipBindingOnErrorCode());
    }
 else {
      binding.setSkipBindingOnErrorCode(getSkipBindingOnErrorCode());
    }
    if (verb.getEnableCORS() != null) {
      binding.setEnableCORS(verb.getEnableCORS());
    }
 else {
      binding.setEnableCORS(getEnableCORS());
    }
    route.getOutputs().add(0,binding);
    String from="rest:" + verb.asVerb() + ":"+ buildUri(verb);
    Map<String,Object> options=new HashMap<String,Object>();
    if (verb.getConsumes() != null) {
      options.put("consumes",verb.getConsumes());
    }
 else     if (getConsumes() != null) {
      options.put("consumes",getConsumes());
    }
    if (verb.getProduces() != null) {
      options.put("produces",verb.getProduces());
    }
 else     if (getProduces() != null) {
      options.put("produces",getProduces());
    }
    String inType=binding.getType();
    if (inType != null) {
      options.put("inType",inType);
    }
    String outType=binding.getOutType();
    if (outType != null) {
      options.put("outType",outType);
    }
    if (!route.hasCustomIdAssigned()) {
      String id=verb.getId();
      if (id != null) {
        route.setId(id);
      }
    }
    String routeId=route.idOrCreate(camelContext.getNodeIdFactory());
    options.put("routeId",routeId);
    String description=verb.getTo() != null ? verb.getTo().getDescriptionText() : route.getDescriptionText();
    if (description == null) {
      description=verb.getDescriptionText();
    }
    if (description == null) {
      description=getDescriptionText();
    }
    if (description != null) {
      options.put("description",description);
    }
    if (!options.isEmpty()) {
      String query;
      try {
        query=URISupport.createQueryString(options);
      }
 catch (      URISyntaxException e) {
        throw ObjectHelper.wrapRuntimeCamelException(e);
      }
      from=from + "?" + query;
    }
    String path=getPath();
    String s1=FileUtil.stripTrailingSeparator(path);
    String s2=FileUtil.stripLeadingSeparator(verb.getUri());
    String allPath;
    if (s1 != null && s2 != null) {
      allPath=s1 + "/" + s2;
    }
 else     if (path != null) {
      allPath=path;
    }
 else {
      allPath=verb.getUri();
    }
    String[] arr=allPath.split("\\/");
    for (    String a : arr) {
      if (a.startsWith("{") && a.endsWith("}")) {
        String key=a.substring(1,a.length() - 1);
        boolean found=false;
        for (        RestOperationParamDefinition param : verb.getParams()) {
          if (param.getName().equalsIgnoreCase(key)) {
            param.type(RestParamType.path);
            found=true;
            break;
          }
        }
        if (!found) {
          restParam(verb).name(key).type(RestParamType.path).endParam();
        }
      }
    }
    if (verb.getType() != null) {
      String bodyType=verb.getType();
      if (bodyType.endsWith("[]")) {
        bodyType="List[" + bodyType.substring(0,bodyType.length() - 2) + "]";
      }
      restParam(verb).name(RestParamType.body.name()).type(RestParamType.body).dataType(bodyType).endParam();
    }
    route.fromRest(from);
    route.setRestDefinition(this);
    answer.add(route);
  }
  return answer;
}
