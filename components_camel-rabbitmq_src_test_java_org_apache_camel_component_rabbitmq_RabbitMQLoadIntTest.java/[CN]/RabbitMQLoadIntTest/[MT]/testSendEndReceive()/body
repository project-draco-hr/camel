{
  ExecutorService executorService=Executors.newFixedThreadPool(PRODUCER_COUNT);
  List<Future> futures=new ArrayList<Future>(PRODUCER_COUNT);
  for (int i=0; i < PRODUCER_COUNT; i++) {
    futures.add(executorService.submit(new Runnable(){
      @Override public void run(){
        for (int i=0; i < MESSAGE_COUNT; i++) {
          directProducer.sendBodyAndHeader("Message #" + i,RabbitMQConstants.ROUTING_KEY,ROUTING_KEY);
        }
      }
    }
));
  }
  for (  Future future : futures) {
    future.get(5,TimeUnit.SECONDS);
  }
  producingMockEndpoint.expectedMessageCount(PRODUCER_COUNT * MESSAGE_COUNT);
  consumingMockEndpoint.expectedMessageCount(PRODUCER_COUNT * MESSAGE_COUNT);
  assertMockEndpointsSatisfied(5,TimeUnit.SECONDS);
}
