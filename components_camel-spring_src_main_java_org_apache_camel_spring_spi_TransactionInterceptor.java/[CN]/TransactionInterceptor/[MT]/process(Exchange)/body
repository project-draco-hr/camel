{
  transactionTemplate.execute(new TransactionCallbackWithoutResult(){
    protected void doInTransactionWithoutResult(    TransactionStatus status){
      RuntimeCamelException rce=null;
      boolean activeTx=false;
      try {
        activeTx=TransactionSynchronizationManager.isActualTransactionActive();
        if (!activeTx) {
          activeTx=status.isNewTransaction() && !status.isCompleted();
          if (!activeTx) {
            if (DefaultTransactionStatus.class.isAssignableFrom(status.getClass())) {
              DefaultTransactionStatus defStatus=DefaultTransactionStatus.class.cast(status);
              activeTx=defStatus.hasTransaction() && !status.isCompleted();
            }
          }
        }
        if (LOG.isTraceEnabled()) {
          LOG.trace("Is actual transaction active: " + activeTx);
        }
        if (activeTx) {
          exchange.setProperty(Exchange.TRANSACTED,Boolean.TRUE);
        }
        processNext(exchange);
        if (exchange.getException() != null) {
          rce=wrapRuntimeCamelException(exchange.getException());
        }
      }
 catch (      Exception e) {
        rce=wrapRuntimeCamelException(e);
      }
      if (rce != null || exchange.isRollbackOnly()) {
        delayBeforeRedelivery();
        if (activeTx) {
          status.setRollbackOnly();
          if (LOG.isDebugEnabled()) {
            if (rce != null) {
              LOG.debug("Setting transaction to rollbackOnly due to exception being thrown: " + rce.getMessage());
            }
 else {
              LOG.debug("Setting transaction to rollbackOnly as Exchange was marked as rollback only");
            }
          }
        }
        if (rce != null) {
          throw rce;
        }
      }
    }
  }
);
}
