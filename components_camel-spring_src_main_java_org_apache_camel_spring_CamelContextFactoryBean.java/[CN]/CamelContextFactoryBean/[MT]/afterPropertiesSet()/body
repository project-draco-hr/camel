{
  if (properties != null) {
    getContext().setProperties(properties.asMap());
  }
  PackageScanClassResolver packageResolver=getBeanForType(PackageScanClassResolver.class);
  if (packageResolver != null) {
    LOG.info("Using custom PackageScanClassResolver: " + packageResolver);
    getContext().setPackageScanClassResolver(packageResolver);
  }
  ClassResolver classResolver=getBeanForType(ClassResolver.class);
  if (classResolver != null) {
    LOG.info("Using custom ClassResolver: " + classResolver);
    getContext().setClassResolver(classResolver);
  }
  FactoryFinderResolver factoryFinderResolver=getBeanForType(FactoryFinderResolver.class);
  if (factoryFinderResolver != null) {
    LOG.info("Using custom FactoryFinderResolver: " + factoryFinderResolver);
    getContext().setFactoryFinderResolver(factoryFinderResolver);
  }
  LifecycleStrategy lifecycleStrategy=getBeanForType(LifecycleStrategy.class);
  if (lifecycleStrategy != null) {
    LOG.info("Using custom LifecycleStrategy: " + lifecycleStrategy);
    getContext().setLifecycleStrategy(lifecycleStrategy);
  }
  Registry registry=getBeanForType(Registry.class);
  if (registry != null) {
    LOG.info("Using custom Registry: " + registry);
    getContext().setRegistry(registry);
  }
  Debugger debugger=getBeanForType(Debugger.class);
  if (debugger != null) {
    LOG.info("Using custom Debugger: " + debugger);
    getContext().addInterceptStrategy(debugger);
  }
  Tracer tracer=getBeanForType(Tracer.class);
  if (tracer != null) {
    TraceFormatter formatter=getBeanForType(TraceFormatter.class);
    if (formatter != null) {
      tracer.setFormatter(formatter);
    }
    LOG.info("Using custom Tracer: " + tracer);
    getContext().addInterceptStrategy(tracer);
  }
  HandleFault handleFault=getBeanForType(HandleFault.class);
  if (handleFault != null) {
    LOG.info("Using custom HandleFault: " + handleFault);
    getContext().addInterceptStrategy(handleFault);
  }
  Delayer delayer=getBeanForType(Delayer.class);
  if (delayer != null) {
    LOG.info("Using custom Delayer: " + delayer);
    getContext().addInterceptStrategy(delayer);
  }
  Map<String,InterceptStrategy> strategies=getContext().getRegistry().lookupByType(InterceptStrategy.class);
  if (strategies != null && !strategies.isEmpty()) {
    for (    String id : strategies.keySet()) {
      InterceptStrategy strategy=strategies.get(id);
      LOG.info("Using custom intercept strategy with id: " + id + " and implementation:"+ strategy);
      getContext().addInterceptStrategy(strategy);
    }
  }
  if (beanPostProcessor != null) {
    if (beanPostProcessor instanceof ApplicationContextAware) {
      ((ApplicationContextAware)beanPostProcessor).setApplicationContext(applicationContext);
    }
    if (beanPostProcessor instanceof CamelBeanPostProcessor) {
      ((CamelBeanPostProcessor)beanPostProcessor).setCamelContext(getContext());
    }
  }
  for (  RouteDefinition route : routes) {
    initInterceptors(route);
    initOnCompletions(route);
    initPolicies(route);
    initOnExceptions(route);
  }
  if (dataFormats != null) {
    getContext().setDataFormats(dataFormats.asMap());
  }
  getContext().addRouteDefinitions(routes);
  initJMXAgent();
  if (LOG.isDebugEnabled()) {
    LOG.debug("Found JAXB created routes: " + getRoutes());
  }
  findRouteBuilders();
  installRoutes();
}
