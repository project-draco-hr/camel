{
  Debugger debugger=getBeanForType(Debugger.class);
  if (debugger != null) {
    getContext().addInterceptStrategy(debugger);
  }
  LifecycleStrategy lifecycleStrategy=getBeanForType(LifecycleStrategy.class);
  if (lifecycleStrategy != null) {
    getContext().setLifecycleStrategy(lifecycleStrategy);
  }
  Registry registry=getBeanForType(Registry.class);
  if (registry != null) {
    getContext().setRegistry(registry);
  }
  if (beanPostProcessor != null) {
    if (beanPostProcessor instanceof ApplicationContextAware) {
      ((ApplicationContextAware)beanPostProcessor).setApplicationContext(applicationContext);
    }
    if (beanPostProcessor instanceof CamelBeanPostProcessor) {
      ((CamelBeanPostProcessor)beanPostProcessor).setCamelContext(getContext());
    }
  }
  getContext().addRouteDefinitions(routes);
  if (camelJMXAgent != null && isJmxEnabled()) {
    if (camelJMXAgent.isDisabled() != null && camelJMXAgent.isDisabled()) {
      getContext().setLifecycleStrategy(new DefaultLifecycleStrategy());
    }
 else {
      if (lifecycleStrategy != null) {
        LOG.warn("lifecycleStrategy will be overriden by InstrumentationLifecycleStrategy");
      }
      DefaultInstrumentationAgent agent=new DefaultInstrumentationAgent();
      agent.setConnectorPort(camelJMXAgent.getConnectorPort());
      agent.setCreateConnector(camelJMXAgent.isCreateConnector());
      agent.setMBeanObjectDomainName(camelJMXAgent.getMbeanObjectDomainName());
      agent.setMBeanServerDefaultDomain(camelJMXAgent.getMbeanServerDefaultDomain());
      agent.setRegistryPort(camelJMXAgent.getRegistryPort());
      agent.setServiceUrlPath(camelJMXAgent.getServiceUrlPath());
      agent.setUsePlatformMBeanServer(camelJMXAgent.isUsePlatformMBeanServer());
      getContext().setLifecycleStrategy(new InstrumentationLifecycleStrategy(agent));
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Found JAXB created routes: " + getRoutes());
  }
  findRouteBuiders();
  installRoutes();
}
