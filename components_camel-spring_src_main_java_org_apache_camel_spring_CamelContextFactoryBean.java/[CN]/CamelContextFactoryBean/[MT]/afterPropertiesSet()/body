{
  if (properties != null) {
    getContext().setProperties(properties.asMap());
  }
  PackageScanClassResolver packageResolver=getBeanForType(PackageScanClassResolver.class);
  if (packageResolver != null) {
    getContext().setPackageScanClassResolver(packageResolver);
  }
  ClassResolver classResolver=getBeanForType(ClassResolver.class);
  if (classResolver != null) {
    getContext().setClassResolver(classResolver);
  }
  Debugger debugger=getBeanForType(Debugger.class);
  if (debugger != null) {
    getContext().addInterceptStrategy(debugger);
  }
  Tracer tracer=getBeanForType(Tracer.class);
  if (tracer != null) {
    TraceFormatter formatter=getBeanForType(TraceFormatter.class);
    if (formatter != null) {
      tracer.setFormatter(formatter);
    }
    getContext().addInterceptStrategy(tracer);
  }
  Delayer delayer=getBeanForType(Delayer.class);
  if (delayer != null) {
    getContext().addInterceptStrategy(delayer);
  }
  LifecycleStrategy lifecycleStrategy=getBeanForType(LifecycleStrategy.class);
  if (lifecycleStrategy != null) {
    getContext().setLifecycleStrategy(lifecycleStrategy);
  }
  Registry registry=getBeanForType(Registry.class);
  if (registry != null) {
    getContext().setRegistry(registry);
  }
  if (beanPostProcessor != null) {
    if (beanPostProcessor instanceof ApplicationContextAware) {
      ((ApplicationContextAware)beanPostProcessor).setApplicationContext(applicationContext);
    }
    if (beanPostProcessor instanceof CamelBeanPostProcessor) {
      ((CamelBeanPostProcessor)beanPostProcessor).setCamelContext(getContext());
    }
  }
  for (  RouteDefinition route : routes) {
    if (exceptionClauses != null) {
      route.getOutputs().addAll(exceptionClauses);
    }
    for (    InterceptDefinition intercept : intercepts) {
      List<ProcessorDefinition<?>> outputs=new ArrayList<ProcessorDefinition<?>>();
      List<ProcessorDefinition<?>> exceptionHandlers=new ArrayList<ProcessorDefinition<?>>();
      for (      ProcessorDefinition output : route.getOutputs()) {
        if (output instanceof ExceptionDefinition) {
          exceptionHandlers.add(output);
        }
 else {
          outputs.add(output);
        }
      }
      route.clearOutput();
      route.getOutputs().addAll(exceptionHandlers);
      intercept.afterPropertiesSet();
      InterceptDefinition proxy=intercept.createProxy();
      route.addOutput(proxy);
      route.pushBlock(proxy.getProceed());
      ProceedDefinition proceed=ProcessorTypeHelper.findFirstTypeInOutputs(proxy.getOutputs(),ProceedDefinition.class);
      if (proceed != null) {
        proceed.getOutputs().addAll(outputs);
      }
    }
  }
  if (dataFormats != null) {
    getContext().setDataFormats(dataFormats.asMap());
  }
  getContext().addRouteDefinitions(routes);
  if (camelJMXAgent != null && camelJMXAgent.isDisabled()) {
    LOG.debug("JMXAgent disabled");
    getContext().setLifecycleStrategy(new DefaultLifecycleStrategy());
  }
 else   if (camelJMXAgent != null) {
    LOG.debug("JMXAgent enabled");
    if (lifecycleStrategy != null) {
      LOG.warn("lifecycleStrategy will be overriden by InstrumentationLifecycleStrategy");
    }
    DefaultInstrumentationAgent agent=new DefaultInstrumentationAgent();
    agent.setConnectorPort(camelJMXAgent.getConnectorPort());
    agent.setCreateConnector(camelJMXAgent.isCreateConnector());
    agent.setMBeanObjectDomainName(camelJMXAgent.getMbeanObjectDomainName());
    agent.setMBeanServerDefaultDomain(camelJMXAgent.getMbeanServerDefaultDomain());
    agent.setRegistryPort(camelJMXAgent.getRegistryPort());
    agent.setServiceUrlPath(camelJMXAgent.getServiceUrlPath());
    agent.setUsePlatformMBeanServer(camelJMXAgent.isUsePlatformMBeanServer());
    getContext().setLifecycleStrategy(new InstrumentationLifecycleStrategy(agent));
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Found JAXB created routes: " + getRoutes());
  }
  findRouteBuilders();
  installRoutes();
}
