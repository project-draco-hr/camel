{
  for (  InterceptDefinition intercept : getIntercepts()) {
    intercept.afterPropertiesSet();
    route.getOutputs().add(0,intercept);
  }
  for (  InterceptFromDefinition intercept : getInterceptFroms()) {
    boolean match=true;
    if (intercept.getUri() != null) {
      match=false;
      for (      FromDefinition input : route.getInputs()) {
        if (input.getUri().equals(intercept.getUri())) {
          match=true;
          break;
        }
      }
    }
    if (match) {
      List<ProcessorDefinition<?>> outputs=new ArrayList<ProcessorDefinition<?>>();
      List<ProcessorDefinition<?>> exceptionHandlers=new ArrayList<ProcessorDefinition<?>>();
      for (      ProcessorDefinition output : route.getOutputs()) {
        if (output instanceof OnExceptionDefinition) {
          exceptionHandlers.add(output);
        }
 else {
          outputs.add(output);
        }
      }
      route.clearOutput();
      route.getOutputs().addAll(exceptionHandlers);
      intercept.afterPropertiesSet();
      InterceptFromDefinition proxy=intercept.createProxy();
      route.addOutput(proxy);
      route.pushBlock(proxy.getProceed());
      ProceedDefinition proceed=ProcessorDefinitionHelper.findFirstTypeInOutputs(proxy.getOutputs(),ProceedDefinition.class);
      if (proceed != null) {
        proceed.getOutputs().addAll(outputs);
      }
    }
  }
  for (  InterceptSendToEndpointDefinition intercept : getInterceptSendToEndpoints()) {
    intercept.afterPropertiesSet();
    try {
      intercept.proxyEndpoint(getContext());
    }
 catch (    Exception e) {
      throw ObjectHelper.wrapRuntimeCamelException(e);
    }
    route.addOutput(intercept);
  }
}
