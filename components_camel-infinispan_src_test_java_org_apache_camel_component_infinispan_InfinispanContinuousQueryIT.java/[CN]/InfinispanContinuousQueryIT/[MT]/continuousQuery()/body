{
  MockEndpoint continuousQueryBuilderNoMatch=getMockEndpoint("mock:continuousQueryNoMatch");
  continuousQueryBuilderNoMatch.expectedMessageCount(0);
  MockEndpoint continuousQueryBuilderAll=getMockEndpoint("mock:continuousQueryAll");
  continuousQueryBuilderAll.expectedMessageCount(CQ_USERS.length * 2);
  MockEndpoint continuousQuery=getMockEndpoint("mock:continuousQuery");
  continuousQuery.expectedMessageCount(4);
  for (int i=0; i < 4; i++) {
    continuousQuery.message(i).outHeader(InfinispanConstants.KEY).isEqualTo(createKey(CQ_USERS[i % 2]));
    continuousQuery.message(i).outHeader(InfinispanConstants.CACHE_NAME).isEqualTo(cache.getName());
    if (i >= 2) {
      continuousQuery.message(i).outHeader(InfinispanConstants.EVENT_TYPE).isEqualTo(InfinispanConstants.CACHE_ENTRY_LEAVING);
      continuousQuery.message(i).outHeader(InfinispanConstants.EVENT_DATA).isNull();
    }
 else {
      continuousQuery.message(i).outHeader(InfinispanConstants.EVENT_TYPE).isEqualTo(InfinispanConstants.CACHE_ENTRY_JOINING);
      continuousQuery.message(i).outHeader(InfinispanConstants.EVENT_DATA).isNotNull();
      continuousQuery.message(i).outHeader(InfinispanConstants.EVENT_DATA).isInstanceOf(User.class);
    }
  }
  for (  final User user : CQ_USERS) {
    cache.put(createKey(user),user);
  }
  assertEquals(CQ_USERS.length,cache.size());
  for (  final User user : CQ_USERS) {
    cache.remove(createKey(user));
  }
  assertTrue(cache.isEmpty());
  continuousQuery.assertIsSatisfied();
  continuousQueryBuilderNoMatch.assertIsSatisfied();
  continuousQueryBuilderAll.assertIsSatisfied();
}
