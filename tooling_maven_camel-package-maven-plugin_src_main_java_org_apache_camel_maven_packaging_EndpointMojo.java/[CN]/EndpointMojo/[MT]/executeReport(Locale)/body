{
  try {
    File dir=new File(project.getBuild().getOutputDirectory(),"org/apache/camel/component");
    getLog().info("Looking into directory " + dir.getAbsolutePath());
    if (dir.exists() && dir.isDirectory()) {
      File[] files=dir.listFiles(new FilenameFilter(){
        @Override public boolean accept(        File dir,        String name){
          return name.toLowerCase().endsWith(".html");
        }
      }
);
      if (files != null && files.length > 0) {
        boolean showIndex=files.length > 1;
        Sink sink=getSink();
        if (sink != null) {
          StringBuilder buffer=new StringBuilder();
          sink.head();
          sink.title();
          sink.text("Camel Endpoints");
          sink.title_();
          sink.rawText("<style>\n" + "th, td {\n" + "  text-align:left;\n\n"+ "}\n"+ "</style>\n");
          sink.head_();
          sink.body();
          sink.section1();
          sink.sectionTitle1();
          sink.text("Camel Endpoints");
          sink.sectionTitle1_();
          if (showIndex) {
            sink.list();
          }
          for (          File file : files) {
            getLog().info("found " + file.getAbsolutePath());
            String linkName=file.getName();
            if (linkName.endsWith(".html")) {
              linkName=linkName.substring(0,linkName.length() - 5);
            }
            String endpointHtml=IOUtil.toString(new FileInputStream(file));
            endpointHtml=extractBodyContents(endpointHtml);
            if (showIndex) {
              sink.listItem();
              sink.link("#" + linkName);
              sink.text(linkName);
              sink.link_();
              sink.listItem_();
              buffer.append("<a name='" + linkName + "'>\n");
              buffer.append(endpointHtml);
              buffer.append("</a>\n");
            }
 else {
              sink.section1_();
              sink.section2();
              sink.rawText(endpointHtml);
              sink.section2_();
            }
          }
          if (showIndex) {
            sink.list_();
            sink.section1_();
            sink.section2();
            sink.rawText(buffer.toString());
            sink.section2_();
          }
          sink.body_();
          sink.flush();
          sink.close();
        }
      }
    }
  }
 catch (  Exception e) {
    final MavenReportException ex=new MavenReportException(e.getMessage());
    ex.initCause(e.getCause());
    throw ex;
  }
}
