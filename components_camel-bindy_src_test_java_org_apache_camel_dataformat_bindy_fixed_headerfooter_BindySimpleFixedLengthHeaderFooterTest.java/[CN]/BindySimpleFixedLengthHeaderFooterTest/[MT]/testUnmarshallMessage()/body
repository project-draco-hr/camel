{
  StringBuffer buff=new StringBuffer();
  buff.append(TEST_HEADER).append(TEST_RECORD).append(TEST_FOOTER);
  unmarshallResult.expectedMessageCount(1);
  template.sendBody(URI_DIRECT_UNMARSHALL,buff.toString());
  unmarshallResult.assertIsSatisfied();
  Exchange exchange=unmarshallResult.getReceivedExchanges().get(0);
  Order order=(Order)exchange.getIn().getBody();
  assertEquals(10,order.getOrderNr());
  assertEquals("  Pauline",order.getFirstName());
  assertEquals("M    ",order.getLastName());
  Map<String,Object> receivedHeaderMap=(Map<String,Object>)exchange.getIn().getHeader(BindyFixedLengthDataFormat.CAMEL_BINDY_FIXED_LENGTH_HEADER);
  Map<String,Object> receivedFooterMap=(Map<String,Object>)exchange.getIn().getHeader(BindyFixedLengthDataFormat.CAMEL_BINDY_FIXED_LENGTH_FOOTER);
  assertNotNull(receivedHeaderMap);
  assertNotNull(receivedFooterMap);
  OrderHeader receivedHeader=(OrderHeader)receivedHeaderMap.get(OrderHeader.class.getName());
  OrderFooter receivedFooter=(OrderFooter)receivedFooterMap.get(OrderFooter.class.getName());
  assertNotNull(receivedHeader);
  assertNotNull(receivedFooter);
  OrderHeader expectedHeader=new OrderHeader();
  Calendar calendar=new GregorianCalendar();
  calendar.set(2009,7,1,0,0,0);
  calendar.clear(Calendar.MILLISECOND);
  expectedHeader.setRecordDate(calendar.getTime());
  assertEquals(receivedHeader.getRecordType(),expectedHeader.getRecordType());
  assertTrue(receivedHeader.getRecordDate().equals(expectedHeader.getRecordDate()));
}
