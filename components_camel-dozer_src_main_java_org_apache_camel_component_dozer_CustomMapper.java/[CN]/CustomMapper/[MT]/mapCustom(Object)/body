{
  String[] prms=getParameter().split(",");
  String className=prms[0];
  String operation=prms.length > 1 ? prms[1] : null;
  String[][] prmTypesAndValues;
  if (prms.length > 2) {
    prmTypesAndValues=new String[prms.length - 2][2];
    for (int ndx=0; ndx < prmTypesAndValues.length; ndx++) {
      String prm=prms[ndx + 2];
      String[] parts=prm.split("=");
      if (parts.length != 2)       throw new RuntimeException("Value missing for parameter " + prm);
      prmTypesAndValues[ndx][0]=parts[0];
      prmTypesAndValues[ndx][1]=parts[1];
    }
  }
 else   prmTypesAndValues=null;
  Object customObj;
  Method method=null;
  try {
    Class<?> customClass=resolver.resolveClass(className);
    customObj=customClass.newInstance();
    if (operation != null && prmTypesAndValues != null) {
      method=selectMethod(customClass,operation,source,prmTypesAndValues);
    }
 else     if (operation != null) {
      method=customClass.getMethod(operation,source.getClass());
    }
 else {
      method=selectMethod(customClass,source);
    }
  }
 catch (  Exception e) {
    throw new RuntimeException("Failed to load custom function",e);
  }
  if (method == null) {
    throw new RuntimeException("No eligible custom function methods in " + className);
  }
  try {
    if (prmTypesAndValues != null) {
      return invokeFunction(method,customObj,source,prmTypesAndValues);
    }
 else {
      return method.invoke(customObj,source);
    }
  }
 catch (  Exception e) {
    throw new RuntimeException("Error while invoking custom function",e);
  }
}
