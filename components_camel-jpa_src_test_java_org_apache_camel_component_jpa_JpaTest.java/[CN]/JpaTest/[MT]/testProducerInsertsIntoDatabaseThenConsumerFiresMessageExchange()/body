{
  transactionTemplate.execute(new TransactionCallback<Object>(){
    public Object doInTransaction(    TransactionStatus status){
      entityManager.joinTransaction();
      entityManager.createQuery("delete from " + entityName).executeUpdate();
      return null;
    }
  }
);
  List<?> results=entityManager.createQuery(queryText).getResultList();
  assertEquals("Should have no results: " + results,0,results.size());
  template.send(endpoint,new Processor(){
    public void process(    Exchange exchange){
      exchange.getIn().setBody(new SendEmail("foo@bar.com"));
    }
  }
);
  results=entityManager.createQuery(queryText).getResultList();
  assertEquals("Should have results: " + results,1,results.size());
  SendEmail mail=(SendEmail)results.get(0);
  assertEquals("address property","foo@bar.com",mail.getAddress());
  consumer=endpoint.createConsumer(new Processor(){
    public void process(    Exchange e){
      LOG.info("Received exchange: " + e.getIn());
      receivedExchange=e;
      EntityManager entityManager=e.getIn().getHeader(JpaConstants.ENTITYMANAGER,EntityManager.class);
      assertNotNull("Should have a EntityManager as header",entityManager);
      latch.countDown();
    }
  }
);
  consumer.start();
  assertTrue(latch.await(50,TimeUnit.SECONDS));
  assertNotNull(receivedExchange);
  SendEmail result=receivedExchange.getIn().getBody(SendEmail.class);
  assertNotNull("Received a POJO",result);
  assertEquals("address property","foo@bar.com",result.getAddress());
}
