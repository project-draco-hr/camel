{
  ObjectHelper.notNull(endpoint,"endpoint");
  File file=new File(fileName);
  if (file.exists()) {
    if (endpoint.getFileExist() == GenericFileExist.Ignore) {
      LOG.trace("An existing file already exists: {}. Ignore and do not override it.",file);
      return true;
    }
 else     if (endpoint.getFileExist() == GenericFileExist.Fail) {
      throw new GenericFileOperationFailedException("File already exist: " + file + ". Cannot write new file.");
    }
  }
  try {
    String charset=IOHelper.getCharsetName(exchange,false);
    if (charset == null) {
      charset=endpoint.getCharset();
    }
    File source=null;
    if (charset == null) {
      Object body=exchange.getIn().getBody();
      if (body instanceof WrappedFile) {
        body=((WrappedFile)body).getFile();
      }
      if (body instanceof File) {
        source=(File)body;
      }
    }
    if (source != null) {
      File local=exchange.getIn().getHeader(Exchange.FILE_LOCAL_WORK_PATH,File.class);
      if (local != null && local.exists()) {
        boolean renamed=writeFileByLocalWorkPath(local,file);
        if (renamed) {
          keepLastModified(exchange,file);
          exchange.getIn().setHeader(Exchange.FILE_LOCAL_WORK_PATH,null);
          return true;
        }
      }
 else       if (source.exists()) {
        writeFileByFile(source,file);
        keepLastModified(exchange,file);
        return true;
      }
    }
    if (charset != null) {
      Reader in=exchange.getIn().getBody(Reader.class);
      if (in == null) {
        InputStream is=exchange.getIn().getMandatoryBody(InputStream.class);
        in=new InputStreamReader(is);
      }
      in=IOHelper.buffered(in);
      writeFileByReaderWithCharset(in,file,charset);
    }
 else {
      InputStream in=exchange.getIn().getMandatoryBody(InputStream.class);
      writeFileByStream(in,file);
    }
    keepLastModified(exchange,file);
    return true;
  }
 catch (  IOException e) {
    throw new GenericFileOperationFailedException("Cannot store file: " + file,e);
  }
catch (  InvalidPayloadException e) {
    throw new GenericFileOperationFailedException("Cannot store file: " + file,e);
  }
}
