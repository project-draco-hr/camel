{
  MockEndpoint mock=getMockEndpoint("mock:CamelTestTopic");
  mock.expectedMessageCount(1);
  mock.expectedHeaderReceived("CamelSalesforceTopicName","CamelTestTopic");
  mock.expectedHeaderReceived("CamelSalesforceChannel","/topic/CamelTestTopic");
  Merchandise__c merchandise=new Merchandise__c();
  merchandise.setName("TestNotification");
  merchandise.setDescription__c("Merchandise for testing Streaming API updated on " + new DateTime().toString());
  merchandise.setPrice__c(9.99);
  merchandise.setTotal_Inventory__c(1000.0);
  CreateSObjectResult result=template().requestBody("direct:upsertSObject",merchandise,CreateSObjectResult.class);
  assertTrue("Merchandise test record not created",result == null || result.getSuccess());
  try {
    mock.assertIsSatisfied();
    final Message in=mock.getExchanges().get(0).getIn();
    merchandise=in.getMandatoryBody(Merchandise__c.class);
    assertNotNull("Missing event body",merchandise);
    log.info("Merchandise notification: {}",merchandise.toString());
    assertNotNull("Missing field Id",merchandise.getId());
    assertNotNull("Missing field Name",merchandise.getName());
    assertNotNull("Missing header CamelSalesforceClientId",in.getHeader("CamelSalesforceClientId"));
    assertNotNull("Missing header CamelSalesforceEventType",in.getHeader("CamelSalesforceEventType"));
    assertNotNull("Missing header CamelSalesforceCreatedDate",in.getHeader("CamelSalesforceCreatedDate"));
  }
  finally {
    assertNull(template().requestBody("direct:deleteSObjectWithId",merchandise));
    QueryRecordsPushTopic records=template().requestBody("direct:query",null,QueryRecordsPushTopic.class);
    assertEquals("Test topic not found",1,records.getTotalSize());
    assertNull(template().requestBody("direct:deleteSObject",records.getRecords().get(0)));
  }
}
