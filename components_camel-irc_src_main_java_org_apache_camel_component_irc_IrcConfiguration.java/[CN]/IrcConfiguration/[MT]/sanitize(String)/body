{
  int colon=uri.indexOf(':');
  if (colon != -1 && uri.indexOf("://") != colon) {
    uri=uri.substring(0,colon) + "://" + uri.substring(colon + 1);
  }
  try {
    URI u=new URI(UnsafeUriCharactersEncoder.encode(uri));
    String[] userInfo=u.getUserInfo() != null ? u.getUserInfo().split(":") : null;
    String username=userInfo != null ? userInfo[0] : null;
    String password=userInfo != null && userInfo.length > 1 ? userInfo[1] : null;
    String path=URLDecoder.decode(u.getPath() != null ? u.getPath() : "","UTF-8");
    if (path.startsWith("/")) {
      path=path.substring(1);
    }
    if (path.startsWith("#") && !path.startsWith("##")) {
      path=path.substring(1);
    }
    Map<String,Object> parameters=URISupport.parseParameters(u);
    String user=(String)parameters.get("username");
    String nick=(String)parameters.get("nickname");
    if (user != null) {
      if (username == null) {
        username=user;
      }
 else       if (!username.equals(user)) {
        LOG.warn("Username specified twice in endpoint URI with different values. " + "The userInfo value ('{}') will be used, paramter ('{}') ignored",username,user);
      }
      parameters.remove("username");
    }
    if (nick != null) {
      if (username == null) {
        username=nick;
      }
      if (username.equals(nick)) {
        parameters.remove("nickname");
      }
    }
    if (username == null) {
      throw new RuntimeCamelException("IrcEndpoint URI with no user/nick specified is invalid");
    }
    String pwd=(String)parameters.get("password");
    if (pwd != null) {
      password=pwd;
      parameters.remove("password");
    }
    ArrayList<String> cl=new ArrayList<String>();
    String channels=(String)parameters.get("channels");
    String keys=(String)parameters.get("keys");
    keys=keys == null ? keys : keys + " ";
    if (channels != null) {
      String[] chs=channels.split(",");
      String[] ks=keys != null ? keys.split(",") : null;
      parameters.remove("channels");
      int count=chs.length;
      if (ks != null) {
        parameters.remove("keys");
        if (!path.isEmpty()) {
          LOG.warn("Specifying a channel '{}' in the URI path is ambiguous" + " when @channels and @keys are provided and will be ignored",path);
          path="";
        }
        if (ks.length != chs.length) {
          count=count < ks.length ? count : ks.length;
          LOG.warn("Different count of @channels and @keys. Only the first {} are used.",count);
        }
      }
      for (int i=0; i < count; i++) {
        String channel=chs[i].trim();
        String key=ks != null ? ks[i].trim() : null;
        if (channel.startsWith("#") && !channel.startsWith("##")) {
          channel=channel.substring(1);
        }
        if (key != null && !key.isEmpty()) {
          channel+="!" + key;
        }
        cl.add(channel);
      }
    }
 else {
      if (path.isEmpty()) {
        LOG.warn("No channel specified for the irc endpoint");
      }
      cl.add(path);
    }
    parameters.put("channel",cl);
    StringBuilder sb=new StringBuilder();
    sb.append(u.getScheme());
    sb.append("://");
    sb.append(username);
    sb.append(password == null ? "" : ":" + password);
    sb.append("@");
    sb.append(u.getHost());
    sb.append(u.getPort() == -1 ? "" : ":" + u.getPort());
    String query=formatQuery(parameters);
    if (!query.isEmpty()) {
      sb.append("?");
      sb.append(query);
    }
    return sb.toString();
  }
 catch (  Exception e) {
    throw new RuntimeCamelException(e);
  }
}
