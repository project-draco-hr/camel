{
  ChannelFuture answer;
  ChannelPipeline clientPipeline;
  if (configuration.getClientPipelineFactory() != null) {
    configuration.getClientPipelineFactory().setProducer(this);
    configuration.getClientPipelineFactory().setExchange(exchange);
    configuration.getClientPipelineFactory().setCallback(callback);
    clientPipeline=configuration.getClientPipelineFactory().getPipeline();
  }
 else {
    ClientPipelineFactory clientPipelineFactory=new DefaultClientPipelineFactory(this,exchange,callback);
    clientPipeline=clientPipelineFactory.getPipeline();
  }
  if (isTcp()) {
    ClientBootstrap clientBootstrap=new ClientBootstrap(channelFactory);
    clientBootstrap.setOption("keepAlive",configuration.isKeepAlive());
    clientBootstrap.setOption("tcpNoDelay",configuration.isTcpNoDelay());
    clientBootstrap.setOption("reuseAddress",configuration.isReuseAddress());
    clientBootstrap.setOption("connectTimeoutMillis",configuration.getConnectTimeout());
    clientBootstrap.setPipeline(clientPipeline);
    answer=clientBootstrap.connect(new InetSocketAddress(configuration.getHost(),configuration.getPort()));
    return answer;
  }
 else {
    ConnectionlessBootstrap connectionlessClientBootstrap=new ConnectionlessBootstrap(datagramChannelFactory);
    connectionlessClientBootstrap.setOption("child.keepAlive",configuration.isKeepAlive());
    connectionlessClientBootstrap.setOption("child.tcpNoDelay",configuration.isTcpNoDelay());
    connectionlessClientBootstrap.setOption("child.reuseAddress",configuration.isReuseAddress());
    connectionlessClientBootstrap.setOption("child.connectTimeoutMillis",configuration.getConnectTimeout());
    connectionlessClientBootstrap.setOption("child.broadcast",configuration.isBroadcast());
    connectionlessClientBootstrap.setOption("sendBufferSize",configuration.getSendBufferSize());
    connectionlessClientBootstrap.setOption("receiveBufferSize",configuration.getReceiveBufferSize());
    connectionlessClientBootstrap.setPipeline(clientPipeline);
    connectionlessClientBootstrap.bind(new InetSocketAddress(0));
    answer=connectionlessClientBootstrap.connect(new InetSocketAddress(configuration.getHost(),configuration.getPort()));
    return answer;
  }
}
