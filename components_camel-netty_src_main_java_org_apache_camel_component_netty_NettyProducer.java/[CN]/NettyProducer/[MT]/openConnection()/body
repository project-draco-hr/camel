{
  ChannelFuture answer;
  if (isTcp()) {
    ClientBootstrap clientBootstrap=new ClientBootstrap(channelFactory);
    clientBootstrap.setOption("keepAlive",configuration.isKeepAlive());
    clientBootstrap.setOption("tcpNoDelay",configuration.isTcpNoDelay());
    clientBootstrap.setOption("reuseAddress",configuration.isReuseAddress());
    clientBootstrap.setOption("connectTimeoutMillis",configuration.getConnectTimeout());
    clientBootstrap.setPipelineFactory(pipelineFactory);
    answer=clientBootstrap.connect(new InetSocketAddress(configuration.getHost(),configuration.getPort()));
    LOG.trace("Created new TCP client bootstrap connecting to {}:{}",configuration.getHost(),configuration.getPort());
    return answer;
  }
 else {
    ConnectionlessBootstrap connectionlessClientBootstrap=new ConnectionlessBootstrap(datagramChannelFactory);
    connectionlessClientBootstrap.setOption("child.keepAlive",configuration.isKeepAlive());
    connectionlessClientBootstrap.setOption("child.tcpNoDelay",configuration.isTcpNoDelay());
    connectionlessClientBootstrap.setOption("child.reuseAddress",configuration.isReuseAddress());
    connectionlessClientBootstrap.setOption("child.connectTimeoutMillis",configuration.getConnectTimeout());
    connectionlessClientBootstrap.setOption("child.broadcast",configuration.isBroadcast());
    connectionlessClientBootstrap.setOption("sendBufferSize",configuration.getSendBufferSize());
    connectionlessClientBootstrap.setOption("receiveBufferSize",configuration.getReceiveBufferSize());
    connectionlessClientBootstrap.setPipelineFactory(pipelineFactory);
    Channel channel=connectionlessClientBootstrap.bind(new InetSocketAddress(0));
    ALL_CHANNELS.add(channel);
    answer=connectionlessClientBootstrap.connect(new InetSocketAddress(configuration.getHost(),configuration.getPort()));
    LOG.trace("Created new UDP client bootstrap connecting to {}:{}",configuration.getHost(),configuration.getPort());
    return answer;
  }
}
