{
  if (!isRunAllowed()) {
    if (exchange.getException() == null) {
      exchange.setException(new RejectedExecutionException());
    }
    callback.done(true);
    return true;
  }
  Object body=NettyPayloadHelper.getIn(getEndpoint(),exchange);
  if (body == null) {
    noReplyLogger.log("No payload to send for exchange: " + exchange);
    callback.done(true);
    return true;
  }
  if (getConfiguration().isTextline()) {
    try {
      body=NettyHelper.getTextlineBody(body,exchange,getConfiguration().getDelimiter(),getConfiguration().isAutoAppendDelimiter());
    }
 catch (    NoTypeConversionAvailableException e) {
      exchange.setException(e);
      callback.done(true);
      return true;
    }
  }
  if (getConfiguration().getCharsetName() != null) {
    exchange.setProperty(Exchange.CHARSET_NAME,IOHelper.normalizeCharset(getConfiguration().getCharsetName()));
  }
  try {
    if (channelFuture == null || channel == null || !channel.isOpen()) {
      channel=null;
      channelFuture=openConnection();
      channel=openChannel(channelFuture);
    }
    state.set(channel,new NettyCamelState(callback,exchange));
  }
 catch (  Exception e) {
    exchange.setException(e);
    callback.done(true);
    return true;
  }
  NettyHelper.writeBodyAsync(channel,null,body,exchange,new ChannelFutureListener(){
    public void operationComplete(    ChannelFuture channelFuture) throws Exception {
      LOG.trace("Operation complete {}",channelFuture);
      if (!channelFuture.isSuccess()) {
        exchange.setException(channelFuture.getCause());
        callback.done(false);
        return;
      }
      if (!configuration.isSync()) {
        try {
          Boolean close;
          if (ExchangeHelper.isOutCapable(exchange)) {
            close=exchange.getOut().getHeader(NettyConstants.NETTY_CLOSE_CHANNEL_WHEN_COMPLETE,Boolean.class);
          }
 else {
            close=exchange.getIn().getHeader(NettyConstants.NETTY_CLOSE_CHANNEL_WHEN_COMPLETE,Boolean.class);
          }
          boolean disconnect=getConfiguration().isDisconnect();
          if (close != null) {
            disconnect=close;
          }
          if (disconnect) {
            if (LOG.isTraceEnabled()) {
              LOG.trace("Closing channel when complete at address: {}",getEndpoint().getConfiguration().getAddress());
            }
            NettyHelper.close(channel);
          }
        }
  finally {
          callback.done(false);
        }
      }
    }
  }
);
  return false;
}
