{
  Object bean=beanHolder.getBean();
  exchange.setProperty(Exchange.BEAN_HOLDER,beanHolder);
  Processor processor=getProcessor();
  BeanInfo beanInfo=beanHolder.getBeanInfo();
  if (processor != null) {
    processor.process(exchange);
    return;
  }
  Message in=exchange.getIn();
  if (in.getHeader(Exchange.BEAN_MULTI_PARAMETER_ARRAY) == null) {
    in.setHeader(Exchange.BEAN_MULTI_PARAMETER_ARRAY,isMultiParameterArray());
  }
  BeanInvocation beanInvoke=in.getBody(BeanInvocation.class);
  if (beanInvoke != null) {
    beanInvoke.invoke(bean,exchange);
    return;
  }
  boolean isExplicitMethod=false;
  String prevMethod=null;
  MethodInvocation invocation;
  if (methodObject != null) {
    invocation=beanInfo.createInvocation(methodObject,bean,exchange);
  }
 else {
    if (ObjectHelper.isNotEmpty(method)) {
      prevMethod=in.getHeader(Exchange.BEAN_METHOD_NAME,String.class);
      in.setHeader(Exchange.BEAN_METHOD_NAME,method);
      isExplicitMethod=true;
    }
    invocation=beanInfo.createInvocation(bean,exchange);
  }
  if (invocation == null) {
    throw new IllegalStateException("No method invocation could be created, no maching method could be found on: " + bean);
  }
 else {
    if (method == null) {
      method=invocation.getMethod().getName();
    }
  }
  try {
    Object value=invocation.proceed();
    if (value != null) {
      if (exchange.getPattern().isOutCapable()) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Setting bean invocation result on the OUT message: " + value);
        }
        exchange.getOut().setBody(value);
        exchange.getOut().getHeaders().putAll(exchange.getIn().getHeaders());
      }
 else {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Setting bean invocation result on the IN message: " + value);
        }
        exchange.getIn().setBody(value);
      }
    }
  }
 catch (  InvocationTargetException e) {
    Throwable throwable=e.getCause();
    if (throwable instanceof Exception) {
      Exception exception=(Exception)throwable;
      throw exception;
    }
 else {
      Error error=(Error)throwable;
      throw error;
    }
  }
 finally {
    if (isExplicitMethod) {
      in.setHeader(Exchange.BEAN_METHOD_NAME,prevMethod);
    }
  }
}
