{
  if (LOG.isDebugEnabled()) {
    LOG.debug(">>>> invoking method for: " + exchange);
  }
  Object bean=beanHolder.getBean();
  exchange.setProperty("CamelBean",bean);
  Processor processor=getProcessor();
  BeanInfo beanInfo=beanHolder.getBeanInfo();
  if (processor != null) {
    processor.process(exchange);
    return;
  }
  Message in=exchange.getIn();
  BeanInvocation beanInvoke=in.getBody(BeanInvocation.class);
  if (beanInvoke != null) {
    beanInvoke.invoke(bean,exchange);
    return;
  }
  boolean isExplicitMethod=false;
  String prevMethod=null;
  MethodInvocation invocation;
  if (methodObject != null) {
    invocation=beanInfo.createInvocation(methodObject,bean,exchange);
  }
 else {
    if (ObjectHelper.isNotNullAndNonEmpty(method)) {
      prevMethod=in.getHeader(METHOD_NAME,String.class);
      in.setHeader(METHOD_NAME,method);
      isExplicitMethod=true;
    }
    invocation=beanInfo.createInvocation(bean,exchange);
  }
  if (invocation == null) {
    throw new IllegalStateException("No method invocation could be created, " + "no maching method could be found on: " + bean);
  }
  try {
    Object value=invocation.proceed();
    if (value != null) {
      exchange.getOut().setBody(value);
    }
  }
 catch (  InvocationTargetException e) {
    Throwable cause=e.getCause();
    if (cause instanceof Exception) {
      throw (Exception)cause;
    }
 else {
      throw e;
    }
  }
catch (  Exception e) {
    throw e;
  }
catch (  Throwable throwable) {
    throw new Exception(throwable);
  }
 finally {
    if (isExplicitMethod) {
      in.setHeader(METHOD_NAME,prevMethod);
    }
  }
}
