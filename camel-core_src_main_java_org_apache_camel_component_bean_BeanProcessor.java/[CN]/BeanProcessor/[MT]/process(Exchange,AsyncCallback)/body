{
  String explicitMethodName=exchange.getIn().getHeader(Exchange.BEAN_METHOD_NAME,method,String.class);
  Object bean;
  BeanInfo beanInfo;
  try {
    bean=beanHolder.getBean();
    beanInfo=beanHolder.getBeanInfo(bean);
    if (beanInfo == null) {
      beanInfo=beanHolder.getBeanInfo();
    }
  }
 catch (  Throwable e) {
    exchange.setException(e);
    callback.done(true);
    return true;
  }
  if (allowProcessor(explicitMethodName,beanInfo)) {
    Processor processor=getProcessor();
    if (processor != null) {
      LOG.trace("Using a custom adapter as bean invocation: {}",processor);
      try {
        processor.process(exchange);
      }
 catch (      Throwable e) {
        exchange.setException(e);
      }
      callback.done(true);
      return true;
    }
  }
  Message in=exchange.getIn();
  BeanInvocation beanInvoke=null;
  if (in.getBody() != null && in.getBody() instanceof BeanInvocation) {
    beanInvoke=(BeanInvocation)in.getBody();
  }
  if (beanInvoke != null) {
    LOG.trace("Exchange IN body is a BeanInvocation instance: {}",beanInvoke);
    Class<?> clazz=beanInvoke.getMethod().getDeclaringClass();
    boolean sameBean=clazz.isInstance(bean);
    if (LOG.isDebugEnabled()) {
      LOG.debug("BeanHolder bean: {} and beanInvocation bean: {} is same instance: {}",new Object[]{bean.getClass(),clazz,sameBean});
    }
    if (sameBean) {
      beanInvoke.invoke(bean,exchange);
      exchange.getOut().getHeaders().putAll(exchange.getIn().getHeaders());
      callback.done(true);
      return true;
    }
  }
  if (in.getHeader(Exchange.BEAN_MULTI_PARAMETER_ARRAY) == null) {
    in.setHeader(Exchange.BEAN_MULTI_PARAMETER_ARRAY,isMultiParameterArray());
  }
  MethodInvocation invocation;
  if (explicitMethodName != null) {
    in.setHeader(Exchange.BEAN_METHOD_NAME,explicitMethodName);
  }
  try {
    invocation=beanInfo.createInvocation(bean,exchange);
  }
 catch (  Throwable e) {
    exchange.setException(e);
    callback.done(true);
    return true;
  }
 finally {
    in.removeHeader(Exchange.BEAN_MULTI_PARAMETER_ARRAY);
    in.removeHeader(Exchange.BEAN_METHOD_NAME);
  }
  if (invocation == null) {
    exchange.setException(new IllegalStateException("No method invocation could be created, no matching method could be found on: " + bean));
    callback.done(true);
    return true;
  }
  return invocation.proceed(callback);
}
