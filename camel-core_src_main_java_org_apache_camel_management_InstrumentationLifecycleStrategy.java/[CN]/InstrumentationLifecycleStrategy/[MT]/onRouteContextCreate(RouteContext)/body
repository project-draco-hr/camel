{
  if (!initialized) {
    return;
  }
  Map<ProcessorDefinition,ManagedPerformanceCounter> registeredCounters=new HashMap<ProcessorDefinition,ManagedPerformanceCounter>();
  RouteDefinition route=routeContext.getRoute();
  for (  ProcessorDefinition processor : route.getOutputs()) {
    if (!registerProcessor(processor)) {
      continue;
    }
    ObjectName name=null;
    try {
      name=getNamingStrategy().getObjectName(routeContext,processor);
      ManagedPerformanceCounter pc=new ManagedPerformanceCounter();
      agent.register(pc,name);
      registeredCounters.put(processor,pc);
    }
 catch (    MalformedObjectNameException e) {
      LOG.warn("Could not create MBean name: " + name,e);
    }
catch (    JMException e) {
      LOG.warn("Could not register PerformanceCounter MBean: " + name,e);
    }
  }
  routeContext.addInterceptStrategy(new InstrumentationInterceptStrategy(registeredCounters));
  final Endpoint endpoint=routeContext.getEndpoint();
  ProcessorDefinition out=null;
  for (  ProcessorDefinition processor : routeContext.getRoute().getOutputs()) {
    if (!registerProcessor(processor)) {
      continue;
    }
    out=processor;
    break;
  }
  if (out != null) {
    out.addInterceptStrategy(new InterceptStrategy(){
      public Processor wrapProcessorInInterceptors(      CamelContext context,      ProcessorDefinition definition,      Processor target,      Processor nextTarget) throws Exception {
        if (registeredRoutes.containsKey(endpoint)) {
          return target;
        }
        InstrumentationProcessor wrapper=new InstrumentationProcessor(null);
        wrapper.setType(definition.getShortName());
        wrapper.setProcessor(target);
        registeredRoutes.put(endpoint,wrapper);
        return wrapper;
      }
      public String toString(){
        return "Instrument";
      }
    }
);
  }
}
