{
  if (!initialized) {
    return;
  }
  Map<ProcessorDefinition,PerformanceCounter> registeredCounters=new HashMap<ProcessorDefinition,PerformanceCounter>();
  RouteDefinition route=routeContext.getRoute();
  for (  ProcessorDefinition processor : route.getOutputs()) {
    if (!registerProcessor(processor)) {
      continue;
    }
    ObjectName name=null;
    try {
      name=getNamingStrategy().getObjectName(routeContext,processor);
      PerformanceCounter pc=new PerformanceCounter();
      agent.register(pc,name);
      registeredCounters.put(processor,pc);
    }
 catch (    MalformedObjectNameException e) {
      LOG.warn("Could not create MBean name: " + name,e);
    }
catch (    JMException e) {
      LOG.warn("Could not register PerformanceCounter MBean: " + name,e);
    }
  }
  routeContext.addInterceptStrategy(new InstrumentationInterceptStrategy(registeredCounters));
  final Endpoint endpoint=routeContext.getEndpoint();
  ProcessorDefinition out=routeContext.getRoute().getOutputs().get(0);
  out.addInterceptStrategy(new InterceptStrategy(){
    public Processor wrapProcessorInInterceptors(    ProcessorDefinition processorDefinition,    Processor target,    Processor nextTarget) throws Exception {
      if (registeredRoutes.containsKey(endpoint)) {
        return target;
      }
      InstrumentationProcessor wrapper=new InstrumentationProcessor(null);
      wrapper.setType(processorDefinition.getShortName());
      wrapper.setProcessor(target);
      registeredRoutes.put(endpoint,wrapper);
      return wrapper;
    }
  }
);
}
