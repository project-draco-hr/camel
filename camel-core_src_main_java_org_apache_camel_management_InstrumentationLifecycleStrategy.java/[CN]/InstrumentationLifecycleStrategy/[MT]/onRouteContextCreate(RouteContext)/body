{
  if (!initialized) {
    return;
  }
  Map<ProcessorType,PerformanceCounter> counterMap=new HashMap<ProcessorType,PerformanceCounter>();
  RouteType route=routeContext.getRoute();
  Map<ObjectName,Integer> existingNames=new HashMap<ObjectName,Integer>();
  Map<ProcessorType,ObjectName> nameMap=new HashMap<ProcessorType,ObjectName>();
  for (  ProcessorType processor : route.getOutputs()) {
    ObjectName name=null;
    try {
      name=getNamingStrategy().getObjectName(routeContext,processor,null);
    }
 catch (    MalformedObjectNameException e) {
      LOG.warn("Could not register MBean: " + name,e);
    }
    if (name != null) {
      Integer instanceCount=existingNames.get(name);
      if (instanceCount != null) {
        instanceCount++;
      }
 else {
        instanceCount=new Integer(0);
        existingNames.put(name,instanceCount);
      }
      try {
        name=getNamingStrategy().getObjectName(routeContext,processor,instanceCount);
        nameMap.put(processor,name);
      }
 catch (      MalformedObjectNameException e) {
        LOG.warn("Could not register MBean: " + name,e);
      }
    }
  }
  for (  Map.Entry<ProcessorType,ObjectName> entry : nameMap.entrySet()) {
    PerformanceCounter pc=new PerformanceCounter();
    try {
      agent.register(pc,entry.getValue());
    }
 catch (    JMException e) {
      LOG.warn("Could not register PerformanceCounter MBean",e);
    }
    counterMap.put(entry.getKey(),pc);
  }
  routeContext.addInterceptStrategy(new InstrumentationInterceptStrategy(counterMap));
  routeContext.setErrorHandlerWrappingStrategy(new InstrumentationErrorHandlerWrappingStrategy(counterMap));
  RouteType routeType=routeContext.getRoute();
  if (routeType.getInputs() != null && !routeType.getInputs().isEmpty()) {
    if (routeType.getInputs().size() > 1) {
      LOG.warn("Add InstrumentationProcessor to first input only.");
    }
    Endpoint endpoint=routeType.getInputs().get(0).getEndpoint();
    List<ProcessorType<?>> exceptionHandlers=new ArrayList<ProcessorType<?>>();
    List<ProcessorType<?>> outputs=new ArrayList<ProcessorType<?>>();
    for (    ProcessorType output : routeType.getOutputs()) {
      if (output instanceof ExceptionType) {
        exceptionHandlers.add(output);
      }
 else {
        outputs.add(output);
      }
    }
    routeType.clearOutput();
    routeType.getOutputs().addAll(exceptionHandlers);
    InstrumentationProcessor processor=new InstrumentationProcessor();
    routeType.intercept(processor);
    for (    ProcessorType<?> processorType : outputs) {
      routeType.addOutput(processorType);
    }
    interceptorMap.put(endpoint,processor);
  }
}
