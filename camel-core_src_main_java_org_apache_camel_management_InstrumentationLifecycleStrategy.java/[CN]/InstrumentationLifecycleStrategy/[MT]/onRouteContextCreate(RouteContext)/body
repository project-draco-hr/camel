{
  if (!initialized) {
    return;
  }
  Map<ProcessorType,PerformanceCounter> counterMap=new HashMap<ProcessorType,PerformanceCounter>();
  RouteType route=routeContext.getRoute();
  for (  ProcessorType processor : route.getOutputs()) {
    ObjectName name=null;
    try {
      name=getNamingStrategy().getObjectName(routeContext,processor);
      PerformanceCounter pc=new PerformanceCounter();
      agent.register(pc,name);
      counterMap.put(processor,pc);
    }
 catch (    MalformedObjectNameException e) {
      LOG.warn("Could not create MBean name: " + name,e);
    }
catch (    JMException e) {
      LOG.warn("Could not register PerformanceCounter MBean: " + name,e);
    }
  }
  routeContext.addInterceptStrategy(new InstrumentationInterceptStrategy(counterMap));
  routeContext.setErrorHandlerWrappingStrategy(new InstrumentationErrorHandlerWrappingStrategy(counterMap));
  RouteType routeType=routeContext.getRoute();
  if (routeType.getInputs() != null && !routeType.getInputs().isEmpty()) {
    if (routeType.getInputs().size() > 1) {
      LOG.warn("Add InstrumentationProcessor to first input only.");
    }
    Endpoint endpoint=routeType.getInputs().get(0).getEndpoint();
    List<ProcessorType<?>> exceptionHandlers=new ArrayList<ProcessorType<?>>();
    List<ProcessorType<?>> outputs=new ArrayList<ProcessorType<?>>();
    for (    ProcessorType output : routeType.getOutputs()) {
      if (output instanceof ExceptionType) {
        exceptionHandlers.add(output);
      }
 else {
        outputs.add(output);
      }
    }
    routeType.clearOutput();
    routeType.getOutputs().addAll(exceptionHandlers);
    InstrumentationProcessor processor=new InstrumentationProcessor();
    routeType.intercept(processor);
    for (    ProcessorType<?> processorType : outputs) {
      routeType.addOutput(processorType);
    }
    interceptorMap.put(endpoint,processor);
  }
}
