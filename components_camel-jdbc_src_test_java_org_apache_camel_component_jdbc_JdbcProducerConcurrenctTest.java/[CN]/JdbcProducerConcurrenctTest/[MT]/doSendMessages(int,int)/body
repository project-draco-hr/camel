{
  mock.expectedMessageCount(files);
  ExecutorService executor=Executors.newFixedThreadPool(poolSize);
  Map<Integer,Future<Object>> responses=new ConcurrentHashMap<Integer,Future<Object>>();
  for (int i=0; i < files; i++) {
    final int index=i;
    Future<Object> out=executor.submit(new Callable<Object>(){
      public Object call() throws Exception {
        int id=(index % 2) + 1;
        return template.requestBody("direct:start","select * from customer where id = 'cust" + id + "'");
      }
    }
);
    responses.put(index,out);
  }
  assertMockEndpointsSatisfied();
  assertEquals(files,responses.size());
  for (int i=0; i < files; i++) {
    List rows=(List)responses.get(i).get();
    Map columns=(Map)rows.get(0);
    if (i % 2 == 0) {
      assertEquals("jstrachan",columns.get("NAME"));
    }
 else {
      assertEquals("nsandhu",columns.get("NAME"));
    }
  }
  executor.shutdownNow();
}
