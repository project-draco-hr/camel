{
  if (jolokia == null) {
    throw new IllegalStateException("Need to connect to remote jolokia first");
  }
  List<Map<String,String>> answer=new ArrayList<Map<String,String>>();
  ObjectName found=camelContextName != null ? lookupCamelContext(camelContextName) : null;
  if (found != null) {
    String pattern=String.format("%s:context=%s,type=routes,*",found.getDomain(),found.getKeyProperty("context"));
    J4pSearchResponse sr=jolokia.execute(new J4pSearchRequest(pattern));
    List<J4pReadRequest> list=new ArrayList<J4pReadRequest>();
    for (    ObjectName on : sr.getObjectNames()) {
      list.add(new J4pReadRequest(on,"CamelId","RouteId","State","Uptime","ExchangesTotal","ExchangesInflight","ExchangesFailed"));
    }
    List<J4pReadResponse> lrr=jolokia.execute(list);
    for (    J4pReadResponse rr : lrr) {
      String routeId=rr.getValue("RouteId").toString();
      if (filter == null || routeId.matches(filter)) {
        Map<String,String> row=new LinkedHashMap<String,String>();
        row.put("camelContextName",rr.getValue("CamelId").toString());
        row.put("routeId",routeId);
        row.put("state",rr.getValue("State").toString());
        row.put("uptime",rr.getValue("Uptime").toString());
        row.put("exchangesTotal",rr.getValue("ExchangesTotal").toString());
        row.put("exchangesInflight",rr.getValue("ExchangesInflight").toString());
        row.put("exchangesFailed",rr.getValue("ExchangesFailed").toString());
        answer.add(row);
      }
    }
  }
 else {
    List<Map<String,String>> camelContexts=this.getCamelContexts();
    for (    Map<String,String> row : camelContexts) {
      List<Map<String,String>> routes=getRoutes(row.get("name"),filter);
      answer.addAll(routes);
    }
  }
  Collections.sort(answer,new Comparator<Map<String,String>>(){
    @Override public int compare(    Map<String,String> o1,    Map<String,String> o2){
      String c1=o1.get("camelContextName");
      String c2=o2.get("camelContextName");
      int answer=c1.compareTo(c2);
      if (answer == 0) {
        answer=o1.get("routeId").compareTo(o2.get("routeId"));
      }
      return answer;
    }
  }
);
  return answer;
}
