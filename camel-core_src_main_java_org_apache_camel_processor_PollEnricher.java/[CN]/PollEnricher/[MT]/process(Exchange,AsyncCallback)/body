{
  try {
    preCheckPoll(exchange);
  }
 catch (  Exception e) {
    exchange.setException(new CamelExchangeException("Error during pre poll check",exchange,e));
    callback.done(true);
    return true;
  }
  PollingConsumer target=consumer;
  Endpoint endpoint=null;
  if (expression != null) {
    try {
      Object recipient=expression.evaluate(exchange,Object.class);
      endpoint=resolveEndpoint(exchange,recipient);
      target=consumerCache.acquirePollingConsumer(endpoint);
    }
 catch (    Throwable e) {
      exchange.setException(e);
      callback.done(true);
      return true;
    }
  }
  Exchange resourceExchange;
  try {
    if (timeout < 0) {
      LOG.debug("Consumer receive: {}",target);
      resourceExchange=consumer.receive();
    }
 else     if (timeout == 0) {
      LOG.debug("Consumer receiveNoWait: {}",target);
      resourceExchange=target.receiveNoWait();
    }
 else {
      LOG.debug("Consumer receive with timeout: {} ms. {}",timeout,target);
      resourceExchange=target.receive(timeout);
    }
    if (resourceExchange == null) {
      LOG.debug("Consumer received no exchange");
    }
 else {
      LOG.debug("Consumer received: {}",resourceExchange);
    }
  }
 catch (  Exception e) {
    exchange.setException(new CamelExchangeException("Error during poll",exchange,e));
    callback.done(true);
    return true;
  }
 finally {
    if (expression != null) {
      consumerCache.releasePollingConsumer(endpoint,target);
    }
  }
  try {
    if (!isAggregateOnException() && (resourceExchange != null && resourceExchange.isFailed())) {
      copyResultsPreservePattern(exchange,resourceExchange);
    }
 else {
      prepareResult(exchange);
      ExchangeHelper.prepareAggregation(exchange,resourceExchange);
      Exchange aggregatedExchange=aggregationStrategy.aggregate(exchange,resourceExchange);
      if (aggregatedExchange != null) {
        copyResultsPreservePattern(exchange,aggregatedExchange);
        if (resourceExchange != null) {
          resourceExchange.handoverCompletions(exchange);
        }
      }
    }
    if (exchange.hasOut()) {
      exchange.getOut().setHeader(Exchange.TO_ENDPOINT,target.getEndpoint().getEndpointUri());
    }
 else {
      exchange.getIn().setHeader(Exchange.TO_ENDPOINT,target.getEndpoint().getEndpointUri());
    }
  }
 catch (  Throwable e) {
    exchange.setException(new CamelExchangeException("Error occurred during aggregation",exchange,e));
    callback.done(true);
    return true;
  }
  callback.done(true);
  return true;
}
