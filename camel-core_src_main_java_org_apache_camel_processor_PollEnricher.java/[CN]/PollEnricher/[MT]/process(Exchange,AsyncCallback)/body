{
  try {
    preCheckPoll(exchange);
  }
 catch (  Exception e) {
    exchange.setException(new CamelExchangeException("Error during pre poll check",exchange,e));
    callback.done(true);
    return true;
  }
  PollingConsumer consumer;
  Endpoint endpoint;
  Object recipient=null;
  try {
    recipient=expression.evaluate(exchange,Object.class);
    endpoint=resolveEndpoint(exchange,recipient);
    consumer=consumerCache.acquirePollingConsumer(endpoint);
  }
 catch (  Throwable e) {
    if (isIgnoreInvalidEndpoint()) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Endpoint uri is invalid: " + recipient + ". This exception will be ignored.",e);
      }
    }
 else {
      exchange.setException(e);
    }
    callback.done(true);
    return true;
  }
  Consumer delegate=consumer;
  if (consumer instanceof EventDrivenPollingConsumer) {
    delegate=((EventDrivenPollingConsumer)consumer).getDelegateConsumer();
  }
  boolean bridgeErrorHandler=false;
  if (delegate instanceof DefaultConsumer) {
    ExceptionHandler handler=((DefaultConsumer)delegate).getExceptionHandler();
    if (handler != null && handler instanceof BridgeExceptionHandlerToErrorHandler) {
      bridgeErrorHandler=true;
    }
  }
  Exchange resourceExchange;
  try {
    if (timeout < 0) {
      LOG.debug("Consumer receive: {}",consumer);
      resourceExchange=consumer.receive();
    }
 else     if (timeout == 0) {
      LOG.debug("Consumer receiveNoWait: {}",consumer);
      resourceExchange=consumer.receiveNoWait();
    }
 else {
      LOG.debug("Consumer receive with timeout: {} ms. {}",timeout,consumer);
      resourceExchange=consumer.receive(timeout);
    }
    if (resourceExchange == null) {
      LOG.debug("Consumer received no exchange");
    }
 else {
      LOG.debug("Consumer received: {}",resourceExchange);
    }
  }
 catch (  Exception e) {
    exchange.setException(new CamelExchangeException("Error during poll",exchange,e));
    callback.done(true);
    return true;
  }
 finally {
    consumerCache.releasePollingConsumer(endpoint,consumer);
  }
  Object redeliveried=exchange.getIn().getHeader(Exchange.REDELIVERED);
  Object redeliveryCounter=exchange.getIn().getHeader(Exchange.REDELIVERY_COUNTER);
  Object redeliveryMaxCounter=exchange.getIn().getHeader(Exchange.REDELIVERY_MAX_COUNTER);
  Throwable cause=null;
  if (resourceExchange != null && bridgeErrorHandler) {
    cause=resourceExchange.getException();
  }
  try {
    if (!isAggregateOnException() && (resourceExchange != null && resourceExchange.isFailed())) {
      copyResultsPreservePattern(exchange,resourceExchange);
    }
 else {
      prepareResult(exchange);
      ExchangeHelper.prepareAggregation(exchange,resourceExchange);
      Exchange aggregatedExchange=aggregationStrategy.aggregate(exchange,resourceExchange);
      if (aggregatedExchange != null) {
        copyResultsPreservePattern(exchange,aggregatedExchange);
        if (resourceExchange != null) {
          resourceExchange.handoverCompletions(exchange);
        }
      }
    }
    if (cause != null) {
      exchange.setException(cause);
      exchange.removeProperties(Exchange.REDELIVERY_EXHAUSTED);
      if (redeliveried != null) {
        if (exchange.hasOut()) {
          exchange.getOut().setHeader(Exchange.REDELIVERED,redeliveried);
        }
 else {
          exchange.getIn().setHeader(Exchange.REDELIVERED,redeliveried);
        }
      }
      if (redeliveryCounter != null) {
        if (exchange.hasOut()) {
          exchange.getOut().setHeader(Exchange.REDELIVERY_COUNTER,redeliveryCounter);
        }
 else {
          exchange.getIn().setHeader(Exchange.REDELIVERY_COUNTER,redeliveryCounter);
        }
      }
      if (redeliveryMaxCounter != null) {
        if (exchange.hasOut()) {
          exchange.getOut().setHeader(Exchange.REDELIVERY_MAX_COUNTER,redeliveryMaxCounter);
        }
 else {
          exchange.getIn().setHeader(Exchange.REDELIVERY_MAX_COUNTER,redeliveryMaxCounter);
        }
      }
    }
    if (exchange.hasOut()) {
      exchange.getOut().setHeader(Exchange.TO_ENDPOINT,consumer.getEndpoint().getEndpointUri());
    }
 else {
      exchange.getIn().setHeader(Exchange.TO_ENDPOINT,consumer.getEndpoint().getEndpointUri());
    }
  }
 catch (  Throwable e) {
    exchange.setException(new CamelExchangeException("Error occurred during aggregation",exchange,e));
    callback.done(true);
    return true;
  }
  callback.done(true);
  return true;
}
