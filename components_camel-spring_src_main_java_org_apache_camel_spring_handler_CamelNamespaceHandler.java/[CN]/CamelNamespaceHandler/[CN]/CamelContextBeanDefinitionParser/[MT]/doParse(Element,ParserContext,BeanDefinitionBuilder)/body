{
  super.doParse(element,parserContext,builder);
  String contextId=element.getAttribute("id");
  if (ObjectHelper.isEmpty(contextId)) {
    contextId="camelContext";
    element.setAttribute("id",contextId);
  }
  Object value=parseUsingJaxb(element,parserContext);
  if (value instanceof CamelContextFactoryBean) {
    CamelContextFactoryBean factoryBean=(CamelContextFactoryBean)value;
    builder.addPropertyValue("id",contextId);
    builder.addPropertyValue("routes",factoryBean.getRoutes());
    builder.addPropertyValue("intercepts",factoryBean.getIntercepts());
    builder.addPropertyValue("dataFormats",factoryBean.getDataFormats());
    builder.addPropertyValue("exceptionClauses",factoryBean.getExceptionClauses());
    builder.addPropertyValue("builderRefs",factoryBean.getBuilderRefs());
    if (factoryBean.getPackages().length > 0) {
      builder.addPropertyValue("packages",factoryBean.getPackages());
    }
  }
  boolean createdBeanPostProcessor=false;
  NodeList list=element.getChildNodes();
  int size=list.getLength();
  for (int i=0; i < size; i++) {
    Node child=list.item(i);
    if (child instanceof Element) {
      Element childElement=(Element)child;
      String localName=child.getLocalName();
      if (localName.equals("beanPostProcessor")) {
        createBeanPostProcessor(parserContext,contextId,childElement,builder);
        createdBeanPostProcessor=true;
      }
 else       if (localName.equals("endpoint")) {
        registerEndpoint(childElement,parserContext,contextId);
      }
 else {
        BeanDefinitionParser parser=parserMap.get(localName);
        if (parser != null) {
          BeanDefinition definition=parser.parse(childElement,parserContext);
          String id=childElement.getAttribute("id");
          if (ObjectHelper.isNotEmpty(id)) {
            parserContext.registerComponent(new BeanComponentDefinition(definition,id));
            if (localName.equals("jmxAgent")) {
              builder.addPropertyReference("camelJMXAgent",id);
            }
          }
        }
      }
    }
  }
  registerEndpointsWithIdsDefinedInFromToTypes(element,parserContext,contextId);
  injectNamespaces(element);
  if (!createdBeanPostProcessor) {
    Element childElement=element.getOwnerDocument().createElement("beanPostProcessor");
    element.appendChild(childElement);
    createBeanPostProcessor(parserContext,contextId,childElement,builder);
  }
}
