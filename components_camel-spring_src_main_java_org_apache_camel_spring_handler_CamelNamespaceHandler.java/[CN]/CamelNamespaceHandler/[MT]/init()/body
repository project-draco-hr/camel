{
  registerParser("endpoint",endpointParser);
  registerParser("proxy",proxyParser);
  registerParser("export",exportParser);
  registerParser("jmxAgent",jmxAgentParser);
  registerParser("camelContext",new BeanDefinitionParser(CamelContextFactoryBean.class){
    @Override protected void doParse(    Element element,    ParserContext parserContext,    BeanDefinitionBuilder builder){
      super.doParse(element,parserContext,builder);
      String contextId=element.getAttribute("id");
      if (ObjectHelper.isNullOrBlank(contextId)) {
        contextId="camelContext";
        element.setAttribute("id",contextId);
      }
      Object value=parseUsingJaxb(element,parserContext);
      if (value instanceof CamelContextFactoryBean) {
        CamelContextFactoryBean factoryBean=(CamelContextFactoryBean)value;
        builder.addPropertyValue("routes",factoryBean.getRoutes());
        if (factoryBean.getPackages().length > 0) {
          builder.addPropertyValue("packages",factoryBean.getPackages());
        }
      }
      boolean createdBeanPostProcessor=false;
      NodeList list=element.getChildNodes();
      int size=list.getLength();
      for (int i=0; i < size; i++) {
        Node child=list.item(i);
        if (child instanceof Element) {
          Element childElement=(Element)child;
          String localName=child.getLocalName();
          if (localName.equals("beanPostProcessor")) {
            createBeanPostProcessor(parserContext,contextId,childElement);
            createdBeanPostProcessor=true;
          }
 else           if (localName.equals("endpoint")) {
            BeanDefinition definition=endpointParser.parse(childElement,parserContext);
            String id=childElement.getAttribute("id");
            if (isNotNullAndNonEmpty(id)) {
              definition.getPropertyValues().addPropertyValue("context",new RuntimeBeanReference(contextId));
              parserContext.registerComponent(new BeanComponentDefinition(definition,id));
            }
          }
 else           if (localName.equals("proxy")) {
            BeanDefinition definition=proxyParser.parse(childElement,parserContext);
            String id=childElement.getAttribute("id");
            if (isNotNullAndNonEmpty(id)) {
              parserContext.registerComponent(new BeanComponentDefinition(definition,id));
            }
          }
 else           if (localName.equals("export")) {
            BeanDefinition definition=exportParser.parse(childElement,parserContext);
            String id=childElement.getAttribute("id");
            if (isNotNullAndNonEmpty(id)) {
              parserContext.registerComponent(new BeanComponentDefinition(definition,id));
            }
          }
 else           if (localName.equals("jmxAgent")) {
            BeanDefinition definition=jmxAgentParser.parse(childElement,parserContext);
            String id=childElement.getAttribute("id");
            if (isNotNullAndNonEmpty(id)) {
              id="camelContextJmxAgent";
            }
            parserContext.registerComponent(new BeanComponentDefinition(definition,id));
          }
        }
      }
      if (!createdBeanPostProcessor) {
        Element childElement=element.getOwnerDocument().createElement("beanPostProcessor");
        element.appendChild(childElement);
        createBeanPostProcessor(parserContext,contextId,childElement);
      }
    }
  }
);
  registerParser("xpath",new BeanDefinitionParser(XPathBuilder.class){
    @Override protected void doParse(    Element element,    ParserContext parserContext,    BeanDefinitionBuilder builder){
      String xpath=DomUtils.getTextValue(element);
      builder.addConstructorArg(xpath);
      super.doParse(element,parserContext,builder);
      builder.addPropertyValue("namespacesFromDom",element);
    }
  }
);
}
