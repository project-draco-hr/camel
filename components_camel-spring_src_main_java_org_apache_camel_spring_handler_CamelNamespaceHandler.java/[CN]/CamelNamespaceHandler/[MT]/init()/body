{
  registerParser("routeContext",new RouteContextDefinitionParser());
  addBeanDefinitionParser("keyStoreParameters",KeyStoreParametersFactoryBean.class,true,true);
  addBeanDefinitionParser("secureRandomParameters",SecureRandomParametersFactoryBean.class,true,true);
  registerBeanDefinitionParser("sslContextParameters",new SSLContextParametersFactoryBeanBeanDefinitionParser());
  addBeanDefinitionParser("proxy",CamelProxyFactoryBean.class,true,false);
  addBeanDefinitionParser("template",CamelProducerTemplateFactoryBean.class,true,false);
  addBeanDefinitionParser("consumerTemplate",CamelConsumerTemplateFactoryBean.class,true,false);
  addBeanDefinitionParser("export",CamelServiceExporter.class,true,false);
  addBeanDefinitionParser("endpoint",CamelEndpointFactoryBean.class,true,false);
  addBeanDefinitionParser("threadPool",CamelThreadPoolFactoryBean.class,true,true);
  addBeanDefinitionParser("redeliveryPolicyProfile",CamelRedeliveryPolicyFactoryBean.class,true,true);
  addBeanDefinitionParser("jmxAgent",CamelJMXAgentDefinition.class,false,false);
  addBeanDefinitionParser("propertyPlaceholder",CamelPropertyPlaceholderDefinition.class,false,false);
  BeanDefinitionParser errorHandlerParser=new ErrorHandlerDefinitionParser();
  registerParser("errorHandler",errorHandlerParser);
  parserMap.put("errorHandler",errorHandlerParser);
  Class<?> cl=CamelContextFactoryBean.class;
  LOG.debug("Using {} as CamelContextBeanDefinitionParser",cl.getCanonicalName());
  registerParser("camelContext",new CamelContextBeanDefinitionParser(cl));
}
