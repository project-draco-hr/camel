{
  registerParser("routeContext",new RouteContextDefinitionParser());
  addBeanDefinitionParser("proxy",CamelProxyFactoryBean.class,true);
  addBeanDefinitionParser("template",CamelProducerTemplateFactoryBean.class,true);
  addBeanDefinitionParser("consumerTemplate",CamelConsumerTemplateFactoryBean.class,true);
  addBeanDefinitionParser("export",CamelServiceExporter.class,true);
  addBeanDefinitionParser("endpoint",CamelEndpointFactoryBean.class,true);
  addBeanDefinitionParser("threadPool",CamelThreadPoolFactoryBean.class,true);
  addBeanDefinitionParser("jmxAgent",CamelJMXAgentDefinition.class,false);
  addBeanDefinitionParser("propertyPlaceholder",CamelPropertyPlaceholderDefinition.class,false);
  BeanDefinitionParser errorHandlerParser=new ErrorHandlerDefinitionParser();
  registerParser("errorHandler",errorHandlerParser);
  parserMap.put("errorHandler",errorHandlerParser);
  boolean osgi=false;
  Class cl=CamelContextFactoryBean.class;
  try {
    Class c=Class.forName("org.apache.camel.core.osgi.Activator");
    Method mth=c.getDeclaredMethod("getBundle");
    mth.setAccessible(true);
    Object bundle=mth.invoke(null);
    if (bundle != null) {
      cl=Class.forName("org.apache.camel.osgi.CamelContextFactoryBean");
      osgi=true;
    }
  }
 catch (  Throwable t) {
    t.printStackTrace();
    LOG.trace("Cannot find class so assuming not running in OSGi container: " + t.getMessage());
  }
  if (osgi) {
    LOG.info("camel-osgi.jar/camel-spring-osgi.jar detected in classpath");
  }
 else {
    LOG.info("camel-osgi.jar/camel-spring-osgi.jar not detected in classpath");
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Using " + cl.getCanonicalName() + " as CamelContextBeanDefinitionParser");
  }
  registerParser("camelContext",new CamelContextBeanDefinitionParser(cl));
}
