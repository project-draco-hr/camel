{
  boolean template=false;
  boolean fluentTemplate=false;
  boolean consumerTemplate=false;
  NodeList list=element.getChildNodes();
  int size=list.getLength();
  for (int i=0; i < size; i++) {
    Node child=list.item(i);
    if (child instanceof Element) {
      Element childElement=(Element)child;
      String localName=childElement.getLocalName();
      if ("template".equals(localName)) {
        template=true;
      }
 else       if ("fluentTemplate".equals(localName)) {
        fluentTemplate=true;
      }
 else       if ("consumerTemplate".equals(localName)) {
        consumerTemplate=true;
      }
    }
  }
  if (!template) {
    boolean existing=autoRegisterMap.get("template") != null;
    boolean inUse=false;
    try {
      inUse=parserContext.getRegistry().isBeanNameInUse("template");
    }
 catch (    BeanCreationException e) {
      LOG.debug("Error checking isBeanNameInUse(template). This exception will be ignored",e);
    }
    if (!inUse || existing) {
      String id="template";
      Element templateElement=element.getOwnerDocument().createElement("template");
      templateElement.setAttribute("id",id);
      BeanDefinitionParser parser=parserMap.get("template");
      BeanDefinition definition=parser.parse(templateElement,parserContext);
      autoRegisterBeanDefinition(id,definition,parserContext,contextId);
    }
  }
  if (!fluentTemplate) {
    boolean existing=autoRegisterMap.get("fluentTemplate") != null;
    boolean inUse=false;
    try {
      inUse=parserContext.getRegistry().isBeanNameInUse("fluentTemplate");
    }
 catch (    BeanCreationException e) {
      LOG.debug("Error checking isBeanNameInUse(fluentTemplate). This exception will be ignored",e);
    }
    if (!inUse || existing) {
      String id="fluentTemplate";
      Element templateElement=element.getOwnerDocument().createElement("fluentTemplate");
      templateElement.setAttribute("id",id);
      BeanDefinitionParser parser=parserMap.get("fluentTemplate");
      BeanDefinition definition=parser.parse(templateElement,parserContext);
      autoRegisterBeanDefinition(id,definition,parserContext,contextId);
    }
  }
  if (!consumerTemplate) {
    boolean existing=autoRegisterMap.get("consumerTemplate") != null;
    boolean inUse=false;
    try {
      inUse=parserContext.getRegistry().isBeanNameInUse("consumerTemplate");
    }
 catch (    BeanCreationException e) {
      LOG.debug("Error checking isBeanNameInUse(consumerTemplate). This exception will be ignored",e);
    }
    if (!inUse || existing) {
      String id="consumerTemplate";
      Element templateElement=element.getOwnerDocument().createElement("consumerTemplate");
      templateElement.setAttribute("id",id);
      BeanDefinitionParser parser=parserMap.get("consumerTemplate");
      BeanDefinition definition=parser.parse(templateElement,parserContext);
      autoRegisterBeanDefinition(id,definition,parserContext,contextId);
    }
  }
}
