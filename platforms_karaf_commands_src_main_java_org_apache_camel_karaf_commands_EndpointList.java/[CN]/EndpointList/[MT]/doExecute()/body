{
  List<Endpoint> endpoints=camelController.getEndpoints(name);
  final Map<String,Integer> columnWidths=computeColumnWidths(endpoints);
  final String headerFormat=buildFormatString(columnWidths,true);
  final String rowFormat=buildFormatString(columnWidths,false);
  final PrintStream out=System.out;
  if (endpoints.size() > 0) {
    out.println(String.format(headerFormat,CONTEXT_COLUMN_LABEL,URI_COLUMN_LABEL,STATUS_COLUMN_LABEL));
    out.println(String.format(headerFormat,"-------","---","------"));
    for (    final Endpoint endpoint : endpoints) {
      String contextId=endpoint.getCamelContext().getName();
      String uri=endpoint.getEndpointUri();
      if (decode) {
        uri=URLDecoder.decode(uri,"UTF-8");
      }
      uri=URISupport.sanitizeUri(uri);
      String state=getEndpointState(endpoint);
      out.println(String.format(rowFormat,contextId,uri,state));
      if (explain) {
        boolean first=true;
        String json=camelController.explainEndpoint(endpoint.getCamelContext().getName(),endpoint.getEndpointUri(),verbose);
        List<Map<String,String>> options=JsonSchemaHelper.parseJsonSchema(json);
        for (        Map<String,String> option : options) {
          String key=option.get("name");
          String type=option.get("type");
          String value=option.get("value");
          String desc=option.get("description");
          if (key != null && value != null) {
            if (first) {
              out.println();
              first=false;
            }
            String line="\t" + key + "="+ value;
            out.println(String.format(rowFormat,"",line,""));
            if (type != null) {
              out.println(String.format(rowFormat,"","\t" + type,""));
            }
            if (desc != null) {
              out.println(String.format(rowFormat,"","\t" + desc,""));
            }
            out.println();
          }
        }
      }
    }
  }
  return null;
}
