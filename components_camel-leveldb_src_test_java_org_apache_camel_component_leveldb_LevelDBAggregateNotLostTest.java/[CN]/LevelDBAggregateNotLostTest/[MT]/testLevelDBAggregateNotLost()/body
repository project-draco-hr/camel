{
  getMockEndpoint("mock:aggregated").expectedBodiesReceived("ABCDE");
  getMockEndpoint("mock:result").expectedMessageCount(0);
  template.sendBodyAndHeader("direct:start","A","id",123);
  template.sendBodyAndHeader("direct:start","B","id",123);
  template.sendBodyAndHeader("direct:start","C","id",123);
  template.sendBodyAndHeader("direct:start","D","id",123);
  template.sendBodyAndHeader("direct:start","E","id",123);
  assertMockEndpointsSatisfied(30,TimeUnit.SECONDS);
  Thread.sleep(1000);
  String exchangeId=getMockEndpoint("mock:aggregated").getReceivedExchanges().get(0).getExchangeId();
  final LevelDBFile levelDBFile=repo.getLevelDBFile();
  final LevelDBCamelCodec codec=new LevelDBCamelCodec();
  byte[] bf=levelDBFile.getDb().get(keyBuilder("repo1-completed",exchangeId));
  assertNotNull(bf);
  Exchange completed=codec.unmarshallExchange(context,new Buffer(bf));
  assertNotNull(completed);
  assertEquals(exchangeId,completed.getExchangeId());
  assertEquals("ABCDE",completed.getIn().getBody());
  assertEquals(123,completed.getIn().getHeader("id"));
  assertEquals("size",completed.getProperty(Exchange.AGGREGATED_COMPLETED_BY));
  assertEquals(5,completed.getProperty(Exchange.AGGREGATED_SIZE));
  assertEquals("123",completed.getProperty(Exchange.AGGREGATED_CORRELATION_KEY));
}
