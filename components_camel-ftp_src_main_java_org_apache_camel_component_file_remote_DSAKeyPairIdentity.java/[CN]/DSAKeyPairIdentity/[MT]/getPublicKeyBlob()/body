{
  DSAPublicKey publicKey=(DSAPublicKey)keyPair.getPublic();
  byte[] sshDss=ALGORITHM_TYPE.getBytes();
  DSAParams dsaParams=publicKey.getParams();
  byte[] pArray=dsaParams.getP().toByteArray();
  byte[] qArray=dsaParams.getQ().toByteArray();
  byte[] gArray=dsaParams.getG().toByteArray();
  byte[] yArray=publicKey.getY().toByteArray();
  byte[] result=new byte[sshDss.length + 4 + pArray.length+ 4+ qArray.length+ 4+ gArray.length+ 4+ yArray.length+ 4];
  int index=0;
  byte[] intAsByteArray=ByteBuffer.allocate(4).putInt(sshDss.length).array();
  System.arraycopy(intAsByteArray,0,result,index,4);
  index+=4;
  System.arraycopy(sshDss,0,result,index,sshDss.length);
  index+=sshDss.length;
  intAsByteArray=ByteBuffer.allocate(4).putInt(pArray.length).array();
  System.arraycopy(intAsByteArray,0,result,index,4);
  index+=4;
  System.arraycopy(pArray,0,result,index,pArray.length);
  index+=pArray.length;
  intAsByteArray=ByteBuffer.allocate(4).putInt(qArray.length).array();
  System.arraycopy(intAsByteArray,0,result,index,4);
  index+=4;
  System.arraycopy(qArray,0,result,index,qArray.length);
  index+=qArray.length;
  intAsByteArray=ByteBuffer.allocate(4).putInt(gArray.length).array();
  System.arraycopy(intAsByteArray,0,result,index,4);
  index+=4;
  System.arraycopy(gArray,0,result,index,gArray.length);
  index+=gArray.length;
  intAsByteArray=ByteBuffer.allocate(4).putInt(yArray.length).array();
  System.arraycopy(intAsByteArray,0,result,index,4);
  index+=4;
  System.arraycopy(yArray,0,result,index,yArray.length);
  return result;
}
