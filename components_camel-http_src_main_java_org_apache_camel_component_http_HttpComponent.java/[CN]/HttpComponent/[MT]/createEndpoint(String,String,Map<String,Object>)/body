{
  String addressUri="http://" + remaining;
  if (uri.startsWith("https:")) {
    addressUri="https://" + remaining;
  }
  Map<String,Object> httpClientParameters=new HashMap<String,Object>(parameters);
  HttpBinding binding=resolveAndRemoveReferenceParameter(parameters,"httpBinding",HttpBinding.class);
  String proxyHost=getAndRemoveParameter(parameters,"proxyHost",String.class);
  Integer proxyPort=getAndRemoveParameter(parameters,"proxyPort",Integer.class);
  String authMethodPriority=getAndRemoveParameter(parameters,"authMethodPriority",String.class);
  HeaderFilterStrategy headerFilterStrategy=resolveAndRemoveReferenceParameter(parameters,"headerFilterStrategy",HeaderFilterStrategy.class);
  UrlRewrite urlRewrite=resolveAndRemoveReferenceParameter(parameters,"urlRewrite",UrlRewrite.class);
  HttpClientParams clientParams=new HttpClientParams();
  Map<String,Object> httpClientOptions=IntrospectionSupport.extractProperties(parameters,"httpClient.");
  IntrospectionSupport.setProperties(clientParams,httpClientOptions);
  validateParameters(uri,httpClientOptions,null);
  HttpConnectionManagerParams connectionManagerParams=new HttpConnectionManagerParams();
  Map<String,Object> httpConnectionManagerOptions=IntrospectionSupport.extractProperties(parameters,"httpConnectionManager.");
  IntrospectionSupport.setProperties(connectionManagerParams,httpConnectionManagerOptions);
  validateParameters(uri,httpConnectionManagerOptions,null);
  HttpConnectionManager thisHttpConnectionManager=httpConnectionManager;
  if (thisHttpConnectionManager == null) {
    thisHttpConnectionManager=new MultiThreadedHttpConnectionManager();
    thisHttpConnectionManager.setParams(connectionManagerParams);
  }
  final Set<AuthMethod> authMethods=new LinkedHashSet<AuthMethod>();
  HttpClientConfigurer configurer=createHttpClientConfigurer(parameters,authMethods);
  addressUri=UnsafeUriCharactersEncoder.encodeHttpURI(addressUri);
  URI endpointUri=URISupport.createRemainingURI(new URI(addressUri),httpClientParameters);
  HttpEndpoint endpoint=createHttpEndpoint(endpointUri.toString(),this,clientParams,thisHttpConnectionManager,configurer);
  if (headerFilterStrategy != null) {
    endpoint.setHeaderFilterStrategy(headerFilterStrategy);
  }
 else {
    setEndpointHeaderFilterStrategy(endpoint);
  }
  if (urlRewrite != null) {
    getCamelContext().addService(urlRewrite);
    endpoint.setUrlRewrite(urlRewrite);
  }
  if (binding == null) {
    binding=getHttpBinding();
  }
  if (binding != null) {
    endpoint.setBinding(binding);
  }
  if (proxyHost != null) {
    endpoint.setProxyHost(proxyHost);
    endpoint.setProxyPort(proxyPort);
  }
 else   if (httpConfiguration != null) {
    endpoint.setProxyHost(httpConfiguration.getProxyHost());
    endpoint.setProxyPort(httpConfiguration.getProxyPort());
  }
  if (authMethodPriority != null) {
    endpoint.setAuthMethodPriority(authMethodPriority);
  }
 else   if (httpConfiguration != null && httpConfiguration.getAuthMethodPriority() != null) {
    endpoint.setAuthMethodPriority(httpConfiguration.getAuthMethodPriority());
  }
 else {
    if (!authMethods.isEmpty()) {
      authMethodPriority=CollectionHelper.collectionAsCommaDelimitedString(authMethods);
      endpoint.setAuthMethodPriority(authMethodPriority);
    }
  }
  setProperties(endpoint,parameters);
  URI httpUri=URISupport.createRemainingURI(new URI(addressUri),parameters);
  String part=httpUri.getSchemeSpecificPart();
  if (part != null) {
    part=part.toLowerCase();
    if (part.startsWith("//http//") || part.startsWith("//https//") || part.startsWith("//http://")|| part.startsWith("//https://")) {
      throw new ResolveEndpointFailedException(uri,"The uri part is not configured correctly. You have duplicated the http(s) protocol.");
    }
  }
  endpoint.setHttpUri(httpUri);
  endpoint.setHttpClientOptions(httpClientOptions);
  return endpoint;
}
