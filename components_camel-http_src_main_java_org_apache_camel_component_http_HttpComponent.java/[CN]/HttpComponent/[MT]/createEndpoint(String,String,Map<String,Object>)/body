{
  HttpBinding binding=resolveAndRemoveReferenceParameter(parameters,"httpBindingRef",HttpBinding.class);
  if (binding == null) {
    binding=resolveAndRemoveReferenceParameter(parameters,"httpBinding",HttpBinding.class);
  }
  Boolean throwExceptionOnFailure=getAndRemoveParameter(parameters,"throwExceptionOnFailure",Boolean.class);
  Boolean bridgeEndpoint=getAndRemoveParameter(parameters,"bridgeEndpoint",Boolean.class);
  Boolean matchOnUriPrefix=getAndRemoveParameter(parameters,"matchOnUriPrefix",Boolean.class);
  String proxyHost=getAndRemoveParameter(parameters,"proxyHost",String.class);
  Integer proxyPort=getAndRemoveParameter(parameters,"proxyPort",Integer.class);
  String authMethodPriority=getAndRemoveParameter(parameters,"authMethodPriority",String.class);
  HttpClientParams clientParams=new HttpClientParams();
  IntrospectionSupport.setProperties(clientParams,parameters,"httpClient.");
  validateParameters(uri,parameters,"httpClient.");
  final Set<AuthMethod> authMethods=new LinkedHashSet<AuthMethod>();
  HttpClientConfigurer configurer=createHttpClientConfigurer(parameters,authMethods);
  URI httpUri=URISupport.createRemainingURI(new URI(uri),CastUtils.cast(parameters));
  uri=httpUri.toString();
  String part=httpUri.getSchemeSpecificPart();
  if (part != null) {
    part=part.toLowerCase();
    if (part.startsWith("//http//") || part.startsWith("//https//")) {
      throw new ResolveEndpointFailedException(uri,"The uri part is not configured correctly. You have duplicated the http(s) protocol.");
    }
  }
  HttpEndpoint endpoint=new HttpEndpoint(uri,this,httpUri,clientParams,httpConnectionManager,configurer);
  setEndpointHeaderFilterStrategy(endpoint);
  if (binding == null) {
    binding=getHttpBinding();
  }
  if (binding != null) {
    endpoint.setBinding(binding);
  }
  if (throwExceptionOnFailure != null) {
    endpoint.setThrowExceptionOnFailure(throwExceptionOnFailure);
  }
  if (bridgeEndpoint != null) {
    endpoint.setBridgeEndpoint(bridgeEndpoint);
  }
  if (matchOnUriPrefix != null) {
    endpoint.setMatchOnUriPrefix(matchOnUriPrefix);
  }
  if (proxyHost != null) {
    endpoint.setProxyHost(proxyHost);
    endpoint.setProxyPort(proxyPort);
  }
 else   if (httpConfiguration != null) {
    endpoint.setProxyHost(httpConfiguration.getProxyHost());
    endpoint.setProxyPort(httpConfiguration.getProxyPort());
  }
  if (authMethodPriority != null) {
    endpoint.setAuthMethodPriority(authMethodPriority);
  }
 else   if (httpConfiguration != null && httpConfiguration.getAuthMethodPriority() != null) {
    endpoint.setAuthMethodPriority(httpConfiguration.getAuthMethodPriority());
  }
 else {
    if (!authMethods.isEmpty()) {
      authMethodPriority=CollectionHelper.collectionAsCommaDelimitedString(authMethods);
      endpoint.setAuthMethodPriority(authMethodPriority);
    }
  }
  setProperties(endpoint,parameters);
  return endpoint;
}
