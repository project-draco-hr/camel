{
  HttpParams clientParams=configureHttpParams(parameters);
  validateParameters(uri,parameters,"httpClient.");
  configureParameters(parameters);
  Boolean throwExceptionOnFailure=getAndRemoveParameter(parameters,"throwExceptionOnFailure",Boolean.class);
  Boolean bridgeEndpoint=getAndRemoveParameter(parameters,"bridgeEndpoint",Boolean.class);
  Boolean matchOnUriPrefix=Boolean.parseBoolean(getAndRemoveParameter(parameters,"matchOnUriPrefix",String.class));
  URI httpUri=URISupport.createRemainingURI(new URI(uri),CastUtils.cast(parameters));
  uri=httpUri.toString();
  String part=httpUri.getSchemeSpecificPart();
  if (part != null) {
    part=part.toLowerCase();
    if (part.startsWith("//http//") || part.startsWith("//https//")) {
      throw new ResolveEndpointFailedException(uri,"The uri part is not configured correctly. You have duplicated the http(s) protocol.");
    }
  }
  ClientConnectionManager connMgr=httpConnectionManager;
  if (connMgr == null) {
    SchemeRegistry schemeRegistry=new SchemeRegistry();
    if (isSecureConnection(uri)) {
      schemeRegistry.register(new Scheme("https",SSLSocketFactory.getSocketFactory(),443));
    }
 else {
      schemeRegistry.register(new Scheme("http",PlainSocketFactory.getSocketFactory(),80));
    }
    connMgr=new ThreadSafeClientConnManager(clientParams,schemeRegistry);
  }
  HttpEndpoint endpoint=new HttpEndpoint(uri,this,httpUri,clientParams,connMgr,httpClientConfigurer);
  if (httpBinding != null) {
    endpoint.setBinding(httpBinding);
  }
  setEndpointHeaderFilterStrategy(endpoint);
  if (throwExceptionOnFailure != null) {
    endpoint.setThrowExceptionOnFailure(throwExceptionOnFailure);
  }
  if (bridgeEndpoint != null) {
    endpoint.setBridgeEndpoint(bridgeEndpoint);
  }
  if (matchOnUriPrefix != null) {
    endpoint.setMatchOnUriPrefix(matchOnUriPrefix);
  }
  setProperties(endpoint,parameters);
  return endpoint;
}
