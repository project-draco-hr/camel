{
  return new RouteBuilder(){
    public void configure(){
      from("atmosphere-websocket:///hola").to("log:info").process(new Processor(){
        public void process(        final Exchange exchange) throws Exception {
          checkEventsResendingEnabled(exchange);
        }
      }
);
      from("atmosphere-websocket:///hola1").to("log:info").process(new Processor(){
        public void process(        final Exchange exchange) throws Exception {
          checkPassedParameters(exchange);
        }
      }
);
      from("atmosphere-websocket:///hola2").to("log:info").choice().when(header(WebsocketConstants.EVENT_TYPE).isEqualTo(WebsocketConstants.ONOPEN_EVENT_TYPE)).process(new Processor(){
        public void process(        final Exchange exchange) throws Exception {
          createExternalConnectionRegister(exchange);
        }
      }
).when(header(WebsocketConstants.EVENT_TYPE).isEqualTo(WebsocketConstants.ONCLOSE_EVENT_TYPE)).process(new Processor(){
        public void process(        final Exchange exchange) throws Exception {
          removeExternalConnectionRegister(exchange);
        }
      }
).when(header(WebsocketConstants.EVENT_TYPE).isEqualTo(WebsocketConstants.ONERROR_EVENT_TYPE)).process(new Processor(){
        public void process(        final Exchange exchange) throws Exception {
          removeExternalConnectionRegister(exchange);
        }
      }
).otherwise().process(new Processor(){
        public void process(        final Exchange exchange) throws Exception {
          createBroadcastMultipleClientsResponse(exchange);
        }
      }
).to("atmosphere-websocket:///hola2");
      from("atmosphere-websocket:///hola3").to("log:info").choice().when(header(WebsocketConstants.EVENT_TYPE).isEqualTo(WebsocketConstants.ONOPEN_EVENT_TYPE)).process(new Processor(){
        public void process(        final Exchange exchange) throws Exception {
          createExternalConnectionRegister(exchange);
        }
      }
).when(header(WebsocketConstants.EVENT_TYPE).isEqualTo(WebsocketConstants.ONCLOSE_EVENT_TYPE)).process(new Processor(){
        public void process(        final Exchange exchange) throws Exception {
          removeExternalConnectionRegister(exchange);
        }
      }
).when(header(WebsocketConstants.EVENT_TYPE).isEqualTo(WebsocketConstants.ONERROR_EVENT_TYPE)).process(new Processor(){
        public void process(        final Exchange exchange) throws Exception {
          removeExternalConnectionRegister(exchange);
        }
      }
).when(header(WebsocketConstants.ERROR_TYPE).isEqualTo(WebsocketConstants.MESSAGE_NOT_SENT_ERROR_TYPE)).process(new Processor(){
        public void process(        final Exchange exchange) throws Exception {
          handleNotDeliveredMessage(exchange);
        }
      }
).otherwise().process(new Processor(){
        public void process(        final Exchange exchange) throws Exception {
          createBroadcastMultipleClientsResponse(exchange);
        }
      }
).to("atmosphere-websocket:///hola3");
    }
  }
;
}
