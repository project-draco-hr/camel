{
  counter=0;
  event="";
  final Exception expectedException=new Exception("Hello, I should be thrown on shutdown only!");
  MockScheduledPollConsumer consumer=new MockScheduledPollConsumer(expectedException);
  consumer.setPollStrategy(new PollingConsumerPollStrategy(){
    public boolean begin(    Consumer consumer,    Endpoint endpoint){
      return true;
    }
    public void commit(    Consumer consumer,    Endpoint endpoint){
      event+="commit";
    }
    public boolean rollback(    Consumer consumer,    Endpoint endpoint,    int retryCounter,    Exception e) throws Exception {
      event+="rollback";
      counter++;
      if (retryCounter < 3) {
        return true;
      }
      return false;
    }
  }
);
  consumer.setUseFixedDelay(true);
  consumer.setDelay(60000);
  consumer.start();
  consumer.run();
  consumer.stop();
  assertEquals(4,counter);
  assertEquals("rollbackrollbackrollbackrollback",event);
}
