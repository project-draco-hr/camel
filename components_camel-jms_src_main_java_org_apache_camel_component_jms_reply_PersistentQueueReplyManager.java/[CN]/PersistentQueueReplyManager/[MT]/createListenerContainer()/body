{
  DefaultMessageListenerContainer answer;
  ReplyToType type=endpoint.getConfiguration().getReplyToType();
  if (type == null) {
    type=ReplyToType.Shared;
  }
  if (ReplyToType.Shared == type) {
    String replyToSelectorName=endpoint.getReplyToDestinationSelectorName();
    if (replyToSelectorName != null) {
      replyToSelectorValue="ID:" + new BigInteger(24 * 8,new Random()).toString(16);
      String fixedMessageSelector=replyToSelectorName + "='" + replyToSelectorValue+ "'";
      answer=new SharedPersistentQueueMessageListenerContainer(fixedMessageSelector);
      log.debug("Using shared queue: " + endpoint.getReplyTo() + " with fixed message selector ["+ fixedMessageSelector+ "] as reply listener: "+ answer);
    }
 else {
      dynamicMessageSelector=new MessageSelectorCreator(correlation);
      answer=new SharedPersistentQueueMessageListenerContainer(dynamicMessageSelector);
      log.debug("Using shared queue: " + endpoint.getReplyTo() + " with dynamic message selector as reply listener: "+ answer);
    }
  }
 else   if (ReplyToType.Exclusive == type) {
    answer=new ExclusivePersistentQueueMessageListenerContainer();
    log.debug("Using exclusive queue:" + endpoint.getReplyTo() + " as reply listener: "+ answer);
  }
 else {
    throw new IllegalArgumentException("ReplyToType " + type + " is not supported for persistent reply queues");
  }
  DestinationResolver resolver=endpoint.getDestinationResolver();
  if (resolver == null) {
    resolver=answer.getDestinationResolver();
  }
  answer.setDestinationResolver(new DestinationResolverDelegate(resolver));
  answer.setDestinationName(endpoint.getReplyTo());
  answer.setAutoStartup(true);
  answer.setMessageListener(this);
  answer.setPubSubDomain(false);
  answer.setSubscriptionDurable(false);
  answer.setConcurrentConsumers(1);
  answer.setConnectionFactory(endpoint.getConnectionFactory());
  String clientId=endpoint.getClientId();
  if (clientId != null) {
    clientId+=".CamelReplyManager";
    answer.setClientId(clientId);
  }
  answer.setCacheLevel(DefaultMessageListenerContainer.CACHE_SESSION);
  answer.setSessionTransacted(false);
  if (endpoint.getExceptionListener() != null) {
    answer.setExceptionListener(endpoint.getExceptionListener());
  }
  if (endpoint.getErrorHandler() != null) {
    answer.setErrorHandler(endpoint.getErrorHandler());
  }
  if (endpoint.getReceiveTimeout() >= 0) {
    answer.setReceiveTimeout(endpoint.getReceiveTimeout());
  }
  if (endpoint.getRecoveryInterval() >= 0) {
    answer.setRecoveryInterval(endpoint.getRecoveryInterval());
  }
  return answer;
}
