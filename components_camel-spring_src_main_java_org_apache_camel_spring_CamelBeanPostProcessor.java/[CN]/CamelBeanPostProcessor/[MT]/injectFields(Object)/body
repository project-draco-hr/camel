{
  ReflectionUtils.doWithFields(bean.getClass(),new ReflectionUtils.FieldCallback(){
    public void doWith(    Field field) throws IllegalArgumentException, IllegalAccessException {
      EndpointInject endpointInject=field.getAnnotation(EndpointInject.class);
      if (endpointInject != null && postProcessor.matchContext(endpointInject.context())) {
        injectField(field,endpointInject.uri(),endpointInject.ref(),bean);
      }
      Produce produce=field.getAnnotation(Produce.class);
      if (produce != null && postProcessor.matchContext(produce.context())) {
        injectField(field,produce.uri(),produce.ref(),bean);
      }
    }
  }
);
}
