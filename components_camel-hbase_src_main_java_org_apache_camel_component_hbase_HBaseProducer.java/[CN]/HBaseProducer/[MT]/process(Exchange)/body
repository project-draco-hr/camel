{
  try (Table table=endpoint.getTable()){
    updateHeaders(exchange);
    String operation=(String)exchange.getIn().getHeader(HBaseConstants.OPERATION);
    Integer maxScanResult=exchange.getIn().getHeader(HBaseConstants.HBASE_MAX_SCAN_RESULTS,Integer.class);
    String fromRowId=(String)exchange.getIn().getHeader(HBaseConstants.FROM_ROW);
    CellMappingStrategy mappingStrategy=endpoint.getCellMappingStrategyFactory().getStrategy(exchange.getIn());
    HBaseData data=mappingStrategy.resolveModel(exchange.getIn());
    List<Put> putOperations=new LinkedList<>();
    List<Delete> deleteOperations=new LinkedList<>();
    List<HBaseRow> getOperationResult=new LinkedList<>();
    List<HBaseRow> scanOperationResult=new LinkedList<>();
    for (    HBaseRow hRow : data.getRows()) {
      hRow.apply(rowModel);
      if (HBaseConstants.PUT.equals(operation)) {
        putOperations.add(createPut(hRow));
      }
 else       if (HBaseConstants.GET.equals(operation)) {
        HBaseRow getResultRow=getCells(table,hRow);
        getOperationResult.add(getResultRow);
      }
 else       if (HBaseConstants.DELETE.equals(operation)) {
        deleteOperations.add(createDeleteRow(hRow));
      }
 else       if (HBaseConstants.SCAN.equals(operation)) {
        scanOperationResult=scanCells(table,hRow,fromRowId,maxScanResult,endpoint.getFilters());
      }
    }
    if (!putOperations.isEmpty()) {
      table.put(putOperations);
    }
 else     if (!deleteOperations.isEmpty()) {
      table.delete(deleteOperations);
    }
 else     if (!getOperationResult.isEmpty()) {
      mappingStrategy.applyGetResults(exchange.getOut(),new HBaseData(getOperationResult));
    }
 else     if (!scanOperationResult.isEmpty()) {
      mappingStrategy.applyScanResults(exchange.getOut(),new HBaseData(scanOperationResult));
    }
  }
 }
