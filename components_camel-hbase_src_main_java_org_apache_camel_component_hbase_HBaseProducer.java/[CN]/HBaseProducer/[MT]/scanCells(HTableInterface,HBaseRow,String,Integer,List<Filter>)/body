{
  List<HBaseRow> rowSet=new LinkedList<HBaseRow>();
  HBaseRow startRow=new HBaseRow(model.getCells());
  startRow.setId(start);
  Scan scan;
  if (start != null) {
    scan=new Scan(Bytes.toBytes(start));
  }
 else {
    scan=new Scan();
  }
  if (filters != null && !filters.isEmpty()) {
    List<Filter> clonedFilters=new LinkedList<Filter>();
    for (    Filter filter : filters) {
      if (ModelAwareFilter.class.isAssignableFrom(filter.getClass())) {
        Object clone=endpoint.getCamelContext().getInjector().newInstance(filter.getClass());
        if (clone instanceof ModelAwareFilter) {
          ((ModelAwareFilter<?>)clone).apply(endpoint.getCamelContext(),model);
          clonedFilters.add((Filter)clone);
        }
      }
    }
    scan.setFilter(new FilterList(FilterList.Operator.MUST_PASS_ALL,clonedFilters));
  }
  Set<HBaseCell> cellModels=model.getCells();
  for (  HBaseCell cellModel : cellModels) {
    String family=cellModel.getFamily();
    String column=cellModel.getQualifier();
    if (ObjectHelper.isNotEmpty(family) && ObjectHelper.isNotEmpty(column)) {
      scan.addColumn(HBaseHelper.getHBaseFieldAsBytes(family),HBaseHelper.getHBaseFieldAsBytes(column));
    }
  }
  ResultScanner resultScanner=table.getScanner(scan);
  int count=0;
  Result result=resultScanner.next();
  while (result != null && count < maxRowScan) {
    HBaseRow resultRow=new HBaseRow();
    resultRow.setId(endpoint.getCamelContext().getTypeConverter().convertTo(model.getRowType(),result.getRow()));
    resultRow.setTimestamp(result.raw()[0].getTimestamp());
    cellModels=model.getCells();
    for (    HBaseCell modelCell : cellModels) {
      HBaseCell resultCell=new HBaseCell();
      String family=modelCell.getFamily();
      String column=modelCell.getQualifier();
      resultRow.setId(endpoint.getCamelContext().getTypeConverter().convertTo(model.getRowType(),result.getRow()));
      resultCell.setValue(endpoint.getCamelContext().getTypeConverter().convertTo(modelCell.getValueType(),result.getValue(HBaseHelper.getHBaseFieldAsBytes(family),HBaseHelper.getHBaseFieldAsBytes(column))));
      resultCell.setFamily(modelCell.getFamily());
      resultCell.setQualifier(modelCell.getQualifier());
      if (result.getColumnLatest(HBaseHelper.getHBaseFieldAsBytes(family),HBaseHelper.getHBaseFieldAsBytes(column)) != null) {
        resultCell.setTimestamp(result.getColumnLatest(HBaseHelper.getHBaseFieldAsBytes(family),HBaseHelper.getHBaseFieldAsBytes(column)).getTimestamp());
      }
      resultRow.getCells().add(resultCell);
    }
    rowSet.add(resultRow);
    count++;
    result=resultScanner.next();
  }
  return rowSet;
}
