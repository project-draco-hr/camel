{
  LoggingLevel level=getLoggingLevel(parameters);
  String marker=getAndRemoveParameter(parameters,"marker",String.class);
  Integer groupSize=getAndRemoveParameter(parameters,"groupSize",Integer.class);
  Long groupInterval=getAndRemoveParameter(parameters,"groupInterval",Long.class);
  CamelLogger camelLogger=new CamelLogger(remaining,level,marker);
  Processor logger;
  if (groupSize != null) {
    logger=new ThroughputLogger(camelLogger,groupSize);
  }
 else   if (groupInterval != null) {
    Boolean groupActiveOnly=getAndRemoveParameter(parameters,"groupActiveOnly",Boolean.class,Boolean.TRUE);
    Long groupDelay=getAndRemoveParameter(parameters,"groupDelay",Long.class);
    logger=new ThroughputLogger(camelLogger,this.getCamelContext(),groupInterval,groupDelay,groupActiveOnly);
  }
 else {
    ExchangeFormatter localFormatter=exchangeFormatter;
    if (localFormatter == null) {
      localFormatter=getCamelContext().getRegistry().lookupByNameAndType("logFormatter",ExchangeFormatter.class);
      exchangeFormatter=localFormatter;
    }
    if (localFormatter == null) {
      localFormatter=new LogFormatter();
      setProperties(localFormatter,parameters);
    }
    logger=new CamelLogProcessor(camelLogger,localFormatter);
  }
  LogEndpoint endpoint=new LogEndpoint(uri,this);
  setProperties(endpoint,parameters);
  return new LogEndpoint(uri,this,logger);
}
