{
  LoggingLevel level=getLoggingLevel(parameters);
  Logger providedLogger=getLogger(parameters);
  if (providedLogger == null) {
    Map<String,Logger> availableLoggers=getCamelContext().getRegistry().findByTypeWithName(Logger.class);
    if (availableLoggers.size() == 1) {
      providedLogger=availableLoggers.values().iterator().next();
      LOG.info("Using custom Logger: {}",providedLogger);
    }
 else     if (availableLoggers.size() > 1) {
      LOG.info("More than one {} instance found in the registry. Falling back to creating logger from URI {}.",Logger.class.getName(),uri);
    }
  }
  LogEndpoint endpoint=new LogEndpoint(uri,this);
  endpoint.setLevel(level.name());
  setProperties(endpoint,parameters);
  CamelLogger camelLogger=null;
  if (providedLogger == null) {
    camelLogger=new CamelLogger(remaining,level,endpoint.getMarker());
  }
 else {
    camelLogger=new CamelLogger(providedLogger,level,endpoint.getMarker());
  }
  Processor logger;
  if (endpoint.getGroupSize() != null) {
    logger=new ThroughputLogger(camelLogger,endpoint.getGroupSize());
  }
 else   if (endpoint.getGroupInterval() != null) {
    Boolean groupActiveOnly=endpoint.getGroupActiveOnly() != null ? endpoint.getGroupActiveOnly() : Boolean.TRUE;
    Long groupDelay=endpoint.getGroupDelay();
    logger=new ThroughputLogger(camelLogger,this.getCamelContext(),endpoint.getGroupInterval(),groupDelay,groupActiveOnly);
  }
 else {
    ExchangeFormatter localFormatter=exchangeFormatter;
    if (localFormatter == null) {
      localFormatter=getCamelContext().getRegistry().lookupByNameAndType("logFormatter",ExchangeFormatter.class);
      if (localFormatter != null) {
        exchangeFormatter=localFormatter;
        setProperties(exchangeFormatter,parameters);
      }
    }
    if (localFormatter == null) {
      localFormatter=new DefaultExchangeFormatter();
      setProperties(localFormatter,parameters);
    }
    logger=new CamelLogProcessor(camelLogger,localFormatter);
  }
  endpoint.setLogger(logger);
  return endpoint;
}
