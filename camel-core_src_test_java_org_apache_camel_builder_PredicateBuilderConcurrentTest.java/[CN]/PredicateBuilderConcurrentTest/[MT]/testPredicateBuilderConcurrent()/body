{
  context.start();
  List<Future<Boolean>> futures=new ArrayList<Future<Boolean>>();
  ExecutorService pool=Executors.newFixedThreadPool(10);
  for (int i=0; i < 1000; i++) {
    final Integer num=i;
    Future<Boolean> future=pool.submit(new Callable<Boolean>(){
      public Boolean call() throws Exception {
        Expression left=ExpressionBuilder.headerExpression("foo");
        Expression right;
        if (num % 2 == 0) {
          right=ExpressionBuilder.constantExpression("ABC");
        }
 else {
          right=ExpressionBuilder.constantExpression("DEF");
        }
        Predicate predicate=PredicateBuilder.isEqualTo(left,right);
        Exchange exchange=new DefaultExchange(context);
        exchange.getIn().setBody("Hello World");
        exchange.getIn().setHeader("foo","ABC");
        return predicate.matches(exchange);
      }
    }
);
    futures.add(future);
  }
  for (int i=0; i < 1000; i++) {
    Boolean result=futures.get(i).get(10,TimeUnit.SECONDS);
    if (i % 2 == 0) {
      assertEquals("Should be true for #" + i,true,result.booleanValue());
    }
 else {
      assertEquals("Should be false for #" + i,false,result.booleanValue());
    }
  }
  pool.shutdownNow();
}
