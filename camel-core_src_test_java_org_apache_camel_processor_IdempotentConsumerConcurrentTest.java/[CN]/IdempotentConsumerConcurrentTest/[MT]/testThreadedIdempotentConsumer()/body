{
  final int loopCount=100;
  final int threadCount=10;
  context.addRoutes(new RouteBuilder(){
    @Override public void configure() throws Exception {
      from("direct:start").idempotentConsumer(header("messageId"),MemoryIdempotentRepository.memoryIdempotentRepository(200)).delay(1).to("mock:result");
    }
  }
);
  context.start();
  resultEndpoint.reset();
  resultEndpoint.expectedMessageCount(loopCount);
  final boolean failedFlag[]=new boolean[1];
  failedFlag[0]=false;
  Thread[] threads=new Thread[threadCount];
  for (int i=0; i < threadCount; i++) {
    final int threadIndex=i;
    threads[threadIndex]=new Thread(){
      @Override public void run(){
        try {
          for (int j=0; j < loopCount; j++) {
            sendMessage("" + j,"multithreadedTest" + j);
          }
        }
 catch (        Throwable e) {
          e.printStackTrace();
          failedFlag[0]=true;
        }
      }
    }
;
    threads[i].start();
  }
  for (int i=0; i < threadCount; i++) {
    threads[i].join();
  }
  assertFalse("At least one thread threw an exception",failedFlag[0]);
  assertMockEndpointsSatisfied();
}
