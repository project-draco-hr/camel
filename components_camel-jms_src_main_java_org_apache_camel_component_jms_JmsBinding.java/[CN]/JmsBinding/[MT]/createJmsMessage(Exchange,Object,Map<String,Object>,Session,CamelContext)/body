{
  JmsMessageType type=null;
  if (endpoint != null && endpoint.isTransferExchange()) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Option transferExchange=true so we use JmsMessageType: Object");
    }
    Serializable holder=DefaultExchangeHolder.marshal(exchange);
    return session.createObjectMessage(holder);
  }
  if (headers.containsKey(JmsConstants.JMS_MESSAGE_TYPE)) {
    type=context.getTypeConverter().convertTo(JmsMessageType.class,headers.get(JmsConstants.JMS_MESSAGE_TYPE));
  }
 else   if (endpoint != null && endpoint.getConfiguration().getJmsMessageType() != null) {
    type=endpoint.getConfiguration().getJmsMessageType();
  }
 else {
    if (body instanceof Node || body instanceof String) {
      type=Text;
    }
 else     if (body instanceof byte[] || body instanceof GenericFile || body instanceof File|| body instanceof Reader|| body instanceof InputStream|| body instanceof ByteBuffer) {
      type=Bytes;
    }
 else     if (body instanceof Map) {
      type=Map;
    }
 else     if (body instanceof Serializable) {
      type=Object;
    }
  }
  if (type != null) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Using JmsMessageType: " + type);
    }
switch (type) {
case Text:
{
        TextMessage message=session.createTextMessage();
        String payload=context.getTypeConverter().convertTo(String.class,body);
        message.setText(payload);
        return message;
      }
case Bytes:
{
      BytesMessage message=session.createBytesMessage();
      byte[] payload=context.getTypeConverter().convertTo(byte[].class,body);
      message.writeBytes(payload);
      return message;
    }
case Map:
{
    MapMessage message=session.createMapMessage();
    Map payload=context.getTypeConverter().convertTo(Map.class,body);
    populateMapMessage(message,payload,context);
    return message;
  }
case Object:
return session.createObjectMessage((Serializable)body);
case Strem:
break;
default :
break;
}
}
if (LOG.isDebugEnabled()) {
LOG.debug("Could not determine specific JmsMessage type to use from body." + " Will use generic JmsMessage. Body class: " + body.getClass().getCanonicalName());
}
return session.createMessage();
}
