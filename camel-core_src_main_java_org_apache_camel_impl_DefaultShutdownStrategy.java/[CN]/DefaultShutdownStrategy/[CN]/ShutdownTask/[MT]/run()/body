{
  LOG.debug("There are {} routes to {}",routes.size(),suspendOnly ? "suspend" : "shutdown");
  List<ShutdownDeferredConsumer> deferredConsumers=new ArrayList<ShutdownDeferredConsumer>();
  for (  RouteStartupOrder order : routes) {
    ShutdownRoute shutdownRoute=order.getRoute().getRouteContext().getShutdownRoute();
    ShutdownRunningTask shutdownRunningTask=order.getRoute().getRouteContext().getShutdownRunningTask();
    if (LOG.isTraceEnabled()) {
      LOG.trace("{}{} with options [{},{}]",new Object[]{suspendOnly ? "Suspending route: " : "Shutting down route: ",order.getRoute().getId(),shutdownRoute,shutdownRunningTask});
    }
    for (    Consumer consumer : order.getInputs()) {
      boolean suspend=false;
      boolean shutdown=shutdownRoute != ShutdownRoute.Defer;
      if (shutdown) {
        if (consumer instanceof ShutdownAware) {
          shutdown=!((ShutdownAware)consumer).deferShutdown(shutdownRunningTask);
        }
        if (shutdown && consumer instanceof SuspendableService) {
          suspend=true;
        }
      }
      if (suspend) {
        suspendNow(consumer);
        deferredConsumers.add(new ShutdownDeferredConsumer(order.getRoute(),consumer));
        LOG.debug("Route: {} suspended and shutdown deferred, was consuming from: {}",order.getRoute().getId(),order.getRoute().getEndpoint());
      }
 else       if (shutdown) {
        shutdownNow(consumer);
        LOG.info("Route: {} shutdown complete, was consuming from: {}",order.getRoute().getId(),order.getRoute().getEndpoint());
      }
 else {
        deferredConsumers.add(new ShutdownDeferredConsumer(order.getRoute(),consumer));
        LOG.debug("Route: " + order.getRoute().getId() + (suspendOnly ? " shutdown deferred." : " suspension deferred."));
      }
    }
  }
  for (  RouteStartupOrder order : routes) {
    for (    Service service : order.getServices()) {
      if (service instanceof Consumer) {
        continue;
      }
      prepareShutdown(service,false,true);
    }
  }
  boolean done=false;
  long loopDelaySeconds=1;
  long loopCount=0;
  while (!done) {
    int size=0;
    for (    RouteStartupOrder order : routes) {
      int inflight=context.getInflightRepository().size(order.getRoute().getId());
      for (      Consumer consumer : order.getInputs()) {
        if (consumer instanceof ShutdownAware) {
          inflight+=((ShutdownAware)consumer).getPendingExchangesSize();
        }
      }
      if (inflight > 0) {
        size+=inflight;
        LOG.trace("{} inflight and pending exchanges for route: {}",inflight,order.getRoute().getId());
      }
    }
    if (size > 0) {
      try {
        if (timeout > 0) {
          LOG.info("Waiting as there are still " + size + " inflight and pending exchanges to complete, timeout in "+ (TimeUnit.SECONDS.convert(timeout,timeUnit) - (loopCount++ * loopDelaySeconds))+ " seconds.");
          Thread.sleep(loopDelaySeconds * 1000);
        }
 else {
          throw new InterruptedException();
        }
      }
 catch (      InterruptedException e) {
        if (abortAfterTimeout) {
          LOG.warn("Interrupted while waiting during graceful shutdown, will abort.");
          return;
        }
 else {
          LOG.warn("Interrupted while waiting during graceful shutdown, will force shutdown now.");
          break;
        }
      }
    }
 else {
      done=true;
    }
  }
  for (  ShutdownDeferredConsumer deferred : deferredConsumers) {
    Consumer consumer=deferred.getConsumer();
    if (consumer instanceof ShutdownAware) {
      LOG.trace("Route: {} preparing to shutdown.",deferred.getRoute().getId());
      boolean forced=context.getShutdownStrategy().forceShutdown(consumer);
      prepareShutdown(consumer,forced,false);
      LOG.debug("Route: {} preparing to shutdown complete.",deferred.getRoute().getId());
    }
  }
  for (  ShutdownDeferredConsumer deferred : deferredConsumers) {
    Consumer consumer=deferred.getConsumer();
    if (suspendOnly) {
      suspendNow(consumer);
      LOG.info("Route: {} suspend complete, was consuming from: {}",deferred.getRoute().getId(),deferred.getConsumer().getEndpoint());
    }
 else {
      shutdownNow(consumer);
      LOG.info("Route: {} shutdown complete, was consuming from: {}",deferred.getRoute().getId(),deferred.getConsumer().getEndpoint());
    }
  }
  for (  RouteStartupOrder order : routes) {
    for (    Service service : order.getServices()) {
      boolean forced=context.getShutdownStrategy().forceShutdown(service);
      prepareShutdown(service,forced,true);
    }
  }
}
