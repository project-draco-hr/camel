{
  if (routes.isEmpty()) {
    return true;
  }
  StopWatch watch=new StopWatch();
  List<RouteStartupOrder> routesOrdered=new ArrayList<RouteStartupOrder>(routes);
  Collections.sort(routesOrdered,new Comparator<RouteStartupOrder>(){
    public int compare(    RouteStartupOrder o1,    RouteStartupOrder o2){
      return o1.getStartupOrder() - o2.getStartupOrder();
    }
  }
);
  if (shutdownRoutesInReverseOrder) {
    Collections.reverse(routesOrdered);
  }
  LOG.info("Starting to graceful shutdown " + routesOrdered.size() + " routes (timeout "+ timeout+ " "+ timeUnit.toString().toLowerCase(Locale.ENGLISH)+ ")");
  timeoutOccurred.set(false);
  currentShutdownTaskFuture=getExecutorService().submit(new ShutdownTask(context,routesOrdered,timeout,timeUnit,suspendOnly,abortAfterTimeout,timeoutOccurred));
  try {
    currentShutdownTaskFuture.get(timeout,timeUnit);
  }
 catch (  TimeoutException e) {
    timeoutOccurred.set(true);
    currentShutdownTaskFuture.cancel(true);
    this.forceShutdown=forceShutdown;
    if (!forceShutdown && abortAfterTimeout) {
      LOG.warn("Timeout occurred. Aborting the shutdown now.");
      return false;
    }
 else {
      if (forceShutdown || shutdownNowOnTimeout) {
        LOG.warn("Timeout occurred. Forcing the routes to be shutdown now.");
        shutdownRoutesNow(routesOrdered);
        for (        RouteStartupOrder order : routes) {
          for (          Service service : order.getServices()) {
            prepareShutdown(service,true,true,isSuppressLoggingOnTimeout());
          }
        }
      }
 else {
        LOG.warn("Timeout occurred. Will ignore shutting down the remainder routes.");
      }
    }
  }
catch (  ExecutionException e) {
    throw ObjectHelper.wrapRuntimeCamelException(e.getCause());
  }
 finally {
    currentShutdownTaskFuture=null;
  }
  long seconds=TimeUnit.SECONDS.convert(watch.stop(),TimeUnit.MILLISECONDS);
  LOG.info("Graceful shutdown of " + routesOrdered.size() + " routes completed in "+ seconds+ " seconds");
  return true;
}
