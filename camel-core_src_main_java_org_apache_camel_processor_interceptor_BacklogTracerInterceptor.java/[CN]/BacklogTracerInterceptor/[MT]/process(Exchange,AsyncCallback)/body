{
  try {
    if (backlogTracer.shouldTrace(processorDefinition)) {
      int drain=queue.size() - backlogTracer.getBacklogSize();
      if (drain > 0) {
        for (int i=0; i < drain; i++) {
          queue.poll();
        }
      }
      Date timestamp=new Date();
      String toNode=processorDefinition.getId();
      String exchangeId=exchange.getExchangeId();
      String messageAsXml=MessageHelper.dumpAsXml(exchange.getIn(),true,4);
      String routeId=routeDefinition.getId();
      if (first) {
        Date created=exchange.getProperty(Exchange.CREATED_TIMESTAMP,timestamp,Date.class);
        DefaultBacklogTracerEventMessage pseudo=new DefaultBacklogTracerEventMessage(backlogTracer.incrementTraceCounter(),created,routeId,null,exchangeId,messageAsXml);
        queue.add(pseudo);
      }
      DefaultBacklogTracerEventMessage event=new DefaultBacklogTracerEventMessage(backlogTracer.incrementTraceCounter(),timestamp,routeId,toNode,exchangeId,messageAsXml);
      queue.add(event);
    }
    return super.process(exchange,callback);
  }
 catch (  Exception e) {
    exchange.setException(e);
    callback.done(true);
    return true;
  }
}
