{
  ObjectHelper.notEmpty(name,"name",this);
  ObjectHelper.notEmpty(namespace,"namespace",this);
  ObjectHelper.notEmpty(configuration.getMasterUrl(),"masterUrl",this);
  if (loadBalancer == null) {
    loadBalancer=new RandomLoadBalancer();
  }
  if (serverListStrategy == null) {
    serverListStrategy=new KubernetesServiceCallServerListStrategy(namespace,null,createKubernetesClient());
  }
  LOG.info("KubernetesServiceCall at namespace: {} with service name: {} is using load balancer: {} and service discovery: {}",namespace,name,loadBalancer,serverListStrategy);
  processor=new SendDynamicProcessor(uri,serviceCallExpression);
  processor.setCamelContext(getCamelContext());
  if (exchangePattern != null) {
    processor.setPattern(exchangePattern);
  }
  ServiceHelper.startServices(serverListStrategy,processor);
}
