{
  repo=MemoryIdempotentRepository.memoryIdempotentRepository(200);
  context.addRoutes(new RouteBuilder(){
    @Override public void configure() throws Exception {
      errorHandler(deadLetterChannel("mock:dead"));
      from("direct:start").idempotentConsumer(header("messageId"),repo).completionEager(true).to("log:a","mock:a").to("log:b","mock:b").end().filter(simple("${header.messageId} == '2'")).throwException(new IllegalArgumentException("Forced")).end().to("log:result","mock:result");
    }
  }
);
  context.start();
  a.expectedBodiesReceived("one","two","three");
  b.expectedBodiesReceived("one","two","three");
  dead.expectedBodiesReceived("two","two");
  resultEndpoint.expectedBodiesReceived("one","one","one","three");
  sendMessage("1","one");
  sendMessage("2","two");
  sendMessage("1","one");
  sendMessage("2","two");
  sendMessage("1","one");
  sendMessage("3","three");
  assertMockEndpointsSatisfied();
}
