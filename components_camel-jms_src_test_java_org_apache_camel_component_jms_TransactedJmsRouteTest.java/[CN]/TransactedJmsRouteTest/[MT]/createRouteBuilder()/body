{
  return new SpringRouteBuilder(){
    public void configure(){
      SpringTransactionPolicy requried=new SpringTransactionPolicy(bean(TransactionTemplate.class,"PROPAGATION_REQUIRED"));
      SpringTransactionPolicy notsupported=new SpringTransactionPolicy(bean(TransactionTemplate.class,"PROPAGATION_NOT_SUPPORTED"));
      SpringTransactionPolicy requirenew=new SpringTransactionPolicy(bean(TransactionTemplate.class,"PROPAGATION_REQUIRES_NEW"));
      Policy rollback=new Policy(){
        public Processor wrap(        RouteContext routeContext,        Processor processor){
          return new DelegateProcessor(processor){
            @Override public void process(            Exchange exchange) throws Exception {
              processNext(exchange);
              throw new RuntimeException("rollback");
            }
            @Override public String toString(){
              return "rollback(" + getProcessor() + ")";
            }
          }
;
        }
      }
;
      Policy catchRollback=new Policy(){
        public Processor wrap(        RouteContext routeContext,        Processor processor){
          return new DelegateProcessor(processor){
            @Override public void process(            Exchange exchange){
              try {
                processNext(exchange);
              }
 catch (              Throwable ignore) {
              }
            }
            @Override public String toString(){
              return "catchRollback(" + getProcessor() + ")";
            }
          }
;
        }
      }
;
      errorHandler(transactionErrorHandler(requried));
      from("activemq:queue:mock.a").to("mock:a");
      from("activemq:queue:mock.b").to("mock:b");
      from("activemq:queue:mock.c").to("mock:c");
      from("activemq:queue:mock.d").to("mock:d");
      from("activemq:queue:a").to("activemq:queue:mock.a");
      from("activemq:queue:b").policy(rollback).to("activemq:queue:mock.a","mock:b");
      from("activemq:queue:c").policy(catchRollback).policy(requirenew).policy(rollback).to("activemq:queue:mock.a","mock:b");
      from("activemq:queue:d").policy(catchRollback).policy(notsupported).policy(rollback).to("activemq:queue:mock.a");
      JmsEndpoint endpoint=(JmsEndpoint)endpoint("activemq:queue:e");
      endpoint.getConfiguration().setTransacted(false);
      endpoint.getConfiguration().setAcknowledgementMode(Session.AUTO_ACKNOWLEDGE);
      from(endpoint).policy(requirenew).policy(rollback).to("activemq:queue:mock.a","mock:b");
      JmsEndpoint endpoint1=(JmsEndpoint)endpoint("activemq:topic:f");
      endpoint1.getConfiguration().setTransacted(true);
      endpoint1.getConfiguration().setSubscriptionDurable(true);
      endpoint1.getConfiguration().setClientId("client2");
      endpoint1.getConfiguration().setDurableSubscriptionName("sub");
      from(endpoint1).policy(requried).policy(rollback).to("activemq:queue:mock.a","mock:b");
      JmsEndpoint endpoint2=(JmsEndpoint)endpoint("activemq:topic:f");
      endpoint2.getConfiguration().setTransacted(false);
      endpoint2.getConfiguration().setAcknowledgementMode(Session.AUTO_ACKNOWLEDGE);
      endpoint2.getConfiguration().setSubscriptionDurable(true);
      endpoint2.getConfiguration().setClientId("client1");
      endpoint2.getConfiguration().setDurableSubscriptionName("sub");
      from(endpoint2).policy(requried).policy(rollback).to("activemq:queue:mock.c","mock:d");
    }
  }
;
}
