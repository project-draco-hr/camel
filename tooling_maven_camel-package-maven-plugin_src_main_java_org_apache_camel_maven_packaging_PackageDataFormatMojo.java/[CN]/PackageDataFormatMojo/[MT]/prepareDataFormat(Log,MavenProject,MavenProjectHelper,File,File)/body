{
  File camelMetaDir=new File(dataFormatOutDir,"META-INF/services/org/apache/camel/");
  Map<String,String> javaTypes=new HashMap<String,String>();
  StringBuilder buffer=new StringBuilder();
  int count=0;
  for (  Resource r : project.getBuild().getResources()) {
    File f=new File(r.getDirectory());
    if (!f.exists()) {
      f=new File(project.getBasedir(),r.getDirectory());
    }
    f=new File(f,"META-INF/services/org/apache/camel/dataformat");
    if (f.exists() && f.isDirectory()) {
      File[] files=f.listFiles();
      if (files != null) {
        for (        File file : files) {
          if (file.isDirectory()) {
            continue;
          }
          String name=file.getName();
          if (name.charAt(0) != '.') {
            count++;
            if (buffer.length() > 0) {
              buffer.append(" ");
            }
            buffer.append(name);
          }
          try {
            String text=loadText(new FileInputStream(file));
            Map<String,String> map=parseAsMap(text);
            String javaType=map.get("class");
            if (javaType != null) {
              javaTypes.put(name,javaType);
            }
          }
 catch (          IOException e) {
            throw new MojoExecutionException("Failed to read file " + file + ". Reason: "+ e,e);
          }
        }
      }
    }
  }
  try {
    if (count > 0) {
      Artifact camelCore=findCamelCoreArtifact(project);
      if (camelCore != null) {
        File core=camelCore.getFile();
        if (core != null) {
          URL url=new URL("file",null,core.getAbsolutePath());
          URLClassLoader loader=new URLClassLoader(new URL[]{url});
          for (          Map.Entry<String,String> entry : javaTypes.entrySet()) {
            String name=entry.getKey();
            String javaType=entry.getValue();
            String modelName=asModelName(name);
            InputStream is=loader.getResourceAsStream("org/apache/camel/model/dataformat/" + modelName + ".json");
            if (is == null) {
              is=new FileInputStream(new File(core,"org/apache/camel/model/dataformat/" + modelName + ".json"));
            }
            String json=loadText(is);
            if (json != null) {
              DataFormatModel dataFormatModel=new DataFormatModel();
              dataFormatModel.setName(name);
              dataFormatModel.setModelName(modelName);
              dataFormatModel.setLabel("");
              dataFormatModel.setDescription(project.getDescription());
              dataFormatModel.setJavaType(javaType);
              dataFormatModel.setGroupId(project.getGroupId());
              dataFormatModel.setArtifactId(project.getArtifactId());
              dataFormatModel.setVersion(project.getVersion());
              List<Map<String,String>> rows=JSonSchemaHelper.parseJsonSchema("model",json,false);
              for (              Map<String,String> row : rows) {
                if (row.containsKey("label")) {
                  dataFormatModel.setLabel(row.get("label"));
                }
                if (row.containsKey("javaType")) {
                  dataFormatModel.setModelJavaType(row.get("javaType"));
                }
                if ("camel-core".equals(project.getArtifactId())) {
                  if (row.containsKey("description")) {
                    dataFormatModel.setLabel(row.get("description"));
                  }
                }
              }
              log.debug("Model " + dataFormatModel);
              String properties=after(json,"  \"properties\": {");
              String schema=createParameterJsonSchema(dataFormatModel,properties);
              log.debug("JSon schema\n" + schema);
              File dir=new File(schemaOutDir,schemaSubDirectory(dataFormatModel.getJavaType()));
              dir.mkdirs();
              File out=new File(dir,name + ".json");
              FileOutputStream fos=new FileOutputStream(out,false);
              fos.write(schema.getBytes());
              fos.close();
              log.info("Generated " + out + " containing JSon schema for "+ name+ " data format");
            }
          }
        }
      }
    }
  }
 catch (  Exception e) {
    throw new MojoExecutionException("Error loading dataformat model from camel-core. Reason: " + e,e);
  }
  if (count > 0) {
    Properties properties=new Properties();
    String names=buffer.toString();
    properties.put("dataFormats",names);
    properties.put("groupId",project.getGroupId());
    properties.put("artifactId",project.getArtifactId());
    properties.put("version",project.getVersion());
    properties.put("projectName",project.getName());
    if (project.getDescription() != null) {
      properties.put("projectDescription",project.getDescription());
    }
    camelMetaDir.mkdirs();
    File outFile=new File(camelMetaDir,"dataformat.properties");
    try {
      properties.store(new FileWriter(outFile),"Generated by camel-package-maven-plugin");
      log.info("Generated " + outFile + " containing "+ count+ " Camel "+ (count > 1 ? "dataformats: " : "dataformat: ")+ names);
      if (projectHelper != null) {
        List<String> includes=new ArrayList<String>();
        includes.add("**/dataformat.properties");
        projectHelper.addResource(project,dataFormatOutDir.getPath(),includes,new ArrayList<String>());
        projectHelper.attachArtifact(project,"properties","camelDataFormat",outFile);
      }
    }
 catch (    IOException e) {
      throw new MojoExecutionException("Failed to write properties to " + outFile + ". Reason: "+ e,e);
    }
  }
 else {
    log.debug("No META-INF/services/org/apache/camel/dataformat directory found. Are you sure you have created a Camel data format?");
  }
}
