{
  ExecutorService bossExecutor=context.getExecutorServiceManager().newThreadPool(this,"NettyTCPBoss",configuration.getCorePoolSize(),configuration.getMaxPoolSize());
  ExecutorService workerExecutor=context.getExecutorServiceManager().newThreadPool(this,"NettyTCPWorker",configuration.getCorePoolSize(),configuration.getMaxPoolSize());
  if (configuration.getWorkerCount() == 0) {
    channelFactory=new NioServerSocketChannelFactory(bossExecutor,workerExecutor);
  }
 else {
    channelFactory=new NioServerSocketChannelFactory(bossExecutor,workerExecutor,configuration.getWorkerCount());
  }
  serverBootstrap=new ServerBootstrap(channelFactory);
  if (configuration.getServerPipelineFactory() != null) {
    configuration.getServerPipelineFactory().setConsumer(this);
    serverBootstrap.setPipelineFactory(configuration.getServerPipelineFactory());
  }
 else {
    serverBootstrap.setPipelineFactory(new DefaultServerPipelineFactory(this));
  }
  serverBootstrap.setOption("child.keepAlive",configuration.isKeepAlive());
  serverBootstrap.setOption("child.tcpNoDelay",configuration.isTcpNoDelay());
  serverBootstrap.setOption("child.reuseAddress",configuration.isReuseAddress());
  serverBootstrap.setOption("child.connectTimeoutMillis",configuration.getConnectTimeout());
  channel=serverBootstrap.bind(new InetSocketAddress(configuration.getHost(),configuration.getPort()));
  allChannels.add(channel);
}
