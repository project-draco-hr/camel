{
  workerExecutor=context.getExecutorServiceManager().newCachedThreadPool(this,"NettyUDPWorker");
  if (configuration.getWorkerCount() <= 0) {
    datagramChannelFactory=new NioDatagramChannelFactory(workerExecutor);
  }
 else {
    datagramChannelFactory=new NioDatagramChannelFactory(workerExecutor,configuration.getWorkerCount());
  }
  connectionlessServerBootstrap=new ConnectionlessBootstrap(datagramChannelFactory);
  if (configuration.getServerPipelineFactory() != null) {
    configuration.getServerPipelineFactory().setConsumer(this);
    connectionlessServerBootstrap.setPipelineFactory(configuration.getServerPipelineFactory());
  }
 else {
    connectionlessServerBootstrap.setPipelineFactory(new DefaultServerPipelineFactory(this));
  }
  connectionlessServerBootstrap.setOption("child.keepAlive",configuration.isKeepAlive());
  connectionlessServerBootstrap.setOption("child.tcpNoDelay",configuration.isTcpNoDelay());
  connectionlessServerBootstrap.setOption("reuseAddress",configuration.isReuseAddress());
  connectionlessServerBootstrap.setOption("child.reuseAddress",configuration.isReuseAddress());
  connectionlessServerBootstrap.setOption("child.connectTimeoutMillis",configuration.getConnectTimeout());
  connectionlessServerBootstrap.setOption("child.broadcast",configuration.isBroadcast());
  connectionlessServerBootstrap.setOption("sendBufferSize",configuration.getSendBufferSize());
  connectionlessServerBootstrap.setOption("receiveBufferSize",configuration.getReceiveBufferSize());
  if (configuration.getReceiveBufferSizePredictor() > 0) {
    connectionlessServerBootstrap.setOption("receiveBufferSizePredictorFactory",new FixedReceiveBufferSizePredictorFactory(configuration.getReceiveBufferSizePredictor()));
  }
  channel=connectionlessServerBootstrap.bind(new InetSocketAddress(configuration.getHost(),configuration.getPort()));
  allChannels.add(channel);
}
