{
  String url=HttpHelper.createURL(exchange,getEndpoint());
  HttpMethods methodToUse=HttpHelper.createMethod(exchange,getEndpoint(),exchange.getIn().getBody() != null);
  String method=methodToUse.createMethod(url).getName();
  JettyContentExchange httpExchange=new JettyContentExchange(exchange,getBinding(),client);
  httpExchange.setMethod(method);
  httpExchange.setURL(url);
  doSetQueryParameters(exchange,httpExchange);
  if (HttpMethods.POST.equals(methodToUse)) {
    String contentType=ExchangeHelper.getContentType(exchange);
    if (contentType != null) {
      httpExchange.setRequestContentType(contentType);
    }
    if (contentType != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentType)) {
      Serializable obj=exchange.getIn().getMandatoryBody(Serializable.class);
      ByteArrayOutputStream bos=new ByteArrayOutputStream();
      HttpHelper.writeObjectToStream(bos,obj);
      httpExchange.setRequestContent(new ByteArrayBuffer(bos.toByteArray()));
      IOHelper.close(bos);
    }
 else {
      String data=exchange.getIn().getBody(String.class);
      if (data != null) {
        String charset=exchange.getProperty(Exchange.CHARSET_NAME,String.class);
        if (charset != null) {
          httpExchange.setRequestContent(new ByteArrayBuffer(data,charset));
        }
 else {
          httpExchange.setRequestContent(new ByteArrayBuffer(data));
        }
      }
 else {
        InputStream is=exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class,exchange,exchange.getIn().getBody());
        httpExchange.setRequestContentSource(is);
      }
    }
  }
  Message in=exchange.getIn();
  HeaderFilterStrategy strategy=getEndpoint().getHeaderFilterStrategy();
  for (  String headerName : in.getHeaders().keySet()) {
    String headerValue=in.getHeader(headerName,String.class);
    if (strategy != null && !strategy.applyFilterToCamelHeaders(headerName,headerValue,exchange)) {
      httpExchange.addRequestHeader(headerName,headerValue);
    }
  }
  httpExchange.setCallback(callback);
  return httpExchange;
}
