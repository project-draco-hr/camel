{
  String url=HttpHelper.createURL(exchange,getEndpoint());
  URI uri=HttpHelper.createURI(exchange,url,getEndpoint());
  url=uri.toASCIIString();
  String rewriteUrl=HttpHelper.urlRewrite(exchange,url,getEndpoint(),this);
  if (rewriteUrl != null) {
    url=rewriteUrl;
  }
  HttpMethods methodToUse=HttpHelper.createMethod(exchange,getEndpoint(),exchange.getIn().getBody() != null);
  String method=methodToUse.createMethod(url).getName();
  JettyContentExchange httpExchange=getEndpoint().createContentExchange();
  httpExchange.init(exchange,getBinding(),client,callback);
  httpExchange.setURL(url);
  httpExchange.setMethod(method);
  if (getEndpoint().getHttpClientParameters() != null) {
    String timeout=(String)getEndpoint().getHttpClientParameters().get("timeout");
    if (timeout != null) {
      httpExchange.setTimeout(new Long(timeout));
    }
    String supportRedirect=(String)getEndpoint().getHttpClientParameters().get("supportRedirect");
    if (supportRedirect != null) {
      httpExchange.setSupportRedirect(new Boolean(supportRedirect));
    }
  }
  LOG.trace("Using URL: {} with method: {}",url,method);
  if (HttpMethods.POST.equals(methodToUse) || HttpMethods.PUT.equals(methodToUse)) {
    String contentType=ExchangeHelper.getContentType(exchange);
    if (contentType != null) {
      httpExchange.setRequestContentType(contentType);
    }
    if (contentType != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentType)) {
      Serializable obj=exchange.getIn().getMandatoryBody(Serializable.class);
      ByteArrayOutputStream bos=new ByteArrayOutputStream();
      try {
        HttpHelper.writeObjectToStream(bos,obj);
        httpExchange.setRequestContent(bos.toByteArray());
      }
  finally {
        IOHelper.close(bos,"body",LOG);
      }
    }
 else {
      Object body=exchange.getIn().getBody();
      if (body instanceof String) {
        String data=(String)body;
        String charset=IOHelper.getCharsetName(exchange,false);
        httpExchange.setRequestContent(data,charset);
      }
 else {
        InputStream is=exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class,exchange,exchange.getIn().getBody());
        httpExchange.setRequestContent(is);
        String length=exchange.getIn().getHeader(Exchange.CONTENT_LENGTH,String.class);
        if (ObjectHelper.isNotEmpty(length)) {
          httpExchange.addRequestHeader(Exchange.CONTENT_LENGTH,length);
        }
      }
    }
  }
  Map<String,Object> skipRequestHeaders=null;
  if (getEndpoint().isBridgeEndpoint()) {
    exchange.setProperty(Exchange.SKIP_GZIP_ENCODING,Boolean.TRUE);
    String queryString=exchange.getIn().getHeader(Exchange.HTTP_QUERY,String.class);
    if (queryString != null) {
      skipRequestHeaders=URISupport.parseQuery(queryString);
    }
    exchange.getIn().getHeaders().remove("host");
  }
  Message in=exchange.getIn();
  HeaderFilterStrategy strategy=getEndpoint().getHeaderFilterStrategy();
  for (  Map.Entry<String,Object> entry : in.getHeaders().entrySet()) {
    String key=entry.getKey();
    Object headerValue=in.getHeader(key);
    if (headerValue != null) {
      final Iterator<?> it=ObjectHelper.createIterator(headerValue,null,true);
      final List<String> values=new ArrayList<String>();
      while (it.hasNext()) {
        String value=exchange.getContext().getTypeConverter().convertTo(String.class,it.next());
        if (skipRequestHeaders != null && skipRequestHeaders.containsKey(key)) {
          continue;
        }
        if (value != null && strategy != null && !strategy.applyFilterToCamelHeaders(key,value,exchange)) {
          values.add(value);
        }
      }
      if (values.size() > 0) {
        String s=values.size() > 1 ? values.toString() : values.get(0);
        httpExchange.addRequestHeader(key,s);
      }
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Sending HTTP request to: {}",httpExchange.getUrl());
  }
  httpExchange.send(client);
}
