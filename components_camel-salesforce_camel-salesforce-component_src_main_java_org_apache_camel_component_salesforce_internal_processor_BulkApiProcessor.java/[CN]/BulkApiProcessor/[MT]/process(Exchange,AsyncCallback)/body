{
  boolean done=false;
  try {
switch (operationName) {
case CREATE_JOB:
      processCreateJob(exchange,callback);
    break;
case GET_JOB:
  processGetJob(exchange,callback);
break;
case CLOSE_JOB:
processCloseJob(exchange,callback);
break;
case ABORT_JOB:
processAbortJob(exchange,callback);
break;
case CREATE_BATCH:
processCreateBatch(exchange,callback);
break;
case GET_BATCH:
processGetBatch(exchange,callback);
break;
case GET_ALL_BATCHES:
processGetAllBatches(exchange,callback);
break;
case GET_REQUEST:
processGetRequest(exchange,callback);
break;
case GET_RESULTS:
processGetResults(exchange,callback);
break;
case CREATE_BATCH_QUERY:
processCreateBatchQuery(exchange,callback);
break;
case GET_QUERY_RESULT_IDS:
processGetQueryResultIds(exchange,callback);
break;
case GET_QUERY_RESULT:
processGetQueryResult(exchange,callback);
break;
default :
throw new SalesforceException("Unknow operation name: " + operationName,null);
}
}
 catch (SalesforceException e) {
exchange.setException(new SalesforceException(String.format("Error processing %s: [%s] \"%s\"",operationName,e.getStatusCode(),e.getMessage()),e));
callback.done(true);
done=true;
}
catch (InvalidPayloadException e) {
exchange.setException(new SalesforceException(String.format("Unexpected Error processing %s: \"%s\"",operationName,e.getMessage()),e));
callback.done(true);
done=true;
}
catch (RuntimeException e) {
exchange.setException(new SalesforceException(String.format("Unexpected Error processing %s: \"%s\"",operationName,e.getMessage()),e));
callback.done(true);
done=true;
}
return done;
}
