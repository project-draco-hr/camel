{
  final ConditionalExceptionProcessor cp=new ConditionalExceptionProcessor(10);
  context.addRoutes(new SpringRouteBuilder(){
    @Override public void configure() throws Exception {
      Policy required=lookup("PROPAGATION_REQUIRED_POLICY",SpringTransactionPolicy.class);
      from("activemq:queue:foo").policy(required).process(cp).to("activemq-1:queue:bar?replyTo=queue:bar.reply");
      from("activemq-1:queue:bar").process(new Processor(){
        public void process(        Exchange e){
          String request=e.getIn().getBody(String.class);
          Message out=e.getOut();
          String selectorValue=e.getIn().getHeader("camelProvider",String.class);
          if (selectorValue != null) {
            out.setHeader("camelProvider",selectorValue);
          }
          out.setBody("Re: " + request);
        }
      }
);
    }
  }
);
  for (int i=0; i < 10; ++i) {
    Object reply=template.requestBody("activemq:queue:foo","blah" + i);
    assertTrue("Received unexpeced reply",reply.equals("Re: blah" + i));
    assertTrue(cp.getErrorMessage(),cp.getErrorMessage() == null);
  }
}
