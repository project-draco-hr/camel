{
  String addressUri=remaining;
  AhcEndpoint endpoint=new AhcEndpoint(uri,this,null);
  setEndpointHeaderFilterStrategy(endpoint);
  endpoint.setClient(getClient());
  endpoint.setClientConfig(getClientConfig());
  endpoint.setBinding(getBinding());
  endpoint.setSslContextParameters(getSslContextParameters());
  setProperties(endpoint,parameters);
  if (IntrospectionSupport.hasProperties(parameters,CLIENT_CONFIG_PREFIX)) {
    AsyncHttpClientConfig.Builder builder=endpoint.getClientConfig() == null ? new AsyncHttpClientConfig.Builder() : AhcComponent.cloneConfig(endpoint.getClientConfig());
    if (endpoint.getClient() != null) {
      LOG.warn("The user explicitly set an AsyncHttpClient instance on the component or " + "endpoint, but this endpoint URI contains client configuration parameters.  " + "Are you sure that this is what was intended?  The AsyncHttpClient will be used"+ " and the URI parameters will be ignored.");
    }
 else     if (endpoint.getClientConfig() != null) {
      LOG.warn("The user explicitly set an AsyncHttpClientConfig instance on the component or " + "endpoint, but this endpoint URI contains client configuration parameters.  " + "Are you sure that this is what was intended?  The URI parameters will be applied"+ " to a clone of the supplied AsyncHttpClientConfig in order to prevent unintended modification"+ " of the explicitly configured AsyncHttpClientConfig.  That is, the URI parameters override the"+ " settings on the explicitly configured AsyncHttpClientConfig for this endpoint.");
    }
    Map<String,Object> clientParams=IntrospectionSupport.extractProperties(parameters,CLIENT_CONFIG_PREFIX);
    setProperties(builder,clientParams);
    validateParameters(uri,clientParams,null);
    endpoint.setClientConfig(builder.build());
  }
  addressUri=UnsafeUriCharactersEncoder.encode(addressUri);
  URI httpUri=URISupport.createRemainingURI(new URI(addressUri),parameters);
  endpoint.setHttpUri(httpUri);
  return endpoint;
}
