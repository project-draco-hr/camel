{
  final Map<String,Object> args=new HashMap<String,Object>();
  if (host != null) {
    args.put("host",host);
  }
  if (port > 0) {
    args.put("port",port);
  }
  if (scheme != null) {
    args.put("scheme",scheme);
  }
  if (app != null) {
    args.put("app",app);
  }
  if (owner != null) {
    args.put("owner",owner);
  }
  args.put("username",username);
  args.put("password",password);
  ExecutorService executor=Executors.newSingleThreadExecutor();
  Future<Service> future=executor.submit(new Callable<Service>(){
    public Service call() throws Exception {
      return Service.connect(args);
    }
  }
);
  try {
    Service service;
    if (connectionTimeout > 0) {
      service=future.get(connectionTimeout,TimeUnit.MILLISECONDS);
    }
 else {
      service=future.get();
    }
    LOG.info("Successfully connected to Splunk");
    return service;
  }
 catch (  Exception e) {
    throw new RuntimeException(String.format("could not connect to Splunk Server @ %s:%d - %s",host,port,e.getMessage()));
  }
}
