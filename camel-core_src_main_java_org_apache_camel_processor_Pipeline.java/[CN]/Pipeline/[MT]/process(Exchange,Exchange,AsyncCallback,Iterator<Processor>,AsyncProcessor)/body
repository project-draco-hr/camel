{
  if (LOG.isTraceEnabled()) {
    LOG.trace("Processing exchangeId: " + exchange.getExchangeId() + " >>> "+ exchange);
  }
  boolean sync=asyncProcessor.process(exchange,new AsyncCallback(){
    public void done(    boolean doneSync){
      if (doneSync) {
        return;
      }
      Exchange nextExchange=exchange;
      while (processors.hasNext()) {
        AsyncProcessor processor=AsyncProcessorTypeConverter.convert(processors.next());
        boolean exceptionHandled=hasExceptionBeenHandledByErrorHandler(nextExchange);
        if (nextExchange.isFailed() || nextExchange.isRollbackOnly() || exceptionHandled) {
          if (LOG.isDebugEnabled()) {
            StringBuilder sb=new StringBuilder();
            sb.append("Message exchange has failed so breaking out of pipeline: ").append(nextExchange);
            if (nextExchange.isRollbackOnly()) {
              sb.append(" Marked as rollback only.");
            }
            if (nextExchange.getException() != null) {
              sb.append(" Exception: ").append(nextExchange.getException());
            }
            if (nextExchange.hasOut() && nextExchange.getOut().isFault()) {
              sb.append(" Fault: ").append(nextExchange.getOut());
            }
            if (exceptionHandled) {
              sb.append(" Handled by the error handler.");
            }
            LOG.debug(sb.toString());
          }
          break;
        }
        nextExchange=createNextExchange(nextExchange);
        doneSync=process(original,nextExchange,callback,processors,processor);
        if (!doneSync) {
          if (LOG.isTraceEnabled()) {
            LOG.trace("Processing exchangeId: " + exchange.getExchangeId() + " is continued being processed asynchronously");
          }
          return;
        }
      }
      ExchangeHelper.copyResults(original,nextExchange);
      if (LOG.isTraceEnabled()) {
        LOG.trace("Processing complete for exchangeId: " + original.getExchangeId() + " >>> "+ original);
      }
      callback.done(false);
    }
  }
);
  return sync;
}
