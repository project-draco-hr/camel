{
  BuildConfigList buildConfigsList=null;
  Map<String,String> labels=exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_BUILD_CONFIGS_LABELS,Map.class);
  String namespaceName=exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME,String.class);
  if (!ObjectHelper.isEmpty(namespaceName)) {
    ClientNonNamespaceOperation<OpenShiftClient,BuildConfig,BuildConfigList,DoneableBuildConfig,ClientBuildConfigResource<BuildConfig,DoneableBuildConfig,Void,Void>> buildConfigs;
    buildConfigs=getEndpoint().getKubernetesClient().adapt(OpenShiftClient.class).buildConfigs().inNamespace(namespaceName);
    for (    Map.Entry<String,String> entry : labels.entrySet()) {
      buildConfigs.withLabel(entry.getKey(),entry.getValue());
    }
    buildConfigsList=buildConfigs.list();
  }
 else {
    ClientOperation<OpenShiftClient,BuildConfig,BuildConfigList,DoneableBuildConfig,ClientBuildConfigResource<BuildConfig,DoneableBuildConfig,Void,Void>> buildConfigs;
    buildConfigs=getEndpoint().getKubernetesClient().adapt(OpenShiftClient.class).buildConfigs();
    for (    Map.Entry<String,String> entry : labels.entrySet()) {
      buildConfigs.withLabel(entry.getKey(),entry.getValue());
    }
    buildConfigsList=buildConfigs.list();
  }
  exchange.getOut().setBody(buildConfigsList.getItems());
}
