{
  LOG.trace("Resolving property placeholders for: {}",definition);
  Map<String,Object> properties=new HashMap<String,Object>();
  IntrospectionSupport.getProperties(definition,properties,null);
  ProcessorDefinition<?> processorDefinition=null;
  if (definition instanceof ProcessorDefinition) {
    processorDefinition=(ProcessorDefinition<?>)definition;
  }
  if (processorDefinition != null && processorDefinition.getOtherAttributes() != null) {
    for (    QName key : processorDefinition.getOtherAttributes().keySet()) {
      if (Constants.PLACEHOLDER_QNAME.equals(key.getNamespaceURI())) {
        String local=key.getLocalPart();
        Object value=processorDefinition.getOtherAttributes().get(key);
        if (value != null && value instanceof String) {
          CamelContextHelper.lookupPropertiesComponent(camelContext,true);
          String s=(String)value;
          String prefixToken=camelContext.getPropertyPrefixToken();
          String suffixToken=camelContext.getPropertySuffixToken();
          if (prefixToken == null) {
            throw new IllegalArgumentException("Property with name [" + local + "] uses property placeholders; however, no properties component is configured.");
          }
          if (!s.startsWith(prefixToken)) {
            s=prefixToken + s;
          }
          if (!s.endsWith(suffixToken)) {
            s=s + suffixToken;
          }
          value=s;
        }
        properties.put(local,value);
      }
    }
  }
  Map<String,Object> changedProperties=new HashMap<String,Object>();
  if (!properties.isEmpty()) {
    LOG.trace("There are {} properties on: {}",properties.size(),definition);
    for (    Map.Entry<String,Object> entry : properties.entrySet()) {
      String name=entry.getKey();
      Object value=entry.getValue();
      if (value instanceof String) {
        String text=(String)value;
        text=camelContext.resolvePropertyPlaceholders(text);
        if (text != value) {
          boolean changed=IntrospectionSupport.setProperty(camelContext.getTypeConverter(),definition,name,text);
          if (!changed) {
            throw new IllegalArgumentException("No setter to set property: " + name + " to: "+ text+ " on: "+ definition);
          }
          changedProperties.put(name,value);
          if (LOG.isDebugEnabled()) {
            LOG.debug("Changed property [{}] from: {} to: {}",new Object[]{name,value,text});
          }
        }
      }
    }
  }
  addRestoreAction(definition,changedProperties);
}
