{
  boolean numericAllowed=acceptType(TokenType.numericValue,filters);
  if (numericAllowed) {
    StringBuilder sb=new StringBuilder();
    boolean digit=true;
    while (digit && index < expression.length()) {
      digit=Character.isDigit(expression.charAt(index));
      if (digit) {
        char ch=expression.charAt(index);
        sb.append(ch);
        index++;
        continue;
      }
      boolean decimalSeparator='.' == expression.charAt(index) || ',' == expression.charAt(index);
      if (decimalSeparator && sb.length() > 0) {
        char ch=expression.charAt(index);
        sb.append(ch);
        index++;
        digit=true;
        continue;
      }
    }
    if (sb.length() > 0) {
      return new SimpleToken(new SimpleTokenType(TokenType.numericValue,sb.toString()),index);
    }
  }
  boolean escapeAllowed=allowEscape && acceptType(TokenType.escape,filters);
  if (escapeAllowed) {
    StringBuilder sb=new StringBuilder();
    char ch=expression.charAt(index);
    boolean escaped='\\' == ch;
    if (escaped && index < expression.length()) {
      char next=expression.charAt(++index);
      if ('n' == next) {
        sb.append("\n");
      }
 else       if ('t' == next) {
        sb.append("\t");
      }
 else       if ('r' == next) {
        sb.append("\r");
      }
 else {
        sb.append(next);
      }
      return new SimpleToken(new SimpleTokenType(TokenType.character,sb.toString()),index,2);
    }
  }
  String text=expression.substring(index);
  for (  SimpleTokenType token : KNOWN_TOKENS) {
    if (acceptType(token.getType(),filters)) {
      if (text.startsWith(token.getValue())) {
        return new SimpleToken(token,index);
      }
    }
  }
  char ch=expression.charAt(index);
  SimpleToken token=new SimpleToken(new SimpleTokenType(TokenType.character,"" + ch),index);
  return token;
}
