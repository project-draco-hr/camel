{
  String testMessage="MSH|^~\\&|ADT|EPIC|JCAPS|CC|20160902123950|RISTECH|ADT^A08|00001|D|2.3|||||||" + '\r' + '\n';
  addTestRoute(true);
  result.expectedMessageCount(1);
  result.expectedHeaderReceived(MllpConstants.MLLP_SENDING_APPLICATION,"ADT");
  result.expectedHeaderReceived(MllpConstants.MLLP_SENDING_FACILITY,"EPIC");
  result.expectedHeaderReceived(MllpConstants.MLLP_RECEIVING_APPLICATION,"JCAPS");
  result.expectedHeaderReceived(MllpConstants.MLLP_TIMESTAMP,"20160902123950");
  result.expectedHeaderReceived(MllpConstants.MLLP_SECURITY,"RISTECH");
  result.expectedHeaderReceived(MllpConstants.MLLP_MESSAGE_TYPE,"ADT^A08");
  result.expectedHeaderReceived(MllpConstants.MLLP_EVENT_TYPE,"ADT");
  result.expectedHeaderReceived(MllpConstants.MLLP_TRIGGER_EVENT,"A08");
  result.expectedHeaderReceived(MllpConstants.MLLP_MESSAGE_CONTROL,"00001");
  result.expectedHeaderReceived(MllpConstants.MLLP_PROCESSING_ID,"D");
  result.expectedHeaderReceived(MllpConstants.MLLP_VERSION_ID,"2.3");
  mllpClient.connect();
  mllpClient.sendMessageAndWaitForAcknowledgement(testMessage,10000);
  assertMockEndpointsSatisfied(10,TimeUnit.SECONDS);
  Message message=result.getExchanges().get(0).getIn();
  assertNotNull("Should have header" + MllpConstants.MLLP_LOCAL_ADDRESS,message.getHeader(MllpConstants.MLLP_LOCAL_ADDRESS));
  assertNotNull("Should have header" + MllpConstants.MLLP_REMOTE_ADDRESS,message.getHeader(MllpConstants.MLLP_REMOTE_ADDRESS));
}
