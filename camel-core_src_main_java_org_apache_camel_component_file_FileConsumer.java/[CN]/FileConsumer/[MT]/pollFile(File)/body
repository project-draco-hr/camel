{
  if (!file.exists()) {
    return;
  }
  if (isValidFile(file)) {
    if (endpoint.isNoop()) {
      long fileModified=file.lastModified();
      if (fileModified <= lastPollTime) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Ignoring file: " + file + " as modified time: "+ fileModified+ " less than last poll time: "+ lastPollTime);
        }
        return;
      }
    }
    FileProcessStrategy processStrategy=endpoint.getFileStrategy();
    FileExchange exchange=endpoint.createExchange(file);
    if (isPreserveFileName()) {
      String relativePath=file.getPath().substring(endpoint.getFile().getPath().length());
      if (relativePath.startsWith(File.separator)) {
        relativePath=relativePath.substring(1);
      }
      exchange.getIn().setHeader(FileComponent.HEADER_FILE_NAME,relativePath);
    }
    try {
      if (LOG.isDebugEnabled()) {
        LOG.debug("About to process file:  " + file + " using exchange: "+ exchange);
      }
      if (processStrategy.begin(endpoint,exchange,file)) {
        getProcessor().process(exchange);
        processStrategy.commit(endpoint,exchange,file);
      }
 else {
        if (LOG.isDebugEnabled()) {
          LOG.debug(endpoint + " cannot process file: " + file);
        }
      }
    }
 catch (    Throwable e) {
      handleException(e);
    }
  }
}
