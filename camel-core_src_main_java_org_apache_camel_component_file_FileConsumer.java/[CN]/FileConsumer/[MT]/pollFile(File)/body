{
  if (!file.exists()) {
    return 0;
  }
  if (!isValidFile(file)) {
    return 0;
  }
  if (!endpoint.isNoop()) {
    if (filesBeingProcessed.contains(file)) {
      return 1;
    }
    filesBeingProcessed.put(file,file);
  }
  final FileProcessStrategy processStrategy=endpoint.getFileStrategy();
  final FileExchange exchange=endpoint.createExchange(file);
  endpoint.configureMessage(file,exchange.getIn());
  try {
    if (LOG.isDebugEnabled()) {
      LOG.debug("About to process file:  " + file + " using exchange: "+ exchange);
    }
    if (processStrategy.begin(endpoint,exchange,file)) {
      getAsyncProcessor().process(exchange,new AsyncCallback(){
        public void done(        boolean sync){
          if (exchange.getException() == null) {
            try {
              processStrategy.commit(endpoint,exchange,file);
            }
 catch (            Exception e) {
              handleException(e);
            }
          }
 else {
            handleException(exchange.getException());
          }
          filesBeingProcessed.remove(file);
        }
      }
);
    }
 else {
      if (LOG.isDebugEnabled()) {
        LOG.debug(endpoint + " cannot process file: " + file);
      }
    }
  }
 catch (  Throwable e) {
    handleException(e);
  }
  return 1;
}
