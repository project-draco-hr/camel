{
  final Settable<String> result=new Settable<String>();
  final AtomicReference<Promise<?>> methodResult=new AtomicReference<Promise<?>>();
  new TryCatchFinally(){
    @Override protected void doTry() throws Throwable {
      Object[] parameters=dataConverter.fromData(input,Object[].class);
      long startTime=workflowClock.currentTimeMillis();
      boolean replaying=contextProvider.getDecisionContext().getWorkflowClock().isReplaying();
      LOGGER.debug("Processing workflow execute");
      Object r=swfWorkflowConsumer.processWorkflow(parameters,startTime,replaying);
      if (r instanceof Promise) {
        methodResult.set((Promise<?>)r);
      }
 else       if (r != null) {
        methodResult.set(new Settable<Object>(r));
      }
    }
    @Override protected void doCatch(    Throwable e) throws Throwable {
      if (!(e instanceof CancellationException) || !decisionContext.getWorkflowContext().isCancelRequested()) {
        throwWorkflowException(dataConverter,e);
      }
    }
    @Override protected void doFinally() throws Throwable {
      Promise<?> r=methodResult.get();
      if (r == null || r.isReady()) {
        Object workflowResult=r == null ? null : r.get();
        String convertedResult=dataConverter.toData(workflowResult);
        result.set(convertedResult);
      }
    }
  }
;
  return result;
}
