{
  assertEquals("provider",scp.getProvider());
  assertEquals("protocol",scp.getSecureSocketProtocol());
  validateBaseSSLContextParameters(scp);
  assertNotNull(scp.getKeyManagers());
  assertEquals("keyPassword",scp.getKeyManagers().getKeyPassword());
  assertEquals("provider",scp.getKeyManagers().getProvider());
  assertNotNull(scp.getKeyManagers().getKeyStore());
  assertEquals("type",scp.getKeyManagers().getKeyStore().getType());
  assertNotNull(scp.getTrustManagers());
  assertEquals("provider",scp.getTrustManagers().getProvider());
  assertNotNull(scp.getTrustManagers().getKeyStore());
  assertEquals("type",scp.getTrustManagers().getKeyStore().getType());
  assertNotNull(scp.getSecureRandom());
  assertEquals("provider",scp.getSecureRandom().getProvider());
  assertEquals("algorithm",scp.getSecureRandom().getAlgorithm());
  assertNotNull(scp.getClientParameters());
  validateBaseSSLContextParameters(scp.getClientParameters());
  assertNotNull(scp.getServerParameters());
  assertEquals(ClientAuthentication.WANT,scp.getServerParameters().getClientAuthentication());
  validateBaseSSLContextParameters(scp.getServerParameters());
}
