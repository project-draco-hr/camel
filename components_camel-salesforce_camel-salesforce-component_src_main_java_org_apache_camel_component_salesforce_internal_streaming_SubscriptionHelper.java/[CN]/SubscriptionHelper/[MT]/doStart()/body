{
  handshakeError=null;
  handshakeException=null;
  connectError=null;
  connectException=null;
  if (handshakeListener == null) {
    handshakeListener=new ClientSessionChannel.MessageListener(){
      public void onMessage(      ClientSessionChannel channel,      Message message){
        LOG.debug("[CHANNEL:META_HANDSHAKE]: {}",message);
        if (!message.isSuccessful()) {
          LOG.warn("Handshake failure: {}",message);
          handshakeError=(String)message.get(ERROR_FIELD);
          handshakeException=getFailure(message);
          restartClient();
        }
 else         if (!listenerMap.isEmpty()) {
          reconnecting=true;
        }
      }
    }
;
  }
  client.getChannel(META_HANDSHAKE).addListener(handshakeListener);
  if (connectListener == null) {
    connectListener=new ClientSessionChannel.MessageListener(){
      public void onMessage(      ClientSessionChannel channel,      Message message){
        LOG.debug("[CHANNEL:META_CONNECT]: {}",message);
        if (!message.isSuccessful()) {
          LOG.warn("Connect failure: {}",message);
          connectError=(String)message.get(ERROR_FIELD);
          connectException=getFailure(message);
          if (connectError != null) {
            if (connectError.startsWith("403::")) {
              try {
                session.login(null);
              }
 catch (              SalesforceException e) {
                LOG.error("Error renewing OAuth token on Connect 403: " + e.getMessage(),e);
              }
            }
          }
        }
 else         if (reconnecting) {
          reconnecting=false;
          LOG.debug("Refreshing subscriptions to {} channels on reconnect",listenerMap.size());
          final Map<SalesforceConsumer,ClientSessionChannel.MessageListener> map=new HashMap<SalesforceConsumer,ClientSessionChannel.MessageListener>();
          map.putAll(listenerMap);
          listenerMap.clear();
          for (          Map.Entry<SalesforceConsumer,ClientSessionChannel.MessageListener> entry : map.entrySet()) {
            final SalesforceConsumer consumer=entry.getKey();
            final String topicName=consumer.getTopicName();
            subscribe(topicName,consumer);
          }
        }
      }
    }
;
  }
  client.getChannel(META_CONNECT).addListener(connectListener);
  if (disconnectListener == null) {
    disconnectListener=new ClientSessionChannel.MessageListener(){
      @Override public void onMessage(      ClientSessionChannel clientSessionChannel,      Message message){
        restartClient();
      }
    }
;
  }
  client.getChannel(META_DISCONNECT).addListener(disconnectListener);
  client.handshake();
  final long waitMs=MILLISECONDS.convert(CONNECT_TIMEOUT,SECONDS);
  if (!client.waitFor(waitMs,BayeuxClient.State.CONNECTED)) {
    if (handshakeException != null) {
      throw new CamelException(String.format("Exception during HANDSHAKE: %s",handshakeException.getMessage()),handshakeException);
    }
 else     if (handshakeError != null) {
      throw new CamelException(String.format("Error during HANDSHAKE: %s",handshakeError));
    }
 else     if (connectException != null) {
      throw new CamelException(String.format("Exception during CONNECT: %s",connectException.getMessage()),connectException);
    }
 else     if (connectError != null) {
      throw new CamelException(String.format("Error during CONNECT: %s",connectError));
    }
 else {
      throw new CamelException(String.format("Handshake request timeout after %s seconds",CONNECT_TIMEOUT));
    }
  }
}
