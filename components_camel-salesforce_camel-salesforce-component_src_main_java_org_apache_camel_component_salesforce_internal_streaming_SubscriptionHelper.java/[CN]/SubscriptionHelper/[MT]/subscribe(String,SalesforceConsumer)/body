{
  final String channelName=getChannelName(topicName);
  LOG.info("Subscribing to channel {}...",channelName);
  final ClientSessionChannel.MessageListener listener=new ClientSessionChannel.MessageListener(){
    @Override public void onMessage(    ClientSessionChannel channel,    Message message){
      LOG.debug("Received Message: {}",message);
      consumer.processMessage(channel,message);
    }
  }
;
  final ClientSessionChannel clientChannel=client.getChannel(channelName);
  final CountDownLatch latch=new CountDownLatch(1);
  final String[] subscribeError={null};
  final ClientSessionChannel.MessageListener subscriptionListener=new ClientSessionChannel.MessageListener(){
    public void onMessage(    ClientSessionChannel channel,    Message message){
      LOG.debug("[CHANNEL:META_SUBSCRIBE]: {}",message);
      final String subscribedChannelName=message.get(SUBSCRIPTION_FIELD).toString();
      if (channelName.equals(subscribedChannelName)) {
        if (!message.isSuccessful()) {
          String error=(String)message.get(ERROR_FIELD);
          if (error != null) {
            subscribeError[0]=error;
          }
        }
 else {
          LOG.info("Subscribed to channel {}",subscribedChannelName);
        }
        latch.countDown();
      }
    }
  }
;
  client.getChannel(META_SUBSCRIBE).addListener(subscriptionListener);
  try {
    clientChannel.subscribe(listener);
    try {
      if (!latch.await(CHANNEL_TIMEOUT,SECONDS)) {
        String message;
        if (subscribeError[0] != null) {
          message=String.format("Error subscribing to topic %s: %s",topicName,subscribeError[0]);
        }
 else {
          message=String.format("Timeout error subscribing to topic %s after %s seconds",topicName,CHANNEL_TIMEOUT);
        }
        throw new CamelException(message);
      }
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
    listenerMap.put(consumer,listener);
  }
  finally {
    client.getChannel(META_SUBSCRIBE).removeListener(subscriptionListener);
  }
}
