{
  context.addRoutes(new RouteBuilder(){
    @Override public void configure() throws Exception {
      from("direct:start").to("mock:result");
    }
  }
);
  context.start();
  MockEndpoint mock=getMockEndpoint("mock:result");
  mock.message(0).body().matches(new Expression(){
    public <T>T evaluate(    Exchange exchange,    Class<T> type){
      String body=exchange.getIn().getBody(String.class);
      Boolean answer=body.contains("Camel");
      return type.cast(answer);
    }
  }
);
  mock.message(0).body().matches(new Predicate(){
    public boolean matches(    Exchange exchange){
      String body=exchange.getIn().getBody(String.class);
      return body.contains("Camel");
    }
  }
);
  template.sendBody("direct:start","Camel rocks");
  mock.assertIsSatisfied();
  mock.reset();
  mock.message(0).body().matches(new Expression(){
    public <T>T evaluate(    Exchange exchange,    Class<T> type){
      String body=exchange.getIn().getBody(String.class);
      Boolean answer=body.contains("Camel");
      return type.cast(answer);
    }
  }
);
  template.sendBody("direct:start","Hello World");
  mock.assertIsNotSatisfied();
}
