{
  int pos=1;
  int counterMandatoryFields=0;
  DataField dataField;
  String token;
  int offset=1;
  int length;
  String delimiter;
  Field field;
  Collection<DataField> c=dataFields.values();
  Iterator<DataField> itr=c.iterator();
  while (itr.hasNext()) {
    dataField=itr.next();
    length=dataField.length();
    delimiter=dataField.delimiter();
    if (length == 0 && dataField.lengthPos() != 0) {
      Field lengthField=annotatedFields.get(dataField.lengthPos());
      lengthField.setAccessible(true);
      Object modelObj=model.get(lengthField.getDeclaringClass().getName());
      Object lengthObj=lengthField.get(modelObj);
      length=((Integer)lengthObj).intValue();
    }
    if (length < 1 && delimiter == null && dataField.lengthPos() == 0) {
      throw new IllegalArgumentException("Either length or delimiter must be specified for the field : " + dataField.toString());
    }
    if (offset - 1 <= -1) {
      throw new IllegalArgumentException("Offset/Position of the field " + dataField.toString() + " cannot be negative");
    }
    if (dataField.pos() > offset) {
      LOG.debug("skipping ahead [" + (dataField.pos() - offset) + "] chars.");
      offset=dataField.pos();
    }
    if (length > 0) {
      token=record.substring(offset - 1,offset + length - 1);
      offset+=length;
    }
 else     if (!delimiter.equals("")) {
      String tempToken=record.substring(offset - 1,record.length());
      token=tempToken.substring(0,tempToken.indexOf(delimiter));
      offset+=token.length() + 1;
    }
 else {
      token="";
    }
    if (dataField.trim()) {
      token=token.trim();
    }
    if (dataField.required()) {
      ++counterMandatoryFields;
      if (token.equals("")) {
        throw new IllegalArgumentException("The mandatory field defined at the position " + pos + " is empty for the line: "+ line);
      }
    }
    field=annotatedFields.get(dataField.pos());
    field.setAccessible(true);
    if (LOG.isDebugEnabled()) {
      LOG.debug("Pos/Offset: {}, Data: {}, Field type: {}",new Object[]{offset,token,field.getType()});
    }
    Format<?> format=FormatFactory.getFormat(field.getType(),getLocale(),dataField,field.getAnnotation(BindyConverter.class));
    Object modelField=model.get(field.getDeclaringClass().getName());
    Object value=null;
    if (!token.equals("")) {
      try {
        value=format.parse(token);
      }
 catch (      FormatException ie) {
        throw new IllegalArgumentException(ie.getMessage() + ", position: " + offset+ ", line: "+ line,ie);
      }
catch (      Exception e) {
        throw new IllegalArgumentException("Parsing error detected for field defined at the position/offset: " + offset + ", line: "+ line,e);
      }
    }
 else {
      value=getDefaultValueForPrimitive(field.getType());
    }
    field.set(modelField,value);
    ++pos;
  }
  if (offset <= record.length() && !(record.substring(offset - 1,record.length())).trim().equals("") && !isIgnoreTrailingChars()) {
    throw new IllegalArgumentException("Unexpected / unmapped characters found at the end of the fixed-length record at line : " + line);
  }
  LOG.debug("Counter mandatory fields: {}",counterMandatoryFields);
  if (pos < totalFields) {
    throw new IllegalArgumentException("Some fields are missing (optional or mandatory), line: " + line);
  }
  if (counterMandatoryFields < numberMandatoryFields) {
    throw new IllegalArgumentException("Some mandatory fields are missing, line: " + line);
  }
}
