{
  for (  Class<?> cl : models) {
    FixedLengthRecord record=cl.getAnnotation(FixedLengthRecord.class);
    if (record != null) {
      LOG.debug("Fixed length record: {}",record);
      crlf=record.crlf();
      LOG.debug("Carriage return defined for the CSV: {}",crlf);
      hasHeader=record.hasHeader();
      LOG.debug("Has Header: {}",hasHeader);
      skipHeader=record.skipHeader();
      LOG.debug("Skip Header: {}",skipHeader);
      hasFooter=record.hasFooter();
      LOG.debug("Has Footer: {}",hasFooter);
      skipFooter=record.skipFooter();
      LOG.debug("Skip Footer: {}",skipFooter);
      isHeader=record.isHeader();
      LOG.debug("Is Header: {}",isHeader);
      isFooter=record.isFooter();
      LOG.debug("Is Footer: {}",isFooter);
      paddingChar=record.paddingChar();
      LOG.debug("Padding char: {}",paddingChar);
      recordLength=record.length();
      LOG.debug("Length of the record: {}",recordLength);
      ignoreTrailingChars=record.ignoreTrailingChars();
      LOG.debug("Ignore trailing chars: {}",ignoreTrailingChars);
    }
  }
  if (hasHeader && isHeader) {
    throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isHeader=true' and 'hasHeader=true'");
  }
  if (hasFooter && isFooter) {
    throw new java.lang.IllegalArgumentException("Record can not be configured with both 'isFooter=true' and 'hasFooter=true'");
  }
  if ((isHeader || isFooter) && (skipHeader || skipFooter)) {
    throw new java.lang.IllegalArgumentException("skipHeader and/or skipFooter can not be configured on a record where 'isHeader=true' or 'isFooter=true'");
  }
}
