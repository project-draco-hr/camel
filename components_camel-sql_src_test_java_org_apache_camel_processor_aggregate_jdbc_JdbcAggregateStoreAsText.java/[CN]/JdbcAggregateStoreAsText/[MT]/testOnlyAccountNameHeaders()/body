{
  MockEndpoint mock=getMockEndpoint("mock:aggregated");
  mock.expectedBodiesReceived("ABCDE");
  repo.setStoreBodyAsText(false);
  repo.setHeadersToStoreAsText(Arrays.asList("accountName"));
  Map<String,Object> headers=new HashMap<String,Object>();
  headers.put("id",123);
  headers.put("companyName","Acme");
  headers.put("accountName","Alan");
  template.sendBodyAndHeaders("direct:start","A",headers);
  assertEquals(null,getAggregationRepositoryBody(123));
  assertEquals(null,getAggregationRepositoryCompanyName(123));
  assertEquals("Alan",getAggregationRepositoryAccountName(123));
  template.sendBodyAndHeaders("direct:start","B",headers);
  assertEquals(null,getAggregationRepositoryBody(123));
  assertEquals(null,getAggregationRepositoryCompanyName(123));
  assertEquals("Alan",getAggregationRepositoryAccountName(123));
  template.sendBodyAndHeaders("direct:start","C",headers);
  assertEquals(null,getAggregationRepositoryBody(123));
  assertEquals(null,getAggregationRepositoryCompanyName(123));
  assertEquals("Alan",getAggregationRepositoryAccountName(123));
  template.sendBodyAndHeaders("direct:start","D",headers);
  assertEquals(null,getAggregationRepositoryBody(123));
  assertEquals(null,getAggregationRepositoryCompanyName(123));
  assertEquals("Alan",getAggregationRepositoryAccountName(123));
  template.sendBodyAndHeaders("direct:start","E",headers);
  assertMockEndpointsSatisfied();
}
