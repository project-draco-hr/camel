{
  final MockEndpoint mockEndpoint1=camelContext.getEndpoint("mock:results1",MockEndpoint.class);
  final MockEndpoint mockEndpoint2=camelContext.getEndpoint("mock:results2",MockEndpoint.class);
  final MockEndpoint mockEndpoint3=camelContext.getEndpoint("mock:results3",MockEndpoint.class);
  final MockEndpoint mockEndpoint4=camelContext.getEndpoint("mock:results4",MockEndpoint.class);
  mockEndpoint1.expectedMessageCount(2);
  mockEndpoint2.expectedMessageCount(1);
  mockEndpoint3.expectedMessageCount(1);
  mockEndpoint4.expectedMessageCount(2);
  ConnectableObservable<Exchange> inOnly=reactiveCamel.from("direct:start").lift(new CamelOperator(mockEndpoint1)).lift(new CamelOperator(camelContext,"log:inOnly")).debounce(1,TimeUnit.SECONDS).lift(reactiveCamel.to(mockEndpoint2)).lift(reactiveCamel.to("mock:results3")).publish();
  Subscription inSubscription=inOnly.connect();
  producerTemplate.sendBody("direct:start","<test1/>");
  producerTemplate.sendBody("direct:start","<test2/>");
  ConnectableObservable<Exchange> inOut=reactiveCamel.from("restlet:http://localhost:9080/test?restletMethod=POST").map(new Func1<Exchange,Exchange>(){
    @Override public Exchange call(    Exchange exchange){
      exchange.getIn().setBody(exchange.getIn().getBody(String.class));
      return exchange;
    }
  }
).lift(reactiveCamel.to("log:inOut")).map(new Func1<Exchange,Exchange>(){
    @Override public Exchange call(    Exchange exchange){
      exchange.getIn().setBody(exchange.getIn().getBody(String.class) + " back");
      return exchange;
    }
  }
).lift(reactiveCamel.to(mockEndpoint4)).publish();
  Subscription inoutSubscription=inOut.connect();
  given().body("hello").when().post("http://localhost:9080/test").then().assertThat().body(containsString("hello back"));
  given().body("holla").when().post("http://localhost:9080/test").then().assertThat().body(containsString("holla back"));
  mockEndpoint1.assertIsSatisfied();
  mockEndpoint2.assertIsSatisfied();
  mockEndpoint3.assertIsSatisfied();
  mockEndpoint4.assertIsSatisfied();
  inSubscription.unsubscribe();
  inoutSubscription.unsubscribe();
}
