{
  BeanInvocation invocation=new BeanInvocation(method,args);
  ExchangePattern pattern=ExchangePattern.InOut;
  MethodInfo methodInfo=methodInfoCache.getMethodInfo(method);
  if (methodInfo != null) {
    pattern=methodInfo.getPattern();
  }
  Exchange exchange=new DefaultExchange(endpoint,pattern);
  exchange.getIn().setBody(invocation);
  LOG.trace("Proxied method call {} invoking producer: {}",method.getName(),producer);
  producer.process(exchange);
  Throwable cause=exchange.getException();
  if (cause != null) {
    Throwable found=findSuitableException(cause,method);
    if (found != null) {
      throw found;
    }
    if (cause instanceof RuntimeCamelException) {
      if (cause.getCause() instanceof RuntimeException) {
        throw (RuntimeException)((RuntimeCamelException)cause).getCause();
      }
      throw (RuntimeCamelException)cause;
    }
    throw cause;
  }
  Class<?> to=method.getReturnType();
  if (to == Void.TYPE || !pattern.isOutCapable()) {
    return null;
  }
  if (!exchange.hasOut() || exchange.getOut().getBody() == null) {
    return null;
  }
  Object answer=exchange.getOut().getMandatoryBody(to);
  LOG.trace("Proxied method call {} returning: {}",method.getName(),answer);
  return answer;
}
