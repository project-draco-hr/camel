{
  Class<?>[] parameterTypes=method.getParameterTypes();
  int size=parameterTypes.length;
  if (LOG.isTraceEnabled()) {
    LOG.trace("Creating MethodInfo for class: {} method: {} having {} parameters",new Object[]{type,method,size});
  }
  if (size < 2) {
    throw new IllegalArgumentException("The method " + method.getName() + " must have at least two parameters, has: "+ size);
  }
 else   if (size % 2 != 0) {
    throw new IllegalArgumentException("The method " + method.getName() + " must have equal number of parameters, has: "+ size);
  }
  Annotation[][] parameterAnnotations=method.getParameterAnnotations();
  for (int i=0; i < parameterAnnotations.length; i++) {
    Annotation[] annotations=parameterAnnotations[i];
    if (annotations.length > 0) {
      throw new IllegalArgumentException("Method parameter annotation: " + annotations[0] + " at index: "+ i+ " is not supported on method: "+ method);
    }
  }
  List<ParameterInfo> oldParameters=new ArrayList<ParameterInfo>();
  List<ParameterInfo> newParameters=new ArrayList<ParameterInfo>();
  for (int i=0; i < size / 2; i++) {
    Class<?> oldType=parameterTypes[i];
    if (oldParameters.size() == 0) {
      Expression oldBody=ExpressionBuilder.mandatoryBodyExpression(oldType);
      ParameterInfo info=new ParameterInfo(i,oldType,null,oldBody);
      oldParameters.add(info);
    }
 else     if (oldParameters.size() == 1) {
      Expression oldHeaders=ExpressionBuilder.headersExpression();
      ParameterInfo info=new ParameterInfo(i,oldType,null,oldHeaders);
      oldParameters.add(info);
    }
 else     if (oldParameters.size() == 2) {
      Expression oldProperties=ExpressionBuilder.propertiesExpression();
      ParameterInfo info=new ParameterInfo(i,oldType,null,oldProperties);
      oldParameters.add(info);
    }
  }
  for (int i=size / 2; i < size; i++) {
    Class<?> newType=parameterTypes[i];
    if (newParameters.size() == 0) {
      Expression newBody=ExpressionBuilder.mandatoryBodyExpression(newType);
      ParameterInfo info=new ParameterInfo(i,newType,null,newBody);
      newParameters.add(info);
    }
 else     if (newParameters.size() == 1) {
      Expression newHeaders=ExpressionBuilder.headersExpression();
      ParameterInfo info=new ParameterInfo(i,newType,null,newHeaders);
      newParameters.add(info);
    }
 else     if (newParameters.size() == 2) {
      Expression newProperties=ExpressionBuilder.propertiesExpression();
      ParameterInfo info=new ParameterInfo(i,newType,null,newProperties);
      newParameters.add(info);
    }
  }
  return new AggregationStrategyMethodInfo(method,oldParameters,newParameters);
}
