{
  final SMSMessage smsMessage=exchange.getIn().getMandatoryBody(SMSMessage.class);
  log.trace("Validating SMSMessage instance provided: {}",smsMessage.toString());
  final Set<ConstraintViolation<SMSMessage>> constraintViolations=getValidator().validate(smsMessage);
  if (constraintViolations.size() > 0) {
    final StringBuffer msg=new StringBuffer();
    for (    final ConstraintViolation<SMSMessage> cv : constraintViolations) {
      msg.append(String.format("- Invalid value for %s: %s",cv.getPropertyPath().toString(),cv.getMessage()));
    }
    log.debug(msg.toString());
    throw new InvalidPayloadRuntimeException(exchange,SMSMessage.class);
  }
  log.trace("SMSMessage instance is valid: {}",smsMessage.toString());
  final CMMessage cmMessage=new CMMessage(smsMessage.getPhoneNumber(),smsMessage.getMessage());
  log.debug("CMMessage instance build from valid SMSMessage instance");
  if (smsMessage.getFrom() == null || smsMessage.getFrom().isEmpty()) {
    String df=getConfiguration().getDefaultFrom();
    cmMessage.setSender(df);
    log.debug("Dynamic sender is set to default dynamic sender: {}",df);
  }
  cmMessage.setIdAsString(smsMessage.getId());
  cmMessage.setUnicodeAndMultipart(getConfiguration().getDefaultMaxNumberOfParts());
  sender.send(cmMessage);
  log.debug("Request accepted by CM Host: {}",cmMessage.toString());
}
