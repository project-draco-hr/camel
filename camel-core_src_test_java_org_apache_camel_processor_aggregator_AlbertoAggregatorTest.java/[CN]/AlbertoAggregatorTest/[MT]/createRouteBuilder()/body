{
  return new RouteBuilder(){
    AggregationStrategy surnameAggregator=new AggregationStrategy(){
      public Exchange aggregate(      Exchange oldExchange,      Exchange newExchange){
        debugIn("Surname Aggregator",oldExchange,newExchange);
        Message oldIn=oldExchange.getIn();
        Message newIn=newExchange.getIn();
        List<String> brothers=null;
        if (oldIn.getBody() instanceof List) {
          brothers=oldIn.getBody(List.class);
          brothers.add(newIn.getBody(String.class));
        }
 else {
          brothers=new ArrayList<String>();
          brothers.add(oldIn.getBody(String.class));
          brothers.add(newIn.getBody(String.class));
          oldExchange.getIn().setBody(brothers);
        }
        debugOut("Surname Aggregator",oldExchange);
        return oldExchange;
      }
    }
;
    AggregationStrategy brothersAggregator=new AggregationStrategy(){
      public Exchange aggregate(      Exchange oldExchange,      Exchange newExchange){
        debugIn("Brothers Aggregator",oldExchange,newExchange);
        Message oldIn=oldExchange.getIn();
        Message newIn=newExchange.getIn();
        Map<String,List> brothers=null;
        if (oldIn.getBody() instanceof Map) {
          brothers=oldIn.getBody(Map.class);
          brothers.put(newIn.getHeader(SURNAME_HEADER,String.class),newIn.getBody(List.class));
        }
 else {
          brothers=new HashMap<String,List>();
          brothers.put(oldIn.getHeader(SURNAME_HEADER,String.class),oldIn.getBody(List.class));
          brothers.put(newIn.getHeader(SURNAME_HEADER,String.class),newIn.getBody(List.class));
          oldExchange.getIn().setBody(brothers);
        }
        debugOut("Brothers Aggregator",oldExchange);
        return oldExchange;
      }
    }
;
    private void debugIn(    String stringId,    Exchange oldExchange,    Exchange newExchange){
      log.debug(stringId + " old headers in: " + oldExchange.getIn().getHeaders());
      log.debug(stringId + " old body in: " + oldExchange.getIn().getBody());
      log.debug(stringId + " new headers in: " + newExchange.getIn().getHeaders());
      log.debug(stringId + " new body in: " + newExchange.getIn().getBody());
    }
    private void debugOut(    String stringId,    Exchange exchange){
      log.debug(stringId + " old headers out: " + exchange.getIn().getHeaders());
      log.debug(stringId + " old body out: " + exchange.getIn().getBody());
    }
    @Override public void configure() throws Exception {
      from("direct:start").split(bodyAs(String.class).tokenize(",")).process(new Processor(){
        public void process(        Exchange exchange) throws Exception {
          String[] parts=exchange.getIn().getBody(String.class).split(" ");
          exchange.getIn().setBody(parts[0]);
          exchange.getIn().setHeader(SURNAME_HEADER,parts[1]);
        }
      }
).to("direct:joinSurnames");
      from("direct:joinSurnames").aggregate(header(SURNAME_HEADER),surnameAggregator).setHeader(TYPE_HEADER,constant(BROTHERS_TYPE)).to("direct:joinBrothers");
      AggregateDefinition agg=from("direct:joinBrothers").aggregate(header(TYPE_HEADER),brothersAggregator);
      agg.setBatchTimeout(2000L);
      agg.removeHeader(SURNAME_HEADER).removeHeader(TYPE_HEADER).to("mock:result");
    }
  }
;
}
