{
  Map<String,Object> headers=message.getHeaders();
  Enumeration names=request.getParameterNames();
  while (names.hasMoreElements()) {
    String name=(String)names.nextElement();
    String[] values=request.getParameterValues(name);
    LOG.trace("HTTP parameter {} = {}",name,values);
    if (values != null) {
      for (      String value : values) {
        if (headerFilterStrategy != null && !headerFilterStrategy.applyFilterToExternalHeaders(name,value,message.getExchange())) {
          HttpHelper.appendHeader(headers,name,value);
        }
      }
    }
  }
  if (request.getMethod().equals("POST") && request.getContentType() != null && request.getContentType().startsWith(HttpConstants.CONTENT_TYPE_WWW_FORM_URLENCODED)) {
    String charset=request.getCharacterEncoding();
    if (charset == null) {
      charset="UTF-8";
    }
    String body=message.getBody(String.class);
    for (    String param : body.split("&")) {
      String[] pair=param.split("=",2);
      if (pair.length == 2) {
        String name=URLDecoder.decode(pair[0],charset);
        String value=URLDecoder.decode(pair[1],charset);
        if (headerFilterStrategy != null && !headerFilterStrategy.applyFilterToExternalHeaders(name,value,message.getExchange())) {
          headers.put(name,value);
        }
      }
 else {
        throw new IllegalArgumentException("Invalid parameter, expected to be a pair but was " + param);
      }
    }
  }
}
