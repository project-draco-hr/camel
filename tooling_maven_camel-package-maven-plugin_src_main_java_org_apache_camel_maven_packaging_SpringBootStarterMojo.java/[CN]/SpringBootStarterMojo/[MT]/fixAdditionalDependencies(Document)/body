{
  Properties properties=new Properties();
  properties.load(getClass().getResourceAsStream("/spring-boot-fix-dependencies.properties"));
  Set<String> deps=new TreeSet<>();
  deps.addAll(csvToSet(properties.getProperty(project.getArtifactId())));
  Set<String> globalProps=csvToSet(properties.getProperty("global"));
  boolean inGlobal=false;
  for (  String gp : globalProps) {
    String[] comps=gp.split("\\:");
    String stdName=(comps[0] + ":" + comps[1]).replace("-starter","");
    if (stdName.equals(project.getGroupId() + ":" + project.getArtifactId())) {
      inGlobal=true;
      break;
    }
  }
  if (!inGlobal) {
    deps.addAll(globalProps);
  }
  if (deps.size() > 0) {
    getLog().debug("The following dependencies will be added to the starter: " + deps);
    XPath xpath=XPathFactory.newInstance().newXPath();
    Node dependencies=((NodeList)xpath.compile("/project/dependencies").evaluate(pom,XPathConstants.NODESET)).item(0);
    for (    String dep : deps) {
      Element dependency=pom.createElement("dependency");
      dependencies.appendChild(dependency);
      String[] comps=dep.split("\\:");
      String groupIdStr=comps[0];
      String artifactIdStr=comps[1];
      String versionStr=comps.length > 2 ? comps[2] : null;
      Element groupId=pom.createElement("groupId");
      groupId.setTextContent(groupIdStr);
      dependency.appendChild(groupId);
      Element artifactId=pom.createElement("artifactId");
      artifactId.setTextContent(artifactIdStr);
      dependency.appendChild(artifactId);
      if (versionStr != null) {
        Element version=pom.createElement("version");
        version.setTextContent(versionStr);
        dependency.appendChild(version);
      }
    }
  }
}
