{
  Set<String> loggingImpl=new HashSet<>();
  loggingImpl.add("commons-logging:commons-logging");
  loggingImpl.add("log4j:log4j");
  loggingImpl.add("log4j:apache-log4j-extras");
  loggingImpl.add("org.apache.logging.log4j:log4j");
  loggingImpl.add("org.slf4j:slf4j-jcl");
  loggingImpl.add("org.slf4j:slf4j-jdk14");
  loggingImpl.add("org.slf4j:slf4j-log4j12");
  loggingImpl.add("org.slf4j:slf4j-log4j13");
  loggingImpl.add("org.slf4j:slf4j-nop");
  loggingImpl.add("org.slf4j:slf4j-simple");
  Set<String> includedLibs=filterIncludedArtifacts(loggingImpl);
  if (includedLibs.size() > 0) {
    getLog().info("Spring-Boot-Starter: the following dependencies will be removed from the starter: " + includedLibs);
    XPath xpath=XPathFactory.newInstance().newXPath();
    Node dependency=((NodeList)xpath.compile("/project/dependencies/dependency[artifactId/text() = '" + project.getArtifactId() + "']").evaluate(pom,XPathConstants.NODESET)).item(0);
    Element exclusions=pom.createElement("exclusions");
    dependency.appendChild(exclusions);
    for (    String lib : includedLibs) {
      String groupIdStr=lib.split("\\:")[0];
      String artifactIdStr=lib.split("\\:")[1];
      Element exclusion=pom.createElement("exclusion");
      Element groupId=pom.createElement("groupId");
      groupId.setTextContent(groupIdStr);
      exclusion.appendChild(groupId);
      Element artifactId=pom.createElement("artifactId");
      artifactId.setTextContent(artifactIdStr);
      exclusion.appendChild(artifactId);
      exclusions.appendChild(exclusion);
    }
  }
}
