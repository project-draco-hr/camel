{
  boolean hasPath=false;
  boolean hasQuery=false;
  String resolvedUriTemplate=getEndpoint().getPath();
  Map<String,Object> query=new LinkedHashMap<>();
  for (  Parameter param : operation.getParameters()) {
    if ("query".equals(param.getIn())) {
      String name=param.getName();
      if (name != null) {
        String value=exchange.getIn().getHeader(name,String.class);
        if (value != null) {
          hasQuery=true;
          exchange.getIn().removeHeader(param.getName());
          query.put(name,value);
        }
 else         if (param.getRequired()) {
          throw new NoSuchHeaderException(exchange,name,String.class);
        }
      }
    }
 else     if ("path".equals(param.getIn())) {
      String value=exchange.getIn().getHeader(param.getName(),String.class);
      if (value != null) {
        hasPath=true;
        exchange.getIn().removeHeader(param.getName());
        String token="{" + param.getName() + "}";
        resolvedUriTemplate=StringHelper.replaceAll(resolvedUriTemplate,token,value);
      }
 else       if (param.getRequired()) {
        throw new NoSuchHeaderException(exchange,param.getName(),String.class);
      }
    }
  }
  if (hasQuery) {
    String queryParameters=URISupport.createQueryString(query);
    exchange.getIn().setHeader(Exchange.HTTP_QUERY,queryParameters);
  }
  if (hasPath) {
    String scheme=swagger.getSchemes() != null && swagger.getSchemes().size() == 1 ? swagger.getSchemes().get(0).toValue() : "http";
    String host=getEndpoint().getHost() != null ? getEndpoint().getHost() : swagger.getHost();
    String basePath=swagger.getBasePath();
    basePath=FileUtil.stripLeadingSeparator(basePath);
    resolvedUriTemplate=FileUtil.stripLeadingSeparator(resolvedUriTemplate);
    String overrideUri=String.format("%s://%s/%s/%s",scheme,host,basePath,resolvedUriTemplate);
    exchange.getIn().setHeader(Exchange.HTTP_URI,overrideUri);
  }
}
