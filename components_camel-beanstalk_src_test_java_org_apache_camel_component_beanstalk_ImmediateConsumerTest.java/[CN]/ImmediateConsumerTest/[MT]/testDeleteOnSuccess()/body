{
  if (!canTest()) {
    return;
  }
  final Job jobMock=mock(Job.class);
  final long jobId=111;
  final byte[] payload=Helper.stringToBytes(testMessage);
  when(jobMock.getJobId()).thenReturn(jobId);
  when(jobMock.getData()).thenReturn(payload);
  when(client.reserve(anyInt())).thenReturn(jobMock).thenReturn(null);
  MockEndpoint result=getMockEndpoint("mock:result");
  result.expectedMessageCount(1);
  result.expectedBodiesReceived(testMessage);
  result.expectedHeaderReceived(Headers.JOB_ID,jobId);
  result.message(0).header(Headers.JOB_ID).isEqualTo(jobId);
  result.assertIsSatisfied(100);
  verify(client,atLeast(1)).reserve(0);
  verify(client,atLeast(1)).delete(jobId);
}
