{
  context.addRoutes(new RouteBuilder(){
    public void configure(){
      getContext().getComponent("sql",SqlComponent.class).setDataSource(db);
      from("direct:start").setBody(constant("insert into projects(id, project, license) values(:?id,:?project,:?lic)")).to("sql://query?useMessageBodyForSql=true&batch=true").to("mock:result");
    }
  }
);
  MockEndpoint mock=getMockEndpoint("mock:result");
  mock.expectedMessageCount(1);
  List<Map<String,Object>> rows=new ArrayList<Map<String,Object>>();
  Map<String,Object> row=new HashMap<String,Object>();
  row.put("id",200);
  row.put("project","MyProject1");
  row.put("lic","OPEN1");
  rows.add(row);
  row=new HashMap<String,Object>();
  row.put("id",201);
  row.put("project","MyProject2");
  row.put("lic","OPEN1");
  rows.add(row);
  template.sendBodyAndHeader("direct:start",null,SqlConstants.SQL_PARAMETERS,rows);
  String origSql=assertIsInstanceOf(String.class,mock.getReceivedExchanges().get(0).getIn().getBody());
  assertEquals("insert into projects(id, project, license) values(:?id,:?project,:?lic)",origSql);
  assertEquals(null,mock.getReceivedExchanges().get(0).getOut().getBody());
  context.removeRoute(context.getRoutes().get(0).getId());
  context.addRoutes(new RouteBuilder(){
    public void configure(){
      getContext().getComponent("sql",SqlComponent.class).setDataSource(db);
      from("direct:start2").setBody(constant("select * from projects where license = :?lic order by id")).to("sql://query2?useMessageBodyForSql=true").to("mock:result2");
    }
  }
);
  mock=getMockEndpoint("mock:result2");
  mock.expectedMessageCount(1);
  template.sendBodyAndHeader("direct:start2",null,"lic","OPEN1");
  List<?> received=assertIsInstanceOf(List.class,mock.getReceivedExchanges().get(0).getIn().getBody());
  assertEquals(2,received.size());
  row=assertIsInstanceOf(Map.class,received.get(0));
  assertEquals("MyProject1",row.get("PROJECT"));
  row=assertIsInstanceOf(Map.class,received.get(1));
  assertEquals("MyProject2",row.get("PROJECT"));
}
