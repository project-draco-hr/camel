{
  DefaultCxfBinding cxfBinding=new DefaultCxfBinding();
  cxfBinding.setHeaderFilterStrategy(new DefaultHeaderFilterStrategy());
  Exchange exchange=new DefaultExchange(context);
  org.apache.cxf.message.Exchange cxfExchange=new org.apache.cxf.message.ExchangeImpl();
  exchange.setProperty(CxfConstants.DATA_FORMAT_PROPERTY,DataFormat.PAYLOAD);
  exchange.getOut().setHeader("soapAction","urn:hello:world");
  exchange.getOut().setHeader("MyFruitHeader","peach");
  exchange.getOut().addAttachment("att-1",new DataHandler(new FileDataSource("pom.xml")));
  IMocksControl control=EasyMock.createNiceControl();
  Endpoint endpoint=control.createMock(Endpoint.class);
  Binding binding=control.createMock(Binding.class);
  EasyMock.expect(endpoint.getBinding()).andReturn(binding);
  org.apache.cxf.message.Message cxfMessage=new org.apache.cxf.message.MessageImpl();
  EasyMock.expect(binding.createMessage()).andReturn(cxfMessage);
  cxfExchange.put(Endpoint.class,endpoint);
  control.replay();
  cxfBinding.populateCxfResponseFromExchange(exchange,cxfExchange);
  cxfMessage=cxfExchange.getOutMessage();
  assertNotNull(cxfMessage);
  Map<String,List<String>> headers=CastUtils.cast((Map)cxfMessage.get(Message.PROTOCOL_HEADERS));
  assertNotNull(headers);
  assertTrue(headers.size() == 2);
  verifyHeader(headers,"soapaction","urn:hello:world");
  verifyHeader(headers,"SoapAction","urn:hello:world");
  verifyHeader(headers,"SOAPAction","urn:hello:world");
  verifyHeader(headers,"myfruitheader","peach");
  verifyHeader(headers,"myFruitHeader","peach");
  verifyHeader(headers,"MYFRUITHEADER","peach");
  Collection<Attachment> attachments=cxfMessage.getAttachments();
  assertNotNull(attachments);
  assertNotNull(attachments.size() == 1);
  Attachment att=attachments.iterator().next();
  assertEquals("att-1",att.getId());
}
