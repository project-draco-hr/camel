{
  DefaultCxfBinding cxfBinding=new DefaultCxfBinding();
  cxfBinding.setHeaderFilterStrategy(new DefaultHeaderFilterStrategy());
  Exchange exchange=new DefaultExchange(context);
  org.apache.cxf.message.Exchange cxfExchange=new org.apache.cxf.message.ExchangeImpl();
  exchange.setProperty(CxfConstants.CXF_EXCHANGE,cxfExchange);
  exchange.setProperty(CxfConstants.DATA_FORMAT_PROPERTY,DataFormat.PAYLOAD);
  Map<String,Object> responseContext=new HashMap<String,Object>();
  responseContext.put(org.apache.cxf.message.Message.RESPONSE_CODE,Integer.valueOf(200));
  Map<String,List<String>> headers=new TreeMap<String,List<String>>(String.CASE_INSENSITIVE_ORDER);
  headers.put("content-type",Arrays.asList("text/xml;charset=UTF-8"));
  headers.put("Content-Length",Arrays.asList("241"));
  responseContext.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS,headers);
  org.apache.cxf.message.Message cxfMessage=new org.apache.cxf.message.MessageImpl();
  cxfExchange.setInMessage(cxfMessage);
  Set<Attachment> attachments=new HashSet<Attachment>();
  attachments.add(new AttachmentImpl("att-1",new DataHandler(new FileDataSource("pom.xml"))));
  cxfMessage.setAttachments(attachments);
  cxfBinding.populateExchangeFromCxfResponse(exchange,cxfExchange,responseContext);
  Map<String,Object> camelHeaders=exchange.getOut().getHeaders();
  assertNotNull(camelHeaders);
  assertEquals(responseContext,camelHeaders.get(Client.RESPONSE_CONTEXT));
  Map<String,DataHandler> camelAttachments=exchange.getOut().getAttachments();
  assertNotNull(camelAttachments);
  assertNotNull(camelAttachments.get("att-1"));
}
