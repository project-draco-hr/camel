{
  Channel channel=createChannel(routeContext);
  channel.setNextProcessor(processor);
  addInterceptStrategies(routeContext,channel,routeContext.getCamelContext().getInterceptStrategies());
  addInterceptStrategies(routeContext,channel,routeContext.getInterceptStrategies());
  addInterceptStrategies(routeContext,channel,this.getInterceptStrategies());
  ProcessorDefinition defn=(ProcessorDefinition)this;
  channel.setChildDefinition(child);
  channel.initChannel(defn,routeContext);
  if (defn instanceof TryDefinition || defn instanceof CatchDefinition || defn instanceof FinallyDefinition) {
  }
 else   if (ProcessorDefinitionHelper.isParentOfType(TryDefinition.class,defn,true) || ProcessorDefinitionHelper.isParentOfType(CatchDefinition.class,defn,true) || ProcessorDefinitionHelper.isParentOfType(FinallyDefinition.class,defn,true)) {
  }
 else   if (defn instanceof MulticastDefinition || defn instanceof RecipientListDefinition) {
  }
 else {
    if (isInheritErrorHandler() == null || isInheritErrorHandler()) {
      log.trace("{} is configured to inheritErrorHandler",defn);
      Processor output=channel.getOutput();
      Processor errorHandler=wrapInErrorHandler(routeContext,getErrorHandlerBuilder(),output);
      channel.setErrorHandler(errorHandler);
    }
 else {
      log.debug("{} is configured to not inheritErrorHandler.",defn);
    }
  }
  log.trace("{} wrapped in Channel: {}",defn,channel);
  return channel;
}
