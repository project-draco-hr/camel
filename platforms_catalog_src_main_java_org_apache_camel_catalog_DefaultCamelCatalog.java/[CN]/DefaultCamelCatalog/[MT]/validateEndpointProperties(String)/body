{
  EndpointValidationResult result=new EndpointValidationResult(uri);
  Map<String,String> properties;
  List<Map<String,String>> rows;
  try {
    URI u=normalizeUri(uri);
    String scheme=u.getScheme();
    String json=componentJSonSchema(scheme);
    if (json == null) {
      result.addUnknownComponent(scheme);
      return result;
    }
    rows=JSonSchemaHelper.parseJsonSchema("properties",json,true);
    properties=endpointProperties(uri);
  }
 catch (  URISyntaxException e) {
    result.addSyntaxError(e.getMessage());
    return result;
  }
  for (  Map.Entry<String,String> property : properties.entrySet()) {
    String name=property.getKey();
    String value=property.getValue();
    boolean placeholder=value.startsWith("{{") || value.startsWith("${") || value.startsWith("$simple{");
    Map<String,String> row=getRow(rows,name);
    if (row == null) {
      result.addUnknown(name);
      if (suggestionStrategy != null) {
        String[] suggestions=suggestionStrategy.suggestEndpointOptions(getNames(rows),name);
        if (suggestions != null) {
          result.addUnknownSuggestions(name,suggestions);
        }
      }
    }
 else {
      String defaultValue=getPropertyDefaultValue(rows,name);
      if (defaultValue != null) {
        result.addDefaultValue(name,defaultValue);
      }
      boolean required=isPropertyRequired(rows,name);
      if (required && isEmpty(value)) {
        result.addRequired(name);
      }
      String enums=getPropertyEnum(rows,name);
      if (!placeholder && enums != null) {
        String[] choices=enums.split(",");
        boolean found=false;
        for (        String s : choices) {
          if (value.equalsIgnoreCase(s)) {
            found=true;
            break;
          }
        }
        if (!found) {
          result.addInvalidEnum(name,value);
          result.addInvalidEnumChoices(name,choices);
        }
      }
      String kind=getPropertyKind(rows,name);
      if (!"path".equals(kind) && isPropertyObject(rows,name)) {
        if (!value.startsWith("#") || value.length() <= 1) {
          result.addInvalidReference(name,value);
        }
      }
      if (!placeholder && isPropertyBoolean(rows,name)) {
        boolean bool="true".equalsIgnoreCase(value) || "false".equalsIgnoreCase(value);
        if (!bool) {
          result.addInvalidBoolean(name,value);
        }
      }
      if (!placeholder && isPropertyInteger(rows,name)) {
        boolean valid=false;
        try {
          valid=Integer.valueOf(value) != null;
        }
 catch (        Exception e) {
        }
        if (!valid) {
          result.addInvalidInteger(name,value);
        }
      }
      if (!placeholder && isPropertyNumber(rows,name)) {
        boolean valid=false;
        try {
          valid=!Double.valueOf(value).isNaN() || !Float.valueOf(value).isNaN();
        }
 catch (        Exception e) {
        }
        if (!valid) {
          result.addInvalidNumber(name,value);
        }
      }
    }
  }
  for (  Map<String,String> row : rows) {
    String name=row.get("name");
    boolean required=isPropertyRequired(rows,name);
    if (required) {
      String value=properties.get(name);
      if (isEmpty(value)) {
        value=getPropertyDefaultValue(rows,name);
      }
      if (isEmpty(value)) {
        result.addRequired(name);
      }
    }
  }
  return result;
}
