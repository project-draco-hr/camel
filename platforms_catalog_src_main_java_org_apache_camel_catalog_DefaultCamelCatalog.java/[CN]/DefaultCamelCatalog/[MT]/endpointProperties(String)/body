{
  URI u=normalizeUri(uri);
  String scheme=u.getScheme();
  String json=componentJSonSchema(scheme);
  if (json == null) {
    throw new IllegalArgumentException("Cannot find endpoint with scheme " + scheme);
  }
  String syntax=null;
  String alternativeSyntax=null;
  List<Map<String,String>> rows=JSonSchemaHelper.parseJsonSchema("component",json,false);
  for (  Map<String,String> row : rows) {
    if (row.containsKey("syntax")) {
      syntax=row.get("syntax");
    }
    if (row.containsKey("alternativeSyntax")) {
      alternativeSyntax=row.get("alternativeSyntax");
    }
  }
  if (syntax == null) {
    throw new IllegalArgumentException("Endpoint with scheme " + scheme + " has no syntax defined in the json schema");
  }
  Map<String,String> userInfoOptions=new LinkedHashMap<String,String>();
  if (alternativeSyntax != null && alternativeSyntax.contains("@")) {
    alternativeSyntax=after(alternativeSyntax,":");
    int idx=alternativeSyntax.indexOf("@");
    String fields=alternativeSyntax.substring(0,idx);
    String[] names=fields.split(":");
    String authority=u.getAuthority();
    if (authority != null && authority.contains("@")) {
      String username=null;
      String password=null;
      String userInfo=authority.substring(0,authority.indexOf("@"));
      String[] parts=userInfo.split(":");
      if (parts.length == 2) {
        username=parts[0];
        password=parts[1];
      }
 else {
        username=userInfo;
      }
      if (names.length == 2) {
        userInfoOptions.put(names[0],username);
        if (password != null) {
          userInfoOptions.put(names[1],password);
        }
      }
    }
  }
  syntax=after(syntax,":");
  uri=after(uri,":");
  String uriPath=stripQuery(uri);
  if (!userInfoOptions.isEmpty()) {
    int idx=uriPath.indexOf('@');
    if (idx > -1) {
      uriPath=uriPath.substring(idx + 1);
    }
  }
  if (uriPath != null && uriPath.startsWith("//")) {
    uriPath=uriPath.substring(2);
  }
  Matcher matcher=SYNTAX_PATTERN.matcher(syntax);
  List<String> word=new ArrayList<String>();
  while (matcher.find()) {
    String s=matcher.group(1);
    if (!scheme.equals(s)) {
      word.add(s);
    }
  }
  String[] tokens=SYNTAX_PATTERN.split(syntax);
  List<String> word2=new ArrayList<String>();
  int prev=0;
  int prevPath=0;
  if ("activemq".equals(scheme) || "jms".equals("scheme")) {
    if (uriPath.startsWith("temp:")) {
      prevPath=5;
    }
  }
  for (  String token : tokens) {
    if (token.isEmpty()) {
      continue;
    }
    int idx=-1;
    int len=0;
    if (":".equals(token)) {
      idx=uriPath.indexOf("://",prevPath);
      len=3;
    }
    if (idx == -1) {
      idx=uriPath.indexOf(token,prevPath);
      len=token.length();
    }
    if (idx > 0) {
      String option=uriPath.substring(prev,idx);
      word2.add(option);
      prev=idx + len;
      prevPath=prev;
    }
  }
  if (prev > 0 || word2.isEmpty()) {
    String option=uriPath.substring(prev);
    word2.add(option);
  }
  rows=JSonSchemaHelper.parseJsonSchema("properties",json,true);
  boolean defaultValueAdded=false;
  Map<String,String> options=new LinkedHashMap<String,String>();
  if (!userInfoOptions.isEmpty()) {
    options.putAll(userInfoOptions);
  }
  Iterator<String> it=word2.iterator();
  for (int i=0; i < word.size(); i++) {
    String key=word.get(i);
    boolean allOptions=word.size() == word2.size();
    boolean required=isPropertyRequired(rows,key);
    String defaultValue=getPropertyDefaultValue(rows,key);
    if (allOptions) {
      String value=it.next();
      options.put(key,value);
    }
 else {
      if (!required) {
        String value=null;
        boolean last=i == word.size() - 1;
        if (last) {
          value=it.hasNext() ? it.next() : null;
          if (value != null) {
            options.put(key,value);
          }
 else {
            value=defaultValue;
          }
        }
        if (value != null) {
          options.put(key,value);
          defaultValueAdded=true;
        }
      }
 else {
        String value=it.hasNext() ? it.next() : null;
        if (value != null) {
          options.put(key,value);
        }
      }
    }
  }
  Map<String,String> answer=new LinkedHashMap<String,String>();
  for (  Map.Entry<String,String> entry : options.entrySet()) {
    String key=entry.getKey();
    String value=entry.getValue();
    if (defaultValueAdded) {
      boolean required=isPropertyRequired(rows,key);
      String defaultValue=getPropertyDefaultValue(rows,key);
      if (!required && defaultValue != null) {
        if (defaultValue.equals(value)) {
          continue;
        }
      }
    }
    answer.put(key,value);
  }
  Map<String,Object> parameters=URISupport.parseParameters(u);
  while (!parameters.isEmpty()) {
    Map.Entry<String,Object> entry=parameters.entrySet().iterator().next();
    String key=entry.getKey();
    String value=entry.getValue() != null ? entry.getValue().toString() : "";
    boolean multiValued=isPropertyMultiValue(rows,key);
    if (multiValued) {
      String prefix=getPropertyPrefix(rows,key);
      Map<String,Object> values=URISupport.extractProperties(parameters,prefix);
      CollectionStringBuffer csb=new CollectionStringBuffer("&");
      for (      Map.Entry<String,Object> multi : values.entrySet()) {
        String line=prefix + multi.getKey() + "="+ (multi.getValue() != null ? multi.getValue().toString() : "");
        csb.append(line);
      }
      if (!csb.isEmpty()) {
        value=value + "&" + csb.toString();
      }
    }
    answer.put(key,value);
    parameters.remove(key);
  }
  return answer;
}
