{
  URI u=new URI(uri);
  String scheme=u.getScheme();
  String json=componentJSonSchema(scheme);
  if (json == null) {
    throw new IllegalArgumentException("Cannot find endpoint with scheme " + scheme);
  }
  String syntax=null;
  List<Map<String,String>> rows=JSonSchemaHelper.parseJsonSchema("component",json,false);
  for (  Map<String,String> row : rows) {
    if (row.containsKey("syntax")) {
      syntax=row.get("syntax");
      break;
    }
  }
  if (syntax == null) {
    throw new IllegalArgumentException("Endpoint with scheme " + scheme + " has no syntax defined in the json schema");
  }
  syntax=after(syntax,":");
  Matcher matcher=SYNTAX_PATTERN.matcher(syntax);
  List<String> word=new ArrayList<String>();
  while (matcher.find()) {
    String s=matcher.group(1);
    if (!scheme.equals(s)) {
      word.add(s);
    }
  }
  uri=after(uri,":");
  String uriPath=stripQuery(uri);
  List<String> word2=new ArrayList<String>();
  if (word.size() == 1) {
    String s=uriPath;
    s=URISupport.stripPrefix(s,scheme);
    while (s.startsWith(":") || s.startsWith("/")) {
      s=s.substring(1);
    }
    word2.add(s);
  }
 else {
    Matcher matcher2=SYNTAX_PATTERN.matcher(uriPath);
    while (matcher2.find()) {
      String s=matcher2.group(1);
      if (!scheme.equals(s)) {
        word2.add(s);
      }
    }
  }
  rows=JSonSchemaHelper.parseJsonSchema("properties",json,true);
  boolean defaultValueAdded=false;
  Map<String,String> options=new LinkedHashMap<String,String>();
  Iterator<String> it=word2.iterator();
  for (int i=0; i < word.size(); i++) {
    String key=word.get(i);
    boolean allOptions=word.size() == word2.size();
    boolean required=isPropertyRequired(rows,key);
    String defaultValue=getPropertyDefaultValue(rows,key);
    if (allOptions) {
      String value=it.next();
      options.put(key,value);
    }
 else {
      if (!required) {
        String value=defaultValue;
        options.put(key,value);
        defaultValueAdded=true;
      }
 else {
        String value=it.next();
        options.put(key,value);
      }
    }
  }
  Map<String,String> answer=new LinkedHashMap<String,String>();
  for (  Map.Entry<String,String> entry : options.entrySet()) {
    String key=entry.getKey();
    String value=entry.getValue();
    if (defaultValueAdded) {
      boolean required=isPropertyRequired(rows,key);
      String defaultValue=getPropertyDefaultValue(rows,key);
      if (!required && defaultValue != null) {
        if (defaultValue.equals(value)) {
          continue;
        }
      }
    }
    answer.put(key,value);
  }
  Map<String,Object> parameters=URISupport.parseParameters(u);
  for (  Map.Entry<String,Object> entry : parameters.entrySet()) {
    String key=entry.getKey();
    String value=entry.getValue() != null ? entry.getValue().toString() : "";
    answer.put(key,value);
  }
  return answer;
}
