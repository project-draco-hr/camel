{
  final Path file=new Path(new File("target/test/test-camel-simple-write-file2").getAbsolutePath());
  deleteDirectory("target/file-batch3");
  context.addRoutes(new RouteBuilder(){
    @Override public void configure() throws Exception {
      from("file://target/file-batch3?sortBy=file:name").setHeader("KEY").simple("${in.header.CamelFileName}").to("hdfs://localhost/" + file.toUri() + "?fileSystemType=LOCAL&keyType=TEXT&fileType=SEQUENCE_FILE");
    }
  }
);
  context.start();
  NotifyBuilder nb=new NotifyBuilder(context).whenDone(10).create();
  for (int i=0; i < 10; ++i) {
    template.sendBodyAndHeader("file://target/file-batch3","CIAO","CamelFileName","CIAO" + i);
  }
  nb.matchesMockWaitTime();
  context.stop();
  Configuration conf=new Configuration();
  Path file1=new Path("file:///" + file.toUri());
  FileSystem fs1=FileSystem.get(file1.toUri(),conf);
  SequenceFile.Reader reader=new SequenceFile.Reader(fs1,file1,conf);
  Text key=(Text)ReflectionUtils.newInstance(reader.getKeyClass(),conf);
  BytesWritable value=(BytesWritable)ReflectionUtils.newInstance(reader.getValueClass(),conf);
  int i=0;
  while (reader.next(key,value)) {
    String str=new String(value.getBytes(),0,value.getLength());
    Assert.assertEquals("CIAO",str);
    Assert.assertEquals("CIAO" + i,key.toString());
    i++;
  }
  Assert.assertEquals(10,i);
}
