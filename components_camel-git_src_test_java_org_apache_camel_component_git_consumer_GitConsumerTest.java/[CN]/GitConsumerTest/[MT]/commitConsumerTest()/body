{
  Repository repository=getTestRepository();
  MockEndpoint added=getMockEndpoint("mock:result-commit");
  File fileToAdd=new File(gitLocalRepo,filenameToAdd);
  fileToAdd.createNewFile();
  template.send("direct:add",new Processor(){
    @Override public void process(    Exchange exchange) throws Exception {
      exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME,filenameToAdd);
    }
  }
);
  File gitDir=new File(gitLocalRepo,".git");
  assertEquals(gitDir.exists(),true);
  Status status=new Git(repository).status().call();
  assertTrue(status.getAdded().contains(filenameToAdd));
  template.send("direct:commit",new Processor(){
    @Override public void process(    Exchange exchange) throws Exception {
      exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE,commitMessage);
    }
  }
);
  Iterable<RevCommit> logs=new Git(repository).log().call();
  int count=0;
  for (  RevCommit rev : logs) {
    assertEquals(rev.getShortMessage(),commitMessage);
    count++;
  }
  assertEquals(count,1);
  File fileToAdd1=new File(gitLocalRepo,filenameBranchToAdd);
  fileToAdd1.createNewFile();
  template.send("direct:add",new Processor(){
    @Override public void process(    Exchange exchange) throws Exception {
      exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME,filenameBranchToAdd);
    }
  }
);
  status=new Git(repository).status().call();
  assertTrue(status.getAdded().contains(filenameBranchToAdd));
  template.send("direct:commit",new Processor(){
    @Override public void process(    Exchange exchange) throws Exception {
      exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE,"Test test Commit");
    }
  }
);
  logs=new Git(repository).log().call();
  count=0;
  for (  RevCommit rev : logs) {
    count++;
  }
  assertEquals(count,2);
  Thread.sleep(1 * 5000);
  Exchange ex1=added.getExchanges().get(0);
  Exchange ex2=added.getExchanges().get(1);
  assertEquals(commitMessage,ex2.getOut().getBody(RevCommit.class).getShortMessage());
  assertEquals("Test test Commit",ex1.getOut().getBody(RevCommit.class).getShortMessage());
  repository.close();
}
