{
  Class<?> clazz=target.getClass();
  log.debug("Configuring {}",clazz.getName());
  Collection<Field> fields=new ArrayList<Field>();
  fields.addAll(Arrays.asList(clazz.getDeclaredFields()));
  if (deep) {
    fields.addAll(Arrays.asList(clazz.getFields()));
    fields.addAll(Arrays.asList(clazz.getSuperclass().getDeclaredFields()));
  }
  for (  Field field : fields) {
    String propertyValue;
    try {
      propertyValue=context.resolvePropertyPlaceholders("{{" + field.getName() + "}}");
    }
 catch (    Exception e) {
      log.debug("Skipped field {}",field.getName());
      continue;
    }
    try {
      if (!propertyValue.isEmpty()) {
        Object convertedValue=convertValue(propertyValue,field.getGenericType());
        ReflectionHelper.setField(field,target,convertedValue);
        log.debug("Configured field {} with value {}",field.getName(),propertyValue);
      }
    }
 catch (    Exception e) {
      log.warn("Error setting field " + field.getName() + " due: "+ e.getMessage()+ ". This exception is ignored.",e);
    }
  }
  return target;
}
