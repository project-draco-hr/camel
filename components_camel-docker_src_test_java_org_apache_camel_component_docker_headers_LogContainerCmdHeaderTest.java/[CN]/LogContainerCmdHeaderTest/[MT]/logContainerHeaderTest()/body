{
  String containerId="9c09acd48a25";
  boolean stdOut=true;
  boolean stdErr=true;
  boolean followStream=true;
  boolean timestamps=true;
  boolean tailAll=true;
  int tail=5;
  Map<String,Object> headers=getDefaultParameters();
  headers.put(DockerConstants.DOCKER_CONTAINER_ID,containerId);
  headers.put(DockerConstants.DOCKER_FOLLOW_STREAM,followStream);
  headers.put(DockerConstants.DOCKER_STD_OUT,stdOut);
  headers.put(DockerConstants.DOCKER_STD_ERR,stdErr);
  headers.put(DockerConstants.DOCKER_TIMESTAMPS,timestamps);
  headers.put(DockerConstants.DOCKER_TAIL,tail);
  headers.put(DockerConstants.DOCKER_TAIL_ALL,tailAll);
  template.sendBodyAndHeaders("direct:in","",headers);
  Mockito.verify(dockerClient,Mockito.times(1)).logContainerCmd(containerId);
  Mockito.verify(mockObject,Mockito.times(1)).withFollowStream(Matchers.eq(followStream));
  Mockito.verify(mockObject,Mockito.times(1)).withTail(Matchers.eq(tail));
  Mockito.verify(mockObject,Mockito.times(1)).withTailAll();
  Mockito.verify(mockObject,Mockito.times(1)).withStdErr(Matchers.eq(stdErr));
  Mockito.verify(mockObject,Mockito.times(1)).withStdOut(Matchers.eq(stdOut));
  Mockito.verify(mockObject,Mockito.times(1)).withTimestamps(Matchers.eq(timestamps));
}
