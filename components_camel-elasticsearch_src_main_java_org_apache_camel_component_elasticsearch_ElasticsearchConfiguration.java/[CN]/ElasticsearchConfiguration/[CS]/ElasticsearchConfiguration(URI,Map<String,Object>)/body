{
  String protocol=uri.getScheme();
  if (!protocol.equalsIgnoreCase(PROTOCOL)) {
    throw new IllegalArgumentException("unrecognized elasticsearch protocol: " + protocol + " for uri: "+ uri);
  }
  setUri(uri);
  if (!isValidAuthority(uri.getAuthority())) {
    throw new URISyntaxException(uri.toASCIIString(),"incorrect URI syntax specified for the elasticsearch endpoint." + "please specify the syntax as \"elasticsearch:[Cluster Name | 'local']?[Query]\"");
  }
  if (LOCAL_NAME.equals(uri.getAuthority())) {
    setLocal(true);
    setClusterName(null);
  }
 else {
    setLocal(false);
    setClusterName(uri.getAuthority());
  }
  data=toBoolean(parameters.remove(PARAM_DATA));
  if (data == null) {
    data=local;
  }
  if (local && !data) {
    throw new IllegalArgumentException("invalid to use local node without data");
  }
  indexName=(String)parameters.remove(PARAM_INDEX_NAME);
  indexType=(String)parameters.remove(PARAM_INDEX_TYPE);
  operation=(String)parameters.remove(PARAM_OPERATION);
  consistencyLevel=parseConsistencyLevel(parameters);
  replicationType=parseReplicationType(parameters);
  ip=(String)parameters.remove(IP);
  transportAddresses=(String)parameters.remove(TRANSPORT_ADDRESSES);
  transportAddressesList=parseTransportAddresses(transportAddresses);
  String portParam=(String)parameters.remove(PORT);
  port=portParam == null ? DEFAULT_PORT : Integer.valueOf(portParam);
}
