{
  if (definition instanceof ServiceCallDefinition) {
    ServiceCallDefinition sc=(ServiceCallDefinition)definition;
    String name=sc.getName();
    String uri=sc.getUri();
    ExchangePattern mep=sc.getPattern();
    KubernetesConfigurationDefinition config=(KubernetesConfigurationDefinition)sc.getServiceCallConfiguration();
    KubernetesConfigurationDefinition configRef=null;
    if (sc.getServiceCallConfigurationRef() != null) {
      configRef=CamelContextHelper.lookup(routeContext.getCamelContext(),sc.getServiceCallConfigurationRef(),KubernetesConfigurationDefinition.class);
      if (configRef == null) {
        routeContext.getCamelContext().getServiceCallConfiguration(sc.getServiceCallConfigurationRef(),KubernetesConfigurationDefinition.class);
      }
    }
    if (config == null && configRef == null) {
      config=routeContext.getCamelContext().getServiceCallConfiguration(null,KubernetesConfigurationDefinition.class);
    }
    if (config == null) {
      Set<KubernetesConfigurationDefinition> set=routeContext.getCamelContext().getRegistry().findByType(KubernetesConfigurationDefinition.class);
      if (set.size() == 1) {
        config=set.iterator().next();
      }
    }
    if (config == null && configRef == null) {
      throw new IllegalStateException("The ServiceCall: " + definition + " must be configured before it can be used.");
    }
    Map<String,Object> parameters=new HashMap<>();
    if (configRef != null) {
      IntrospectionSupport.getProperties(configRef,parameters,null);
    }
    if (config != null) {
      IntrospectionSupport.getProperties(config,parameters,null);
    }
    KubernetesConfiguration kc=new KubernetesConfiguration();
    IntrospectionSupport.setProperties(kc,parameters);
    String namespace=kc.getNamespace();
    ServiceCallLoadBalancer lb=configureLoadBalancer(routeContext,sc);
    if (lb == null && config != null) {
      lb=configureLoadBalancer(routeContext,config);
    }
    if (lb == null && configRef != null) {
      lb=configureLoadBalancer(routeContext,configRef);
    }
    ServiceCallServerListStrategy sl=configureServerListStrategy(routeContext,sc);
    if (sl == null && config != null) {
      sl=configureServerListStrategy(routeContext,config);
    }
    if (sl == null && configRef != null) {
      sl=configureServerListStrategy(routeContext,configRef);
    }
    String lookup=config != null ? config.getLookup() : null;
    if (lookup == null && configRef != null) {
      lookup=configRef.getLookup();
    }
    String component=config != null ? config.getComponent() : null;
    if (component == null && configRef != null) {
      component=configRef.getComponent();
    }
    if ("client".equals(lookup)) {
      KubernetesClientServiceCallProcessor processor=new KubernetesClientServiceCallProcessor(name,namespace,component,uri,mep,kc);
      processor.setLoadBalancer(lb);
      processor.setServerListStrategy(sl);
      return processor;
    }
 else     if ("dns".equals(lookup)) {
      String dnsDomain=config != null ? config.getDnsDomain() : null;
      if (dnsDomain == null && configRef != null) {
        dnsDomain=configRef.getDnsDomain();
      }
      return new KubernetesDnsServiceCallProcessor(name,namespace,component,uri,mep,dnsDomain);
    }
 else {
      return new KubernetesEnvironmentServiceCallProcessor(name,namespace,component,uri,mep);
    }
  }
 else {
    return null;
  }
}
