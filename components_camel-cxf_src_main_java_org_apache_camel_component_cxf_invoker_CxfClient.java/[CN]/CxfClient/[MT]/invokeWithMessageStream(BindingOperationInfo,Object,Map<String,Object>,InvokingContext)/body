{
  Object retval=null;
  Map<String,Object> requestContext=null;
  Map<String,Object> responseContext=null;
  if (null != context) {
    requestContext=(Map<String,Object>)context.get(REQUEST_CONTEXT);
    responseContext=(Map<String,Object>)context.get(RESPONSE_CONTEXT);
  }
  Exchange exchange=new ExchangeImpl();
  setExchangeProperties(exchange,getEndpoint(),bi);
  exchange.put(InvokingContext.class,invokingContext);
  if (bi != null) {
    exchange.put(BindingMessageInfo.class,bi.getInput());
    exchange.setOneWay(bi.getOperationInfo().isOneWay());
  }
  Message message=prepareMessage(exchange,requestContext,param,invokingContext);
  PhaseInterceptorChain chain=setupInterceptorChain(getEndpoint());
  message.setInterceptorChain(chain);
  modifyChain(chain,requestContext);
  chain.setFaultObserver(outFaultObserver);
  prepareConduitSelector(message);
  modifyChain(chain,null);
  chain.doIntercept(message);
  Exception ex=message.getContent(Exception.class);
  if (ex != null) {
    if (LOG.isLoggable(Level.FINE)) {
      LOG.fine("Exception in outgoing chain: " + ex.toString());
    }
    throw ex;
  }
  if (!exchange.isOneWay()) {
synchronized (exchange) {
      waitResponse(exchange);
    }
    ex=getException(exchange);
    if (ex != null) {
      if (LOG.isLoggable(Level.FINE)) {
        LOG.fine("Exception in incoming chain: " + ex.toString());
      }
      throw ex;
    }
    retval=invokingContext.getResponseObject(exchange,responseContext);
  }
  return retval;
}
