{
  RouteBuilder<Exchange> builder=new RouteBuilder<Exchange>(){
    public void configure(){
      from("queue:a").choice().when(headerEquals("foo","bar")).to("queue:b").when(headerEquals("foo","cheese")).to("queue:c").otherwise().to("queue:d");
    }
  }
;
  Map<Endpoint<Exchange>,Processor<Exchange>> routeMap=builder.getRouteMap();
  System.out.println("Created map: " + routeMap);
  Set<Map.Entry<Endpoint<Exchange>,Processor<Exchange>>> routes=routeMap.entrySet();
  assertEquals("Number routes created",1,routes.size());
  for (  Map.Entry<Endpoint<Exchange>,Processor<Exchange>> route : routes) {
    Endpoint<Exchange> key=route.getKey();
    assertEquals("From endpoint","queue:a",key.getEndpointUri());
    Processor processor=route.getValue();
    assertTrue("Processor should be a ChoiceProcessor but was: " + processor + " with type: "+ processor.getClass().getName(),processor instanceof ChoiceProcessor);
    ChoiceProcessor<Exchange> choiceProcessor=(ChoiceProcessor<Exchange>)processor;
    List<FilterProcessor<Exchange>> filters=choiceProcessor.getFilters();
    assertEquals("Should be two when clauses",2,filters.size());
    FilterProcessor<Exchange> filter1=filters.get(0);
    assertSendTo(filter1.getProcessor(),"queue:b");
    FilterProcessor<Exchange> filter2=filters.get(1);
    assertSendTo(filter2.getProcessor(),"queue:c");
    assertSendTo(choiceProcessor.getOtherwise(),"queue:d");
  }
}
