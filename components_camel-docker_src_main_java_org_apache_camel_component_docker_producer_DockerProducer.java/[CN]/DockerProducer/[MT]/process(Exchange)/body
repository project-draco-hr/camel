{
  DockerCmd<?> dockerCmd=null;
  Message message=exchange.getIn();
  DockerClient client=DockerClientFactory.getDockerClient(component,configuration,message);
  DockerOperation operation=configuration.getOperation();
switch (operation) {
case AUTH:
    dockerCmd=executeAuthRequest(client,message);
  break;
case INFO:
dockerCmd=executeInfoRequest(client,message);
break;
case PING:
dockerCmd=executePingRequest(client,message);
break;
case VERSION:
dockerCmd=executeVersionRequest(client,message);
break;
case BUILD_IMAGE:
dockerCmd=executeBuildImageRequest(client,message);
break;
case CREATE_IMAGE:
dockerCmd=executeCreateImageRequest(client,message);
break;
case INSPECT_IMAGE:
dockerCmd=executeInspectImageRequest(client,message);
break;
case LIST_IMAGES:
dockerCmd=executeListImagesRequest(client,message);
break;
case PULL_IMAGE:
dockerCmd=executePullImageRequest(client,message);
break;
case PUSH_IMAGE:
dockerCmd=executePushImageRequest(client,message);
break;
case REMOVE_IMAGE:
dockerCmd=executeRemoveImageRequest(client,message);
break;
case SEARCH_IMAGES:
dockerCmd=executeSearchImageRequest(client,message);
break;
case TAG_IMAGE:
dockerCmd=executeTagImageRequest(client,message);
break;
case ATTACH_CONTAINER:
dockerCmd=executeAttachContainerRequest(client,message);
break;
case COMMIT_CONTAINER:
dockerCmd=executeCommitContainerRequest(client,message);
break;
case COPY_FILE_CONTAINER:
dockerCmd=executeCopyFileContainerRequest(client,message);
break;
case CREATE_CONTAINER:
dockerCmd=executeCreateContainerRequest(client,message);
break;
case DIFF_CONTAINER:
dockerCmd=executeDiffContainerRequest(client,message);
break;
case INSPECT_CONTAINER:
dockerCmd=executeInspectContainerRequest(client,message);
break;
case LIST_CONTAINERS:
dockerCmd=executeListContainersRequest(client,message);
break;
case LOG_CONTAINER:
dockerCmd=executeLogContainerRequest(client,message);
break;
case KILL_CONTAINER:
dockerCmd=executeKillContainerRequest(client,message);
break;
case PAUSE_CONTAINER:
dockerCmd=executePauseContainerRequest(client,message);
break;
case REMOVE_CONTAINER:
dockerCmd=executeRemoveContainerRequest(client,message);
break;
case RESTART_CONTAINER:
dockerCmd=executeRestartContainerRequest(client,message);
break;
case START_CONTAINER:
dockerCmd=executeStartContainerRequest(client,message);
break;
case STOP_CONTAINER:
dockerCmd=executeStopContainerRequest(client,message);
break;
case TOP_CONTAINER:
dockerCmd=executeTopContainerRequest(client,message);
break;
case UNPAUSE_CONTAINER:
dockerCmd=executeUnpauseContainerRequest(client,message);
break;
case WAIT_CONTAINER:
dockerCmd=executeWaitContainerRequest(client,message);
break;
case EXEC_CREATE:
dockerCmd=executeExecCreateRequest(client,message);
break;
case EXEC_START:
dockerCmd=executeExecStartRequest(client,message);
break;
default :
throw new DockerException("Invalid operation: " + operation);
}
Object result=dockerCmd.exec();
if (result != null) {
exchange.getIn().setBody(result);
}
}
