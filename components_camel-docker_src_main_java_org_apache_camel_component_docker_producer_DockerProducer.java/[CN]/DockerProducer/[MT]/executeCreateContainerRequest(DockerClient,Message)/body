{
  LOGGER.debug("Executing Docker Create Container Request");
  String image=DockerHelper.getProperty(DockerConstants.DOCKER_IMAGE,configuration,message,String.class);
  ObjectHelper.notNull(image,"Image must be specified");
  CreateContainerCmd createContainerCmd=client.createContainerCmd(image);
  Boolean attachStdErr=DockerHelper.getProperty(DockerConstants.DOCKER_ATTACH_STD_ERR,configuration,message,Boolean.class);
  if (attachStdErr != null) {
    createContainerCmd.withAttachStderr(attachStdErr);
  }
  Boolean attachStdIn=DockerHelper.getProperty(DockerConstants.DOCKER_ATTACH_STD_IN,configuration,message,Boolean.class);
  if (attachStdIn != null) {
    createContainerCmd.withAttachStdin(attachStdIn);
  }
  Boolean attachStdOut=DockerHelper.getProperty(DockerConstants.DOCKER_ATTACH_STD_OUT,configuration,message,Boolean.class);
  if (attachStdOut != null) {
    createContainerCmd.withAttachStdout(attachStdOut);
  }
  Capability[] capAdd=DockerHelper.getArrayProperty(DockerConstants.DOCKER_CAP_ADD,message,Capability.class);
  if (capAdd != null) {
    createContainerCmd.withCapAdd(capAdd);
  }
  Capability[] capDrop=DockerHelper.getArrayProperty(DockerConstants.DOCKER_CAP_DROP,message,Capability.class);
  if (capDrop != null) {
    createContainerCmd.withCapDrop(capDrop);
  }
  String[] cmd=DockerHelper.parseDelimitedStringHeader(DockerConstants.DOCKER_CMD,message);
  if (cmd != null) {
    createContainerCmd.withCmd(cmd);
  }
  Integer cpuShares=DockerHelper.getProperty(DockerConstants.DOCKER_CPU_SHARES,configuration,message,Integer.class);
  if (cpuShares != null) {
    createContainerCmd.withCpuShares(cpuShares);
  }
  Boolean disableNetwork=DockerHelper.getProperty(DockerConstants.DOCKER_DISABLE_NETWORK,configuration,message,Boolean.class);
  if (disableNetwork != null) {
    createContainerCmd.withDisableNetwork(disableNetwork);
  }
  String[] dns=DockerHelper.parseDelimitedStringHeader(DockerConstants.DOCKER_DNS,message);
  if (dns != null) {
    createContainerCmd.withDns(dns);
  }
  String[] env=DockerHelper.parseDelimitedStringHeader(DockerConstants.DOCKER_ENV,message);
  if (env != null) {
    createContainerCmd.withEnv(env);
  }
  String[] entrypoint=DockerHelper.getArrayProperty(DockerConstants.DOCKER_ENTRYPOINT,message,String.class);
  if (entrypoint != null) {
    createContainerCmd.withEntrypoint(entrypoint);
  }
  ExposedPort[] exposedPorts=DockerHelper.getArrayProperty(DockerConstants.DOCKER_EXPOSED_PORTS,message,ExposedPort.class);
  if (exposedPorts != null) {
    createContainerCmd.withExposedPorts(exposedPorts);
  }
  HostConfig hostConfig=DockerHelper.getProperty(DockerConstants.DOCKER_HOST_CONFIG,configuration,message,HostConfig.class);
  if (hostConfig != null) {
    createContainerCmd.withHostConfig(hostConfig);
  }
  String hostName=DockerHelper.getProperty(DockerConstants.DOCKER_HOSTNAME,configuration,message,String.class);
  if (hostName != null) {
    createContainerCmd.withHostName(hostName);
  }
  Long memoryLimit=DockerHelper.getProperty(DockerConstants.DOCKER_MEMORY_LIMIT,configuration,message,Long.class);
  if (memoryLimit != null) {
    createContainerCmd.withMemoryLimit(memoryLimit);
  }
  Long memorySwap=DockerHelper.getProperty(DockerConstants.DOCKER_MEMORY_SWAP,configuration,message,Long.class);
  if (memorySwap != null) {
    createContainerCmd.withMemorySwap(memorySwap);
  }
  String name=DockerHelper.getProperty(DockerConstants.DOCKER_NAME,configuration,message,String.class);
  if (name != null) {
    createContainerCmd.withName(name);
  }
  String[] portSpecs=DockerHelper.parseDelimitedStringHeader(DockerConstants.DOCKER_PORT_SPECS,message);
  if (portSpecs != null) {
    createContainerCmd.withPortSpecs(portSpecs);
  }
  Boolean stdInOpen=DockerHelper.getProperty(DockerConstants.DOCKER_STD_IN_OPEN,configuration,message,Boolean.class);
  if (stdInOpen != null) {
    createContainerCmd.withStdinOpen(stdInOpen);
  }
  Boolean stdInOnce=DockerHelper.getProperty(DockerConstants.DOCKER_STD_IN_ONCE,configuration,message,Boolean.class);
  if (stdInOnce != null) {
    createContainerCmd.withStdInOnce(stdInOnce);
  }
  Boolean tty=DockerHelper.getProperty(DockerConstants.DOCKER_TTY,configuration,message,Boolean.class);
  if (tty != null) {
    createContainerCmd.withTty(tty);
  }
  String user=DockerHelper.getProperty(DockerConstants.DOCKER_USER,configuration,message,String.class);
  if (user != null) {
    createContainerCmd.withUser(user);
  }
  Volume[] volume=DockerHelper.getArrayProperty(DockerConstants.DOCKER_VOLUMES,message,Volume.class);
  if (volume != null) {
    createContainerCmd.withVolumes(volume);
  }
  String[] volumesFrom=DockerHelper.parseDelimitedStringHeader(DockerConstants.DOCKER_VOLUMES_FROM,message);
  if (volumesFrom != null) {
    createContainerCmd.withVolumesFrom(volumesFrom);
  }
  String workingDir=DockerHelper.getProperty(DockerConstants.DOCKER_WORKING_DIR,configuration,message,String.class);
  if (workingDir != null) {
    createContainerCmd.withWorkingDir(workingDir);
  }
  return createContainerCmd;
}
