{
  Set<Method> candidates=new LinkedHashSet<Method>();
  name="set" + ObjectHelper.capitalize(name);
  while (clazz != Object.class) {
    Method objectSetMethod=null;
    Method[] methods=clazz.getMethods();
    for (    Method method : methods) {
      Class<?> params[]=method.getParameterTypes();
      if (method.getName().equals(name) && params.length == 1) {
        Class<?> paramType=params[0];
        if (paramType.equals(Object.class)) {
          objectSetMethod=method;
        }
 else         if (typeConverter != null || isSettableType(paramType) || paramType.isInstance(value)) {
          candidates.add(method);
        }
      }
    }
    if (objectSetMethod != null) {
      candidates.add(objectSetMethod);
    }
    clazz=clazz.getSuperclass();
  }
  if (candidates.isEmpty()) {
    return candidates;
  }
 else   if (candidates.size() == 1) {
    return candidates;
  }
 else {
    if (LOG.isTraceEnabled()) {
      LOG.trace("Found " + candidates.size() + " suitable setter methods for setting "+ name);
    }
    for (    Method method : candidates) {
      if (method.getParameterTypes()[0].isInstance(value)) {
        if (LOG.isTraceEnabled()) {
          LOG.trace("Method " + method + " is the best candidate as it has parameter with same instance type");
        }
        candidates.clear();
        candidates.add(method);
        return candidates;
      }
    }
    return candidates;
  }
}
