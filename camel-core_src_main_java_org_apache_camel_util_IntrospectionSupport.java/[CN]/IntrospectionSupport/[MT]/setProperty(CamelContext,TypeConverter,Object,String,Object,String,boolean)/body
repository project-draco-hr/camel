{
  Class<?> clazz=target.getClass();
  Collection<Method> setters;
  if (context != null && refName != null && value == null) {
    setters=findSetterMethodsOrderedByParameterType(clazz,name,allowBuilderPattern);
  }
 else {
    setters=findSetterMethods(clazz,name,value,allowBuilderPattern);
  }
  if (setters.isEmpty()) {
    return false;
  }
  Exception typeConversionFailed=null;
  for (  Method setter : setters) {
    Class parameterType=setter.getParameterTypes()[0];
    Object ref=value;
    if (context != null && refName != null && ref == null) {
      ref=CamelContextHelper.lookup(context,refName.replaceAll("#",""),parameterType);
      if (ref == null) {
        continue;
      }
    }
    try {
      try {
        if (value == null || parameterType.isAssignableFrom(ref.getClass())) {
          setter.invoke(target,ref);
          if (LOG.isDebugEnabled()) {
            LOG.debug("Configured property: {} on bean: {} with value: {}",new Object[]{name,target,ref});
          }
          return true;
        }
 else {
          Object convertedValue=convert(typeConverter,parameterType,ref);
          setter.invoke(target,convertedValue);
          if (LOG.isDebugEnabled()) {
            LOG.debug("Configured property: {} on bean: {} with value: {}",new Object[]{name,target,ref});
          }
          return true;
        }
      }
 catch (      InvocationTargetException e) {
        Throwable throwable=e.getCause();
        if (throwable instanceof Exception) {
          Exception exception=(Exception)throwable;
          throw exception;
        }
 else {
          Error error=(Error)throwable;
          throw error;
        }
      }
    }
 catch (    NoTypeConversionAvailableException e) {
      typeConversionFailed=e;
    }
catch (    IllegalArgumentException e) {
      typeConversionFailed=e;
    }
    if (LOG.isTraceEnabled()) {
      LOG.trace("Setter \"{}\" with parameter type \"{}\" could not be used for type conversions of {}",new Object[]{setter,parameterType,ref});
    }
  }
  if (typeConversionFailed != null) {
    throw new IllegalArgumentException("Could not find a suitable setter for property: " + name + " as there isn't a setter method with same type: "+ value.getClass().getCanonicalName()+ " nor type conversion possible: "+ typeConversionFailed.getMessage());
  }
 else {
    return false;
  }
}
