{
  if (SKIP) {
    return;
  }
  final Path file=new Path(new File("../../../../target/test/test-camel-string").getAbsolutePath());
  org.apache.hadoop.conf.Configuration conf=new org.apache.hadoop.conf.Configuration();
  conf.setClass("fs.file.impl",org.apache.hadoop.fs.LocalFileSystem.class,FileSystem.class);
  conf.setClass("fs.hdfs.impl",org.apache.hadoop.hdfs.DistributedFileSystem.class,FileSystem.class);
  SequenceFile.Writer writer=SequenceFile.createWriter(conf,SequenceFile.Writer.file(file),SequenceFile.Writer.keyClass(NullWritable.class),SequenceFile.Writer.valueClass(Text.class));
  NullWritable keyWritable=NullWritable.get();
  Text valueWritable=new Text();
  String value="CIAO!";
  valueWritable.set(value);
  writer.append(keyWritable,valueWritable);
  writer.sync();
  writer.close();
  context.addRoutes(new RouteBuilder(){
    public void configure(){
      from("hdfs2:///" + file.toUri() + "?fileSystemType=LOCAL&fileType=SEQUENCE_FILE&initialDelay=0").to("mock:result");
    }
  }
);
  context.start();
  MockEndpoint resultEndpoint=context.getEndpoint("mock:result",MockEndpoint.class);
  resultEndpoint.expectedMessageCount(1);
  resultEndpoint.assertIsSatisfied();
}
