{
  component.setCamelContext(camelContext);
  when(camelContext.getRegistry()).thenReturn(camelRegistry);
  when(camelRegistry.lookupByNameAndType(MetricsComponent.METRIC_REGISTRY_NAME,MetricRegistry.class)).thenReturn(metricRegistry);
  Map<String,Object> params=new HashMap<String,Object>();
  Long value=System.currentTimeMillis();
  params.put("mark",value);
  Endpoint result=component.createEndpoint("metrics:meter:long.meter","meter:long.meter",params);
  assertThat(result,is(notNullValue()));
  assertThat(result,is(instanceOf(MetricsEndpoint.class)));
  MetricsEndpoint me=(MetricsEndpoint)result;
  assertThat(me.getMark(),is(value));
  assertThat(me.getMetricsName(),is("long.meter"));
  assertThat(me.getRegistry(),is(metricRegistry));
  params=new HashMap<String,Object>();
  params.put("increment",value + 1);
  params.put("decrement",value - 1);
  result=component.createEndpoint("metrics:counter:long.counter","counter:long.counter",params);
  assertThat(result,is(notNullValue()));
  assertThat(result,is(instanceOf(MetricsEndpoint.class)));
  MetricsEndpoint ce=(MetricsEndpoint)result;
  assertThat(ce.getIncrement(),is(value + 1));
  assertThat(ce.getDecrement(),is(value - 1));
  assertThat(ce.getMetricsName(),is("long.counter"));
  assertThat(ce.getRegistry(),is(metricRegistry));
  inOrder.verify(camelContext,times(1)).getRegistry();
  inOrder.verify(camelRegistry,times(1)).lookupByNameAndType(MetricsComponent.METRIC_REGISTRY_NAME,MetricRegistry.class);
  inOrder.verify(camelContext,times(2)).getTypeConverter();
  inOrder.verifyNoMoreInteractions();
}
