{
  if (ObjectHelper.isEmpty(authToken)) {
    return;
  }
  mockResultEndpoint.expectedMessageCount(2);
  mockResultEndpoint.expectedHeaderValuesReceivedInAnyOrder(KubernetesConstants.KUBERNETES_EVENT_ACTION,"ADDED","DELETED");
  Exchange ex=template.request("direct:createService",new Processor(){
    @Override public void process(    Exchange exchange) throws Exception {
      exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME,"default");
      exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_SERVICE_NAME,"test");
      Map<String,String> labels=new HashMap<String,String>();
      labels.put("this","rocks");
      exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_SERVICE_LABELS,labels);
      ServiceSpec serviceSpec=new ServiceSpec();
      List<ServicePort> lsp=new ArrayList<ServicePort>();
      ServicePort sp=new ServicePort();
      sp.setPort(8080);
      sp.setTargetPort(new IntOrString(8080));
      sp.setProtocol("TCP");
      lsp.add(sp);
      serviceSpec.setPorts(lsp);
      Map<String,String> selectorMap=new HashMap<String,String>();
      selectorMap.put("containter","test");
      serviceSpec.setSelector(selectorMap);
      exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_SERVICE_SPEC,serviceSpec);
    }
  }
);
  Service serv=ex.getOut().getBody(Service.class);
  assertEquals(serv.getMetadata().getName(),"test");
  ex=template.request("direct:deleteService",new Processor(){
    @Override public void process(    Exchange exchange) throws Exception {
      exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME,"default");
      exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_SERVICE_NAME,"test");
    }
  }
);
  boolean servDeleted=ex.getOut().getBody(Boolean.class);
  assertTrue(servDeleted);
  Thread.sleep(1 * 1000);
  mockResultEndpoint.assertIsSatisfied();
}
