{
  Iterator<Object> iter=ObjectHelper.createIterator(recipientList,delimiter);
  RecipientListProcessor rlp=new RecipientListProcessor(exchange.getContext(),producerCache,iter,getAggregationStrategy(),isParallelProcessing(),getExecutorService(),isShutdownExecutorService(),isStreaming(),isStopOnException(),getTimeout(),getOnPrepare(),isShareUnitOfWork()){
    @Override protected synchronized ExecutorService createAggregateExecutorService(    String name){
      if (aggregateExecutorService == null) {
        aggregateExecutorService=super.createAggregateExecutorService("RecipientList-AggregateTask");
      }
      return aggregateExecutorService;
    }
  }
;
  rlp.setIgnoreInvalidEndpoints(isIgnoreInvalidEndpoints());
  try {
    ServiceHelper.startService(rlp);
  }
 catch (  Exception e) {
    exchange.setException(e);
    callback.done(true);
    return true;
  }
  AsyncProcessor target=rlp;
  if (isShareUnitOfWork()) {
    target=new SubUnitOfWorkProcessor(rlp);
  }
  return AsyncProcessorHelper.process(target,exchange,callback);
}
