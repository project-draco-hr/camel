{
  Iterator<Object> iter=ObjectHelper.createIterator(receipientList,delimiter);
  ProducerCache cache=getProducerCache(exchange);
  Map<Endpoint,Producer> producers=new LinkedHashMap<Endpoint,Producer>();
  try {
    List<Processor> processors=new ArrayList<Processor>();
    while (iter.hasNext()) {
      Object recipient=iter.next();
      Endpoint endpoint=resolveEndpoint(exchange,recipient);
      Producer producer=cache.acquireProducer(endpoint);
      processors.add(producer);
      producers.put(endpoint,producer);
    }
    MulticastProcessor mp=new MulticastProcessor(exchange.getContext(),processors,getAggregationStrategy(),isParallelProcessing(),getExecutorService(),false,isStopOnException());
    mp.process(exchange);
  }
  finally {
    for (    Map.Entry<Endpoint,Producer> entry : producers.entrySet()) {
      cache.releaseProducer(entry.getKey(),entry.getValue());
    }
  }
}
