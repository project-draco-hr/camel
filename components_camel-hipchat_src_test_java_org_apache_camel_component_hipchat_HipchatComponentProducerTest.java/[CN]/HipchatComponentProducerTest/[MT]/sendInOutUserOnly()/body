{
  result.expectedMessageCount(1);
  Exchange exchange=template.send("direct:start",ExchangePattern.InOut,new Processor(){
    public void process(    Exchange exchange) throws Exception {
      exchange.getIn().setHeader(HipchatConstants.TO_USER,"CamelUnitTest");
      exchange.getIn().setHeader(HipchatConstants.MESSAGE_BACKGROUND_COLOR,"CamelUnitTestBkColor");
      exchange.getIn().setHeader(HipchatConstants.MESSAGE_FORMAT,"CamelUnitTestFormat");
      exchange.getIn().setHeader(HipchatConstants.TRIGGER_NOTIFY,"CamelUnitTestNotify");
      exchange.getIn().setBody("This is my unit test message.");
    }
  }
);
  assertMockEndpointsSatisfied();
  Exchange resultExchange=result.getExchanges().get(0);
  assertIsInstanceOf(String.class,resultExchange.getIn().getBody());
  assertEquals("This is my unit test message.",resultExchange.getIn().getBody(String.class));
  assertEquals("CamelUnitTest",resultExchange.getIn().getHeader(HipchatConstants.TO_USER));
  assertNull(resultExchange.getIn().getHeader(HipchatConstants.TO_ROOM));
  assertNull(resultExchange.getIn().getHeader(HipchatConstants.TO_ROOM_RESPONSE_STATUS));
  assertNotNull(resultExchange.getIn().getHeader(HipchatConstants.TO_USER_RESPONSE_STATUS));
  assertRemainingResultExchange(result.getExchanges().get(0));
  assertEquals(204,exchange.getIn().getHeader(HipchatConstants.TO_USER_RESPONSE_STATUS,StatusLine.class).getStatusCode());
  assertNotNull(callback);
  assertNotNull(callback.called);
  assertEquals("This is my unit test message.",callback.called.get(HipchatApiConstants.API_MESSAGE));
  assertNull(callback.called.get(HipchatApiConstants.API_MESSAGE_COLOR));
  assertEquals("CamelUnitTestFormat",callback.called.get(HipchatApiConstants.API_MESSAGE_FORMAT));
  assertEquals("CamelUnitTestNotify",callback.called.get(HipchatApiConstants.API_MESSAGE_NOTIFY));
}
