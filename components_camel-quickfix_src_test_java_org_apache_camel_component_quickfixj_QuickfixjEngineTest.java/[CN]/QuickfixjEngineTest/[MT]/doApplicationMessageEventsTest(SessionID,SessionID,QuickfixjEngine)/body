{
  final List<EventRecord> events=new ArrayList<EventRecord>();
  final CountDownLatch messageLatch=new CountDownLatch(1);
  QuickfixjEventListener messageListener=new QuickfixjEventListener(){
    @Override public synchronized void onEvent(    QuickfixjEventCategory eventCategory,    SessionID sessionID,    Message message){
      EventRecord event=new EventRecord(eventCategory,sessionID,message);
      events.add(event);
      if (eventCategory == QuickfixjEventCategory.AppMessageReceived) {
        messageLatch.countDown();
      }
    }
  }
;
  quickfixjEngine.addEventListener(messageListener);
  Email email=TestSupport.createEmailMessage("Test");
  Session.sendToTarget(email,initiatorSessionID);
  assertTrue("Application message not received",messageLatch.await(5000,TimeUnit.MILLISECONDS));
  quickfixjEngine.removeEventListener(messageListener);
  assertThat(events.size(),is(2));
  EventRecord sendEvent=new EventRecord(QuickfixjEventCategory.AppMessageSent,initiatorSessionID,new Message());
  assertTrue(events.contains(sendEvent));
  int sendEventIndex=events.indexOf(sendEvent);
  assertThat(events.get(sendEventIndex).message.getHeader().getString(MsgType.FIELD),is(MsgType.EMAIL));
  EventRecord receiveEvent=new EventRecord(QuickfixjEventCategory.AppMessageReceived,acceptorSessionID,new Message());
  assertTrue(events.contains(receiveEvent));
  int receiveEventIndex=events.indexOf(receiveEvent);
  assertThat(events.get(receiveEventIndex).message.getHeader().getString(MsgType.FIELD),is(MsgType.EMAIL));
}
