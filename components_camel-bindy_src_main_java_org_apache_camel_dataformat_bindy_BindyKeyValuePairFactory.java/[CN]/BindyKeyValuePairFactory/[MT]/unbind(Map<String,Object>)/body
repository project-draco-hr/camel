{
  StringBuilder builder=new StringBuilder();
  Map<Integer,KeyValuePairField> keyValuePairFieldsSorted=new TreeMap<Integer,KeyValuePairField>(keyValuePairFields);
  Iterator<Integer> it=keyValuePairFieldsSorted.keySet().iterator();
  Map<Integer,String> positions=new TreeMap<Integer,String>();
  ObjectHelper.notNull(this.pairSeparator,"The pair separator has not been instantiated or property not defined in the @Message annotation");
  char separator=Converter.getCharDelimitor(this.getPairSeparator());
  if (LOG.isDebugEnabled()) {
    LOG.debug("Separator converted : '0x{}', from : {}",Integer.toHexString(separator),this.getPairSeparator());
  }
  while (it.hasNext()) {
    KeyValuePairField keyValuePairField=keyValuePairFieldsSorted.get(it.next());
    ObjectHelper.notNull(keyValuePairField,"KeyValuePair is null !");
    Field field=annotedFields.get(keyValuePairField.tag());
    field.setAccessible(true);
    if (LOG.isDebugEnabled()) {
      LOG.debug("Tag : {}, Field type : {}, class : {}",new Object[]{keyValuePairField.tag(),field.getType(),field.getDeclaringClass().getName()});
    }
    Class<?> type=field.getType();
    String pattern=keyValuePairField.pattern();
    int precision=keyValuePairField.precision();
    @SuppressWarnings("unchecked") Format<Object> format=(Format<Object>)FormatFactory.getFormat(type,pattern,getLocale(),precision);
    Object obj=model.get(field.getDeclaringClass().getName());
    if (obj != null) {
      Object keyValue=field.get(obj);
      if (this.isMessageOrdered()) {
        Integer key1=sections.get(obj.getClass().getName());
        Integer key2=keyValuePairField.position();
        LOG.debug("Key of the section : {}, and the field  : {}",key1,key2);
        Integer keyGenerated=generateKey(key1,key2);
        if (LOG.isDebugEnabled()) {
          LOG.debug("Key generated : {}, for section : {}",String.valueOf(keyGenerated),key1);
        }
        if (keyValue != null) {
          String valueFormated;
          try {
            valueFormated=format.format(keyValue);
          }
 catch (          Exception e) {
            throw new IllegalArgumentException("Formating error detected for the tag : " + keyValuePairField.tag(),e);
          }
          String value=keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormated;
          if (LOG.isDebugEnabled()) {
            LOG.debug("Value to be formatted : {}, for the tag : {}, and its formated value : {}",new Object[]{keyValue,keyValuePairField.tag(),valueFormated});
          }
          positions.put(keyGenerated,value);
          if (LOG.isDebugEnabled()) {
            LOG.debug("Positions size : {}",positions.size());
          }
        }
      }
 else {
        if (keyValue != null) {
          String valueFormated;
          try {
            valueFormated=format.format(keyValue);
          }
 catch (          Exception e) {
            throw new IllegalArgumentException("Formating error detected for the tag : " + keyValuePairField.tag(),e);
          }
          String value=keyValuePairField.tag() + this.getKeyValuePairSeparator() + valueFormated+ separator;
          builder.append(value);
          if (LOG.isDebugEnabled()) {
            LOG.debug("Value added : {}{}{}{}",new Object[]{keyValuePairField.tag(),this.getKeyValuePairSeparator(),valueFormated,separator});
          }
        }
      }
    }
  }
  if (this.isMessageOrdered()) {
    Iterator<Integer> posit=positions.keySet().iterator();
    while (posit.hasNext()) {
      String value=positions.get(posit.next());
      if (LOG.isDebugEnabled()) {
        LOG.debug("Value added at the position ({}) : {}{}",new Object[]{posit,value,separator});
      }
      builder.append(value + separator);
    }
  }
  return builder.toString();
}
