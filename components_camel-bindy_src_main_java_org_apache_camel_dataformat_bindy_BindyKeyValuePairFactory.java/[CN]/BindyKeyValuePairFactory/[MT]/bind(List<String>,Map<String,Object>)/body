{
  int pos=0;
  if (LOG.isDebugEnabled()) {
    LOG.debug("Data : " + data);
  }
  while (pos < data.size()) {
    if (!data.get(pos).equals("")) {
      ObjectHelper.notNull(this.keyValuePairSeparator,"Key Value Pair not defined in the @Message annotation");
      String[] keyValuePair=data.get(pos).split(this.getKeyValuePairSeparator());
      int tag=Integer.parseInt(keyValuePair[0]);
      String keyValue=keyValuePair[1];
      if (LOG.isDebugEnabled()) {
        LOG.debug("Key : " + tag + ", value : "+ keyValue);
      }
      KeyValuePairField keyValuePairField=keyValuePairFields.get(tag);
      ObjectHelper.notNull(keyValuePairField,"No tag defined for the field : " + tag);
      Field field=annotedFields.get(tag);
      field.setAccessible(true);
      if (LOG.isDebugEnabled()) {
        LOG.debug("Tag : " + tag + ", Data : "+ keyValue+ ", Field type : "+ field.getType());
      }
      Format<?> format;
      String pattern=keyValuePairField.pattern();
      format=FormatFactory.getFormat(field.getType(),pattern,keyValuePairField.precision());
      Object modelField=model.get(field.getDeclaringClass().getName());
      Object value;
      try {
        value=format.parse(keyValue);
      }
 catch (      Exception e) {
        throw new IllegalArgumentException("Parsing error detected for field defined at the tag : " + tag,e);
      }
      field.set(modelField,value);
    }
    pos++;
  }
}
