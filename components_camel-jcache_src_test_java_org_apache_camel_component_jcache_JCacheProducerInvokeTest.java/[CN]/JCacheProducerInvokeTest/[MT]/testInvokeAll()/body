{
  final Map<String,Object> headers=new HashMap<>();
  final Cache<Object,Object> cache=getCacheFromEndpoint("jcache://test-cache");
  final Map<Object,Object> values1=generateRandomMap(4);
  final Map<Object,Object> values2=generateRandomMap(2);
  cache.putAll(values1);
  cache.putAll(values2);
  headers.clear();
  headers.put(JCacheConstants.ACTION,"INVOKE");
  headers.put(JCacheConstants.KEYS,values2.keySet());
  headers.put(JCacheConstants.ENTRY_PROCESSOR,ENTRY_PROCESSOR);
  sendBody("direct:invoke-all",null,headers);
  MockEndpoint mock=getMockEndpoint("mock:invoke-all");
  mock.expectedMinimumMessageCount(1);
  mock.expectedHeaderReceived(JCacheConstants.KEYS,values2.keySet());
  mock.expectedMessagesMatches(new Predicate(){
    @Override public boolean matches(    Exchange exchange){
      Map<Object,EntryProcessorResult<Object>> map=exchange.getIn().getBody(Map.class);
      for (      Map.Entry<Object,Object> entry : values2.entrySet()) {
        assertTrue(map.containsKey(entry.getKey()));
        assertEquals("processor-" + entry.getValue(),map.get(entry.getKey()).get());
      }
      return true;
    }
  }
);
  mock.assertIsSatisfied();
  for (  Map.Entry<Object,Object> entry : values1.entrySet()) {
    assertTrue(cache.containsKey(entry.getKey()));
    assertEquals(entry.getValue(),cache.get(entry.getKey()));
  }
  for (  Map.Entry<Object,Object> entry : values2.entrySet()) {
    assertTrue(cache.containsKey(entry.getKey()));
    assertEquals(entry.getValue(),cache.get(entry.getKey()));
  }
}
