{
  boolean sync;
  List<Processor> list=getProcessors();
  if (list.isEmpty()) {
    throw new IllegalStateException("No processors available to process " + exchange);
  }
  Processor processor=list.get(index);
  if (processor == null) {
    throw new IllegalStateException("No processors could be chosen to process " + exchange);
  }
  if (processor instanceof AsyncProcessor) {
    AsyncProcessor asyncProcessor=(AsyncProcessor)processor;
    sync=asyncProcessor.process(exchange,new AsyncCallback(){
      public void done(      boolean doSync){
        if (isCheckedException(exchange) && index < getProcessors().size() - 1) {
          exchange.setException(null);
          processExchange(index + 1,exchange,callback);
        }
 else {
          callback.done(doSync);
        }
      }
    }
);
  }
 else {
    try {
      processor.process(exchange);
    }
 catch (    Exception ex) {
      exchange.setException(ex);
    }
    if (isCheckedException(exchange) && index < getProcessors().size() - 1) {
      exchange.setException(null);
      processExchange(index + 1,exchange,callback);
    }
    sync=true;
    callback.done(true);
  }
  return sync;
}
