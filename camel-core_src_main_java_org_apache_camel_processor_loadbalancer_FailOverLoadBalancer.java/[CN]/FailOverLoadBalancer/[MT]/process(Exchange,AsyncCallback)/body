{
  final List<Processor> processors=getProcessors();
  final AtomicInteger index=new AtomicInteger();
  final AtomicInteger attempts=new AtomicInteger();
  boolean first=true;
  Exchange copy=null;
  if (isSticky()) {
    int idx=lastGoodIndex.get();
    if (idx == -1) {
      idx=0;
    }
    index.set(idx);
  }
 else   if (isRoundRobin()) {
    if (counter.incrementAndGet() >= processors.size()) {
      counter.set(0);
    }
    index.set(counter.get());
  }
  log.trace("Failover starting with endpoint index {}",index);
  while (first || shouldFailOver(copy)) {
    if (!isRunAllowed()) {
      log.trace("Run not allowed, will reject executing exchange: {}",exchange);
      if (exchange.getException() == null) {
        exchange.setException(new RejectedExecutionException());
      }
      callback.done(true);
      return true;
    }
    if (!first) {
      attempts.incrementAndGet();
      if (maximumFailoverAttempts > -1 && attempts.get() > maximumFailoverAttempts) {
        log.debug("Breaking out of failover after {} failover attempts",attempts);
        break;
      }
      index.incrementAndGet();
      counter.incrementAndGet();
    }
 else {
      first=false;
    }
    if (index.get() >= processors.size()) {
      if (isRoundRobin()) {
        log.trace("Failover is round robin enabled and therefore starting from the first endpoint");
        index.set(0);
        counter.set(0);
      }
 else {
        log.trace("Breaking out of failover as we reached the end of endpoints to use for failover");
        break;
      }
    }
    copy=prepareExchangeForFailover(exchange);
    Processor processor=processors.get(index.get());
    boolean sync=processExchange(processor,exchange,copy,attempts,index,callback,processors);
    if (!sync) {
      log.trace("Processing exchangeId: {} is continued being processed asynchronously",exchange.getExchangeId());
      return false;
    }
    log.trace("Processing exchangeId: {} is continued being processed synchronously",exchange.getExchangeId());
  }
  lastGoodIndex.set(index.get());
  if (copy != null) {
    ExchangeHelper.copyResults(exchange,copy);
  }
  log.debug("Failover complete for exchangeId: {} >>> {}",exchange.getExchangeId(),exchange);
  callback.done(true);
  return true;
}
