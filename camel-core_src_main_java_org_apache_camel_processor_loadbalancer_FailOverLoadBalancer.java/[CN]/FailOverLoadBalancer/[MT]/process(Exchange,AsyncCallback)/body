{
  final List<Processor> processors=getProcessors();
  final AtomicInteger index=new AtomicInteger();
  final AtomicInteger attempts=new AtomicInteger();
  boolean first=true;
  if (isRoundRobin()) {
    if (counter.incrementAndGet() >= processors.size()) {
      counter.set(0);
    }
    index.set(counter.get());
  }
  if (log.isTraceEnabled()) {
    log.trace("Failover starting with endpoint index " + index);
  }
  while (first || shouldFailOver(exchange)) {
    if (!first) {
      attempts.incrementAndGet();
      if (maximumFailoverAttempts > -1 && attempts.get() > maximumFailoverAttempts) {
        if (log.isDebugEnabled()) {
          log.debug("Breaking out of failover after " + attempts + " failover attempts");
        }
        break;
      }
      index.incrementAndGet();
      counter.incrementAndGet();
    }
 else {
      first=false;
    }
    if (index.get() >= processors.size()) {
      if (isRoundRobin()) {
        log.trace("Failover is round robin enabled and therefore starting from the first endpoint");
        index.set(0);
        counter.set(0);
      }
 else {
        log.trace("Breaking out of failover as we reached the end of endpoints to use for failover");
        break;
      }
    }
    prepareExchangeForFailover(exchange);
    Processor processor=processors.get(index.get());
    boolean sync=processExchange(processor,exchange,attempts,index,callback,processors);
    if (!sync) {
      if (log.isTraceEnabled()) {
        log.trace("Processing exchangeId: " + exchange.getExchangeId() + " is continued being processed asynchronously");
      }
      return false;
    }
    if (log.isTraceEnabled()) {
      log.trace("Processing exchangeId: " + exchange.getExchangeId() + " is continued being processed synchronously");
    }
  }
  if (log.isDebugEnabled()) {
    log.debug("Failover complete for exchangeId: " + exchange.getExchangeId() + " >>> "+ exchange);
  }
  callback.done(true);
  return true;
}
