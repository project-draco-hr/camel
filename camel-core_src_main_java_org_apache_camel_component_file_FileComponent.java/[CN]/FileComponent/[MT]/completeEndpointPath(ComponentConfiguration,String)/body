{
  boolean empty=ObjectHelper.isEmpty(completionText);
  String pattern=completionText;
  File file=new File(completionText);
  String prefix=completionText;
  if (file.exists()) {
    pattern="";
  }
 else {
    String startPath=".";
    if (!empty) {
      int idx=completionText.lastIndexOf('/');
      if (idx >= 0) {
        startPath=completionText.substring(0,idx);
        if (startPath.length() == 0) {
          startPath="/";
        }
        pattern=completionText.substring(idx + 1);
      }
    }
    file=new File(startPath);
    prefix=startPath;
  }
  if (prefix.length() > 0 && !prefix.endsWith("/")) {
    prefix+="/";
  }
  if (prefix.equals("./")) {
    prefix="";
  }
  File[] list=file.listFiles();
  List<String> answer=new ArrayList<String>();
  for (  File aFile : list) {
    String name=aFile.getName();
    if (pattern.length() == 0 || name.contains(pattern)) {
      if (isValidEndpointCompletion(configuration,completionText,aFile)) {
        answer.add(prefix + name);
      }
    }
  }
  return answer;
}
