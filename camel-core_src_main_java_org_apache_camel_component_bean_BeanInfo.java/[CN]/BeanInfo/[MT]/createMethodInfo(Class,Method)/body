{
  Class[] parameterTypes=method.getParameterTypes();
  Annotation[][] parametersAnnotations=method.getParameterAnnotations();
  List<ParameterInfo> parameters=new ArrayList<ParameterInfo>();
  List<ParameterInfo> bodyParameters=new ArrayList<ParameterInfo>();
  boolean hasCustomAnnotation=false;
  boolean hasHandlerAnnotation=ObjectHelper.hasAnnotation(method.getAnnotations(),Handler.class);
  int size=parameterTypes.length;
  if (LOG.isTraceEnabled()) {
    LOG.trace("Creating MethodInfo for class: " + clazz + " method: "+ method+ " having "+ size+ " parameters");
  }
  for (int i=0; i < size; i++) {
    Class parameterType=parameterTypes[i];
    Annotation[] parameterAnnotations=parametersAnnotations[i];
    Expression expression=createParameterUnmarshalExpression(clazz,method,parameterType,parameterAnnotations);
    hasCustomAnnotation|=expression != null;
    ParameterInfo parameterInfo=new ParameterInfo(i,parameterType,parameterAnnotations,expression);
    if (LOG.isTraceEnabled()) {
      LOG.trace("Parameter #" + i + ": "+ parameterInfo);
    }
    parameters.add(parameterInfo);
    if (expression == null) {
      boolean bodyAnnotation=ObjectHelper.hasAnnotation(parameterAnnotations,Body.class);
      if (LOG.isTraceEnabled() && bodyAnnotation) {
        LOG.trace("Parameter #" + i + " has @Body annotation");
      }
      hasCustomAnnotation|=bodyAnnotation;
      if (bodyParameters.isEmpty()) {
        if (Exchange.class.isAssignableFrom(parameterType)) {
          expression=ExpressionBuilder.exchangeExpression();
        }
 else {
          expression=ExpressionBuilder.bodyExpression(parameterType);
        }
        if (LOG.isTraceEnabled()) {
          LOG.trace("Parameter #" + i + " is the body parameter using expression "+ expression);
        }
        parameterInfo.setExpression(expression);
        bodyParameters.add(parameterInfo);
      }
 else {
      }
    }
    if (LOG.isTraceEnabled()) {
      LOG.trace("Parameter #" + i + " has parameter info: "+ parameterInfo);
    }
  }
  return new MethodInfo(camelContext,clazz,method,parameters,bodyParameters,hasCustomAnnotation,hasHandlerAnnotation);
}
