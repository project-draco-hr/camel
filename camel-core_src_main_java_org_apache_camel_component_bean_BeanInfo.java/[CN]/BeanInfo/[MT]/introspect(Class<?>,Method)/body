{
  LOG.trace("Introspecting class: {}, method: {}",clazz,method);
  String opName=method.getName();
  MethodInfo methodInfo=createMethodInfo(clazz,method);
  MethodInfo existingMethodInfo=overridesExistingMethod(methodInfo);
  if (existingMethodInfo != null) {
    LOG.trace("This method is already overridden in a subclass, so the method from the sub class is preferred: {}",existingMethodInfo);
    return existingMethodInfo;
  }
  LOG.trace("Adding operation: {} for method: {}",opName,methodInfo);
  List<MethodInfo> existing=getOperations(opName);
  if (existing != null) {
    existing.add(methodInfo);
  }
 else {
    List<MethodInfo> methods=new ArrayList<MethodInfo>();
    methods.add(methodInfo);
    operations.put(opName,methods);
  }
  if (methodInfo.hasCustomAnnotation()) {
    operationsWithCustomAnnotation.add(methodInfo);
  }
 else   if (methodInfo.hasBodyParameter()) {
    operationsWithBody.add(methodInfo);
  }
 else {
    operationsWithNoBody.add(methodInfo);
  }
  if (methodInfo.hasHandlerAnnotation()) {
    operationsWithHandlerAnnotation.add(methodInfo);
  }
  methodMap.put(method,methodInfo);
  return methodInfo;
}
