{
  MethodInfo methodInfo=null;
  String name=exchange.getIn().getHeader(Exchange.BEAN_METHOD_NAME,String.class);
  Class type=exchange.getIn().getHeader(Exchange.BEAN_TYPE_NAME,Class.class);
  if (name != null) {
    if (hasMethod(name)) {
      List<MethodInfo> methods=getOperations(name);
      if (methods != null && methods.size() == 1) {
        methodInfo=methods.get(0);
      }
 else {
        methodInfo=chooseMethod(pojo,exchange,name,type);
        if (methodInfo == null || !name.equals(methodInfo.getMethod().getName())) {
          throw new AmbiguousMethodCallException(exchange,methods);
        }
      }
    }
 else {
      throw new MethodNotFoundException(exchange,pojo,name);
    }
  }
  if (methodInfo == null) {
    methodInfo=chooseMethod(pojo,exchange,null,null);
  }
  if (methodInfo == null) {
    methodInfo=defaultMethod;
  }
  if (methodInfo != null) {
    if (LOG.isTraceEnabled()) {
      LOG.trace("Chosen method to invoke: " + methodInfo + " on bean: "+ pojo);
    }
    return methodInfo.createMethodInvocation(pojo,exchange);
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Cannot find suitable method to invoke on bean: " + pojo);
  }
  return null;
}
