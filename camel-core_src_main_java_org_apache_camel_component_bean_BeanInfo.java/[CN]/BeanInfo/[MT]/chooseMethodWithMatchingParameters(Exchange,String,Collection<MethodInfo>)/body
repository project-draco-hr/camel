{
  Iterator<?> it=ObjectHelper.createIterator(parameters);
  int count=0;
  while (it.hasNext()) {
    it.next();
    count++;
  }
  List<MethodInfo> operations=new ArrayList<MethodInfo>();
  for (  MethodInfo info : operationList) {
    if (info.getParameters().size() == count) {
      operations.add(info);
    }
  }
  if (operations.isEmpty()) {
    return null;
  }
 else   if (operations.size() == 1) {
    return operations.get(0);
  }
  List<MethodInfo> candidates=new ArrayList<MethodInfo>();
  for (  MethodInfo info : operations) {
    it=ObjectHelper.createIterator(parameters);
    int index=0;
    boolean matches=true;
    while (it.hasNext()) {
      String parameter=(String)it.next();
      Class<?> parameterType=BeanHelper.getValidParameterType(parameter);
      Class<?> expectedType=info.getParameters().get(index).getType();
      if (parameterType != null && expectedType != null) {
        if (!parameterType.isAssignableFrom(expectedType)) {
          matches=false;
          break;
        }
      }
      index++;
    }
    if (matches) {
      candidates.add(info);
    }
  }
  if (candidates.size() > 1) {
    throw new AmbiguousMethodCallException(exchange,candidates);
  }
  return candidates.size() == 1 ? candidates.get(0) : null;
}
