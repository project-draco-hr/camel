{
  clazz=getTargetClass(clazz);
  ObjectHelper.notNull(clazz,"clazz",this);
  LOG.trace("Introspecting class: {}",clazz);
  List<Method> interfaceMethods=getInterfaceMethods(clazz);
  Set<Method> overrides=new HashSet<Method>();
  Set<Method> extraMethods=new HashSet<Method>(Arrays.asList(clazz.getDeclaredMethods()));
  for (  Method target : extraMethods) {
    for (    Method interfaceMethod : interfaceMethods) {
      if (ObjectHelper.isOverridingMethod(interfaceMethod,target,false)) {
        overrides.add(target);
      }
    }
  }
  extraMethods.removeAll(overrides);
  List<Method> methods=interfaceMethods;
  methods.addAll(extraMethods);
  for (  Method method : methods) {
    boolean valid=isValidMethod(clazz,method);
    LOG.trace("Method: {} is valid: {}",method,valid);
    if (valid) {
      introspect(clazz,method);
    }
  }
  Class<?> superclass=clazz.getSuperclass();
  if (superclass != null && !superclass.equals(Object.class)) {
    introspect(superclass);
  }
}
