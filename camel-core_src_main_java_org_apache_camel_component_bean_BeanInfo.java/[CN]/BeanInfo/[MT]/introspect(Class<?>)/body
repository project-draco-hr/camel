{
  clazz=getTargetClass(clazz);
  ObjectHelper.notNull(clazz,"clazz",this);
  LOG.trace("Introspecting class: {}",clazz);
  List<Method> methods=Arrays.asList(clazz.getDeclaredMethods());
  if (!Modifier.isPublic(clazz.getModifiers())) {
    LOG.trace("Preferring interface methods as class: {} is not public accessible",clazz);
    List<Method> interfaceMethods=getInterfaceMethods(clazz);
    interfaceMethods.addAll(methods);
    methods=interfaceMethods;
  }
  for (  Method method : methods) {
    boolean valid=isValidMethod(clazz,method);
    LOG.trace("Method: {} is valid: {}",method,valid);
    if (valid) {
      introspect(clazz,method);
    }
  }
  Class<?> superclass=clazz.getSuperclass();
  if (superclass != null && !superclass.equals(Object.class)) {
    introspect(superclass);
  }
}
