{
  MethodInfo methodInfo=null;
  if (explicitMethod != null) {
    for (    List<MethodInfo> infos : operations.values()) {
      for (      MethodInfo info : infos) {
        if (explicitMethod.equals(info.getMethod())) {
          return info.createMethodInvocation(pojo,exchange);
        }
      }
    }
    throw new MethodNotFoundException(exchange,pojo,explicitMethod.getName());
  }
  String methodName=exchange.getIn().getHeader(Exchange.BEAN_METHOD_NAME,String.class);
  if (methodName != null) {
    String name=methodName;
    if (methodName.contains("(")) {
      name=ObjectHelper.before(methodName,"(");
    }
    boolean emptyParameters=methodName.endsWith("()");
    if ("class".equals(name) || "getClass".equals(name)) {
      try {
        Method method=pojo.getClass().getMethod("getClass");
        methodInfo=new MethodInfo(exchange.getContext(),pojo.getClass(),method,Collections.<ParameterInfo>emptyList(),Collections.<ParameterInfo>emptyList(),false,false);
      }
 catch (      NoSuchMethodException e) {
        throw new MethodNotFoundException(exchange,pojo,"getClass");
      }
    }
 else     if ("length".equals(name) && pojo.getClass().isArray()) {
      try {
        Method method=ObjectHelper.class.getMethod("arrayLength",Object[].class);
        ParameterInfo pi=new ParameterInfo(0,Object[].class,null,ExpressionBuilder.mandatoryBodyExpression(Object[].class,true));
        List<ParameterInfo> lpi=new ArrayList<ParameterInfo>(1);
        lpi.add(pi);
        methodInfo=new MethodInfo(exchange.getContext(),pojo.getClass(),method,lpi,lpi,false,false);
        exchange.getIn().setBody(pojo);
      }
 catch (      NoSuchMethodException e) {
        throw new MethodNotFoundException(exchange,pojo,"getClass");
      }
    }
 else {
      List<MethodInfo> methods=getOperations(name);
      if (methods != null && methods.size() == 1) {
        methodInfo=methods.get(0);
        if (emptyParameters && methodInfo.hasParameters()) {
          throw new MethodNotFoundException(exchange,pojo,methodName,"(with no parameters)");
        }
      }
 else       if (methods != null) {
        methodInfo=chooseMethod(pojo,exchange,methodName);
        if (emptyParameters) {
          if (methodInfo == null || methodInfo.hasParameters()) {
            throw new MethodNotFoundException(exchange,pojo,methodName,"(with no parameters)");
          }
        }
        if (methodInfo == null || (name != null && !name.equals(methodInfo.getMethod().getName()))) {
          throw new AmbiguousMethodCallException(exchange,methods);
        }
      }
 else {
        throw new MethodNotFoundException(exchange,pojo,methodName);
      }
    }
  }
  if (methodInfo == null) {
    methodInfo=chooseMethod(pojo,exchange,null);
  }
  if (methodInfo == null) {
    methodInfo=defaultMethod;
  }
  if (methodInfo != null) {
    LOG.trace("Chosen method to invoke: {} on bean: {}",methodInfo,pojo);
    return methodInfo.createMethodInvocation(pojo,exchange);
  }
  LOG.debug("Cannot find suitable method to invoke on bean: {}",pojo);
  return null;
}
