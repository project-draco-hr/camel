{
  if (methodName == null) {
    return true;
  }
  if (methodName.contains("(") && !methodName.endsWith(")")) {
    throw new IllegalArgumentException("Name must have both starting and ending parenthesis, was: " + methodName);
  }
  String name=methodName;
  if (name.contains("(")) {
    name=ObjectHelper.before(name,"(");
  }
  if (!name.equals(method.getName())) {
    return false;
  }
  boolean noParameters=methodName.endsWith("()");
  if (noParameters) {
    return method.getParameterTypes().length == 0;
  }
  String types=ObjectHelper.between(methodName,"(",")");
  if (ObjectHelper.isNotEmpty(types)) {
    String[] parameters=StringQuoteHelper.splitSafeQuote(types,',');
    Iterator<?> it=ObjectHelper.createIterator(parameters);
    for (int i=0; i < method.getParameterTypes().length; i++) {
      if (it.hasNext()) {
        Class<?> parameterType=method.getParameterTypes()[i];
        String qualifyType=(String)it.next();
        if (ObjectHelper.isEmpty(qualifyType)) {
          continue;
        }
        qualifyType=qualifyType.trim();
        if ("*".equals(qualifyType)) {
          continue;
        }
        if (BeanHelper.isValidParameterValue(qualifyType)) {
          continue;
        }
        Boolean assignable=BeanHelper.isAssignableToExpectedType(getCamelContext().getClassResolver(),qualifyType,parameterType);
        if (assignable != null && !assignable) {
          return false;
        }
      }
 else {
        return false;
      }
    }
    if (it.hasNext()) {
      return false;
    }
  }
  return true;
}
