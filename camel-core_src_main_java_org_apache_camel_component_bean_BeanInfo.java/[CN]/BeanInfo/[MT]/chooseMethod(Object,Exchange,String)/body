{
  if (name != null) {
    removeNonMatchingMethods(operationsWithHandlerAnnotation,name);
    removeNonMatchingMethods(operationsWithCustomAnnotation,name);
    removeNonMatchingMethods(operationsWithBody,name);
  }
 else {
    removeAllSetterOrGetterMethods(operationsWithHandlerAnnotation);
    removeAllSetterOrGetterMethods(operationsWithCustomAnnotation);
    removeAllSetterOrGetterMethods(operationsWithBody);
  }
  if (operationsWithHandlerAnnotation.size() > 1) {
    throw new AmbiguousMethodCallException(exchange,operationsWithHandlerAnnotation);
  }
  if (operationsWithHandlerAnnotation.size() == 1) {
    return operationsWithHandlerAnnotation.get(0);
  }
 else   if (operationsWithCustomAnnotation.size() == 1) {
    return operationsWithCustomAnnotation.get(0);
  }
 else   if (operationsWithBody.size() == 1) {
    return operationsWithBody.get(0);
  }
  Collection<MethodInfo> possibleOperations=new ArrayList<MethodInfo>();
  possibleOperations.addAll(operationsWithBody);
  possibleOperations.addAll(operationsWithCustomAnnotation);
  if (!possibleOperations.isEmpty()) {
    MethodInfo answer=chooseMethodWithMatchingBody(exchange,possibleOperations);
    if (answer == null) {
      throw new AmbiguousMethodCallException(exchange,possibleOperations);
    }
 else {
      return answer;
    }
  }
  return null;
}
