{
  Class[] parameterTypes=method.getParameterTypes();
  Annotation[][] parametersAnnotations=method.getParameterAnnotations();
  List<ParameterInfo> parameters=new ArrayList<ParameterInfo>();
  List<ParameterInfo> bodyParameters=new ArrayList<ParameterInfo>();
  boolean hasCustomAnnotation=false;
  for (int i=0; i < parameterTypes.length; i++) {
    Class parameterType=parameterTypes[i];
    Annotation[] parameterAnnotations=parametersAnnotations[i];
    Expression expression=createParameterUnmarshalExpression(clazz,method,parameterType,parameterAnnotations);
    hasCustomAnnotation|=expression != null;
    ParameterInfo parameterInfo=new ParameterInfo(i,parameterType,parameterAnnotations,expression);
    parameters.add(parameterInfo);
    if (expression == null) {
      hasCustomAnnotation|=ObjectHelper.hasAnnotation(parameterAnnotations,Body.class);
      if (bodyParameters.isEmpty()) {
        if (Exchange.class.isAssignableFrom(parameterType)) {
          expression=ExpressionBuilder.exchangeExpression();
        }
 else {
          expression=ExpressionBuilder.bodyExpression(parameterType);
        }
        parameterInfo.setExpression(expression);
        bodyParameters.add(parameterInfo);
      }
 else {
      }
    }
  }
  String opName=method.getName();
  MethodInfo methodInfo=new MethodInfo(clazz,method,parameters,bodyParameters,hasCustomAnnotation);
  operations.put(opName,methodInfo);
  if (methodInfo.hasBodyParameter()) {
    operationsWithBody.add(methodInfo);
  }
  if (methodInfo.isHasCustomAnnotation() && !methodInfo.hasBodyParameter()) {
    operationsWithCustomAnnotation.add(methodInfo);
  }
  return methodInfo;
}
