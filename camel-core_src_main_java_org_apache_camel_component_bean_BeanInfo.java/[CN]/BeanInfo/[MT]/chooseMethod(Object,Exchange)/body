{
  if (operationsWithBody.size() == 1) {
    return operationsWithBody.get(0);
  }
 else   if (!operationsWithBody.isEmpty()) {
    Message in=exchange.getIn();
    Object body=in.getBody();
    if (body != null) {
      Class bodyType=body.getClass();
      List<MethodInfo> possibles=new ArrayList<MethodInfo>();
      for (      MethodInfo methodInfo : operationsWithBody) {
        if (methodInfo.bodyParameterMatches(bodyType)) {
          possibles.add(methodInfo);
        }
      }
      if (possibles.size() == 1) {
        return possibles.get(0);
      }
 else       if (possibles.isEmpty()) {
        Object newBody=null;
        MethodInfo matched=null;
        for (        MethodInfo methodInfo : operationsWithBody) {
          Object value=convertToType(exchange,methodInfo.getBodyParameterType(),body);
          if (value != null) {
            if (newBody != null) {
              throw new AmbiguousMethodCallException(exchange,Arrays.asList(matched,methodInfo));
            }
 else {
              newBody=value;
              matched=methodInfo;
            }
          }
        }
        if (matched != null) {
          in.setBody(newBody);
          return matched;
        }
      }
 else {
        MethodInfo chosen=null;
        for (        MethodInfo possible : possibles) {
          if (possible.isHasCustomAnnotation()) {
            if (chosen != null) {
              chosen=null;
              break;
            }
 else {
              chosen=possible;
            }
          }
        }
        if (chosen != null) {
          return chosen;
        }
        throw new AmbiguousMethodCallException(exchange,possibles);
      }
    }
    return null;
  }
  return null;
}
