{
  try {
    ruleNestingLevel++;
    int _type=ID;
    int _start=getCharIndex();
    int _line=getLine();
    int _charPosition=getCharPositionInLine();
    int _channel=Token.DEFAULT_CHANNEL;
{
      int alt4=2;
      int LA4_0=input.LA(1);
      if ((LA4_0 == '^')) {
        alt4=1;
      }
switch (alt4) {
case 1:
{
          match('^');
        }
      break;
  }
  if ((input.LA(1) >= 'A' && input.LA(1) <= 'Z') || input.LA(1) == '_' || (input.LA(1) >= 'a' && input.LA(1) <= 'z')) {
    input.consume();
  }
 else {
    MismatchedSetException mse=new MismatchedSetException(null,input);
    recover(mse);
    throw mse;
  }
  loop5:   do {
    int alt5=2;
    int LA5_0=input.LA(1);
    if (((LA5_0 >= '0' && LA5_0 <= '9') || (LA5_0 >= 'A' && LA5_0 <= 'Z') || LA5_0 == '_' || (LA5_0 >= 'a' && LA5_0 <= 'z'))) {
      alt5=1;
    }
switch (alt5) {
case 1:
{
        if ((input.LA(1) >= '0' && input.LA(1) <= '9') || (input.LA(1) >= 'A' && input.LA(1) <= 'Z') || input.LA(1) == '_' || (input.LA(1) >= 'a' && input.LA(1) <= 'z')) {
          input.consume();
        }
 else {
          MismatchedSetException mse=new MismatchedSetException(null,input);
          recover(mse);
          throw mse;
        }
      }
    break;
default :
  break loop5;
}
}
 while (true);
}
if (token == null && ruleNestingLevel == 1) {
emit(_type,_line,_charPosition,_channel,_start,getCharIndex() - 1);
}
}
  finally {
ruleNestingLevel--;
}
}
