{
  try {
    ruleNestingLevel++;
    int _type=SL_COMMENT;
    int _start=getCharIndex();
    int _line=getLine();
    int _charPosition=getCharPositionInLine();
    int _channel=Token.DEFAULT_CHANNEL;
{
      match("//");
      loop8:       do {
        int alt8=2;
        int LA8_0=input.LA(1);
        if (((LA8_0 >= '\u0000' && LA8_0 <= '\t') || (LA8_0 >= '\u000B' && LA8_0 <= '\f') || (LA8_0 >= '\u000E' && LA8_0 <= '\uFFFE'))) {
          alt8=1;
        }
switch (alt8) {
case 1:
{
            if ((input.LA(1) >= '\u0000' && input.LA(1) <= '\t') || (input.LA(1) >= '\u000B' && input.LA(1) <= '\f') || (input.LA(1) >= '\u000E' && input.LA(1) <= '\uFFFE')) {
              input.consume();
            }
 else {
              MismatchedSetException mse=new MismatchedSetException(null,input);
              recover(mse);
              throw mse;
            }
          }
        break;
default :
      break loop8;
  }
}
 while (true);
int alt9=2;
int LA9_0=input.LA(1);
if ((LA9_0 == '\r')) {
  alt9=1;
}
switch (alt9) {
case 1:
{
    match('\r');
  }
break;
}
match('\n');
skip();
}
if (token == null && ruleNestingLevel == 1) {
emit(_type,_line,_charPosition,_channel,_start,getCharIndex() - 1);
}
}
  finally {
ruleNestingLevel--;
}
}
