{
  super.doStart();
  String topic=getEndpoint().getTopic();
  getEndpoint().getClient().subscribe(topic);
  getEndpoint().getClient().setCallback(new MqttCallback(){
    @Override public void connectionLost(    Throwable cause){
      LOG.debug("MQTT broker connection lost due " + cause.getMessage(),cause);
    }
    @Override public void messageArrived(    String topic,    MqttMessage message) throws Exception {
      String headerKey;
      Object headerValue;
      String headerType=getEndpoint().getHeaderType();
      if (PahoConstants.HEADER_ORIGINAL_MESSAGE.equals(headerType)) {
        headerKey=PahoConstants.HEADER_ORIGINAL_MESSAGE;
        headerValue=message;
      }
 else {
        MqttProperties props=new MqttProperties();
        props.setTopic(topic);
        props.setQos(message.getQos());
        props.setRetain(message.isRetained());
        props.setDuplicate(message.isDuplicate());
        headerKey=PahoConstants.HEASER_MQTT_PROPERTIES;
        headerValue=props;
      }
      Exchange exchange=getEndpoint().createExchange();
      exchange.getIn().setBody(message.getPayload());
      exchange.getIn().setHeader(headerKey,headerValue);
      getAsyncProcessor().process(exchange,new AsyncCallback(){
        @Override public void done(        boolean doneSync){
        }
      }
);
    }
    @Override public void deliveryComplete(    IMqttDeliveryToken token){
      LOG.debug("Delivery complete. Token: {}.",token);
    }
  }
);
}
