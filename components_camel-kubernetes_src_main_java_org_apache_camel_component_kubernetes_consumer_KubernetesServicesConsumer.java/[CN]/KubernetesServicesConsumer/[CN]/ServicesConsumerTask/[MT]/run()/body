{
  if (ObjectHelper.isNotEmpty(getEndpoint().getKubernetesConfiguration().getOauthToken())) {
    if (ObjectHelper.isNotEmpty(getEndpoint().getKubernetesConfiguration().getNamespaceName())) {
      getEndpoint().getKubernetesClient().services().inNamespace(getEndpoint().getKubernetesConfiguration().getNamespaceName()).watch(new Watcher<Service>(){
        @Override public void eventReceived(        io.fabric8.kubernetes.client.Watcher.Action action,        Service resource){
          ServiceEvent se=new ServiceEvent(action,resource);
          Exchange exchange=getEndpoint().createExchange();
          exchange.getIn().setBody(se.getService());
          exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_EVENT_ACTION,se.getAction());
          exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_EVENT_TIMESTAMP,System.currentTimeMillis());
          try {
            processor.process(exchange);
          }
 catch (          Exception e) {
            getExceptionHandler().handleException("Error during processing",exchange,e);
          }
        }
        @Override public void onClose(        KubernetesClientException cause){
          if (cause != null) {
            LOG.error(cause.getMessage(),cause);
          }
        }
      }
);
    }
 else {
      getEndpoint().getKubernetesClient().services().watch(new Watcher<Service>(){
        @Override public void eventReceived(        io.fabric8.kubernetes.client.Watcher.Action action,        Service resource){
          ServiceEvent se=new ServiceEvent(action,resource);
          Exchange exchange=getEndpoint().createExchange();
          exchange.getIn().setBody(se.getService());
          exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_EVENT_ACTION,se.getAction());
          exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_EVENT_TIMESTAMP,System.currentTimeMillis());
          try {
            processor.process(exchange);
          }
 catch (          Exception e) {
            getExceptionHandler().handleException("Error during processing",exchange,e);
          }
        }
        @Override public void onClose(        KubernetesClientException cause){
          if (cause != null) {
            LOG.error(cause.getMessage(),cause);
          }
        }
      }
);
    }
  }
}
