{
  ObjectHelper.notEmpty(message,"message",this);
  Expression exp=routeContext.getCamelContext().resolveLanguage("simple").createExpression(message);
  Logger logger=this.getLogger();
  if (logger == null && ObjectHelper.isNotEmpty(loggerRef)) {
    logger=CamelContextHelper.mandatoryLookup(routeContext.getCamelContext(),loggerRef,Logger.class);
  }
  if (logger == null) {
    Map<String,Logger> availableLoggers=routeContext.lookupByType(Logger.class);
    if (availableLoggers.size() == 1) {
      logger=availableLoggers.values().iterator().next();
      LOG.debug("Using custom Logger: {}",logger);
    }
 else     if (availableLoggers.size() > 1) {
      LOG.debug("More than one {} instance found in the registry. Falling back to create logger by name.",Logger.class.getName());
    }
  }
  if (logger == null) {
    String name=getLogName();
    if (name == null) {
      name=routeContext.getCamelContext().getProperty(Exchange.LOG_EIP_NAME);
      if (name != null) {
        LOG.debug("Using logName from CamelContext properties: {}",name);
      }
    }
    if (name == null) {
      name=routeContext.getRoute().getId();
      LOG.debug("LogName is not configured, using route id as logName: {}",name);
    }
    logger=LoggerFactory.getLogger(name);
  }
  LoggingLevel level=getLoggingLevel() != null ? getLoggingLevel() : LoggingLevel.INFO;
  CamelLogger camelLogger=new CamelLogger(logger,level,getMarker());
  return new LogProcessor(exp,camelLogger);
}
