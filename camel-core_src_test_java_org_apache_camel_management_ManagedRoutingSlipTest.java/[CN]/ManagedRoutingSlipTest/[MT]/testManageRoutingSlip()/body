{
  if (isPlatform("aix")) {
    return;
  }
  MockEndpoint foo=getMockEndpoint("mock:foo");
  foo.expectedMessageCount(2);
  MockEndpoint bar=getMockEndpoint("mock:bar");
  bar.expectedMessageCount(1);
  template.sendBodyAndHeader("direct:start","Hello World","whereTo","direct:foo,direct:foo,direct:bar");
  assertMockEndpointsSatisfied();
  MBeanServer mbeanServer=getMBeanServer();
  ObjectName on=ObjectName.getInstance("org.apache.camel:context=camel-1,type=processors,name=\"mysend\"");
  String routeId=(String)mbeanServer.getAttribute(on,"RouteId");
  assertEquals("route1",routeId);
  String camelId=(String)mbeanServer.getAttribute(on,"CamelId");
  assertEquals("camel-1",camelId);
  String state=(String)mbeanServer.getAttribute(on,"State");
  assertEquals(ServiceStatus.Started.name(),state);
  String lan=(String)mbeanServer.getAttribute(on,"ExpressionLanguage");
  assertEquals("header",lan);
  String uri=(String)mbeanServer.getAttribute(on,"Expression");
  assertEquals("whereTo",uri);
  TabularData data=(TabularData)mbeanServer.invoke(on,"endpointStatistics",null,null);
  assertNotNull(data);
  assertEquals(2,data.size());
  data=(TabularData)mbeanServer.invoke(on,"explain",new Object[]{false},new String[]{"boolean"});
  assertNotNull(data);
  assertEquals(3,data.size());
  data=(TabularData)mbeanServer.invoke(on,"explain",new Object[]{true},new String[]{"boolean"});
  assertNotNull(data);
  assertEquals(6,data.size());
  String json=(String)mbeanServer.invoke(on,"informationJson",null,null);
  assertNotNull(json);
  assertTrue(json.contains("\"description\": \"Routes a message through a series of steps that are pre-determined (the slip)"));
}
