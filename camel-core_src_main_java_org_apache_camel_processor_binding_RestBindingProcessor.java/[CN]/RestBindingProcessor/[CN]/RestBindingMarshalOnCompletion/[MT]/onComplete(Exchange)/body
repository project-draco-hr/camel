{
  if (bindingMode == null || "off".equals(bindingMode)) {
    return;
  }
  if (jsonMmarshal == null && xmlMmarshal == null) {
    return;
  }
  if (exchange.hasOut() && exchange.getOut().getBody() == null || exchange.getIn().getBody() == null) {
    return;
  }
  boolean isXml=false;
  boolean isJson=false;
  String contentType=ExchangeHelper.getContentType(exchange);
  if (contentType != null) {
    isXml=contentType.toLowerCase(Locale.US).contains("xml");
    isJson=contentType.toLowerCase(Locale.US).contains("json");
  }
  if (!isXml && !isJson) {
    isXml=produces != null && produces.toLowerCase(Locale.US).contains("xml");
    isJson=produces != null && produces.toLowerCase(Locale.US).contains("json");
  }
  ExchangeHelper.prepareOutToIn(exchange);
  if (!isXml && !isJson || isXml && isJson) {
    String body=MessageHelper.extractBodyAsString(exchange.getIn());
    if (body != null) {
      isXml=body.startsWith("<");
      isJson=!isXml;
    }
  }
  isXml&=bindingMode.equals("auto") || bindingMode.contains("xml");
  isJson&=bindingMode.equals("auto") || bindingMode.contains("json");
  try {
    if (isXml && xmlMmarshal != null) {
      xmlMmarshal.process(exchange);
    }
 else     if (isJson && jsonMmarshal != null) {
      jsonMmarshal.process(exchange);
    }
 else {
      if (bindingMode.equals("auto")) {
        return;
      }
 else {
        if (bindingMode.contains("xml")) {
          exchange.setException(new BindingException("Cannot bind to xml as message body is not xml compatible",exchange));
        }
 else {
          exchange.setException(new BindingException("Cannot bind to json as message body is not json compatible",exchange));
        }
      }
      return;
    }
  }
 catch (  Throwable e) {
    exchange.setException(e);
  }
}
