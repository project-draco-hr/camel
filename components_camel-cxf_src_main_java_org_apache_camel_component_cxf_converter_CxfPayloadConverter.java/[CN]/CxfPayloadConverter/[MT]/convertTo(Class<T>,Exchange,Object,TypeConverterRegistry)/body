{
  if (type.isAssignableFrom(CxfPayload.class)) {
    if (!value.getClass().isArray()) {
      Source src=null;
      if (value instanceof InputStream) {
        src=new StreamSource((InputStream)value);
      }
 else       if (value instanceof Reader) {
        src=new StreamSource((Reader)value);
      }
 else       if (value instanceof String) {
        src=new StreamSource(new StringReader((String)value));
      }
 else       if (value instanceof Node) {
        src=new DOMSource((Node)value);
      }
 else       if (value instanceof Source) {
        src=(Source)value;
      }
      if (src == null) {
        TypeConverter tc=registry.lookup(javax.xml.transform.stax.StAXSource.class,value.getClass());
        if (tc == null) {
          tc=registry.lookup(Source.class,value.getClass());
        }
        if (tc != null) {
          src=tc.convertTo(Source.class,exchange,value);
        }
      }
      if (src != null) {
        return (T)sourceToCxfPayload(src,exchange);
      }
    }
    TypeConverter tc=registry.lookup(NodeList.class,value.getClass());
    if (tc != null) {
      NodeList nodeList=tc.convertTo(NodeList.class,exchange,value);
      return (T)nodeListToCxfPayload(nodeList,exchange);
    }
    tc=registry.lookup(Document.class,value.getClass());
    if (tc != null) {
      Document document=tc.convertTo(Document.class,exchange,value);
      return (T)documentToCxfPayload(document,exchange);
    }
    CxfPayload<?> p;
    p=convertVia(InputStream.class,exchange,value,registry);
    if (p != null) {
      return (T)p;
    }
    p=convertVia(String.class,exchange,value,registry);
    if (p != null) {
      return (T)p;
    }
    return (T)Void.TYPE;
  }
  if (CxfPayload.class.isAssignableFrom(value.getClass())) {
    CxfPayload<?> payload=(CxfPayload<?>)value;
    if (payload.getBodySources().size() == 1) {
      if (type.isAssignableFrom(Document.class)) {
        Source s=payload.getBodySources().get(0);
        Document d;
        try {
          d=StaxUtils.read(s);
        }
 catch (        XMLStreamException e) {
          throw new RuntimeException(e);
        }
        return type.cast(d);
      }
      Source s=payload.getBodySources().get(0);
      if (type.isInstance(s)) {
        return type.cast(s);
      }
      TypeConverter tc=registry.lookup(type,Source.class);
      if (tc != null) {
        T t=tc.convertTo(type,s);
        return t;
      }
    }
    TypeConverter tc=registry.lookup(type,NodeList.class);
    if (tc != null) {
      Object result=tc.convertTo(type,cxfPayloadToNodeList((CxfPayload<?>)value,exchange));
      if (result == null) {
        return (T)Void.TYPE;
      }
 else {
        return (T)result;
      }
    }
    tc=registry.lookup(type,Node.class);
    if (tc != null) {
      NodeList nodeList=cxfPayloadToNodeList((CxfPayload<?>)value,exchange);
      if (nodeList.getLength() > 0) {
        return tc.convertTo(type,nodeList.item(0));
      }
 else {
        return (T)Void.TYPE;
      }
    }
  }
  return null;
}
