{
  MockEndpoint mock=getMockEndpoint("mock:aggregateToZipEntry");
  mock.expectedMessageCount(1);
  template.setDefaultEndpointUri("direct:start");
  template.sendBodyAndHeader("foo",Exchange.FILE_NAME,FILE_NAMES.get(0));
  template.sendBodyAndHeader("bar",Exchange.FILE_NAME,FILE_NAMES.get(1));
  assertMockEndpointsSatisfied();
  Thread.sleep(500);
  File[] files=new File("target/out").listFiles();
  assertTrue(files != null);
  assertTrue("Should be a file in target/out directory",files.length > 0);
  File resultFile=files[0];
  final ZipFile file=new ZipFile(resultFile);
  try {
    final Enumeration<? extends ZipEntry> entries=file.entries();
    int fileCount=0;
    while (entries.hasMoreElements()) {
      fileCount++;
      final ZipEntry entry=entries.nextElement();
      assertTrue("Zip entry file name should be on of: " + FILE_NAMES,FILE_NAMES.contains(entry.getName()));
    }
    assertEquals("Zip file should contains " + FILE_NAMES.size() + " files",FILE_NAMES.size(),fileCount);
  }
  finally {
    IOHelper.close(file);
  }
}
