{
  HystrixCommand.Setter setter=HystrixCommand.Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(exchange.getIn().getHeader(HystrixConstants.CAMEL_HYSTRIX_GROUP_KEY,configuration.getGroupKey(),String.class)));
  setCommandPropertiesDefaults(setter,exchange);
  setThreadPoolPropertiesDefaults(setter,exchange);
  String run=exchange.getIn().getHeader(HystrixConstants.CAMEL_HYSTRIX_RUN_ENDPOINT,configuration.getRunEndpoint(),String.class);
  String fallback=exchange.getIn().getHeader(HystrixConstants.CAMEL_HYSTRIX_FALLBACK_ENDPOINT,configuration.getFallbackEndpoint(),String.class);
  Endpoint runEndpoint=exchange.getContext().getEndpoint(run);
  Endpoint fallbackEndpoint=fallback != null ? exchange.getContext().getEndpoint(fallback) : null;
  if (log.isDebugEnabled()) {
    log.debug("Run endpoint: {}",runEndpoint);
    log.debug("Fallback endpoint: {}",fallbackEndpoint);
  }
  CamelHystrixCommand camelHystrixCommand=new CamelHystrixCommand(setter,exchange,getCacheKey(exchange),producerCache,runEndpoint,fallbackEndpoint);
  checkRequestContextPresent(exchange);
  clearCache(camelHystrixCommand.getCommandKey(),exchange);
  camelHystrixCommand.execute();
  if (configuration.isMetricsEnabled()) {
    populateWithMetrics(exchange,camelHystrixCommand);
  }
}
