{
  final Path file=new Path(new File("target/test/test-camel-float").getAbsolutePath());
  Configuration conf=new Configuration();
  FileSystem fs1=FileSystem.get(file.toUri(),conf);
  SequenceFile.Writer writer=createWriter(fs1,conf,file,NullWritable.class,FloatWritable.class);
  NullWritable keyWritable=NullWritable.get();
  FloatWritable valueWritable=new FloatWritable();
  float value=3.1415926535f;
  valueWritable.set(value);
  writer.append(keyWritable,valueWritable);
  writer.sync();
  writer.close();
  context.addRoutes(new RouteBuilder(){
    public void configure(){
      from("hdfs:///" + file.toUri() + "??fileSystemType=LOCAL&fileType=SEQUENCE_FILE&initialDelay=0").to("mock:result");
    }
  }
);
  context.start();
  MockEndpoint resultEndpoint=(MockEndpoint)context.getEndpoint("mock:result");
  resultEndpoint.expectedMessageCount(1);
  List<Exchange> exchanges=resultEndpoint.getReceivedExchanges();
  for (  Exchange exchange : exchanges) {
    Assert.assertTrue(exchange.getIn(Float.class) == value);
  }
  resultEndpoint.assertIsSatisfied();
}
