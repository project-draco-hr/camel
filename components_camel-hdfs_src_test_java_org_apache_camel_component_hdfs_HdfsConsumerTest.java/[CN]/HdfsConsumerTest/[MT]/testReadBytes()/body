{
  Path file=new Path("file:///tmp/test/test-camel-bytes");
  Configuration conf=new Configuration();
  FileSystem fs1=FileSystem.get(file.toUri(),conf);
  SequenceFile.Writer writer=createWriter(fs1,conf,file,NullWritable.class,BytesWritable.class);
  NullWritable keyWritable=NullWritable.get();
  BytesWritable valueWritable=new BytesWritable();
  String value="CIAO!";
  valueWritable.set(value.getBytes(),0,value.getBytes().length);
  writer.append(keyWritable,valueWritable);
  writer.sync();
  writer.close();
  context.addRoutes(new RouteBuilder(){
    public void configure(){
      from("hdfs:///tmp/test/test-camel-bytes?fileSystemType=LOCAL&fileType=SEQUENCE_FILE&initialDelay=0").to("mock:result");
    }
  }
);
  context.start();
  MockEndpoint resultEndpoint=(MockEndpoint)context.getEndpoint("mock:result");
  resultEndpoint.expectedMessageCount(1);
  List<Exchange> exchanges=resultEndpoint.getReceivedExchanges();
  for (  Exchange exchange : exchanges) {
    Assert.assertTrue(exchange.getIn(String.class) == value);
  }
  resultEndpoint.assertIsSatisfied();
}
