{
  Message msg;
  if (camelExchange.hasOut()) {
    msg=camelExchange.getOut();
  }
 else {
    msg=camelExchange.getIn();
  }
  if (msg.getHeaders() != null && msg.getHeaders().containsKey(SERIALIZE_HEADER)) {
    LOG.debug("Removing the {} header",SERIALIZE_HEADER);
    msg.getHeaders().remove(SERIALIZE_HEADER);
  }
  AMQP.BasicProperties properties;
  byte[] body;
  try {
    body=camelExchange.getContext().getTypeConverter().mandatoryConvertTo(byte[].class,camelExchange,msg.getBody());
    properties=getMessageConverter().buildProperties(camelExchange).build();
  }
 catch (  NoTypeConversionAvailableException|TypeConversionException e) {
    if (msg.getBody() instanceof Serializable) {
      msg.getHeaders().put(SERIALIZE_HEADER,true);
      properties=getMessageConverter().buildProperties(camelExchange).build();
      try (ByteArrayOutputStream b=new ByteArrayOutputStream();ObjectOutputStream o=new ObjectOutputStream(b)){
        o.writeObject(msg.getBody());
        body=b.toByteArray();
      }
 catch (      NotSerializableException nse) {
        LOG.warn("Can not send object " + msg.getBody().getClass() + " via RabbitMQ because it contains non-serializable objects.");
        throw new RuntimeCamelException(e);
      }
    }
 else     if (msg.getBody() == null) {
      properties=getMessageConverter().buildProperties(camelExchange).build();
      body=null;
    }
 else {
      LOG.warn("Could not convert {} to byte[]",msg.getBody());
      throw new RuntimeCamelException(e);
    }
  }
  String rabbitExchange=getExchangeName(msg);
  Boolean mandatory=camelExchange.getIn().getHeader(RabbitMQConstants.MANDATORY,isMandatory(),Boolean.class);
  Boolean immediate=camelExchange.getIn().getHeader(RabbitMQConstants.IMMEDIATE,isImmediate(),Boolean.class);
  LOG.debug("Sending message to exchange: {} with CorrelationId = {}",rabbitExchange,properties.getCorrelationId());
  channel.basicPublish(rabbitExchange,routingKey,mandatory,immediate,properties,body);
}
