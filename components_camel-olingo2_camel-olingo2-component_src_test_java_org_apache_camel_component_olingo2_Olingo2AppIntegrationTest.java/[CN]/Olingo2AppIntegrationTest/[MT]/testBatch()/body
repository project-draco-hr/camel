{
  final List<Olingo2BatchRequest> batchParts=new ArrayList<Olingo2BatchRequest>();
  batchParts.add(Olingo2BatchQueryRequest.resourcePath(Olingo2AppImpl.METADATA).build());
  batchParts.add(Olingo2BatchQueryRequest.resourcePath(MANUFACTURERS).build());
  batchParts.add(Olingo2BatchQueryRequest.resourcePath(TEST_MANUFACTURER).build());
  final HashMap<String,String> queryParams=new HashMap<String,String>();
  queryParams.put(SystemQueryOption.$expand.toString(),CARS);
  batchParts.add(Olingo2BatchQueryRequest.resourcePath(TEST_MANUFACTURER).queryParams(queryParams).build());
  final Map<String,Object> data=getEntityData();
  batchParts.add(Olingo2BatchChangeRequest.resourcePath(MANUFACTURERS).contentId(TEST_RESOURCE_CONTENT_ID).operation(Operation.CREATE).body(data).build());
  final Map<String,Object> updateData=new HashMap<String,Object>(data);
  @SuppressWarnings("unchecked") Map<String,Object> address=(Map<String,Object>)updateData.get(ADDRESS);
  updateData.put("Name","MyCarManufacturer Renamed");
  address.put("Street","Main Street");
  batchParts.add(Olingo2BatchChangeRequest.resourcePath(TEST_RESOURCE).operation(Operation.UPDATE).body(updateData).build());
  batchParts.add(Olingo2BatchChangeRequest.resourcePath(TEST_RESOURCE).operation(Operation.DELETE).build());
  batchParts.add(Olingo2BatchQueryRequest.resourcePath(TEST_CREATE_MANUFACTURER).build());
  final List<Olingo2BatchResponse> responseParts=requestBody("direct://BATCH",batchParts);
  assertNotNull("Batch response",responseParts);
  assertEquals("Batch responses expected",8,responseParts.size());
  final Edm edm=(Edm)responseParts.get(0).getBody();
  assertNotNull(edm);
  LOG.info("Edm entity sets: {}",edm.getEntitySets());
  final ODataFeed feed=(ODataFeed)responseParts.get(1).getBody();
  assertNotNull(feed);
  LOG.info("Read feed: {}",feed.getEntries());
  ODataEntry dataEntry=(ODataEntry)responseParts.get(2).getBody();
  assertNotNull(dataEntry);
  LOG.info("Read entry: {}",dataEntry.getProperties());
  dataEntry=(ODataEntry)responseParts.get(3).getBody();
  assertNotNull(dataEntry);
  LOG.info("Read entry with $expand: {}",dataEntry.getProperties());
  dataEntry=(ODataEntry)responseParts.get(4).getBody();
  assertNotNull(dataEntry);
  LOG.info("Created entry: {}",dataEntry.getProperties());
  int statusCode=responseParts.get(5).getStatusCode();
  assertEquals(HttpStatusCodes.NO_CONTENT.getStatusCode(),statusCode);
  statusCode=responseParts.get(6).getStatusCode();
  LOG.info("Update status: {}",statusCode);
  assertEquals(HttpStatusCodes.NO_CONTENT.getStatusCode(),statusCode);
  LOG.info("Delete status: {}",statusCode);
  assertEquals(HttpStatusCodes.NOT_FOUND.getStatusCode(),responseParts.get(7).getStatusCode());
  final Exception exception=(Exception)responseParts.get(7).getBody();
  assertNotNull(exception);
  LOG.info("Read deleted entry exception: {}",exception);
}
