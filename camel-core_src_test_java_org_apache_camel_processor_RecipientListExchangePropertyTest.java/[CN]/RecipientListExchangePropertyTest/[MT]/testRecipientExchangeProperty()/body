{
  getMockEndpoint("mock:a").expectedPropertyReceived(Exchange.RECIPIENT_LIST_ENDPOINT,"direct://a");
  getMockEndpoint("mock:a").expectedPropertyReceived(Exchange.TO_ENDPOINT,"mock://a");
  getMockEndpoint("mock:b").expectedPropertyReceived(Exchange.RECIPIENT_LIST_ENDPOINT,"direct://b");
  getMockEndpoint("mock:b").expectedPropertyReceived(Exchange.TO_ENDPOINT,"mock://b");
  getMockEndpoint("mock:c").expectedPropertyReceived(Exchange.RECIPIENT_LIST_ENDPOINT,"direct://c");
  getMockEndpoint("mock:c").expectedPropertyReceived(Exchange.TO_ENDPOINT,"mock://c");
  MockEndpoint mock=getMockEndpoint("mock:result");
  mock.expectedBodiesReceived("Hello c");
  mock.expectedPropertyReceived(Exchange.RECIPIENT_LIST_ENDPOINT,"direct://c");
  String out=template.requestBodyAndHeader("direct:start","Hello World","slip","direct:a,direct:b,direct:c",String.class);
  assertEquals("Hello c",out);
  assertMockEndpointsSatisfied();
}
