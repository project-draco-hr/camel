{
  int xcode=0;
  while (xcode != XMLStreamConstants.END_DOCUMENT) {
    xcode=readNext();
switch (xcode) {
case XMLStreamConstants.START_ELEMENT:
      depth++;
    QName name=reader.getName();
  if (LOG.isTraceEnabled()) {
    LOG.trace("se={}; depth={}; trackdepth={}",new Object[]{name,depth,trackdepth});
  }
String token=getCurrenText();
LOG.trace("token={}",token);
if (!backtrack && mode == 'w') {
pushSegment(name,token);
}
pushName(name);
if (mode == 'i') {
pushNamespaces(reader);
}
backtrack=false;
if (current().matches(name)) {
if (isBottom()) {
token=getCurrentToken();
backtrack=true;
trackdepth=depth;
if (group > 1) {
tokens.add(token);
if (group == tokens.size()) {
return getGroupedToken();
}
}
 else {
return token;
}
}
 else {
down();
}
}
 else if (isDoS()) {
}
 else {
readCurrent(false);
}
break;
case XMLStreamConstants.END_ELEMENT:
if ((backtrack || (trackdepth > 0 && depth == trackdepth)) && (mode == 'w' && group > 1 && tokens.size() > 0)) {
code=XMLStreamConstants.END_ELEMENT;
return getGroupedToken();
}
depth--;
QName endname=reader.getName();
LOG.trace("ee={}",endname);
popName();
if (mode == 'i') {
popNamespaces();
}
int pc=0;
if (backtrack || (trackdepth > 0 && depth == trackdepth - 1)) {
backtrack=true;
trackdepth--;
if (mode == 'w') {
while (!endname.equals(peekLog())) {
pc++;
popLog();
}
}
}
if (backtrack) {
if (mode == 'w') {
for (int i=0; i < pc; i++) {
popSegment();
}
}
if ((ancestor() == null && !isTop()) || (ancestor() != null && ancestor().matches(endname))) {
up();
}
}
break;
case XMLStreamConstants.END_DOCUMENT:
LOG.trace("depth={}",depth);
if (group > 1 && tokens.size() > 0) {
code=XMLStreamConstants.END_DOCUMENT;
return getGroupedToken();
}
break;
default :
break;
}
}
return null;
}
