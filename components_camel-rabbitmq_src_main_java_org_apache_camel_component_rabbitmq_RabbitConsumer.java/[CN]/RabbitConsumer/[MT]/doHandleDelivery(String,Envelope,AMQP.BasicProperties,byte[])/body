{
  Exchange exchange=consumer.getEndpoint().createRabbitExchange(envelope,properties,body);
  consumer.getEndpoint().getMessageConverter().mergeAmqpProperties(exchange,properties);
  boolean sendReply=properties.getReplyTo() != null;
  if (sendReply && !exchange.getPattern().isOutCapable()) {
    log.debug("In an inOut capable route");
    exchange.setPattern(ExchangePattern.InOut);
  }
  log.trace("Created exchange [exchange={}]",exchange);
  long deliveryTag=envelope.getDeliveryTag();
  try {
    consumer.getProcessor().process(exchange);
  }
 catch (  Exception e) {
    exchange.setException(e);
  }
  Message msg;
  if (exchange.hasOut()) {
    msg=exchange.getOut();
  }
 else {
    msg=exchange.getIn();
  }
  if (exchange.getException() != null) {
    consumer.getExceptionHandler().handleException("Error processing exchange",exchange,exchange.getException());
  }
  if (!exchange.isFailed()) {
    if (sendReply && exchange.getPattern().isOutCapable()) {
      try {
        consumer.getEndpoint().publishExchangeToChannel(exchange,channel,properties.getReplyTo());
      }
 catch (      RuntimeCamelException e) {
        exchange.setException(e);
        consumer.getExceptionHandler().handleException("Error processing exchange",exchange,e);
      }
    }
    if (!consumer.getEndpoint().isAutoAck()) {
      log.trace("Acknowledging receipt [delivery_tag={}]",deliveryTag);
      channel.basicAck(deliveryTag,false);
    }
  }
  if (exchange.isFailed()) {
    if (consumer.getEndpoint().isTransferException() && exchange.getPattern().isOutCapable()) {
      msg.setBody(exchange.getException());
      exchange.setOut(msg);
      exchange.getOut().setHeader(RabbitMQConstants.CORRELATIONID,exchange.getIn().getHeader(RabbitMQConstants.CORRELATIONID));
      try {
        consumer.getEndpoint().publishExchangeToChannel(exchange,channel,properties.getReplyTo());
      }
 catch (      RuntimeCamelException e) {
        consumer.getExceptionHandler().handleException("Error processing exchange",exchange,e);
      }
      if (!consumer.getEndpoint().isAutoAck()) {
        log.trace("Acknowledging receipt when transferring exception [delivery_tag={}]",deliveryTag);
        channel.basicAck(deliveryTag,false);
      }
    }
 else {
      boolean isRequeueHeaderSet=msg.getHeader(RabbitMQConstants.REQUEUE,false,boolean.class);
      if (deliveryTag != 0 && !consumer.getEndpoint().isAutoAck()) {
        log.trace("Rejecting receipt [delivery_tag={}] with requeue={}",deliveryTag,isRequeueHeaderSet);
        if (isRequeueHeaderSet) {
          channel.basicReject(deliveryTag,true);
        }
 else {
          channel.basicReject(deliveryTag,false);
        }
      }
    }
  }
}
