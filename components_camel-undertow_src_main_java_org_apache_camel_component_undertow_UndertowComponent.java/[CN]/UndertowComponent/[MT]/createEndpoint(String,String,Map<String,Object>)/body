{
  Boolean matchOnUriPrefix=getAndRemoveParameter(parameters,"matchOnUriPrefix",Boolean.class);
  HeaderFilterStrategy headerFilterStrategy=resolveAndRemoveReferenceParameter(parameters,"headerFilterStrategy",HeaderFilterStrategy.class);
  SSLContextParameters sslContextParameters=resolveAndRemoveReferenceParameter(parameters,"sslContextParametersRef",SSLContextParameters.class);
  Boolean throwExceptionOnFailure=getAndRemoveParameter(parameters,"throwExceptionOnFailure",Boolean.class);
  Boolean transferException=getAndRemoveParameter(parameters,"transferException",Boolean.class);
  String httpMethodRestrict=getAndRemoveParameter(parameters,"httpMethodRestrict",String.class);
  System.out.println("Remaining: " + remaining);
  String address=remaining;
  URI httpUri=new URI(UnsafeUriCharactersEncoder.encodeHttpURI(address));
  URI endpointUri=URISupport.createRemainingURI(httpUri,parameters);
  UndertowEndpoint endpoint=new UndertowEndpoint(endpointUri.toString(),this,httpUri);
  if (endpoint.getUndertowHttpBinding() == null) {
    endpoint.setUndertowHttpBinding(undertowHttpBinding);
  }
  if (httpMethodRestrict != null) {
    endpoint.setHttpMethodRestrict(httpMethodRestrict);
  }
  if (matchOnUriPrefix != null) {
    endpoint.setMatchOnUriPrefix(matchOnUriPrefix);
  }
  if (headerFilterStrategy != null) {
    endpoint.setHeaderFilterStrategy(headerFilterStrategy);
  }
  if (sslContextParameters != null) {
    SSLContext sslContext=sslContextParameters.createSSLContext();
    endpoint.setSslContext(sslContext);
  }
  if (throwExceptionOnFailure != null) {
    endpoint.setThrowExceptionOnFailure(throwExceptionOnFailure);
  }
  if (transferException != null) {
    endpoint.setTransferException(transferException);
  }
  setProperties(endpoint,parameters);
  return endpoint;
}
