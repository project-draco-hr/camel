{
  Undertow.Builder result=Undertow.builder();
  if (registry.getSslContext() != null) {
    result=result.addHttpsListener(registry.getPort(),registry.getHost(),registry.getSslContext());
  }
 else {
    result=result.addHttpListener(registry.getPort(),registry.getHost());
  }
  PathHandler pathHandler=Handlers.path(new NotFoundHandler());
  HttpCamelHandler handler=new HttpCamelHandler();
  List<Predicate> predicates=new ArrayList<Predicate>();
  for (  String key : registry.getConsumersRegistry().keySet()) {
    UndertowConsumer consumer=registry.getConsumersRegistry().get(key);
    UndertowEndpoint endpoint=consumer.getEndpoint();
    String path=endpoint.getHttpURI().getPath();
    if (path.contains("{")) {
      predicates.add(new PathTemplatePredicate(path,ExchangeAttributes.relativePath()));
    }
 else {
      if (endpoint.getMatchOnUriPrefix()) {
        predicates.add(Predicates.prefix(path));
      }
 else {
        predicates.add(Predicates.path(path));
      }
    }
    handler.connectConsumer(consumer);
    LOG.debug("Rebuild for pathHandler: {}",path);
  }
  Predicate combinedPathPredicate=Predicates.or(predicates.toArray(new Predicate[0]));
  pathHandler.addPrefixPath("/",new PredicateHandler(combinedPathPredicate,handler,new NotFoundHandler()));
  result=result.setHandler(pathHandler);
  return result.build();
}
