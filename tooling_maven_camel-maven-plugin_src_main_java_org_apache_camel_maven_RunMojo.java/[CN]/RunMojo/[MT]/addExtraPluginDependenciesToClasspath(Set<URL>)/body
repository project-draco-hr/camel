{
  if (extraPluginDependencyArtifactId == null && extendedPluginDependencyArtifactId == null) {
    return;
  }
  try {
    Set<Artifact> artifacts=new HashSet<Artifact>(this.pluginDependencies);
    for (    Artifact artifact : artifacts) {
      if (artifact.getArtifactId().equals(extraPluginDependencyArtifactId) || artifact.getArtifactId().equals(extendedPluginDependencyArtifactId)) {
        getLog().debug("Adding extra plugin dependency artifact: " + artifact.getArtifactId() + " to classpath");
        path.add(artifact.getFile().toURI().toURL());
        Set<Artifact> deps=resolveExecutableDependencies(artifact,true);
        if (deps != null) {
          for (          Artifact dep : deps) {
            if ("test".equals(dep.getScope())) {
              getLog().debug("Skipping test scoped -> " + dep.getGroupId() + "/"+ dep.getArtifactId()+ "/"+ dep.getVersion());
              continue;
            }
            if ("provided".equals(dep.getScope())) {
              getLog().debug("Skipping provided scoped -> " + dep.getGroupId() + "/"+ dep.getArtifactId()+ "/"+ dep.getVersion());
              continue;
            }
            getLog().debug("Adding extra plugin dependency artifact: " + dep.getArtifactId() + " to classpath");
            path.add(dep.getFile().toURI().toURL());
          }
        }
      }
    }
  }
 catch (  MalformedURLException e) {
    throw new MojoExecutionException("Error during setting up classpath",e);
  }
}
