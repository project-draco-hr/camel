{
  MockEndpoint mock=getMockEndpoint("mock:result");
  mock.expectedBodiesReceived("G","A","B","E","H","C","D","F");
  template.sendBodyAndHeader("jms:queue:JmsBatchResequencerJMSPriorityTest.foo?preserveMessageQos=true","A","JMSPriority",6);
  template.sendBodyAndHeader("jms:queue:JmsBatchResequencerJMSPriorityTest.foo?preserveMessageQos=true","B","JMSPriority",6);
  template.sendBodyAndHeader("jms:queue:JmsBatchResequencerJMSPriorityTest.foo?preserveMessageQos=true","C","JMSPriority",4);
  template.sendBodyAndHeader("jms:queue:JmsBatchResequencerJMSPriorityTest.foo?preserveMessageQos=true","D","JMSPriority",4);
  template.sendBodyAndHeader("jms:queue:JmsBatchResequencerJMSPriorityTest.foo?preserveMessageQos=true","E","JMSPriority",6);
  template.sendBodyAndHeader("jms:queue:JmsBatchResequencerJMSPriorityTest.foo?preserveMessageQos=true","F","JMSPriority",4);
  template.sendBodyAndHeader("jms:queue:JmsBatchResequencerJMSPriorityTest.foo?preserveMessageQos=true","G","JMSPriority",8);
  template.sendBodyAndHeader("jms:queue:JmsBatchResequencerJMSPriorityTest.foo?preserveMessageQos=true","H","JMSPriority",6);
  assertMockEndpointsSatisfied();
}
