{
  HttpContext context=conn.getContext();
  HttpVersion ver=request.getRequestLine().getHttpVersion();
  if (!ver.lessEquals(HttpVersion.HTTP_1_1)) {
    ver=HttpVersion.HTTP_1_1;
  }
  context.setAttribute(HttpExecutionContext.HTTP_REQUEST,request);
  context.setAttribute(HttpExecutionContext.HTTP_CONNECTION,conn);
  try {
    this.httpProcessor.process(request,context);
    HttpRequestHandler handler=null;
    if (this.handlerResolver != null) {
      String requestURI=request.getRequestLine().getUri();
      handler=this.handlerResolver.lookup(requestURI);
    }
    if (handler != null) {
      HttpResponse response=this.responseFactory.newHttpResponse(ver,HttpStatus.SC_OK,conn.getContext());
      HttpParamsLinker.link(response,this.params);
      context.setAttribute(HttpExecutionContext.HTTP_RESPONSE,response);
      handler.handle(request,response,context);
      sendResponse(conn,response);
    }
 else {
      asyncProcessRequest(request,context,new AsyncHandler(){
        public void sendResponse(        HttpResponse response) throws IOException, HttpException {
          try {
            AsyncBufferingHttpServiceHandler.this.sendResponse(conn,response);
          }
 catch (          HttpException ex) {
            response=AsyncBufferingHttpServiceHandler.this.responseFactory.newHttpResponse(HttpVersion.HTTP_1_0,HttpStatus.SC_INTERNAL_SERVER_ERROR,conn.getContext());
            HttpParamsLinker.link(response,AsyncBufferingHttpServiceHandler.this.params);
            AsyncBufferingHttpServiceHandler.this.handleException(ex,response);
            AsyncBufferingHttpServiceHandler.this.sendResponse(conn,response);
          }
        }
      }
);
    }
  }
 catch (  HttpException ex) {
    HttpResponse response=this.responseFactory.newHttpResponse(HttpVersion.HTTP_1_0,HttpStatus.SC_INTERNAL_SERVER_ERROR,context);
    HttpParamsLinker.link(response,this.params);
    handleException(ex,response);
    sendResponse(conn,response);
  }
}
