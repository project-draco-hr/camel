{
  getMockEndpoint("mock:result").expectedMessageCount(files);
  getMockEndpoint("mock:result").assertNoDuplicates(body());
  ExecutorService executor=Executors.newFixedThreadPool(poolSize);
  Map<Integer,Future<SendEmail>> responses=new HashMap<Integer,Future<SendEmail>>();
  for (int i=0; i < files; i++) {
    final int index=i;
    Future<SendEmail> out=executor.submit(new Callable<SendEmail>(){
      public SendEmail call() throws Exception {
        return template.requestBody("direct:start",new SendEmail("user" + index + "@somewhere.org"),SendEmail.class);
      }
    }
);
    responses.put(index,out);
  }
  assertMockEndpointsSatisfied(30,TimeUnit.SECONDS);
  assertEquals(files,responses.size());
  for (  Future<SendEmail> future : responses.values()) {
    SendEmail sendEmail=future.get();
    assertNotNull(sendEmail);
    log.info("Persisted the SendEmail entity with the id {} and the address {}",sendEmail.getId(),sendEmail.getAddress());
  }
  assertEntityInDB(files);
  executor.shutdownNow();
}
