{
  MutableBeanMetadata endpointConfig=createBeanMetadata(element,context,CxfBlueprintEndpoint.class);
  NamedNodeMap atts=element.getAttributes();
  String bus=null;
  String address=null;
  for (int i=0; i < atts.getLength(); i++) {
    Attr node=(Attr)atts.item(i);
    String val=node.getValue();
    String pre=node.getPrefix();
    String name=node.getLocalName();
    if ("bus".equals(name)) {
      bus=val;
    }
 else     if ("address".equals(name)) {
      address=val;
    }
 else     if (isAttribute(pre,name)) {
      if ("endpointName".equals(name) || "serviceName".equals(name)) {
        QName q=parseQName(element,val);
        endpointConfig.addProperty(name,createValue(context,q));
      }
 else       if ("depends-on".equals(name)) {
        endpointConfig.addDependsOn(val);
      }
 else       if (!"name".equals(name)) {
        endpointConfig.addProperty(name,AbstractBPBeanDefinitionParser.createValue(context,val));
      }
    }
  }
  Element elem=DOMUtils.getFirstElement(element);
  while (elem != null) {
    String name=elem.getLocalName();
    if ("properties".equals(name)) {
      Metadata map=parseMapData(context,endpointConfig,elem);
      endpointConfig.addProperty(name,map);
    }
 else     if ("binding".equals(name)) {
      setFirstChildAsProperty(element,context,endpointConfig,"bindingConfig");
    }
 else     if ("inInterceptors".equals(name) || "inFaultInterceptors".equals(name) || "outInterceptors".equals(name)|| "outFaultInterceptors".equals(name)|| "features".equals(name)|| "schemaLocations".equals(name)|| "handlers".equals(name)) {
      Metadata list=parseListData(context,endpointConfig,elem);
      endpointConfig.addProperty(name,list);
    }
 else {
      setFirstChildAsProperty(element,context,endpointConfig,name);
    }
    elem=DOMUtils.getNextElement(elem);
  }
  if (StringUtils.isEmpty(bus)) {
    bus="cxf";
  }
  endpointConfig.addProperty("bus",getBusRef(context,bus));
  endpointConfig.setDestroyMethod("destroy");
  endpointConfig.addArgument(AbstractBPBeanDefinitionParser.createValue(context,address),String.class.getName(),0);
  endpointConfig.addArgument(createRef(context,"blueprintBundleContext"),BundleContext.class.getName(),1);
  return endpointConfig;
}
