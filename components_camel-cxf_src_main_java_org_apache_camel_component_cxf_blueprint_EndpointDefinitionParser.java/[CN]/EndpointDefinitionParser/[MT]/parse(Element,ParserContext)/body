{
  MutableBeanMetadata endpointConfig=context.createMetadata(MutableBeanMetadata.class);
  endpointConfig.setRuntimeClass(CxfBlueprintEndpoint.class);
  endpointConfig.addProperty("blueprintContainer",createRef(context,"blueprintContainer"));
  endpointConfig.addProperty("bundleContext",createRef(context,"blueprintBundleContext"));
  if (!StringUtils.isEmpty(getIdOrName(element))) {
    endpointConfig.setId(getIdOrName(element));
  }
 else {
    endpointConfig.setId("camel.cxf.endpoint." + context.generateId());
  }
  boolean isAbstract=false;
  boolean publish=true;
  NamedNodeMap atts=element.getAttributes();
  String bus=null;
  Metadata impl=null;
  String address=null;
  for (int i=0; i < atts.getLength(); i++) {
    Attr node=(Attr)atts.item(i);
    String val=node.getValue();
    String pre=node.getPrefix();
    String name=node.getLocalName();
    if ("createdFromAPI".equals(name) || "abstract".equals(name)) {
      endpointConfig.setScope(MutableBeanMetadata.SCOPE_PROTOTYPE);
      isAbstract=true;
    }
 else     if ("publish".equals(name)) {
      publish=Boolean.parseBoolean(val);
    }
 else     if ("bus".equals(name)) {
      bus=val;
    }
 else     if ("address".equals(name)) {
      address=val;
    }
 else     if (isAttribute(pre,name)) {
      if ("endpointName".equals(name) || "serviceName".equals(name)) {
        QName q=parseQName(element,val);
        endpointConfig.addProperty(name,createValue(context,q));
      }
 else       if ("depends-on".equals(name)) {
        endpointConfig.addDependsOn(val);
      }
 else       if ("implementor".equals(name)) {
        if (val.startsWith("#")) {
          impl=createRef(context,val.substring(1));
        }
 else {
          impl=createObjectOfClass(context,val);
        }
      }
 else       if (!"name".equals(name)) {
        endpointConfig.addProperty(name,AbstractBPBeanDefinitionParser.createValue(context,val));
      }
    }
  }
  Element elem=DOMUtils.getFirstElement(element);
  while (elem != null) {
    String name=elem.getLocalName();
    if ("properties".equals(name)) {
      Metadata map=parseMapData(context,endpointConfig,elem);
      endpointConfig.addProperty(name,map);
    }
 else     if ("binding".equals(name)) {
      setFirstChildAsProperty(element,context,endpointConfig,"bindingConfig");
    }
 else     if ("inInterceptors".equals(name) || "inFaultInterceptors".equals(name) || "outInterceptors".equals(name)|| "outFaultInterceptors".equals(name)|| "features".equals(name)|| "schemaLocations".equals(name)|| "handlers".equals(name)) {
      Metadata list=parseListData(context,endpointConfig,elem);
      endpointConfig.addProperty(name,list);
    }
 else {
      setFirstChildAsProperty(element,context,endpointConfig,name);
    }
    elem=DOMUtils.getNextElement(elem);
  }
  if (StringUtils.isEmpty(bus)) {
    bus="cxf";
  }
  endpointConfig.addProperty("bus",getBusRef(context,bus));
  endpointConfig.setDestroyMethod("destroy");
  endpointConfig.addArgument(AbstractBPBeanDefinitionParser.createValue(context,address),String.class.getName(),0);
  MutablePassThroughMetadata regProcessorFactory=context.createMetadata(MutablePassThroughMetadata.class);
  regProcessorFactory.setId(context.generateId());
  regProcessorFactory.setObject(new PassThroughCallable<Object>(new CxfCamelContextFinder(endpointConfig.getId(),context)));
  MutableBeanMetadata regProcessor=context.createMetadata(MutableBeanMetadata.class);
  regProcessor.setId(context.generateId());
  regProcessor.setRuntimeClass(CxfCamelContextFinder.class);
  regProcessor.setFactoryComponent(regProcessorFactory);
  regProcessor.setFactoryMethod("call");
  regProcessor.setProcessor(true);
  regProcessor.addProperty("blueprintContainer",createRef(context,"blueprintContainer"));
  context.getComponentDefinitionRegistry().registerComponentDefinition(regProcessor);
  return endpointConfig;
}
