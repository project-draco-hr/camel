{
  BeanProcessor answer;
  Class<?> clazz=bean != null ? bean.getClass() : null;
  BeanHolder beanHolder;
  if (ObjectHelper.isNotEmpty(ref)) {
    if (cache != null && cache) {
      beanHolder=new RegistryBean(routeContext.getCamelContext(),ref).createCacheHolder();
    }
 else {
      beanHolder=new RegistryBean(routeContext.getCamelContext(),ref);
    }
    bean=beanHolder.getBean();
    answer=new BeanProcessor(beanHolder);
  }
 else {
    if (bean == null) {
      if (beanType == null && beanClass == null) {
        throw new IllegalArgumentException("bean, ref or beanType must be provided");
      }
      if (beanType != null) {
        try {
          clazz=routeContext.getCamelContext().getClassResolver().resolveMandatoryClass(beanType);
        }
 catch (        ClassNotFoundException e) {
          throw ObjectHelper.wrapRuntimeCamelException(e);
        }
      }
 else {
        clazz=beanClass;
      }
      if (ObjectHelper.hasDefaultPublicNoArgConstructor(clazz)) {
        bean=CamelContextHelper.newInstance(routeContext.getCamelContext(),clazz);
        ObjectHelper.notNull(bean,"bean",this);
      }
    }
    if (bean instanceof String) {
      throw new IllegalArgumentException("The bean instance is a java.lang.String type: " + bean + ". We suppose you want to refer to a bean instance by its id instead. Please use beanRef.");
    }
    beanHolder=bean != null ? new ConstantBeanHolder(bean,routeContext.getCamelContext()) : new ConstantTypeBeanHolder(clazz,routeContext.getCamelContext());
    answer=new BeanProcessor(beanHolder);
  }
  if (method != null) {
    answer.setMethod(method);
    BeanInfo beanInfo=beanHolder.getBeanInfo();
    if (bean != null) {
      if (!beanInfo.hasMethod(method)) {
        throw ObjectHelper.wrapRuntimeCamelException(new MethodNotFoundException(null,bean,method));
      }
    }
 else     if (clazz != null) {
      if (!beanInfo.hasStaticMethod(method)) {
        throw ObjectHelper.wrapRuntimeCamelException(new MethodNotFoundException(null,clazz,method,true));
      }
    }
  }
  return answer;
}
