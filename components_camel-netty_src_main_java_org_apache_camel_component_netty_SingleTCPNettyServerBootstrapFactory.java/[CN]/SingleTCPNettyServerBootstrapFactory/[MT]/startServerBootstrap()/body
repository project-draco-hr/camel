{
  if (camelContext != null) {
    bossExecutor=camelContext.getExecutorServiceManager().newCachedThreadPool(this,"NettyTCPBoss");
    workerExecutor=camelContext.getExecutorServiceManager().newCachedThreadPool(this,"NettyTCPWorker");
    if (configuration.getWorkerCount() <= 0) {
      channelFactory=new NioServerSocketChannelFactory(bossExecutor,workerExecutor);
    }
 else {
      channelFactory=new NioServerSocketChannelFactory(bossExecutor,workerExecutor,configuration.getWorkerCount());
    }
  }
 else {
    if (configuration.getWorkerCount() <= 0) {
      channelFactory=new NioServerSocketChannelFactory();
    }
 else {
      channelFactory=new NioServerSocketChannelFactory(Executors.newCachedThreadPool(),Executors.newCachedThreadPool(),configuration.getWorkerCount());
    }
  }
  serverBootstrap=new ServerBootstrap(channelFactory);
  serverBootstrap.setOption("child.keepAlive",configuration.isKeepAlive());
  serverBootstrap.setOption("child.tcpNoDelay",configuration.isTcpNoDelay());
  serverBootstrap.setOption("reuseAddress",configuration.isReuseAddress());
  serverBootstrap.setOption("child.reuseAddress",configuration.isReuseAddress());
  serverBootstrap.setOption("child.connectTimeoutMillis",configuration.getConnectTimeout());
  if (configuration.getBacklog() > 0) {
    serverBootstrap.setOption("backlog",configuration.getBacklog());
  }
  if (configuration.getOptions() != null) {
    for (    Map.Entry<String,Object> entry : configuration.getOptions().entrySet()) {
      serverBootstrap.setOption(entry.getKey(),entry.getValue());
    }
  }
  LOG.debug("Created ServerBootstrap {} with options: {}",serverBootstrap,serverBootstrap.getOptions());
  serverBootstrap.setPipelineFactory(pipelineFactory);
  LOG.info("ServerBootstrap binding to {}:{}",configuration.getHost(),configuration.getPort());
  channel=serverBootstrap.bind(new InetSocketAddress(configuration.getHost(),configuration.getPort()));
  allChannels.add(channel);
}
