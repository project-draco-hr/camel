{
  Processor processor=this.createChildProcessor(routeContext,true);
  Expression expression=getExpression().createExpression(routeContext);
  String routeId=routeContext.getRoute().idOrCreate(routeContext.getCamelContext().getNodeIdFactory());
  CamelInternalProcessor internal=new CamelInternalProcessor(processor);
  internal.addAdvice(new CamelInternalProcessor.UnitOfWorkProcessorAdvice(routeId));
  ObjectHelper.notNull(config,"config",this);
  ObjectHelper.notNull(expression,"expression",this);
  ExpressionResultComparator comparator=config.getComparator();
  comparator.setExpression(expression);
  StreamResequencer resequencer=new StreamResequencer(routeContext.getCamelContext(),internal,comparator);
  resequencer.setTimeout(config.getTimeout());
  resequencer.setCapacity(config.getCapacity());
  resequencer.setRejectOld(config.getRejectOld());
  if (config.getIgnoreInvalidExchanges() != null) {
    resequencer.setIgnoreInvalidExchanges(config.getIgnoreInvalidExchanges());
  }
  return resequencer;
}
