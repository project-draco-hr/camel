{
  final JavaClassSource javaClass=Roaster.create(JavaClassSource.class);
  int pos=model.getJavaType().lastIndexOf(".");
  String name=model.getJavaType().substring(pos + 1);
  name=name.replace("Component","ComponentConfiguration");
  javaClass.setPackage(packageName).setName(name);
  String doc="Generated by camel-package-maven-plugin - do not edit this file!";
  if (!Strings.isBlank(model.getDescription())) {
    doc=model.getDescription() + "\n\n" + doc;
  }
  javaClass.getJavaDoc().setFullText(doc);
  String prefix="camel.component." + model.getScheme();
  javaClass.addAnnotation("org.springframework.boot.context.properties.ConfigurationProperties").setStringValue("prefix",prefix);
  for (  ComponentOptionModel option : model.getComponentOptions()) {
    String type=option.getJavaType();
    type=type.replaceAll("\\<\\?\\>","");
    if ("boolean".equals(type)) {
      type="java.lang.Boolean";
    }
    PropertySource<JavaClassSource> prop=javaClass.addProperty(type,option.getName());
    if ("true".equals(option.getDeprecated())) {
      prop.getField().addAnnotation(Deprecated.class);
    }
    if (!Strings.isBlank(option.getDescription())) {
      prop.getField().getJavaDoc().setFullText(option.getDescription());
    }
    if (!Strings.isBlank(option.getDefaultValue())) {
      if ("java.lang.String".equals(option.getJavaType())) {
        prop.getField().setStringInitializer(option.getDefaultValue());
      }
 else       if ("integer".equals(option.getType()) || "boolean".equals(option.getType())) {
        prop.getField().setLiteralInitializer(option.getDefaultValue());
      }
    }
  }
  sortImports(javaClass);
  String fileName=packageName.replaceAll("\\.","\\/") + "/" + name+ ".java";
  File target=new File(srcDir,fileName);
  try {
    InputStream is=getClass().getClassLoader().getResourceAsStream("license-header-java.txt");
    String header=loadText(is);
    String code=sourceToString(javaClass);
    code=header + code;
    getLog().debug("Source code generated:\n" + code);
    if (target.exists()) {
      String existing=FileUtils.readFileToString(target);
      if (!code.equals(existing)) {
        FileUtils.write(target,code,false);
        getLog().info("Updated existing file: " + target);
      }
 else {
        getLog().debug("No changes to existing file: " + target);
      }
    }
 else {
      FileUtils.write(target,code);
      getLog().info("Created file: " + target);
    }
  }
 catch (  Exception e) {
    throw new MojoFailureException("IOError with file " + target,e);
  }
}
