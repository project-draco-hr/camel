{
  StringBuilder sb=new StringBuilder();
  sb.append("org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\n");
  int pos=model.getJavaType().lastIndexOf(".");
  String name=model.getJavaType().substring(pos + 1);
  name=name.replace("Language","LanguageAutoConfiguration");
  String lineToAdd=packageName + "." + name+ "\n";
  sb.append(lineToAdd);
  String fileName="META-INF/spring.factories";
  File target=new File(resourcesDir,fileName);
  if (target.exists()) {
    try {
      boolean found=false;
      List<String> lines=FileUtils.readLines(target);
      for (      String line : lines) {
        if (line.contains(name)) {
          found=true;
          break;
        }
      }
      if (found) {
        getLog().debug("No changes to existing file: " + target);
      }
 else {
        int lastLine=0;
        for (int i=lines.size() - 1; i >= 0; i--) {
          String line=lines.get(i);
          if (!line.trim().isEmpty()) {
            line=line + ",\\";
            lines.set(i,line);
            lastLine=i;
            break;
          }
        }
        lines.add(lastLine + 1,lineToAdd);
        StringBuilder code=new StringBuilder();
        for (        String line : lines) {
          code.append(line).append("\n");
        }
        FileUtils.write(target,code.toString(),false);
        getLog().info("Updated existing file: " + target);
      }
    }
 catch (    Exception e) {
      throw new MojoFailureException("IOError with file " + target,e);
    }
  }
 else {
    try {
      InputStream is=getClass().getClassLoader().getResourceAsStream("license-header.txt");
      String header=loadText(is);
      String code=sb.toString();
      code=header + "\n" + code;
      getLog().debug("Source code generated:\n" + code);
      FileUtils.write(target,code);
      getLog().info("Created file: " + target);
    }
 catch (    Exception e) {
      throw new MojoFailureException("IOError with file " + target,e);
    }
  }
}
