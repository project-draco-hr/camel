{
  final JavaClassSource javaClass=Roaster.create(JavaClassSource.class);
  int pos=model.getJavaType().lastIndexOf(".");
  String name=model.getJavaType().substring(pos + 1);
  name=name.replace("Language","LanguageConfiguration");
  javaClass.setPackage(packageName).setName(name);
  String doc="Generated by camel-package-maven-plugin - do not edit this file!";
  if (!Strings.isBlank(model.getDescription())) {
    doc=model.getDescription() + "\n\n" + doc;
  }
  javaClass.getJavaDoc().setFullText(doc);
  String prefix="camel.language." + (overrideLanguageName != null ? overrideLanguageName : model.getName());
  prefix=prefix.toLowerCase(Locale.US);
  javaClass.addAnnotation("org.springframework.boot.context.properties.ConfigurationProperties").setStringValue("prefix",prefix);
  for (  LanguageOptionModel option : model.getLanguageOptions()) {
    if ("id".equals(option.getName()) || "expression".equals(option.getName()) || "resultType".equals(option.getName())) {
      continue;
    }
    if ("bean".equals(model.getName())) {
      if ("bean".equals(option.getName()) || "ref".equals(option.getName()) || "method".equals(option.getName())|| "beanType".equals(option.getName())) {
        continue;
      }
    }
 else     if ("tokenize".equals(model.getName())) {
      if ("token".equals(option.getName()) || "endToken".equals(option.getName()) || "inheritNamespaceTagName".equals(option.getName())|| "headerName".equals(option.getName())|| "regex".equals(option.getName())|| "xml".equals(option.getName())|| "includeTokens".equals(option.getName())|| "group".equals(option.getName())|| "skipFirst".equals(option.getName())) {
        continue;
      }
    }
 else     if ("xtokenize".equals(model.getName())) {
      if ("headerName".equals(option.getName()) || "group".equals(option.getName())) {
        continue;
      }
    }
 else     if ("xpath".equals(model.getName())) {
      if ("headerName".equals(option.getName())) {
        continue;
      }
    }
 else     if ("xquery".equals(model.getName())) {
      if ("headerName".equals(option.getName())) {
        continue;
      }
    }
    String type=option.getJavaType();
    type=type.replaceAll("\\<\\?\\>","");
    if ("boolean".equals(type)) {
      type="java.lang.Boolean";
    }
 else     if ("int".equals(type) || "integer".equals(type)) {
      type="java.lang.Integer";
    }
 else     if ("byte".equals(type)) {
      type="java.lang.Byte";
    }
 else     if ("short".equals(type)) {
      type="java.lang.Short";
    }
 else     if ("double".equals(type)) {
      type="java.lang.Double";
    }
 else     if ("float".equals(type)) {
      type="java.lang.Float";
    }
    PropertySource<JavaClassSource> prop=javaClass.addProperty(type,option.getName());
    if ("true".equals(option.getDeprecated())) {
      prop.getField().addAnnotation(Deprecated.class);
      prop.getAccessor().addAnnotation(Deprecated.class);
      prop.getMutator().addAnnotation(Deprecated.class);
      prop.getAccessor().addAnnotation(DeprecatedConfigurationProperty.class);
    }
    if (!Strings.isBlank(option.getDescription())) {
      prop.getField().getJavaDoc().setFullText(option.getDescription());
    }
    if (!Strings.isBlank(option.getDefaultValue())) {
      if ("java.lang.String".equals(option.getType())) {
        prop.getField().setStringInitializer(option.getDefaultValue());
      }
 else       if ("integer".equals(option.getType()) || "boolean".equals(option.getType())) {
        prop.getField().setLiteralInitializer(option.getDefaultValue());
      }
 else       if (!Strings.isBlank(option.getEnumValues())) {
        String enumShortName=type.substring(type.lastIndexOf(".") + 1);
        prop.getField().setLiteralInitializer(enumShortName + "." + option.getDefaultValue());
        javaClass.addImport(model.getJavaType());
      }
    }
  }
  sortImports(javaClass);
  String fileName=packageName.replaceAll("\\.","\\/") + "/" + name+ ".java";
  writeSourceIfChanged(javaClass,fileName);
}
