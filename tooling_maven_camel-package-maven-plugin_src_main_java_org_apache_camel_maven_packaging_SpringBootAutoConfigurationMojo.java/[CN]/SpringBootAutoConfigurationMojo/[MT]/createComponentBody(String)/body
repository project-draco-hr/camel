{
  StringBuilder sb=new StringBuilder();
  sb.append(shortJavaType).append(" component = new ").append(shortJavaType).append("();").append("\n");
  sb.append("component.setCamelContext(camelContext);\n");
  sb.append("\n");
  sb.append("Map<String, Object> parameters = new HashMap<>();\n");
  sb.append("IntrospectionSupport.getProperties(configuration, parameters, null, false);\n");
  sb.append("\n");
  sb.append("for (Map.Entry<String, Object> entry : parameters.entrySet()) {\n");
  sb.append("    Object value = entry.getValue();\n");
  sb.append("    Class<?> paramClass = value.getClass();\n");
  sb.append("    if (paramClass.getName().endsWith(\"NestedConfiguration\")) {\n");
  sb.append("        Class nestedClass = null;\n");
  sb.append("        try {\n");
  sb.append("            nestedClass = (Class) paramClass.getDeclaredField(\"CAMEL_NESTED_CLASS\").get(null);\n");
  sb.append("            HashMap<String, Object> nestedParameters = new HashMap<>();\n");
  sb.append("            IntrospectionSupport.getProperties(value, nestedParameters, null, false);\n");
  sb.append("            Object nestedProperty = nestedClass.newInstance();\n");
  sb.append("            IntrospectionSupport.setProperties(camelContext, camelContext.getTypeConverter(), nestedProperty, nestedParameters);\n");
  sb.append("            entry.setValue(nestedProperty);\n");
  sb.append("        } catch (NoSuchFieldException e) {\n");
  sb.append("            // ignore, class must not be a nested configuration class after all\n");
  sb.append("        }\n");
  sb.append("    }\n");
  sb.append("}\n");
  sb.append("IntrospectionSupport.setProperties(camelContext, camelContext.getTypeConverter(), component, parameters);\n");
  sb.append("\n");
  sb.append("return component;");
  return sb.toString();
}
