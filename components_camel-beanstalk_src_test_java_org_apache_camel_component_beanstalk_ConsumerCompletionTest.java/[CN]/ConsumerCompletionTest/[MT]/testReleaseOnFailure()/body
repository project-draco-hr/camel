{
  shouldIdie=true;
  final long jobId=111;
  final long priority=BeanstalkComponent.DEFAULT_PRIORITY;
  final int delay=BeanstalkComponent.DEFAULT_DELAY;
  final byte[] payload=Helper.stringToBytes(testMessage);
  final Job jobMock=mock(Job.class);
  when(jobMock.getJobId()).thenReturn(jobId);
  when(jobMock.getData()).thenReturn(payload);
  when(client.reserve(anyInt())).thenReturn(jobMock).thenReturn(null);
  when(client.statsJob(anyInt())).thenReturn(null);
  when(client.release(anyInt(),anyLong(),anyInt())).thenReturn(true);
  NotifyBuilder notify=new NotifyBuilder(context).whenFailed(1).create();
  MockEndpoint result=getMockEndpoint("mock:result");
  result.expectedMessageCount(0);
  context.startRoute("foo");
  assertTrue(notify.matches(5,TimeUnit.SECONDS));
  verify(client,atLeastOnce()).reserve(anyInt());
  verify(client,atLeastOnce()).statsJob(anyInt());
  verify(client).release(jobId,priority,delay);
}
