{
  if (!canTest()) {
    return;
  }
  final long jobId=111;
  final byte[] payload=Helper.stringToBytes(testMessage);
  final Job jobMock=mock(Job.class);
  when(jobMock.getJobId()).thenReturn(jobId);
  when(jobMock.getData()).thenReturn(payload);
  when(client.reserve(anyInt())).thenReturn(jobMock).thenReturn(null);
  MockEndpoint result=getMockEndpoint("mock:result");
  result.expectedMinimumMessageCount(1);
  result.expectedBodiesReceived(testMessage);
  result.expectedHeaderReceived(Headers.JOB_ID,jobId);
  result.message(0).header(Headers.JOB_ID).isEqualTo(jobId);
  result.assertIsSatisfied(2000);
  verify(client,atLeastOnce()).reserve(anyInt());
  verify(client).delete(jobId);
}
