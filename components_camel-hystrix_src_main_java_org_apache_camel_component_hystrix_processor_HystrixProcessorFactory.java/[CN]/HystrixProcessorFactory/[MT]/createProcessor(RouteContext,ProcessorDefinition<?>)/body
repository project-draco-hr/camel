{
  if (definition instanceof HystrixDefinition) {
    HystrixDefinition cb=(HystrixDefinition)definition;
    Processor processor=cb.createChildProcessor(routeContext,true);
    Processor fallback=null;
    if (cb.getOnFallback() != null) {
      fallback=cb.getOnFallback().createProcessor(routeContext);
    }
    HystrixConfigurationDefinition config=cb.getHystrixConfiguration();
    HystrixConfigurationDefinition configRef=null;
    if (cb.getHystrixConfigurationRef() != null) {
      configRef=CamelContextHelper.mandatoryLookup(routeContext.getCamelContext(),cb.getHystrixConfigurationRef(),HystrixConfigurationDefinition.class);
    }
    String groupKey=null;
    String threadPoolKey=null;
    if (configRef != null) {
      groupKey=configRef.getGroupKey();
      threadPoolKey=configRef.getThreadPoolKey();
    }
    if (config != null && config.getGroupKey() != null) {
      groupKey=config.getGroupKey();
      threadPoolKey=config.getThreadPoolKey();
    }
    if (groupKey == null) {
      groupKey=HystrixConfigurationDefinition.DEFAULT_GROUP_KEY;
    }
    if (threadPoolKey == null) {
      threadPoolKey=groupKey;
    }
    String id=cb.idOrCreate(routeContext.getCamelContext().getNodeIdFactory());
    HystrixCommandKey hcCommandKey=HystrixCommandKey.Factory.asKey(id);
    HystrixCommandGroupKey hcGroupKey=HystrixCommandGroupKey.Factory.asKey(groupKey);
    HystrixCommand.Setter setter=HystrixCommand.Setter.withGroupKey(hcGroupKey).andCommandKey(hcCommandKey).andThreadPoolKey(HystrixThreadPoolKey.Factory.asKey(threadPoolKey));
    HystrixCommandProperties.Setter command=HystrixCommandProperties.Setter();
    setter.andCommandPropertiesDefaults(command);
    HystrixThreadPoolProperties.Setter threadPool=HystrixThreadPoolProperties.Setter();
    setter.andThreadPoolPropertiesDefaults(threadPool);
    if (configRef != null) {
      configureHystrix(command,threadPool,configRef);
    }
    if (config != null) {
      configureHystrix(command,threadPool,config);
    }
    return new HystrixProcessor(hcCommandKey,hcGroupKey,setter,processor,fallback);
  }
 else {
    return null;
  }
}
