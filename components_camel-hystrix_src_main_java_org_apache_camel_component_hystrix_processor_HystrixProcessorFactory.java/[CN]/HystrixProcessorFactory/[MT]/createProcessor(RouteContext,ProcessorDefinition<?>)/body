{
  if (definition instanceof HystrixDefinition) {
    HystrixDefinition cb=(HystrixDefinition)definition;
    Processor processor=cb.createChildProcessor(routeContext,true);
    Processor fallback=null;
    if (cb.getOnFallback() != null) {
      fallback=cb.getOnFallback().createProcessor(routeContext);
    }
    HystrixConfigurationDefinition config=cb.getHystrixConfiguration();
    HystrixConfigurationDefinition configRef=null;
    if (cb.getHystrixConfigurationRef() != null) {
      configRef=CamelContextHelper.mandatoryLookup(routeContext.getCamelContext(),cb.getHystrixConfigurationRef(),HystrixConfigurationDefinition.class);
    }
    String id=cb.idOrCreate(routeContext.getCamelContext().getNodeIdFactory());
    String groupKey=null;
    String threadPoolKey=null;
    if (configRef != null) {
      groupKey=configRef.getGroupKey();
      threadPoolKey=configRef.getThreadPoolKey();
    }
    if (config != null && config.getGroupKey() != null) {
      groupKey=config.getGroupKey();
      threadPoolKey=config.getThreadPoolKey();
    }
    if (groupKey == null) {
      groupKey=HystrixConfigurationDefinition.DEFAULT_GROUP_KEY;
    }
    if (threadPoolKey == null) {
      threadPoolKey=id + "-threadpool";
    }
    HystrixCommandKey hcCommandKey=HystrixCommandKey.Factory.asKey(id);
    HystrixCommandKey hcFallbackCommandKey=HystrixCommandKey.Factory.asKey(id + "-fallback");
    HystrixCommandGroupKey hcGroupKey=HystrixCommandGroupKey.Factory.asKey(groupKey);
    HystrixThreadPoolKey tpKey=HystrixThreadPoolKey.Factory.asKey(threadPoolKey);
    HystrixCommand.Setter setter=HystrixCommand.Setter.withGroupKey(hcGroupKey).andCommandKey(hcCommandKey).andThreadPoolKey(tpKey);
    HystrixCommandProperties.Setter commandSetter=HystrixCommandProperties.Setter();
    setter.andCommandPropertiesDefaults(commandSetter);
    HystrixThreadPoolProperties.Setter threadPoolSetter=HystrixThreadPoolProperties.Setter();
    setter.andThreadPoolPropertiesDefaults(threadPoolSetter);
    if (configRef != null) {
      configureHystrix(commandSetter,threadPoolSetter,configRef);
    }
    if (config != null) {
      configureHystrix(commandSetter,threadPoolSetter,config);
    }
    HystrixCommand.Setter fallbackSetter=null;
    boolean fallbackViaNetwork=cb.getOnFallback() != null && cb.getOnFallback().isFallbackViaNetwork();
    if (fallbackViaNetwork) {
      HystrixThreadPoolKey tpFallbackKey=HystrixThreadPoolKey.Factory.asKey(threadPoolKey + "-fallback");
      fallbackSetter=HystrixCommand.Setter.withGroupKey(hcGroupKey).andCommandKey(hcFallbackCommandKey).andThreadPoolKey(tpFallbackKey);
      HystrixCommandProperties.Setter commandFallbackSetter=HystrixCommandProperties.Setter();
      fallbackSetter.andCommandPropertiesDefaults(commandFallbackSetter);
      HystrixThreadPoolProperties.Setter fallbackThreadPoolSetter=HystrixThreadPoolProperties.Setter();
      fallbackSetter.andThreadPoolPropertiesDefaults(fallbackThreadPoolSetter);
      if (configRef != null) {
        configureHystrix(commandFallbackSetter,fallbackThreadPoolSetter,configRef);
      }
      if (config != null) {
        configureHystrix(commandFallbackSetter,fallbackThreadPoolSetter,config);
      }
    }
    return new HystrixProcessor(hcGroupKey,hcCommandKey,hcFallbackCommandKey,setter,fallbackSetter,processor,fallback,fallbackViaNetwork);
  }
 else {
    return null;
  }
}
