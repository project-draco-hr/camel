{
  Message inMessage=exchange.getIn();
  JAXRSClientFactoryBean cfb=clientFactoryBeanCache.get(CxfEndpointUtils.getEffectiveAddress(exchange,((CxfRsEndpoint)getEndpoint()).getAddress()));
  Bus bus=((CxfRsEndpoint)getEndpoint()).getBus();
  if (bus != null) {
    cfb.setBus(bus);
  }
  WebClient client=cfb.createWebClient();
  String httpMethod=inMessage.getHeader(Exchange.HTTP_METHOD,String.class);
  Class<?> responseClass=inMessage.getHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS,Class.class);
  Type genericType=inMessage.getHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_GENERIC_TYPE,Type.class);
  Object[] pathValues=inMessage.getHeader(CxfConstants.CAMEL_CXF_RS_VAR_VALUES,Object[].class);
  String path=inMessage.getHeader(Exchange.HTTP_PATH,String.class);
  if (LOG.isTraceEnabled()) {
    LOG.trace("HTTP method = {}",httpMethod);
    LOG.trace("path = {}",path);
    LOG.trace("responseClass = {}",responseClass);
  }
  if (path != null) {
    if (pathValues != null && pathValues.length > 0) {
      client.path(path,pathValues);
    }
 else {
      client.path(path);
    }
  }
  CxfRsEndpoint cxfRsEndpoint=(CxfRsEndpoint)getEndpoint();
  CxfRsBinding binding=cxfRsEndpoint.getBinding();
  Object body=null;
  if (!"GET".equals(httpMethod)) {
    body=binding.bindCamelMessageBodyToRequestBody(inMessage,exchange);
    if (LOG.isTraceEnabled()) {
      LOG.trace("Request body = " + body);
    }
  }
  setupClientQueryAndHeaders(client,exchange);
  Object response=null;
  if (responseClass == null || Response.class.equals(responseClass)) {
    response=client.invoke(httpMethod,body);
  }
 else {
    if (Collection.class.isAssignableFrom(responseClass)) {
      if (genericType instanceof ParameterizedType) {
        Type[] actualTypeArguments=((ParameterizedType)genericType).getActualTypeArguments();
        response=client.invokeAndGetCollection(httpMethod,body,(Class<?>)actualTypeArguments[0]);
      }
 else {
        throw new CamelExchangeException("Header " + CxfConstants.CAMEL_CXF_RS_RESPONSE_GENERIC_TYPE + " not found in message",exchange);
      }
    }
 else {
      response=client.invoke(httpMethod,body,responseClass);
    }
  }
  int statesCode=client.getResponse().getStatus();
  if (throwException) {
    if (response instanceof Response) {
      Integer respCode=((Response)response).getStatus();
      if (respCode > 207) {
        throw populateCxfRsProducerException(exchange,(Response)response,respCode);
      }
    }
  }
  if (exchange.getPattern().isOutCapable()) {
    LOG.trace("Response body = {}",response);
    exchange.getOut().getHeaders().putAll(exchange.getIn().getHeaders());
    exchange.getOut().setBody(binding.bindResponseToCamelBody(response,exchange));
    exchange.getOut().getHeaders().putAll(binding.bindResponseHeadersToCamelHeaders(response,exchange));
    exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE,statesCode);
  }
}
