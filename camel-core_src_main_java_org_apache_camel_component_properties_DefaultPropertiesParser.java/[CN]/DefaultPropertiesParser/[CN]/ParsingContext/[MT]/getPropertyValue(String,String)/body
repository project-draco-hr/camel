{
  if (propertiesComponent != null) {
    for (    PropertiesFunction function : propertiesComponent.getFunctions().values()) {
      String token=function.getName() + ":";
      if (key.startsWith(token)) {
        String remainder=key.substring(token.length());
        log.debug("Property with key [{}] is applied by function [{}]",key,function.getName());
        String value=function.apply(remainder);
        if (value == null) {
          throw new IllegalArgumentException("Property with key [" + key + "] using function ["+ function.getName()+ "]"+ " returned null value which is not allowed, from input: "+ input);
        }
 else {
          if (log.isDebugEnabled()) {
            log.debug("Property with key [{}] applied by function [{}] -> {}",new Object[]{key,function.getName(),value});
          }
          return value;
        }
      }
    }
  }
  String defaultValue=null;
  if (key.contains(GET_OR_ELSE_TOKEN)) {
    defaultValue=ObjectHelper.after(key,GET_OR_ELSE_TOKEN);
    key=ObjectHelper.before(key,GET_OR_ELSE_TOKEN);
  }
  String augmentedKey=getAugmentedKey(key);
  boolean shouldFallback=fallbackToUnaugmentedProperty && !key.equals(augmentedKey);
  String value=doGetPropertyValue(augmentedKey);
  if (value == null && shouldFallback) {
    log.debug("Property with key [{}] not found, attempting with unaugmented key: {}",augmentedKey,key);
    value=doGetPropertyValue(key);
  }
  if (value == null && defaultValue != null) {
    log.debug("Property with key [{}] not found, using default value: {}",augmentedKey,defaultValue);
    value=defaultValue;
  }
  if (value == null) {
    StringBuilder esb=new StringBuilder();
    if (propertiesComponent == null || propertiesComponent.isDefaultCreated()) {
      esb.append("PropertiesComponent with name properties must be defined in CamelContext to support property placeholders. ");
    }
    esb.append("Property with key [").append(augmentedKey).append("] ");
    if (shouldFallback) {
      esb.append("(and original key [").append(key).append("]) ");
    }
    esb.append("not found in properties from text: ").append(input);
    throw new IllegalArgumentException(esb.toString());
  }
  return value;
}
