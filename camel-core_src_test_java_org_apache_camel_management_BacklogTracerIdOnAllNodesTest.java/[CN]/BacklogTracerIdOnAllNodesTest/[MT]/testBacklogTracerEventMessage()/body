{
  MBeanServer mbeanServer=getMBeanServer();
  ObjectName on=new ObjectName("org.apache.camel:context=localhost/camel-1,type=tracer,name=BacklogTracer");
  assertNotNull(on);
  mbeanServer.isRegistered(on);
  Boolean enabled=(Boolean)mbeanServer.getAttribute(on,"Enabled");
  assertEquals("Should not be enabled",Boolean.FALSE,enabled);
  Integer size=(Integer)mbeanServer.getAttribute(on,"BacklogSize");
  assertEquals("Should be 1000",1000,size.intValue());
  mbeanServer.setAttribute(on,new Attribute("Enabled",Boolean.TRUE));
  getMockEndpoint("mock:camel").expectedBodiesReceived("Hello Camel");
  getMockEndpoint("mock:other").expectedBodiesReceived("Hello World");
  getMockEndpoint("mock:end").expectedMessageCount(2);
  template.sendBody("direct:start","Hello Camel");
  template.sendBody("direct:start","Hello World");
  assertMockEndpointsSatisfied();
  List<Exchange> fooExchanges=getMockEndpoint("mock:foo").getReceivedExchanges();
  List<Exchange> camelExchanges=getMockEndpoint("mock:camel").getReceivedExchanges();
  RouteDefinition route=context.getRouteDefinitions().get(0);
  assertNotNull(route);
  ChoiceDefinition choice=(ChoiceDefinition)route.getOutputs().get(0);
  assertEquals("choice1",choice.getId());
  WhenDefinition when=(WhenDefinition)choice.getOutputs().get(0);
  assertEquals("when1",when.getId());
  LogDefinition log1=(LogDefinition)when.getOutputs().get(0);
  assertEquals("log1",log1.getId());
  ToDefinition to1=(ToDefinition)when.getOutputs().get(1);
  assertEquals("camel",to1.getId());
  OtherwiseDefinition other=(OtherwiseDefinition)choice.getOutputs().get(1);
  assertEquals("otherwise1",other.getId());
  LogDefinition log2=(LogDefinition)other.getOutputs().get(0);
  assertEquals("log2",log2.getId());
  ToDefinition to2=(ToDefinition)other.getOutputs().get(1);
  assertEquals("to1",to2.getId());
  ToDefinition to3=(ToDefinition)other.getOutputs().get(2);
  assertEquals("foo",to3.getId());
  ToDefinition to4=(ToDefinition)route.getOutputs().get(1);
  assertEquals("end",to4.getId());
  List<BacklogTracerEventMessage> events=(List<BacklogTracerEventMessage>)mbeanServer.invoke(on,"dumpTracedMessages",new Object[]{"to1"},new String[]{"java.lang.String"});
  assertNotNull(events);
  assertEquals(1,events.size());
  BacklogTracerEventMessage event1=events.get(0);
  assertEquals("to1",event1.getToNode());
  assertEquals("    <message exchangeId=\"" + fooExchanges.get(0).getExchangeId() + "\">\n"+ "      <body type=\"java.lang.String\">Hello World</body>\n"+ "    </message>",event1.getMessageAsXml());
  events=(List<BacklogTracerEventMessage>)mbeanServer.invoke(on,"dumpTracedMessages",new Object[]{"camel"},new String[]{"java.lang.String"});
  assertNotNull(events);
  assertEquals(1,events.size());
  event1=events.get(0);
  assertEquals("camel",event1.getToNode());
  assertEquals("    <message exchangeId=\"" + camelExchanges.get(0).getExchangeId() + "\">\n"+ "      <body type=\"java.lang.String\">Hello Camel</body>\n"+ "    </message>",event1.getMessageAsXml());
}
