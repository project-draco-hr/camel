{
  context.addRoutes(new RouteBuilder(){
    @Override public void configure() throws Exception {
      from("file://target/concurrent?sortBy=file:name").setHeader("id",simple("${file:onlyname.noext}")).threads(10).beanRef("business").log("Country is ${in.header.country}").aggregate(header("country"),new BodyInAggregatingStrategy()).completionTimeout(2000L).to("mock:result");
    }
  }
);
  context.start();
  long start=System.currentTimeMillis();
  MockEndpoint result=getMockEndpoint("mock:result");
  result.expectedMessageCount(2);
  assertMockEndpointsSatisfied();
  long delta=System.currentTimeMillis() - start;
  LOG.debug("Time taken parallel: " + delta);
  for (int i=0; i < 2; i++) {
    String body=result.getReceivedExchanges().get(i).getIn().getBody(String.class);
    LOG.info("Got body: " + body);
    if (body.contains("A")) {
      assertTrue("Should contain C, was:" + body,body.contains("C"));
      assertTrue("Should contain E, was:" + body,body.contains("E"));
      assertTrue("Should contain G, was:" + body,body.contains("G"));
      assertTrue("Should contain I, was:" + body,body.contains("I"));
    }
 else     if (body.contains("B")) {
      assertTrue("Should contain D, was:" + body,body.contains("D"));
      assertTrue("Should contain F, was:" + body,body.contains("F"));
      assertTrue("Should contain H, was:" + body,body.contains("H"));
      assertTrue("Should contain J, was:" + body,body.contains("J"));
    }
 else {
      fail("Unexpected body, was: " + body);
    }
  }
}
