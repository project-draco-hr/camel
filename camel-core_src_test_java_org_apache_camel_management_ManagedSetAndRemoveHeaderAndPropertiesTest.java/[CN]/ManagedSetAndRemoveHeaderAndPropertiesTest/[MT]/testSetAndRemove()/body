{
  if (isPlatform("aix")) {
    return;
  }
  getMockEndpoint("mock:result").expectedMessageCount(1);
  template.sendBody("direct:start","Hello World");
  assertMockEndpointsSatisfied();
  MBeanServer mbeanServer=getMBeanServer();
  Set<ObjectName> set=mbeanServer.queryNames(new ObjectName("*:type=processors,*"),null);
  assertEquals(8,set.size());
  Iterator<ObjectName> it=set.iterator();
  boolean found=false;
  boolean found2=false;
  boolean found3=false;
  boolean found4=false;
  boolean found5=false;
  boolean found6=false;
  for (int i=0; i < 8; i++) {
    ObjectName on=it.next();
    boolean registered=mbeanServer.isRegistered(on);
    assertEquals("Should be registered",true,registered);
    String id=(String)mbeanServer.getAttribute(on,"ProcessorId");
    log.info("id = {}",id);
    found|="setFoo".equals(id);
    found2|="setBeer".equals(id);
    found3|="unsetFoo".equals(id);
    found4|="unsetFoos".equals(id);
    found5|="unsetBeer".equals(id);
    found6|="unsetBeers".equals(id);
  }
  assertTrue("Should find setHeader mbean",found);
  assertTrue("Should find setProperty mbean",found2);
  assertTrue("Should find removeHeader mbean",found3);
  assertTrue("Should find removeHeaders mbean",found4);
  assertTrue("Should find removeProperty mbean",found5);
}
