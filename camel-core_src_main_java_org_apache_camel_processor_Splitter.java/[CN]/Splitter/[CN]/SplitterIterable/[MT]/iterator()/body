{
  return new Iterator<ProcessorExchangePair>(){
    private int index;
    private boolean closed;
    public boolean hasNext(){
      if (closed) {
        return false;
      }
      boolean answer=iterator.hasNext();
      if (!answer) {
        closed=true;
        try {
          close();
        }
 catch (        IOException e) {
          throw new RuntimeCamelException("Scanner aborted because of an IOException!",e);
        }
      }
      return answer;
    }
    public ProcessorExchangePair next(){
      Object part=iterator.next();
      Exchange newExchange=ExchangeHelper.createCorrelatedCopy(copy,false);
      if (isShareUnitOfWork()) {
        prepareSharedUnitOfWork(newExchange,copy);
      }
      if (part instanceof Message) {
        newExchange.setIn((Message)part);
      }
 else {
        Message in=newExchange.getIn();
        in.setBody(part);
      }
      return createProcessorExchangePair(index++,getProcessors().iterator().next(),newExchange,routeContext);
    }
    public void remove(){
      throw new UnsupportedOperationException("Remove is not supported by this iterator");
    }
  }
;
}
