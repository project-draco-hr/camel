{
  List<PGPSecretKeyAndPrivateKeyAndUserId> result=new ArrayList<PGPSecretKeyAndPrivateKeyAndUserId>(sigKeyUserId2Password.size());
  for (Iterator<?> i=pgpSec.getKeyRings(); i.hasNext(); ) {
    Object data=i.next();
    if (data instanceof PGPSecretKeyRing) {
      PGPSecretKeyRing keyring=(PGPSecretKeyRing)data;
      PGPSecretKey primaryKey=keyring.getSecretKey();
      List<String> useridParts=new ArrayList<String>(sigKeyUserId2Password.keySet());
      String[] foundKeyUserIdForUserIdPart=findFirstKeyUserIdContainingOneOfTheParts(useridParts,primaryKey.getPublicKey());
      if (foundKeyUserIdForUserIdPart == null) {
        LOG.debug("No User ID found in primary key with key ID {} containing one of the parts {}",primaryKey.getKeyID(),useridParts);
        continue;
      }
      LOG.debug("User ID {} found in primary key with key ID {} containing one of the parts {}",new Object[]{foundKeyUserIdForUserIdPart[0],primaryKey.getKeyID(),useridParts});
      for (Iterator<PGPSecretKey> iterKey=keyring.getSecretKeys(); iterKey.hasNext(); ) {
        PGPSecretKey secKey=iterKey.next();
        if (isSigningKey(secKey)) {
          PGPPrivateKey privateKey=secKey.extractPrivateKey(new JcePBESecretKeyDecryptorBuilder().setProvider(provider).build(sigKeyUserId2Password.get(foundKeyUserIdForUserIdPart[1]).toCharArray()));
          if (privateKey != null) {
            result.add(new PGPSecretKeyAndPrivateKeyAndUserId(secKey,privateKey,foundKeyUserIdForUserIdPart[0]));
            LOG.debug("Private key with user ID {} and key ID {} added to the signing keys",foundKeyUserIdForUserIdPart[0],Long.toString(privateKey.getKeyID()));
          }
        }
      }
    }
  }
  return result;
}
