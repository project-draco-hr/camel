{
  PGPSecretKeyRingCollection pgpSec=new PGPSecretKeyRingCollection(PGPUtil.getDecoderStream(keyringInput));
  PGPObjectFactory factory=new PGPObjectFactory(PGPUtil.getDecoderStream(encryptedInput));
  PGPEncryptedDataList enc;
  Object o=factory.nextObject();
  if (o == null) {
    throw new PGPException("Provided input is not encrypted.");
  }
  if (o instanceof PGPEncryptedDataList) {
    enc=(PGPEncryptedDataList)o;
  }
 else {
    enc=(PGPEncryptedDataList)factory.nextObject();
  }
  encryptedInput.reset();
  Iterator<?> encryptedDataObjects=enc.getEncryptedDataObjects();
  PGPPrivateKey privateKey=null;
  PGPPublicKeyEncryptedData encryptedData=null;
  while (privateKey == null && encryptedDataObjects.hasNext()) {
    encryptedData=(PGPPublicKeyEncryptedData)encryptedDataObjects.next();
    PGPSecretKey pgpSecKey=pgpSec.getSecretKey(encryptedData.getKeyID());
    if (pgpSecKey != null) {
      privateKey=pgpSecKey.extractPrivateKey(new JcePBESecretKeyDecryptorBuilder().setProvider("BC").build(passphrase.toCharArray()));
    }
  }
  if (privateKey == null && pgpSec.size() > 0 && encryptedData != null) {
    throw new PGPException("Provided input is encrypted with unknown pair of keys.");
  }
  return privateKey;
}
