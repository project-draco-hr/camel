{
  if (!tracer.isEnabled() || (routeContext != null && !routeContext.isTracing())) {
    super.proceed(exchange);
    return;
  }
  if (exchange.getProperty(Exchange.TRACE_EVENT,Boolean.class) != null) {
    super.process(exchange);
    return;
  }
  boolean shouldLog=shouldLogNode(node) && shouldLogExchange(exchange);
  boolean trace=true;
  try {
    if (shouldLog) {
      if (exchange.getUnitOfWork() != null) {
        TracedRouteNodes traced=exchange.getUnitOfWork().getTracedRouteNodes();
        if (node instanceof OnCompletionDefinition || node instanceof OnExceptionDefinition || node instanceof TryDefinition) {
          trace=false;
        }
 else         if (exchange.getProperty(Exchange.ON_COMPLETION) != null) {
          traceOnCompletion(traced,exchange);
        }
 else {
          traced.addTraced(new DefaultRouteNode(node,super.getProcessor()));
        }
      }
 else {
        LOG.trace("Cannot trace as this Exchange does not have an UnitOfWork: " + exchange);
      }
    }
    if (shouldLog && trace) {
      logExchange(exchange);
      traceExchange(exchange);
    }
    if (node.getParent() instanceof InterceptDefinition && exchange.getUnitOfWork() != null) {
      TracedRouteNodes traced=exchange.getUnitOfWork().getTracedRouteNodes();
      traceIntercept((InterceptDefinition)node.getParent(),traced,exchange);
    }
    super.proceed(exchange);
    if (shouldLog && tracer.isTraceOutExchanges()) {
      logExchange(exchange);
      traceExchange(exchange);
    }
  }
 catch (  Exception e) {
    if (shouldLogException(exchange)) {
      logException(exchange,e);
    }
    throw e;
  }
}
