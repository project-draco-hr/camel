{
  if (!tracer.isEnabled() || (routeContext != null && !routeContext.isTracing())) {
    super.proceed(exchange);
    return;
  }
  if (exchange.getProperty(Exchange.TRACE_EVENT,Boolean.class) != null) {
    super.process(exchange);
    return;
  }
  boolean shouldLog=shouldLogNode(node) && shouldLogExchange(exchange);
  boolean trace=true;
  try {
    if (shouldLog) {
      if (exchange.getUnitOfWork() instanceof TraceableUnitOfWork) {
        TraceableUnitOfWork tuow=(TraceableUnitOfWork)exchange.getUnitOfWork();
        if (node instanceof OnExceptionDefinition) {
          trace=beforeOnException((OnExceptionDefinition)node,tuow,exchange);
        }
 else         if (node instanceof OnCompletionDefinition) {
          trace=beforeOnCompletion((OnCompletionDefinition)node,tuow,exchange);
        }
 else {
          tuow.addTraced(new DefaultRouteNode(node,super.getProcessor()));
        }
      }
    }
    if (trace) {
      logExchange(exchange);
      traceExchange(exchange);
    }
    if (exchange.getUnitOfWork() instanceof TraceableUnitOfWork) {
      TraceableUnitOfWork tuow=(TraceableUnitOfWork)exchange.getUnitOfWork();
      if (node instanceof InterceptDefinition) {
        afterIntercept((InterceptDefinition)node,tuow,exchange);
      }
    }
    super.proceed(exchange);
    if (shouldLog && tracer.isTraceOutExchanges()) {
      logExchange(exchange);
      traceExchange(exchange);
    }
  }
 catch (  Exception e) {
    if (shouldLogException(exchange)) {
      logException(exchange,e);
    }
    throw e;
  }
}
