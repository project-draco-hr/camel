{
  if (exchange instanceof TraceEventExchange || exchange.getProperty(TRACE_EVENT,Boolean.class) != null) {
    super.process(exchange);
    return;
  }
  boolean shouldLog=shouldLogNode(node) && shouldLogExchange(exchange);
  try {
    if (shouldLog) {
      if (exchange.getUnitOfWork() instanceof TraceableUnitOfWork) {
        TraceableUnitOfWork tuow=(TraceableUnitOfWork)exchange.getUnitOfWork();
        tuow.addInterceptedProcessor(super.getProcessor());
      }
      logExchange(exchange);
      traceExchange(exchange);
    }
    super.proceed(exchange);
    if (shouldLog && tracer.isTraceOutExchanges()) {
      logExchange(exchange);
      traceExchange(exchange);
    }
  }
 catch (  Exception e) {
    if (shouldLogException(exchange)) {
      logException(exchange,e);
    }
    throw e;
  }
}
