{
  if (exchange instanceof TraceEventExchange || exchange.getProperty(TRACE_EVENT,Boolean.class) != null) {
    super.process(exchange);
    return;
  }
  boolean shouldLog=shouldLogNode(node) && shouldLogExchange(exchange);
  try {
    if (shouldLog) {
      boolean trace=true;
      if (exchange.getUnitOfWork() instanceof TraceableUnitOfWork) {
        TraceableUnitOfWork tuow=(TraceableUnitOfWork)exchange.getUnitOfWork();
        if (node instanceof OnExceptionDefinition) {
          int index=tuow.getAndIncrement(node);
          if (index == 0) {
            Expression exp=new Expression(){
              public <T>T evaluate(              Exchange exchange,              Class<T> type){
                String label="OnException";
                if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {
                  label+="[" + exchange.getProperty(Exchange.EXCEPTION_CAUGHT,Exception.class).getClass().getSimpleName() + "]";
                }
                return exchange.getContext().getTypeConverter().convertTo(type,label);
              }
            }
;
            tuow.addTraced(new DefaultRouteNode(node,exp));
            logExchange(exchange);
            traceExchange(exchange);
          }
          tuow.addTraced(new DefaultRouteNode(node,super.getProcessor()));
        }
 else         if (node instanceof OnCompletionDefinition) {
          trace=tuow.getLastNode() != null;
          if (exchange.getProperty(Exchange.ON_COMPLETION) != null) {
            int index=tuow.getAndIncrement(node);
            if (index == 0) {
              Expression exp=new Expression(){
                public <T>T evaluate(                Exchange exchange,                Class<T> type){
                  String label="OnCompletion[" + exchange.getProperty(Exchange.CORRELATION_ID) + "]";
                  return exchange.getContext().getTypeConverter().convertTo(type,label);
                }
              }
;
              tuow.addTraced(new DefaultRouteNode(node,exp));
              tuow.addTraced(new DefaultRouteNode(node,super.getProcessor()));
              logExchange(exchange);
              traceExchange(exchange);
            }
 else {
              tuow.addTraced(new DefaultRouteNode(node,super.getProcessor()));
            }
          }
        }
 else {
          tuow.addTraced(new DefaultRouteNode(node,super.getProcessor()));
        }
      }
      if (trace) {
        logExchange(exchange);
        traceExchange(exchange);
      }
      if (exchange.getUnitOfWork() instanceof TraceableUnitOfWork) {
        TraceableUnitOfWork tuow=(TraceableUnitOfWork)exchange.getUnitOfWork();
        if (node instanceof InterceptDefinition) {
          InterceptDefinition intercept=(InterceptDefinition)node;
          Processor last=intercept.getInterceptedProcessor(tuow.getAndIncrement(intercept));
          if (last != null) {
            tuow.addTraced(new DefaultRouteNode(node,last));
            logExchange(exchange);
            traceExchange(exchange);
          }
        }
      }
    }
    super.proceed(exchange);
    if (shouldLog && tracer.isTraceOutExchanges()) {
      logExchange(exchange);
      traceExchange(exchange);
    }
  }
 catch (  Exception e) {
    if (shouldLogException(exchange)) {
      logException(exchange,e);
    }
    throw e;
  }
}
