{
  for (  Map.Entry<String,Object> entry : response.getAttributes().entrySet()) {
    String key=entry.getKey();
    Object value=entry.getValue();
    if (!headerFilterStrategy.applyFilterToExternalHeaders(key,value,exchange)) {
      exchange.getOut().setHeader(key,value);
      LOG.debug("Populate exchange from Restlet response header: {} value: {}",key,value);
    }
  }
  int responseCode=response.getStatus().getCode();
  exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE,responseCode);
  exchange.getOut().setHeader(RestletConstants.RESTLET_RESPONSE,response);
  if (response.getEntity() != null) {
    MediaType mediaType=response.getEntity().getMediaType();
    if (mediaType != null) {
      LOG.debug("Setting the Content-Type to be {}",mediaType.toString());
      exchange.getOut().setHeader(Exchange.CONTENT_TYPE,mediaType.toString());
    }
    if (response.getEntity() instanceof StreamRepresentation) {
      Representation representationDecoded=new DecodeRepresentation(response.getEntity());
      exchange.getOut().setBody(representationDecoded.getStream());
    }
 else     if (response.getEntity() instanceof Representation) {
      Representation representationDecoded=new DecodeRepresentation(response.getEntity());
      exchange.getOut().setBody(representationDecoded.getText());
    }
 else {
      String text=response.getEntity().getText();
      LOG.debug("Populate exchange from Restlet response: {}",text);
      exchange.getOut().setBody(text);
    }
  }
  MessageHelper.copyHeaders(exchange.getIn(),exchange.getOut(),false);
}
