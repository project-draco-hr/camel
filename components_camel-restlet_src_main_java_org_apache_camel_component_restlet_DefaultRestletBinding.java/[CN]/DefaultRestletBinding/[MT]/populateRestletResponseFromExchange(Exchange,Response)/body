{
  Message out;
  if (exchange.isFailed()) {
    response.setStatus(Status.valueOf(500));
    if (exchange.hasOut() && exchange.getOut().isFault()) {
      out=exchange.getOut();
    }
 else {
      Exception t=exchange.getException();
      StringWriter sw=new StringWriter();
      PrintWriter pw=new PrintWriter(sw);
      t.printStackTrace(pw);
      response.setEntity(sw.toString(),MediaType.TEXT_PLAIN);
      return;
    }
  }
 else {
    out=exchange.hasOut() ? exchange.getOut() : exchange.getIn();
  }
  MediaType mediaType=out.getHeader(Exchange.CONTENT_TYPE,MediaType.class);
  if (mediaType == null) {
    Object body=out.getBody();
    mediaType=MediaType.TEXT_PLAIN;
    if (body instanceof String) {
      mediaType=MediaType.TEXT_PLAIN;
    }
 else     if (body instanceof StringSource || body instanceof DOMSource) {
      mediaType=MediaType.TEXT_XML;
    }
  }
  Integer responseCode=out.getHeader(Exchange.HTTP_RESPONSE_CODE,Integer.class);
  if (responseCode != null) {
    response.setStatus(Status.valueOf(responseCode));
  }
  Object body=out.getBody();
  if (body instanceof WrappedFile) {
    GenericFile<?> gf=(GenericFile<?>)body;
    body=gf.getBody();
  }
  if (body == null) {
    response.setEntity("",MediaType.TEXT_PLAIN);
  }
 else   if (body instanceof Response) {
    LOG.debug("Using existing Restlet Response from exchange body: {}",body);
  }
 else   if (body instanceof Representation) {
    response.setEntity(out.getBody(Representation.class));
  }
 else   if (body instanceof InputStream) {
    response.setEntity(new InputRepresentation(out.getBody(InputStream.class),mediaType));
  }
 else   if (body instanceof File) {
    response.setEntity(new FileRepresentation(out.getBody(File.class),mediaType));
  }
 else {
    String text=out.getBody(String.class);
    response.setEntity(text,mediaType);
  }
  LOG.debug("Populate Restlet response from exchange body: {}",body);
  if (exchange.getProperty(Exchange.CHARSET_NAME) != null) {
    CharacterSet cs=CharacterSet.valueOf(exchange.getProperty(Exchange.CHARSET_NAME,String.class));
    response.getEntity().setCharacterSet(cs);
  }
  Series<Header> series=new Series<Header>(Header.class);
  for (  Map.Entry<String,Object> entry : out.getHeaders().entrySet()) {
    String key=entry.getKey();
    Object value=entry.getValue();
    if (!headerFilterStrategy.applyFilterToCamelHeaders(key,value,exchange)) {
      boolean added=setResponseHeader(exchange,response,key,value);
      if (!added) {
        if (!key.startsWith("Camel") && !key.startsWith("org.restlet")) {
          String text=exchange.getContext().getTypeConverter().tryConvertTo(String.class,exchange,value);
          if (text != null) {
            series.add(key,text);
          }
        }
      }
    }
  }
  if (!series.isEmpty()) {
    response.getAttributes().put(HeaderConstants.ATTRIBUTE_HEADERS,series);
  }
}
