{
  if (value == null) {
    return true;
  }
  message.getAttributes().put(header,value);
  if (message.getEntity() != null) {
    if (header.equalsIgnoreCase(HeaderConstants.HEADER_ACCESS_CONTROL_ALLOW_CREDENTIAL)) {
      Boolean bool=exchange.getContext().getTypeConverter().tryConvertTo(Boolean.class,value);
      if (bool != null) {
        message.setAccessControlAllowCredential(bool);
      }
      return true;
    }
    if (header.equalsIgnoreCase(HeaderConstants.HEADER_ACCESS_CONTROL_ALLOW_HEADERS)) {
      Set<String> set=convertToStringSet(value,exchange.getContext().getTypeConverter());
      message.setAccessControlAllowHeaders(set);
      return true;
    }
    if (header.equalsIgnoreCase(HeaderConstants.HEADER_ACCESS_CONTROL_ALLOW_METHODS)) {
      Set<Method> set=convertToMethodSet(value,exchange.getContext().getTypeConverter());
      message.setAccessControlAllowMethods(set);
      return true;
    }
    if (header.equalsIgnoreCase(HeaderConstants.HEADER_ACCESS_CONTROL_ALLOW_ORIGIN)) {
      String text=exchange.getContext().getTypeConverter().tryConvertTo(String.class,value);
      if (text != null) {
        message.setAccessControlAllowOrigin(text);
      }
      return true;
    }
    if (header.equalsIgnoreCase(HeaderConstants.HEADER_ACCESS_CONTROL_EXPOSE_HEADERS)) {
      Set<String> set=convertToStringSet(value,exchange.getContext().getTypeConverter());
      message.setAccessControlExposeHeaders(set);
      return true;
    }
    if (header.equalsIgnoreCase(HeaderConstants.HEADER_CACHE_CONTROL)) {
      if (value instanceof List) {
        message.setCacheDirectives((List<CacheDirective>)value);
      }
      if (value instanceof String) {
        List<CacheDirective> list=new ArrayList<CacheDirective>();
        list.add(new CacheDirective((String)value));
        message.setCacheDirectives(list);
      }
      return true;
    }
    if (header.equalsIgnoreCase(HeaderConstants.HEADER_EXPIRES)) {
      if (value instanceof Calendar) {
        message.getEntity().setExpirationDate(((Calendar)value).getTime());
      }
 else       if (value instanceof Date) {
        message.getEntity().setExpirationDate((Date)value);
      }
 else       if (value instanceof String) {
        SimpleDateFormat format=new SimpleDateFormat(RFC_2822_DATE_PATTERN,Locale.ENGLISH);
        try {
          Date date=format.parse((String)value);
          message.getEntity().setExpirationDate(date);
        }
 catch (        ParseException e) {
          LOG.debug("Header {} with value {} cannot be converted as a Date. The value will be ignored.",HeaderConstants.HEADER_EXPIRES,value);
        }
      }
      return true;
    }
    if (header.equalsIgnoreCase(HeaderConstants.HEADER_LAST_MODIFIED)) {
      if (value instanceof Calendar) {
        message.getEntity().setModificationDate(((Calendar)value).getTime());
      }
 else       if (value instanceof Date) {
        message.getEntity().setModificationDate((Date)value);
      }
 else       if (value instanceof String) {
        SimpleDateFormat format=new SimpleDateFormat(RFC_2822_DATE_PATTERN,Locale.ENGLISH);
        try {
          Date date=format.parse((String)value);
          message.getEntity().setModificationDate(date);
        }
 catch (        ParseException e) {
          LOG.debug("Header {} with value {} cannot be converted as a Date. The value will be ignored.",HeaderConstants.HEADER_LAST_MODIFIED,value);
        }
      }
      return true;
    }
    if (header.equalsIgnoreCase(HeaderConstants.HEADER_CONTENT_LENGTH)) {
      if (value instanceof Long) {
        message.getEntity().setSize((Long)value);
      }
 else       if (value instanceof Integer) {
        message.getEntity().setSize((Integer)value);
      }
 else {
        Long num=exchange.getContext().getTypeConverter().tryConvertTo(Long.class,value);
        if (num != null) {
          message.getEntity().setSize(num);
        }
 else {
          LOG.debug("Header {} with value {} cannot be converted as a Long. The value will be ignored.",HeaderConstants.HEADER_CONTENT_LENGTH,value);
        }
      }
      return true;
    }
    if (header.equalsIgnoreCase(HeaderConstants.HEADER_CONTENT_TYPE)) {
      if (value instanceof MediaType) {
        message.getEntity().setMediaType((MediaType)value);
      }
 else {
        String type=value.toString();
        MediaType media=MediaType.valueOf(type);
        if (media != null) {
          message.getEntity().setMediaType(media);
        }
 else {
          LOG.debug("Header {} with value {} cannot be converted as a MediaType. The value will be ignored.",HeaderConstants.HEADER_CONTENT_TYPE,value);
        }
      }
      return true;
    }
  }
  return false;
}
