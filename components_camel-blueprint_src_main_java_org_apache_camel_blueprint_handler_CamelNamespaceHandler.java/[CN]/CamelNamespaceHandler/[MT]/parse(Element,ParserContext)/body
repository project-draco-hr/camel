{
  renameNamespaceRecursive(element);
  if (element.getNodeName().equals(CAMEL_CONTEXT)) {
    String contextId=element.getAttribute("id");
    boolean implicitId=false;
    if (ObjectHelper.isEmpty(contextId)) {
      CamelContextNameStrategy strategy=new DefaultCamelContextNameStrategy();
      contextId=strategy.getName();
      element.setAttribute("id",contextId);
      implicitId=true;
    }
    Binder<Node> binder;
    try {
      binder=getJaxbContext().createBinder();
    }
 catch (    JAXBException e) {
      throw new ComponentDefinitionException("Failed to create the JAXB binder : " + e,e);
    }
    Object value=parseUsingJaxb(element,context,binder);
    if (!(value instanceof CamelContextFactoryBean)) {
      throw new ComponentDefinitionException("Expected an instance of " + CamelContextFactoryBean.class);
    }
    CamelContextFactoryBean ccfb=(CamelContextFactoryBean)value;
    try {
      PassThroughMetadata ptm=(PassThroughMetadata)context.getComponentDefinitionRegistry().getComponentDefinition("blueprintContainer");
      ccfb.setBlueprintContainer((BlueprintContainer)ptm.getObject());
      ptm=(PassThroughMetadata)context.getComponentDefinitionRegistry().getComponentDefinition("blueprintBundleContext");
      ccfb.setBundleContext((BundleContext)ptm.getObject());
      ccfb.setImplicitId(implicitId);
    }
 catch (    Exception e) {
      throw new ComponentDefinitionException("Unable to initialize camel context factory",e);
    }
    MutablePassThroughMetadata factory=context.createMetadata(MutablePassThroughMetadata.class);
    factory.setId(".camelBlueprint.passThrough." + contextId);
    factory.setObject(new PassThroughCallable<Object>(value));
    MutableBeanMetadata factory2=context.createMetadata(MutableBeanMetadata.class);
    factory2.setId(".camelBlueprint.factory." + contextId);
    factory2.setFactoryComponent(factory);
    factory2.setFactoryMethod("call");
    factory2.setDestroyMethod("destroy");
    MutableBeanMetadata ctx=context.createMetadata(MutableBeanMetadata.class);
    ctx.setId(contextId);
    ctx.setFactoryComponent(factory2);
    ctx.setFactoryMethod("getContext");
    ctx.setDestroyMethod("destroy");
    MutablePassThroughMetadata processorFactory=context.createMetadata(MutablePassThroughMetadata.class);
    processorFactory.setId(".camelBlueprint.processor.passThrough." + contextId);
    processorFactory.setObject(new PassThroughCallable<Object>(new CamelDependenciesFinder(ccfb,context)));
    MutableBeanMetadata processor=context.createMetadata(MutableBeanMetadata.class);
    processor.setId(".camelBlueprint.processor." + contextId);
    processor.setRuntimeClass(ComponentDefinitionRegistryProcessor.class);
    processor.setFactoryComponent(processorFactory);
    processor.setFactoryMethod("call");
    processor.setProcessor(true);
    context.getComponentDefinitionRegistry().registerComponentDefinition(processor);
    return ctx;
  }
  return null;
}
