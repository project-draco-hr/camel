{
  renameNamespaceRecursive(element);
  if (element.getNodeName().equals(CAMEL_CONTEXT)) {
    String contextId=element.getAttribute("id");
    boolean implicitId=false;
    if (ObjectHelper.isEmpty(contextId)) {
      CamelContextNameStrategy strategy=new DefaultCamelContextNameStrategy();
      contextId=strategy.getName();
      element.setAttribute("id",contextId);
      implicitId=true;
    }
    Binder<Node> binder;
    try {
      binder=getJaxbContext().createBinder();
    }
 catch (    JAXBException e) {
      throw new ComponentDefinitionException("Failed to create the JAXB binder : " + e,e);
    }
    Object value=parseUsingJaxb(element,context,binder);
    if (!(value instanceof CamelContextFactoryBean)) {
      throw new ComponentDefinitionException("Expected an instance of " + CamelContextFactoryBean.class);
    }
    CamelContextFactoryBean ccfb=(CamelContextFactoryBean)value;
    try {
      PassThroughMetadata ptm=(PassThroughMetadata)context.getComponentDefinitionRegistry().getComponentDefinition("blueprintContainer");
      ccfb.setBlueprintContainer((BlueprintContainer)ptm.getObject());
      ptm=(PassThroughMetadata)context.getComponentDefinitionRegistry().getComponentDefinition("blueprintBundleContext");
      ccfb.setBundleContext((BundleContext)ptm.getObject());
      ccfb.setImplicitId(implicitId);
      ccfb.afterPropertiesSet();
    }
 catch (    Exception e) {
      throw new ComponentDefinitionException("Unable to initialize camel context factory",e);
    }
    Set<String> components=new HashSet<String>();
    Set<String> languages=new HashSet<String>();
    Set<String> dataformats=new HashSet<String>();
    Set<String> dependsOn=new HashSet<String>();
    for (    RouteDefinition rd : ccfb.getContext().getRouteDefinitions()) {
      findInputComponents(rd.getInputs(),components,languages,dataformats);
      findOutputComponents(rd.getOutputs(),components,languages,dataformats);
    }
    try {
      for (      String component : components) {
        ComponentMetadata cm=context.getComponentDefinitionRegistry().getComponentDefinition(".camelBlueprint.componentResolver." + component);
        if (cm == null) {
          MutableReferenceMetadata svc=context.createMetadata(MutableReferenceMetadata.class);
          svc.setId(".camelBlueprint.componentResolver." + component);
          svc.setFilter("(component=" + component + ")");
          try {
            svc.getClass().getMethod("setRuntimeInterface",Class.class).invoke(svc,ComponentResolver.class);
          }
 catch (          Throwable t) {
            try {
              PassThroughMetadata ptm=(PassThroughMetadata)context.getComponentDefinitionRegistry().getComponentDefinition("blueprintBundle");
              Bundle b=(Bundle)ptm.getObject();
              if (b.loadClass(ComponentResolver.class.getName()) != ComponentResolver.class) {
                throw new UnsupportedOperationException();
              }
              svc.setInterface(ComponentResolver.class.getName());
            }
 catch (            Throwable t2) {
              throw new UnsupportedOperationException();
            }
          }
          context.getComponentDefinitionRegistry().registerComponentDefinition(svc);
          dependsOn.add(svc.getId());
        }
      }
      for (      String language : languages) {
        ComponentMetadata cm=context.getComponentDefinitionRegistry().getComponentDefinition(".camelBlueprint.languageResolver." + language);
        if (cm == null) {
          MutableReferenceMetadata svc=context.createMetadata(MutableReferenceMetadata.class);
          svc.setId(".camelBlueprint.languageResolver." + language);
          svc.setFilter("(language=" + language + ")");
          try {
            svc.getClass().getMethod("setRuntimeInterface",Class.class).invoke(svc,LanguageResolver.class);
          }
 catch (          Throwable t) {
            try {
              PassThroughMetadata ptm=(PassThroughMetadata)context.getComponentDefinitionRegistry().getComponentDefinition("blueprintBundle");
              Bundle b=(Bundle)ptm.getObject();
              if (b.loadClass(LanguageResolver.class.getName()) != LanguageResolver.class) {
                throw new UnsupportedOperationException();
              }
              svc.setInterface(LanguageResolver.class.getName());
            }
 catch (            Throwable t2) {
              throw new UnsupportedOperationException();
            }
          }
          context.getComponentDefinitionRegistry().registerComponentDefinition(svc);
          dependsOn.add(svc.getId());
        }
      }
      for (      String dataformat : dataformats) {
        ComponentMetadata cm=context.getComponentDefinitionRegistry().getComponentDefinition(".camelBlueprint.dataformatResolver." + dataformat);
        if (cm == null) {
          MutableReferenceMetadata svc=context.createMetadata(MutableReferenceMetadata.class);
          svc.setId(".camelBlueprint.dataformatResolver." + dataformat);
          svc.setFilter("(dataformat=" + dataformat + ")");
          try {
            svc.getClass().getMethod("setRuntimeInterface",Class.class).invoke(svc,DataFormatResolver.class);
          }
 catch (          Throwable t) {
            try {
              PassThroughMetadata ptm=(PassThroughMetadata)context.getComponentDefinitionRegistry().getComponentDefinition("blueprintBundle");
              Bundle b=(Bundle)ptm.getObject();
              if (b.loadClass(DataFormatResolver.class.getName()) != DataFormatResolver.class) {
                throw new UnsupportedOperationException();
              }
              svc.setInterface(DataFormatResolver.class.getName());
            }
 catch (            Throwable t2) {
              throw new UnsupportedOperationException();
            }
          }
          context.getComponentDefinitionRegistry().registerComponentDefinition(svc);
          dependsOn.add(svc.getId());
        }
      }
    }
 catch (    UnsupportedOperationException e) {
      LOG.warn("Unable to add dependencies on to camel components OSGi services.  " + "The Apache Aries blueprint implementation used it too old and the blueprint bundle can not see the org.apache.camel.spi package.");
      components.clear();
      languages.clear();
      dataformats.clear();
    }
    MutablePassThroughMetadata factory=context.createMetadata(MutablePassThroughMetadata.class);
    factory.setId(".camelBlueprint.passThrough." + contextId);
    factory.setObject(new PassThroughCallable<Object>(value));
    factory.setDependsOn(new ArrayList<String>(components));
    MutableBeanMetadata factory2=context.createMetadata(MutableBeanMetadata.class);
    factory2.setId(".camelBlueprint.factory." + contextId);
    factory2.setFactoryComponent(factory);
    factory2.setFactoryMethod("call");
    factory2.setDestroyMethod("destroy");
    MutableBeanMetadata ctx=context.createMetadata(MutableBeanMetadata.class);
    ctx.setId(contextId);
    ctx.setFactoryComponent(factory2);
    ctx.setFactoryMethod("getContext");
    ctx.setInitMethod("init");
    ctx.setDestroyMethod("destroy");
    return ctx;
  }
  return null;
}
