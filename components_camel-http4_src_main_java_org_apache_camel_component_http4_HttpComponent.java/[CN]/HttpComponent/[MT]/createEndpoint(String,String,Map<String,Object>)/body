{
  String addressUri=uri;
  if (!uri.startsWith("http4:") && !uri.startsWith("https4:")) {
    addressUri=remaining;
  }
  Map<String,Object> httpClientParameters=new HashMap<String,Object>(parameters);
  HttpParams clientParams=configureHttpParams(parameters);
  HttpBinding binding=resolveAndRemoveReferenceParameter(parameters,"httpBindingRef",HttpBinding.class);
  if (binding == null) {
    binding=resolveAndRemoveReferenceParameter(parameters,"httpBinding",HttpBinding.class);
  }
  Boolean throwExceptionOnFailure=getAndRemoveParameter(parameters,"throwExceptionOnFailure",Boolean.class);
  Boolean bridgeEndpoint=getAndRemoveParameter(parameters,"bridgeEndpoint",Boolean.class);
  Boolean matchOnUriPrefix=getAndRemoveParameter(parameters,"matchOnUriPrefix",Boolean.class);
  Boolean disableStreamCache=getAndRemoveParameter(parameters,"disableStreamCache",Boolean.class);
  validateParameters(uri,parameters,"httpClient.");
  HttpClientConfigurer configurer=createHttpClientConfigurer(parameters);
  URI endpointUri=URISupport.createRemainingURI(new URI(addressUri),CastUtils.cast(httpClientParameters));
  URI httpUri=URISupport.createRemainingURI(new URI(addressUri),CastUtils.cast(parameters));
  String part=httpUri.getSchemeSpecificPart();
  if (part != null) {
    part=part.toLowerCase();
    if (part.startsWith("//http//") || part.startsWith("//https//")) {
      throw new ResolveEndpointFailedException(uri,"The uri part is not configured correctly. You have duplicated the http(s) protocol.");
    }
  }
  boolean secure=isSecureConnection(uri);
  int port=getPort(httpUri);
  registerPort(secure,port);
  HttpEndpoint endpoint=new HttpEndpoint(endpointUri.toString(),this,httpUri,clientParams,clientConnectionManager,configurer);
  setEndpointHeaderFilterStrategy(endpoint);
  if (binding == null) {
    binding=getHttpBinding();
  }
  if (binding != null) {
    endpoint.setBinding(binding);
  }
  if (throwExceptionOnFailure != null) {
    endpoint.setThrowExceptionOnFailure(throwExceptionOnFailure);
  }
  if (bridgeEndpoint != null) {
    endpoint.setBridgeEndpoint(bridgeEndpoint);
  }
  if (matchOnUriPrefix != null) {
    endpoint.setMatchOnUriPrefix(matchOnUriPrefix);
  }
  if (disableStreamCache != null) {
    endpoint.setDisableStreamCache(disableStreamCache);
  }
  setProperties(endpoint,parameters);
  return endpoint;
}
