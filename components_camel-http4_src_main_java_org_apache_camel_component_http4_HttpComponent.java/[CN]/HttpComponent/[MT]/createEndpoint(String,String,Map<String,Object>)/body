{
  Map<String,Object> httpClientParameters=new HashMap<String,Object>(parameters);
  HttpClientBuilder clientBuilder=HttpClientBuilder.create();
  IntrospectionSupport.setProperties(clientBuilder,parameters,"httpClient.",true);
  RequestConfig.Builder requestConfigBuilder=RequestConfig.custom();
  IntrospectionSupport.setProperties(requestConfigBuilder,parameters,"httpClient.",true);
  clientBuilder.setDefaultRequestConfig(requestConfigBuilder.build());
  validateParameters(uri,parameters,"httpClient.");
  HttpBinding httpBinding=resolveAndRemoveReferenceParameter(parameters,"httpBindingRef",HttpBinding.class);
  if (httpBinding == null) {
    httpBinding=resolveAndRemoveReferenceParameter(parameters,"httpBinding",HttpBinding.class);
  }
  HttpContext httpContext=resolveAndRemoveReferenceParameter(parameters,"httpContextRef",HttpContext.class);
  if (httpContext == null) {
    httpContext=resolveAndRemoveReferenceParameter(parameters,"httpContext",HttpContext.class);
  }
  X509HostnameVerifier x509HostnameVerifier=resolveAndRemoveReferenceParameter(parameters,"x509HostnameVerifier",X509HostnameVerifier.class);
  if (x509HostnameVerifier == null) {
    x509HostnameVerifier=getX509HostnameVerifier();
  }
  SSLContextParameters sslContextParameters=resolveAndRemoveReferenceParameter(parameters,"sslContextParametersRef",SSLContextParameters.class);
  if (sslContextParameters == null) {
    sslContextParameters=resolveAndRemoveReferenceParameter(parameters,"sslContextParameters",SSLContextParameters.class);
  }
  if (sslContextParameters == null) {
    sslContextParameters=getSslContextParameters();
  }
  String httpMethodRestrict=getAndRemoveParameter(parameters,"httpMethodRestrict",String.class);
  HeaderFilterStrategy headerFilterStrategy=resolveAndRemoveReferenceParameter(parameters,"headerFilterStrategy",HeaderFilterStrategy.class);
  UrlRewrite urlRewrite=resolveAndRemoveReferenceParameter(parameters,"urlRewrite",UrlRewrite.class);
  boolean secure=HttpHelper.isSecureConnection(uri) || sslContextParameters != null;
  String addressUri=remaining.startsWith("http") ? remaining : null;
  if (addressUri == null) {
    if (secure) {
      addressUri="https://" + remaining;
    }
 else {
      addressUri="http://" + remaining;
    }
  }
  addressUri=UnsafeUriCharactersEncoder.encodeHttpURI(addressUri);
  URI uriHttpUriAddress=new URI(addressUri);
  int pos=uri.indexOf("//");
  if (pos != -1) {
    String part=uri.substring(pos + 2);
    if (part.startsWith("http:") || part.startsWith("https:")) {
      throw new ResolveEndpointFailedException(uri,"The uri part is not configured correctly. You have duplicated the http(s) protocol.");
    }
  }
  HttpClientConfigurer configurer=createHttpClientConfigurer(parameters,secure);
  URI endpointUri=URISupport.createRemainingURI(uriHttpUriAddress,httpClientParameters);
  String scheme=ObjectHelper.before(uri,"://");
  endpointUri=URISupport.createRemainingURI(new URI(scheme,endpointUri.getUserInfo(),endpointUri.getHost(),endpointUri.getPort(),endpointUri.getPath(),endpointUri.getQuery(),endpointUri.getFragment()),httpClientParameters);
  String endpointUriString=endpointUri.toString();
  LOG.debug("Creating endpoint uri {}",endpointUriString);
  HttpClientConnectionManager localConnectionManager=clientConnectionManager;
  if (localConnectionManager == null) {
    localConnectionManager=createConnectionManager(createConnectionRegistry(x509HostnameVerifier,sslContextParameters));
  }
  HttpEndpoint endpoint=new HttpEndpoint(endpointUriString,this,clientBuilder,localConnectionManager,configurer);
  if (urlRewrite != null) {
    getCamelContext().addService(urlRewrite);
    endpoint.setUrlRewrite(urlRewrite);
  }
  setProperties(endpoint,parameters);
  URI httpUri=URISupport.createRemainingURI(new URI(uriHttpUriAddress.getScheme(),uriHttpUriAddress.getUserInfo(),uriHttpUriAddress.getHost(),uriHttpUriAddress.getPort(),uriHttpUriAddress.getPath(),uriHttpUriAddress.getQuery(),uriHttpUriAddress.getFragment()),parameters);
  endpoint.setHttpUri(httpUri);
  if (headerFilterStrategy != null) {
    endpoint.setHeaderFilterStrategy(headerFilterStrategy);
  }
 else {
    setEndpointHeaderFilterStrategy(endpoint);
  }
  endpoint.setBinding(getHttpBinding());
  if (httpBinding != null) {
    endpoint.setHttpBinding(httpBinding);
  }
  if (httpMethodRestrict != null) {
    endpoint.setHttpMethodRestrict(httpMethodRestrict);
  }
  endpoint.setHttpContext(getHttpContext());
  if (httpContext != null) {
    endpoint.setHttpContext(httpContext);
  }
  if (endpoint.getCookieStore() == null) {
    endpoint.setCookieStore(getCookieStore());
  }
  return endpoint;
}
