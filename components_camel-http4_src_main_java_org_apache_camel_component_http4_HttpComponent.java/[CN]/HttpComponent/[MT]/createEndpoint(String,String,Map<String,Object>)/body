{
  String addressUri=uri;
  if (!uri.startsWith("http4:") && !uri.startsWith("https4:")) {
    addressUri=remaining;
  }
  Map<String,Object> httpClientParameters=new HashMap<String,Object>(parameters);
  HttpParams clientParams=configureHttpParams(parameters);
  validateParameters(uri,parameters,"httpClient.");
  HttpBinding httpBinding=resolveAndRemoveReferenceParameter(parameters,"httpBindingRef",HttpBinding.class);
  if (httpBinding == null) {
    httpBinding=resolveAndRemoveReferenceParameter(parameters,"httpBinding",HttpBinding.class);
  }
  HttpContext httpContext=resolveAndRemoveReferenceParameter(parameters,"httpContextRef",HttpContext.class);
  if (httpContext == null) {
    httpContext=resolveAndRemoveReferenceParameter(parameters,"httpContext",HttpContext.class);
  }
  X509HostnameVerifier x509HostnameVerifier=resolveAndRemoveReferenceParameter(parameters,"x509HostnameVerifier",X509HostnameVerifier.class);
  if (x509HostnameVerifier == null) {
    x509HostnameVerifier=getX509HostnameVerifier();
  }
  SSLContextParameters sslContextParameters=resolveAndRemoveReferenceParameter(parameters,"sslContextParametersRef",SSLContextParameters.class);
  if (sslContextParameters == null) {
    sslContextParameters=resolveAndRemoveReferenceParameter(parameters,"sslContextParameters",SSLContextParameters.class);
  }
  if (sslContextParameters == null) {
    sslContextParameters=getSslContextParameters();
  }
  String httpMethodRestrict=getAndRemoveParameter(parameters,"httpMethodRestrict",String.class);
  HeaderFilterStrategy headerFilterStrategy=resolveAndRemoveReferenceParameter(parameters,"headerFilterStrategy",HeaderFilterStrategy.class);
  UrlRewrite urlRewrite=resolveAndRemoveReferenceParameter(parameters,"urlRewrite",UrlRewrite.class);
  boolean secure=HttpHelper.isSecureConnection(uri);
  HttpClientConfigurer configurer=createHttpClientConfigurer(parameters,secure);
  URI endpointUri=URISupport.createRemainingURI(new URI(addressUri),httpClientParameters);
  HttpEndpoint endpoint=new HttpEndpoint(endpointUri.toString(),this,clientParams,clientConnectionManager,configurer);
  if (urlRewrite != null) {
    getCamelContext().addService(urlRewrite);
    endpoint.setUrlRewrite(urlRewrite);
  }
  setProperties(endpoint,parameters);
  String httpUriAddress=addressUri;
  if (addressUri.startsWith("http4")) {
    httpUriAddress="http" + addressUri.substring(5);
  }
  if (addressUri.startsWith("https4")) {
    httpUriAddress="https" + addressUri.substring(6);
  }
  URI uriHttpUriAddress=new URI(httpUriAddress);
  String part=uriHttpUriAddress.getSchemeSpecificPart();
  if (part != null) {
    part=part.toLowerCase();
    if (part.startsWith("//http//") || part.startsWith("//https//") || part.startsWith("//http://")|| part.startsWith("//https://")) {
      throw new ResolveEndpointFailedException(uri,"The uri part is not configured correctly. You have duplicated the http(s) protocol.");
    }
  }
  int port=getPort(uriHttpUriAddress);
  URI httpUri=URISupport.createRemainingURI(new URI(uriHttpUriAddress.getScheme(),uriHttpUriAddress.getUserInfo(),uriHttpUriAddress.getHost(),port,uriHttpUriAddress.getPath(),uriHttpUriAddress.getQuery(),uriHttpUriAddress.getFragment()),parameters);
  endpoint.setHttpUri(httpUri);
  if (headerFilterStrategy != null) {
    endpoint.setHeaderFilterStrategy(headerFilterStrategy);
  }
 else {
    setEndpointHeaderFilterStrategy(endpoint);
  }
  endpoint.setBinding(getHttpBinding());
  if (httpBinding != null) {
    endpoint.setHttpBinding(httpBinding);
  }
  if (httpMethodRestrict != null) {
    endpoint.setHttpMethodRestrict(httpMethodRestrict);
  }
  endpoint.setHttpContext(getHttpContext());
  if (httpContext != null) {
    endpoint.setHttpContext(httpContext);
  }
  registerPort(secure,x509HostnameVerifier,port,sslContextParameters);
  return endpoint;
}
