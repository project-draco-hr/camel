{
  ManagedProcessor answer=null;
  if (definition instanceof RecipientListDefinition) {
    Pipeline pipeline=(Pipeline)processor;
    Iterator<Processor> it=pipeline.getProcessors().iterator();
    while (it.hasNext()) {
      processor=it.next();
    }
  }
 else   if (definition instanceof ThreadsDefinition) {
    Pipeline pipeline=(Pipeline)processor;
    Iterator<Processor> it=pipeline.getProcessors().iterator();
    processor=it.next();
  }
  Processor target=processor;
  while (target != null) {
    if (target instanceof ErrorHandler) {
      return false;
    }
    if (target instanceof ConvertBodyProcessor) {
      answer=new ManagedConvertBody(context,(ConvertBodyProcessor)target,definition);
    }
 else     if (target instanceof ChoiceProcessor) {
      answer=new ManagedChoice(context,(ChoiceProcessor)target,definition);
    }
 else     if (target instanceof Delayer) {
      answer=new ManagedDelayer(context,(Delayer)target,definition);
    }
 else     if (target instanceof Throttler) {
      answer=new ManagedThrottler(context,(Throttler)target,definition);
    }
 else     if (target instanceof DynamicRouter) {
      answer=new ManagedDynamicRouter(context,(DynamicRouter)target,definition);
    }
 else     if (target instanceof RoutingSlip) {
      answer=new ManagedRoutingSlip(context,(RoutingSlip)target,definition);
    }
 else     if (target instanceof FilterProcessor) {
      answer=new ManagedFilter(context,(FilterProcessor)target,(org.apache.camel.model.FilterDefinition)definition);
    }
 else     if (target instanceof LogProcessor) {
      answer=new ManagedLog(context,(LogProcessor)target,definition);
    }
 else     if (target instanceof LoopProcessor) {
      answer=new ManagedLoop(context,(LoopProcessor)target,definition);
    }
 else     if (target instanceof MarshalProcessor) {
      answer=new ManagedMarshal(context,(MarshalProcessor)target,(org.apache.camel.model.MarshalDefinition)definition);
    }
 else     if (target instanceof UnmarshalProcessor) {
      answer=new ManagedUnmarshal(context,(UnmarshalProcessor)target,(org.apache.camel.model.UnmarshalDefinition)definition);
    }
 else     if (target instanceof RecipientList) {
      answer=new ManagedRecipientList(context,(RecipientList)target,definition);
    }
 else     if (target instanceof Splitter) {
      answer=new ManagedSplitter(context,(Splitter)target,definition);
    }
 else     if (target instanceof MulticastProcessor) {
      answer=new ManagedMulticast(context,(MulticastProcessor)target,definition);
    }
 else     if (target instanceof SamplingThrottler) {
      answer=new ManagedSamplingThrottler(context,(SamplingThrottler)target,definition);
    }
 else     if (target instanceof Resequencer) {
      answer=new ManagedResequencer(context,(Resequencer)target,definition);
    }
 else     if (target instanceof RollbackProcessor) {
      answer=new ManagedRollback(context,(RollbackProcessor)target,definition);
    }
 else     if (target instanceof StreamResequencer) {
      answer=new ManagedResequencer(context,(StreamResequencer)target,definition);
    }
 else     if (target instanceof SetBodyProcessor) {
      answer=new ManagedSetBody(context,(SetBodyProcessor)target,definition);
    }
 else     if (target instanceof RemoveHeaderProcessor) {
      answer=new ManagedRemoveHeader(context,(RemoveHeaderProcessor)target,definition);
    }
 else     if (target instanceof RemoveHeadersProcessor) {
      answer=new ManagedRemoveHeaders(context,(RemoveHeadersProcessor)target,definition);
    }
 else     if (target instanceof SetHeaderProcessor) {
      answer=new ManagedSetHeader(context,(SetHeaderProcessor)target,definition);
    }
 else     if (target instanceof RemovePropertyProcessor) {
      answer=new ManagedRemoveProperty(context,(RemovePropertyProcessor)target,definition);
    }
 else     if (target instanceof RemovePropertiesProcessor) {
      answer=new ManagedRemoveProperties(context,(RemovePropertiesProcessor)target,definition);
    }
 else     if (target instanceof SetPropertyProcessor) {
      answer=new ManagedSetProperty(context,(SetPropertyProcessor)target,definition);
    }
 else     if (target instanceof ExchangePatternProcessor) {
      answer=new ManagedSetExchangePattern(context,(ExchangePatternProcessor)target,definition);
    }
 else     if (target instanceof ScriptProcessor) {
      answer=new ManagedScript(context,(ScriptProcessor)target,definition);
    }
 else     if (target instanceof StopProcessor) {
      answer=new ManagedStop(context,(StopProcessor)target,definition);
    }
 else     if (target instanceof ThreadsProcessor) {
      answer=new ManagedThreads(context,(ThreadsProcessor)target,definition);
    }
 else     if (target instanceof ThrowExceptionProcessor) {
      answer=new ManagedThrowException(context,(ThrowExceptionProcessor)target,definition);
    }
 else     if (target instanceof TransformProcessor) {
      answer=new ManagedTransformer(context,(TransformProcessor)target,definition);
    }
 else     if (target instanceof PredicateValidatingProcessor) {
      answer=new ManagedValidate(context,(PredicateValidatingProcessor)target,definition);
    }
 else     if (target instanceof WireTapProcessor) {
      answer=new ManagedWireTapProcessor(context,(WireTapProcessor)target,definition);
    }
 else     if (target instanceof SendDynamicProcessor) {
      answer=new ManagedSendDynamicProcessor(context,(SendDynamicProcessor)target,definition);
    }
 else     if (target instanceof SendProcessor) {
      SendProcessor sp=(SendProcessor)target;
      if (sp.getDestination() instanceof LogEndpoint) {
        LogEndpoint le=(LogEndpoint)sp.getDestination();
        if (le.getLogger() instanceof ThroughputLogger) {
          ThroughputLogger tl=(ThroughputLogger)le.getLogger();
          answer=new ManagedThroughputLogger(context,tl,definition);
        }
      }
      if (answer == null) {
        answer=new ManagedSendProcessor(context,(SendProcessor)target,definition);
      }
    }
 else     if (target instanceof BeanProcessor) {
      answer=new ManagedBeanProcessor(context,(BeanProcessor)target,definition);
    }
 else     if (target instanceof IdempotentConsumer) {
      answer=new ManagedIdempotentConsumer(context,(IdempotentConsumer)target,definition);
    }
 else     if (target instanceof AggregateProcessor) {
      answer=new ManagedAggregateProcessor(context,(AggregateProcessor)target,(org.apache.camel.model.AggregateDefinition)definition);
    }
 else     if (target instanceof Enricher) {
      answer=new ManagedEnricher(context,(Enricher)target,definition);
    }
 else     if (target instanceof PollEnricher) {
      answer=new ManagedPollEnricher(context,(PollEnricher)target,definition);
    }
 else     if (target instanceof org.apache.camel.spi.ManagementAware) {
      return ((org.apache.camel.spi.ManagementAware<Processor>)target).getManagedObject(processor);
    }
    if (answer != null) {
      break;
    }
    if (target instanceof DelegateProcessor) {
      target=((DelegateProcessor)target).getProcessor();
    }
 else {
      break;
    }
  }
  if (answer == null && definition instanceof ProcessDefinition) {
    answer=new ManagedProcess(context,target,(ProcessDefinition)definition);
  }
 else   if (answer == null) {
    answer=new ManagedProcessor(context,target,definition);
  }
  answer.setRoute(route);
  answer.init(context.getManagementStrategy());
  return answer;
}
