{
  final String clientId=configuration.getClientId();
  final String clientSecret=configuration.getClientSecret();
  final IAuthSecureStorage authSecureStorage=configuration.getAuthSecureStorage();
  final String userName=configuration.getUserName();
  final String userPassword=configuration.getUserPassword();
  if ((authSecureStorage == null && ObjectHelper.isEmpty(userPassword)) || ObjectHelper.isEmpty(userName) || ObjectHelper.isEmpty(clientId)|| ObjectHelper.isEmpty(clientSecret)) {
    throw new IllegalArgumentException("Missing one or more required properties " + "clientId, clientSecret, userName and either authSecureStorage or userPassword");
  }
  LOG.debug("Creating BoxClient for login:{}, client_id:{} ...",userName,clientId);
  final BoxConnectionManagerBuilder connectionManagerBuilder=configuration.getConnectionManagerBuilder();
  final BoxConnectionManagerBuilder connectionManager=connectionManagerBuilder != null ? connectionManagerBuilder : new BoxConnectionManagerBuilder();
  final ClientConnectionManager[] clientConnectionManager=new ClientConnectionManager[1];
  final IBoxRESTClient restClient=new BoxRESTClient(connectionManager.build()){
    @Override public HttpClient getRawHttpClient(){
      final HttpClient httpClient=super.getRawHttpClient();
      clientConnectionManager[0]=httpClient.getConnectionManager();
      final Map<String,Object> configParams=configuration.getHttpParams();
      if (configParams != null && !configParams.isEmpty()) {
        LOG.debug("Setting {} HTTP Params",configParams.size());
        final HttpParams httpParams=httpClient.getParams();
        for (        Map.Entry<String,Object> param : configParams.entrySet()) {
          httpParams.setParameter(param.getKey(),param.getValue());
        }
      }
      return httpClient;
    }
  }
;
  final BoxClient boxClient=new BoxClient(clientId,clientSecret,null,null,restClient,configuration.getBoxConfig());
  boxClient.setAutoRefreshOAuth(true);
  final CachingSecureStorage storage=new CachingSecureStorage(authSecureStorage);
  final OAuthHelperListener listener=new OAuthHelperListener(storage,configuration.getRefreshListener());
  boxClient.addOAuthRefreshListener(listener);
  final CachedBoxClient cachedBoxClient=new CachedBoxClient(boxClient,userName,clientId,storage,listener,clientConnectionManager);
  LOG.debug("BoxClient created {}",cachedBoxClient);
  return cachedBoxClient;
}
