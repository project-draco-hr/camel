{
  final ArrayList<List<String>> result=new ArrayList<List<String>>();
  final ReportMetadata reportMetadata=reportResults.getReportMetadata();
  final ReportExtendedMetadata reportExtendedMetadata=reportResults.getReportExtendedMetadata();
  final String[] aggregates=reportMetadata.getAggregates();
  final boolean includeDetails=reportResults.getHasDetailRows() && getOption(exchange,INCLUDE_DETAILS,Boolean.TRUE);
  final boolean includeSummary=aggregates.length > 0 && getOption(exchange,INCLUDE_SUMMARY,Boolean.TRUE);
  final ArrayList<DetailColumnInfo> columnInfos=new ArrayList<DetailColumnInfo>();
  final String[] columnNames=getResultColumns(columnInfos,reportMetadata,reportExtendedMetadata,includeDetails,includeSummary);
  if (getOption(exchange,INCLUDE_HEADERS,Boolean.TRUE)) {
    addColumnHeaders(result,columnInfos);
  }
  final GroupingValue[] groupingsDown=reportResults.getGroupingsDown().getGroupings();
  for (  GroupingValue groupingValue : groupingsDown) {
    addMatrixGroupValues(result,reportResults,columnNames,groupingValue,EMPTY_STRING_LIST,includeDetails,includeSummary,EMPTY_VALUE,true);
  }
  if (includeSummary) {
    final Map<String,ReportFactWithDetails> factMap=reportResults.getFactMap();
    final List<String> downGroupsPrefix=new ArrayList<String>(Collections.nCopies(groupingsDown.length,EMPTY_VALUE));
    for (    GroupingValue acrossGrouping : reportResults.getGroupingsAcross().getGroupings()) {
      addAcrossGroupSummaryValues(result,reportMetadata,includeDetails,columnNames,factMap,downGroupsPrefix,acrossGrouping);
    }
    final ReportFactWithDetails grandTotal=factMap.get("T!T");
    addSummaryValues(result,includeDetails,columnNames,EMPTY_STRING_LIST,reportResults.getReportMetadata().getAggregates(),grandTotal.getAggregates());
  }
  return result;
}
