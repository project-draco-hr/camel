{
  final List<String> columnNames=new ArrayList<String>();
  final Map<String,GroupingColumnInfo> groupingColumnInfos=reportExtendedMetadata.getGroupingColumnInfo();
  for (  GroupingInfo downGroup : reportMetadata.getGroupingsDown()) {
    final String name=downGroup.getName();
    columnNames.add(name);
    result.add(groupingColumnInfos.get(name));
  }
  for (  GroupingInfo acrossGroup : reportMetadata.getGroupingsAcross()) {
    final String name=acrossGroup.getName();
    columnNames.add(name);
    result.add(groupingColumnInfos.get(name));
  }
  if (!includeDetails) {
    if (includeSummary) {
      final Map<String,AggregateColumnInfo> aggregateColumnInfos=reportExtendedMetadata.getAggregateColumnInfo();
      for (      String aggregateColumnName : reportMetadata.getAggregates()) {
        columnNames.add(aggregateColumnName);
        result.add(aggregateColumnInfos.get(aggregateColumnName));
      }
    }
  }
 else {
    final Map<String,DetailColumnInfo> detailColumnInfo=reportExtendedMetadata.getDetailColumnInfo();
    for (    String columnName : reportMetadata.getDetailColumns()) {
      columnNames.add(columnName);
      result.add(detailColumnInfo.get(columnName));
    }
  }
  return columnNames.toArray(new String[columnNames.size()]);
}
