{
  BindyCsvFactory factory=(BindyCsvFactory)getFactory(exchange.getContext().getPackageScanClassResolver());
  ObjectHelper.notNull(factory,"not instantiated");
  byte[] bytesCRLF=ConverterUtils.getByteReturn(factory.getCarriageReturn());
  if (factory.getGenerateHeaderColumnNames()) {
    String result=factory.generateHeader();
    byte[] bytes=exchange.getContext().getTypeConverter().convertTo(byte[].class,exchange,result);
    outputStream.write(bytes);
    outputStream.write(bytesCRLF);
  }
  List<Map<String,Object>> models=new ArrayList<Map<String,Object>>();
  Iterator<Object> it=ObjectHelper.createIterator(body);
  while (it.hasNext()) {
    Object model=it.next();
    if (model instanceof Map) {
      models.add((Map<String,Object>)model);
    }
 else {
      String name=model.getClass().getName();
      Map<String,Object> row=new HashMap<String,Object>(1);
      row.put(name,model);
      for (      Field field : model.getClass().getDeclaredFields()) {
        Link linkField=field.getAnnotation(Link.class);
        if (linkField != null) {
          boolean accessible=field.isAccessible();
          field.setAccessible(true);
          row.put(field.getType().getName(),field.get(model));
          field.setAccessible(accessible);
        }
      }
      models.add(row);
    }
  }
  for (  Map<String,Object> model : models) {
    String result=factory.unbind(model);
    byte[] bytes=exchange.getContext().getTypeConverter().convertTo(byte[].class,exchange,result);
    outputStream.write(bytes);
    outputStream.write(bytesCRLF);
  }
}
