{
  Map<String,AttributeValue> startKey=new HashMap<String,AttributeValue>();
  startKey.put("1",new AttributeValue("startKey"));
  List<String> attributeNames=Arrays.asList("attrNameOne","attrNameTwo");
  exchange.getIn().setHeader(DdbConstants.ATTRIBUTE_NAMES,attributeNames);
  exchange.getIn().setHeader(DdbConstants.CONSISTENT_READ,true);
  exchange.getIn().setHeader(DdbConstants.START_KEY,startKey);
  exchange.getIn().setHeader(DdbConstants.LIMIT,10);
  exchange.getIn().setHeader(DdbConstants.SCAN_INDEX_FORWARD,true);
  Map<String,Condition> keyConditions=new HashMap<String,Condition>();
  Condition condition=new Condition().withComparisonOperator(ComparisonOperator.GT.toString()).withAttributeValueList(new AttributeValue().withN("1985"));
  keyConditions.put("1",condition);
  exchange.getIn().setHeader(DdbConstants.KEY_CONDITIONS,keyConditions);
  command.execute();
  Map<String,AttributeValue> mapAssert=new HashMap<String,AttributeValue>();
  mapAssert.put("1",new AttributeValue("LAST_KEY"));
  ConsumedCapacity consumed=(ConsumedCapacity)exchange.getIn().getHeader(DdbConstants.CONSUMED_CAPACITY);
  assertEquals(Integer.valueOf(1),exchange.getIn().getHeader(DdbConstants.COUNT,Integer.class));
  assertEquals(Double.valueOf(1.0),consumed.getCapacityUnits());
  assertEquals(mapAssert,exchange.getIn().getHeader(DdbConstants.LAST_EVALUATED_KEY,Map.class));
  assertEquals(keyConditions,exchange.getIn().getHeader(DdbConstants.KEY_CONDITIONS,Map.class));
  Map<?,?> items=(Map<?,?>)exchange.getIn().getHeader(DdbConstants.ITEMS,List.class).get(0);
  assertEquals(new AttributeValue("attrValue"),items.get("attrName"));
}
