{
  localServer=ServerBootstrap.bootstrap().setHttpProcessor(getBasicHttpProcessor()).setConnectionReuseStrategy(getConnectionReuseStrategy()).setResponseFactory(getHttpResponseFactory()).setExpectationVerifier(getHttpExpectationVerifier()).setSslContext(getSSLContext()).registerHandler("/myapp",new HttpRequestHandler(){
    @Override public void handle(    HttpRequest request,    HttpResponse response,    HttpContext context) throws HttpException, IOException {
      Header[] from=request.getHeaders("from");
      assertEquals("me",from[0].getValue());
      Header[] to=request.getHeaders("to");
      assertEquals("[foo, bar]",to[0].getValue());
      response.setHeader("bar","yes");
      response.addHeader("foo","123");
      response.addHeader("foo","456");
      response.setEntity(new StringEntity("OK","ASCII"));
      response.setStatusCode(HttpStatus.SC_OK);
    }
  }
).registerHandler("/myapp",new HttpRequestHandler(){
    @Override public void handle(    HttpRequest request,    HttpResponse response,    HttpContext context) throws HttpException, IOException {
      Header[] from=request.getHeaders("from");
      assertEquals("me",from[0].getValue());
      Header[] to=request.getHeaders("to");
      assertEquals("[foo, bar]",to[0].getValue());
      response.setHeader("bar","yes");
      response.addHeader("foo","123");
      response.addHeader("foo","456");
      response.setEntity(new StringEntity("OK","ASCII"));
      response.setStatusCode(HttpStatus.SC_OK);
    }
  }
).create();
  localServer.start();
  super.setUp();
}
