{
  RestEndpoint answer=new RestEndpoint(uri,this);
  answer.setComponentName(componentName);
  answer.setApiDoc(apiDoc);
  String h=resolveAndRemoveReferenceParameter(parameters,"host",String.class,host);
  if (h == null && getCamelContext().getRestConfiguration() != null) {
    h=getCamelContext().getRestConfiguration().getHost();
  }
  if (h != null && !(h.startsWith("http://") || h.startsWith("https://"))) {
    h="http://" + h;
  }
  answer.setHost(h);
  setProperties(answer,parameters);
  answer.setParameters(parameters);
  String query=URISupport.createQueryString(parameters);
  if (ObjectHelper.isNotEmpty(query)) {
    answer.setQueryParameters(query);
  }
  if (!remaining.contains(":")) {
    throw new IllegalArgumentException("Invalid syntax. Must be rest:method:path[:uriTemplate] where uriTemplate is optional");
  }
  String method=ObjectHelper.before(remaining,":");
  String s=ObjectHelper.after(remaining,":");
  String path;
  String uriTemplate;
  if (s != null && s.contains(":")) {
    path=ObjectHelper.before(s,":");
    uriTemplate=ObjectHelper.after(s,":");
  }
 else {
    path=s;
    uriTemplate=null;
  }
  path=FileUtil.stripTrailingSeparator(path);
  uriTemplate=FileUtil.stripTrailingSeparator(uriTemplate);
  answer.setMethod(method);
  answer.setPath(path);
  answer.setUriTemplate(uriTemplate);
  if (answer.getComponentName() == null && getCamelContext().getRestConfiguration() != null) {
    String name=getCamelContext().getRestConfiguration().getProducerComponent();
    if (name == null) {
      name=getCamelContext().getRestConfiguration().getComponent();
    }
    answer.setComponentName(name);
  }
  return answer;
}
