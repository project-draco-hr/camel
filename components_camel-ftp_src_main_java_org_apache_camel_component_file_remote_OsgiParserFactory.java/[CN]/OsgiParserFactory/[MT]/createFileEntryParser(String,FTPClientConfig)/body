{
  FTPFileEntryParser parser=null;
  if (JAVA_QUALIFIED_NAME_PATTERN.matcher(key).matches()) {
    Class<?> parserClass=ocr.resolveClass(key);
    try {
      parser=(FTPFileEntryParser)parserClass.newInstance();
    }
 catch (    ClassCastException e) {
      throw new ParserInitializationException(parserClass.getName() + " does not implement the interface " + "org.apache.commons.net.ftp.FTPFileEntryParser.",e);
    }
catch (    Exception|ExceptionInInitializerError e) {
      throw new ParserInitializationException("Error initializing parser",e);
    }
  }
  if (parser == null) {
    String ukey=key.toUpperCase(Locale.ENGLISH);
    if (ukey.contains("UNIX")) {
      parser=new UnixFTPEntryParser(config);
    }
 else     if (ukey.contains("LINUX")) {
      parser=new UnixFTPEntryParser(config);
    }
 else     if (ukey.contains("VMS")) {
      parser=new VMSVersioningFTPEntryParser(config);
    }
 else     if (ukey.contains("WINDOWS")) {
      parser=createNTFTPEntryParser(config);
    }
 else     if (ukey.contains("WIN32")) {
      parser=createNTFTPEntryParser(config);
    }
 else     if (ukey.contains("OS/2")) {
      parser=new OS2FTPEntryParser(config);
    }
 else     if ((ukey.contains("OS/400")) || (ukey.contains("AS/400"))) {
      parser=createOS400FTPEntryParser(config);
    }
 else     if (ukey.contains("MVS")) {
      parser=new MVSFTPEntryParser();
    }
 else     if (ukey.contains("NETWARE")) {
      parser=new NetwareFTPEntryParser(config);
    }
 else     if (ukey.contains("MACOS PETER")) {
      parser=new MacOsPeterFTPEntryParser(config);
    }
 else     if (ukey.contains("TYPE: L8")) {
      parser=new UnixFTPEntryParser(config);
    }
 else {
      throw new ParserInitializationException("Unknown parser type: " + key);
    }
  }
  if (parser instanceof Configurable) {
    ((Configurable)parser).configure(config);
  }
  return parser;
}
