{
  beginReport(sink,locale);
  Set<String> classes;
  Map<String,Set<String>> packages=new TreeMap<String,Set<String>>();
  Class<?> prevFrom=null;
  Class<?> prevTo=null;
  sink.table();
  tableHeader(sink,locale);
  for (  ReportingTypeConverterLoader.TypeMapping mapping : mappings) {
    boolean ignored=false;
    Class<?> from=mapping.getFromType();
    Class<?> to=mapping.getToType();
    if (ObjectHelper.equal(from,prevFrom) && ObjectHelper.equal(to,prevTo)) {
      ignored=true;
    }
    prevFrom=from;
    prevTo=to;
    Method method=mapping.getMethod();
    Class<?> methodClass=method.getDeclaringClass();
    String packageName=methodClass.getPackage().getName();
    if (packages.containsKey(packageName)) {
      classes=packages.get(packageName);
    }
 else {
      classes=new TreeSet<String>();
      packages.put(packageName,classes);
    }
    classes.add(methodClass.getName());
    if (ignored) {
      sink.italic();
      this.tableRow(sink,from.getSimpleName(),to.getSimpleName(),method.getName(),methodClass,mapping.getConverterType().getName());
      sink.italic_();
    }
 else {
      this.tableRow(sink,from.getSimpleName(),to.getSimpleName(),method.getName(),methodClass,mapping.getConverterType().getName());
    }
  }
  sink.table_();
  generatePackageReport(sink,packages);
  endReport(sink);
}
