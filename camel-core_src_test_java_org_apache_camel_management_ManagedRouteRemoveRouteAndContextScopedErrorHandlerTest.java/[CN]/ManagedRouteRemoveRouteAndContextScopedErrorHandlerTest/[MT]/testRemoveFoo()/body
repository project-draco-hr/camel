{
  if (isPlatform("aix")) {
    return;
  }
  MBeanServer mbeanServer=getMBeanServer();
  ObjectName on=getRouteObjectName(mbeanServer,"foo");
  MockEndpoint mock=getMockEndpoint("mock:result");
  mock.expectedBodiesReceived("Hello World");
  template.sendBody("seda:foo","Hello World");
  assertMockEndpointsSatisfied();
  String state=(String)mbeanServer.getAttribute(on,"State");
  assertEquals("Should be started",ServiceStatus.Started.name(),state);
  Set<ObjectName> set=mbeanServer.queryNames(new ObjectName("*:type=errorhandlers,*"),null);
  assertEquals(2,set.size());
  mbeanServer.invoke(on,"stop",null,null);
  state=(String)mbeanServer.getAttribute(on,"State");
  assertEquals("Should be stopped",ServiceStatus.Stopped.name(),state);
  mbeanServer.invoke(on,"remove",null,null);
  boolean registered=mbeanServer.isRegistered(on);
  assertFalse("Route mbean should have been unregistered",registered);
  set=mbeanServer.queryNames(new ObjectName("*:type=routes,*"),null);
  assertEquals(1,set.size());
  set=mbeanServer.queryNames(new ObjectName("*:type=errorhandlers,*"),null);
  assertEquals(1,set.size());
  assertTrue("Should be context scoped error handler: " + set,set.iterator().next().toString().contains("Logging"));
}
