{
  MockEndpoint resultEndpoint=getMockEndpoint("mock:result");
  resultEndpoint.expectsNoDuplicates(body());
  resultEndpoint.expectedMessageCount(4);
  template.send("direct:parallel",new Processor(){
    public void process(    Exchange exchange){
      Message in=exchange.getIn();
      in.setBody("James,Guillaume,Hiram,Rob");
      in.setHeader("foo","bar");
    }
  }
);
  assertMockEndpointsSatisifed();
  List<Exchange> list=resultEndpoint.getReceivedExchanges();
  Set<Integer> numbersFound=new TreeSet<Integer>();
  final String[] NAMES={"James","Guillaume","Hiram","Rob"};
  for (int i=0; i < 4; i++) {
    Exchange exchange=list.get(i);
    Message in=exchange.getIn();
    Integer splitCounter=in.getHeader(Splitter.SPLIT_COUNTER,Integer.class);
    numbersFound.add(splitCounter);
    assertEquals(NAMES[splitCounter],in.getBody());
    assertMessageHeader(in,Splitter.SPLIT_SIZE,4);
  }
  assertEquals(4,numbersFound.size());
}
