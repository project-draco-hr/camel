{
  MockEndpoint resultEndpoint=getMockEndpoint("mock:result");
  resultEndpoint.expectedBodiesReceived("James","Guillaume","Hiram","Rob");
  template.send("direct:seqential",new Processor(){
    public void process(    Exchange exchange){
      Message in=exchange.getIn();
      in.setBody("James,Guillaume,Hiram,Rob");
      in.setHeader("foo","bar");
    }
  }
);
  assertMockEndpointsSatisfied();
  Set<String> ids=new HashSet<String>();
  Set<String> ids2=new HashSet<String>();
  List<Exchange> list=resultEndpoint.getReceivedExchanges();
  for (int i=0; i < 4; i++) {
    Exchange exchange=list.get(i);
    Message in=exchange.getIn();
    ids.add(in.getMessageId());
    ids2.add(exchange.getExchangeId());
    assertNotNull("The in message should not be null.",in);
    assertProperty(exchange,Exchange.SPLIT_INDEX,i);
    assertProperty(exchange,Exchange.SPLIT_SIZE,4);
  }
  assertEquals("The sub messages should have unique message ids",4,ids.size());
  assertEquals("The sub messages should have unique exchange ids",4,ids2.size());
}
