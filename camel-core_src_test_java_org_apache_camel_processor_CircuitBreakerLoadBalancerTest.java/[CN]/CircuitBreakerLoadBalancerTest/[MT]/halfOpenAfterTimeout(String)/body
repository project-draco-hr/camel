{
  expectsMessageCount(2,result);
  result.whenAnyExchangeReceived(new Processor(){
    @Override public void process(    Exchange exchange) throws Exception {
      exchange.setException(new MyCustomException());
    }
  }
);
  Exchange exchangeOne=sendMessage(endpoint,"message one");
  Exchange exchangeTwo=sendMessage(endpoint,"message two");
  Exchange exchangeThree=sendMessage(endpoint,"message three");
  Exchange exchangeFour=sendMessage(endpoint,"message four");
  assertMockEndpointsSatisfied();
  Thread.sleep(1000);
  result.reset();
  result.whenAnyExchangeReceived(new Processor(){
    @Override public void process(    Exchange exchange) throws Exception {
      exchange.setException(new MyCustomException());
    }
  }
);
  expectsMessageCount(1,result);
  Exchange exchangeFive=sendMessage(endpoint,"message five");
  Exchange exchangeSix=sendMessage(endpoint,"message six");
  assertMockEndpointsSatisfied();
  assertTrue(exchangeOne.getException() instanceof MyCustomException);
  assertTrue(exchangeTwo.getException() instanceof MyCustomException);
  assertTrue(exchangeThree.getException() instanceof RejectedExecutionException);
  assertTrue(exchangeFour.getException() instanceof RejectedExecutionException);
  assertTrue(exchangeFive.getException() instanceof MyCustomException);
  assertTrue(exchangeSix.getException() instanceof RejectedExecutionException);
}
