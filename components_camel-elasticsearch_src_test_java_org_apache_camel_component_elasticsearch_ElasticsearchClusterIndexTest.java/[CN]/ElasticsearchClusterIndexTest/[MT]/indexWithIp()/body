{
  Map<String,String> map=createIndexedData();
  Map<String,Object> headers=new HashMap<String,Object>();
  headers.put(ElasticsearchConstants.PARAM_OPERATION,ElasticsearchConstants.OPERATION_INDEX);
  headers.put(ElasticsearchConstants.PARAM_INDEX_NAME,"twitter");
  headers.put(ElasticsearchConstants.PARAM_INDEX_TYPE,"tweet");
  headers.put(ElasticsearchConstants.PARAM_INDEX_ID,"1");
  String indexId=template.requestBodyAndHeaders("direct:indexWithIp",map,headers,String.class);
  assertNotNull("indexId should be set",indexId);
  headers.clear();
  headers.put(ElasticsearchConstants.PARAM_OPERATION,ElasticsearchConstants.OPERATION_INDEX);
  headers.put(ElasticsearchConstants.PARAM_INDEX_NAME,"twitter");
  headers.put(ElasticsearchConstants.PARAM_INDEX_TYPE,"status");
  headers.put(ElasticsearchConstants.PARAM_INDEX_ID,"2");
  indexId=template.requestBodyAndHeaders("direct:indexWithIp",map,headers,String.class);
  assertNotNull("indexId should be set",indexId);
  assertEquals("Cluster must be of three nodes",runner.getNodeSize(),3);
  assertEquals("Index id 1 must exists",true,client.prepareGet("twitter","tweet","1").get().isExists());
  assertEquals("Index id 2 must exists",true,client.prepareGet("twitter","status","2").get().isExists());
}
