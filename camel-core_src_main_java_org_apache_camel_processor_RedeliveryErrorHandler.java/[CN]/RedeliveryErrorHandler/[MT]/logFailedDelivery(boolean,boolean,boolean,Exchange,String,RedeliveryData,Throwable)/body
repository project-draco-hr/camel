{
  if (logger == null) {
    return;
  }
  if (handled && !data.currentRedeliveryPolicy.isLogHandled()) {
    return;
  }
  if (continued && !data.currentRedeliveryPolicy.isLogContinued()) {
    return;
  }
  if (shouldRedeliver && !data.currentRedeliveryPolicy.isLogRetryAttempted()) {
    return;
  }
  if (!shouldRedeliver && !data.currentRedeliveryPolicy.isLogExhausted()) {
    return;
  }
  LoggingLevel newLogLevel;
  boolean logStrackTrace;
  if (shouldRedeliver) {
    newLogLevel=data.currentRedeliveryPolicy.getRetryAttemptedLogLevel();
    logStrackTrace=data.currentRedeliveryPolicy.isLogRetryStackTrace();
  }
 else {
    newLogLevel=data.currentRedeliveryPolicy.getRetriesExhaustedLogLevel();
    logStrackTrace=data.currentRedeliveryPolicy.isLogStackTrace();
  }
  if (e == null) {
    e=exchange.getProperty(Exchange.EXCEPTION_CAUGHT,Exception.class);
  }
  if (exchange.isRollbackOnly()) {
    String msg="Rollback exchange";
    if (exchange.getException() != null) {
      msg=msg + " due: " + exchange.getException().getMessage();
    }
    if (newLogLevel == LoggingLevel.ERROR) {
      logger.log(msg,LoggingLevel.WARN);
    }
 else {
      logger.log(msg,newLogLevel);
    }
  }
 else   if (e != null && logStrackTrace) {
    logger.log(message,e,newLogLevel);
  }
 else {
    logger.log(message,newLogLevel);
  }
}
