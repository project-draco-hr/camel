{
  if (!isRunAllowed()) {
    if (exchange.getException() == null) {
      exchange.setException(new RejectedExecutionException());
    }
    callback.done(data.sync);
    return;
  }
  boolean handle=shouldHandleException(exchange);
  if (handle) {
    handleException(exchange,data);
  }
  boolean shouldRedeliver=shouldRedeliver(exchange,data);
  if (!shouldRedeliver) {
    Processor target=null;
    boolean deliver=true;
    SubUnitOfWorkCallback uowCallback=exchange.getUnitOfWork().getSubUnitOfWorkCallback();
    if (uowCallback != null) {
      uowCallback.onExhausted(exchange);
      deliver=false;
    }
    if (deliver) {
      target=data.failureProcessor != null ? data.failureProcessor : data.deadLetterProcessor;
    }
    deliverToFailureProcessor(target,exchange,data,callback);
    return;
  }
  if (data.redeliveryCounter > 0) {
    AsyncRedeliveryTask task=new AsyncRedeliveryTask(exchange,callback,data);
    data.redeliveryDelay=data.currentRedeliveryPolicy.calculateRedeliveryDelay(data.redeliveryDelay,data.redeliveryCounter);
    if (data.redeliveryDelay > 0) {
      if (log.isTraceEnabled()) {
        log.trace("Scheduling redelivery task to run in {} millis for exchangeId: {}",data.redeliveryDelay,exchange.getExchangeId());
      }
      executorService.schedule(task,data.redeliveryDelay,TimeUnit.MILLISECONDS);
    }
 else {
      executorService.submit(task);
    }
  }
}
