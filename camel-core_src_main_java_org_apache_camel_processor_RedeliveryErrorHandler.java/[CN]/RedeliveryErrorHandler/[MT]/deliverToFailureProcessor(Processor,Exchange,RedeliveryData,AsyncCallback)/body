{
  boolean sync=true;
  Exception caught=exchange.getException();
  exchange.setException(null);
  boolean handled=false;
  if (shouldHandled(exchange,data) || shouldContinue(exchange,data)) {
    exchange.getIn().removeHeader(Exchange.REDELIVERED);
    exchange.getIn().removeHeader(Exchange.REDELIVERY_COUNTER);
    exchange.getIn().removeHeader(Exchange.REDELIVERY_MAX_COUNTER);
    handled=true;
  }
 else {
    decrementRedeliveryCounter(exchange);
  }
  if (processor != null) {
    if (data.useOriginalInMessage) {
      if (log.isTraceEnabled()) {
        log.trace("Using the original IN message instead of current");
      }
      Message original=exchange.getUnitOfWork().getOriginalInMessage();
      exchange.setIn(original);
      if (exchange.hasOut()) {
        if (log.isTraceEnabled()) {
          log.trace("Removing the out message to avoid some uncertain behavior");
        }
        exchange.setOut(null);
      }
    }
    MessageHelper.resetStreamCache(exchange.getIn());
    if (log.isTraceEnabled()) {
      log.trace("Failure processor " + processor + " is processing Exchange: "+ exchange);
    }
    exchange.setProperty(Exchange.FAILURE_ENDPOINT,exchange.getProperty(Exchange.TO_ENDPOINT));
    AsyncProcessor afp=AsyncProcessorTypeConverter.convert(processor);
    sync=AsyncProcessorHelper.process(afp,exchange,new AsyncCallback(){
      public void done(      boolean sync){
        if (log.isTraceEnabled()) {
          log.trace("Failure processor done: " + processor + " processing Exchange: "+ exchange);
        }
        try {
          prepareExchangeAfterFailure(exchange,data);
          boolean deadLetterChannel=processor == data.deadLetterProcessor && data.deadLetterProcessor != null;
          EventHelper.notifyExchangeFailureHandled(exchange.getContext(),exchange,processor,deadLetterChannel);
        }
  finally {
          data.sync&=sync;
          callback.done(data.sync);
        }
      }
    }
);
  }
 else {
    try {
      prepareExchangeAfterFailure(exchange,data);
    }
  finally {
      callback.done(data.sync);
    }
  }
  String msg="Failed delivery for exchangeId: " + exchange.getExchangeId();
  msg=msg + ". Exhausted after delivery attempt: " + data.redeliveryCounter+ " caught: "+ caught;
  if (processor != null) {
    msg=msg + ". Processed by failure processor: " + processor;
  }
  logFailedDelivery(false,handled,false,exchange,msg,data,null);
  return sync;
}
