{
  while (true) {
    if (!isRunAllowed()) {
      if (log.isDebugEnabled()) {
        log.debug("Rejected execution as we are not started for exchange: " + exchange);
      }
      if (exchange.getException() == null) {
        exchange.setException(new RejectedExecutionException());
        return;
      }
    }
    if (exchange.isTransacted() && !supportTransacted() && exchange.getException() != null) {
      if (log.isDebugEnabled()) {
        log.debug("This error handler does not support transacted exchanges." + " Bypassing this error handler: " + this + " for exchangeId: "+ exchange.getExchangeId());
      }
      return;
    }
    if (exchange.getException() != null) {
      handleException(exchange,data);
    }
    boolean shouldRedeliver=shouldRedeliver(exchange,data);
    if (!shouldRedeliver) {
      deliverToFailureProcessor(exchange,data);
      prepareExchangeAfterFailure(exchange,data);
      return;
    }
    if (data.redeliveryCounter > 0) {
      prepareExchangeForRedelivery(exchange);
      try {
        data.redeliveryDelay=data.currentRedeliveryPolicy.sleep(data.redeliveryDelay,data.redeliveryCounter);
      }
 catch (      InterruptedException e) {
        log.debug("Sleep interrupted, are we stopping? " + (isStopping() || isStopped()));
        continue;
      }
      deliverToRedeliveryProcessor(exchange,data);
    }
    try {
      output.process(exchange);
    }
 catch (    Exception e) {
      exchange.setException(e);
    }
    boolean done=exchange.getException() == null || ExchangeHelper.isFailureHandled(exchange);
    if (done) {
      return;
    }
  }
}
