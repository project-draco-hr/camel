{
  Map<String,String> result=new HashMap<String,String>();
  final Pattern packagePatterns=Pattern.compile(excludePackages);
  Pattern classPatterns=null;
  if (excludeClasses != null) {
    classPatterns=Pattern.compile(excludeClasses);
  }
  Pattern methodPatterns=null;
  if (excludeMethods != null) {
    methodPatterns=Pattern.compile(excludeMethods);
  }
  for (Class aClass=getProxyType(); aClass != null && !packagePatterns.matcher(aClass.getPackage().getName()).matches() && (classPatterns == null || !classPatterns.matcher(aClass.getSimpleName()).matches()); aClass=aClass.getSuperclass()) {
    log.debug("Processing " + aClass.getName());
    final String javaDocPath=aClass.getName().replaceAll("\\.","/") + ".html";
    InputStream inputStream=null;
    try {
      inputStream=getProjectClassLoader().getResourceAsStream(javaDocPath);
      if (inputStream == null) {
        log.debug("JavaDoc not found on classpath for " + aClass.getName());
        break;
      }
      final DTD dtd=DTD.getDTD("html.dtd");
      final JavadocParser htmlParser=new JavadocParser(dtd,javaDocPath);
      htmlParser.parse(new InputStreamReader(inputStream,"UTF-8"));
      final Map<String,String> methodMap=htmlParser.getMethodText();
      for (      String method : htmlParser.getMethods()) {
        if (!result.containsKey(method) && (methodPatterns == null || !methodPatterns.matcher(method).find())) {
          final int leftBracket=method.indexOf('(');
          final String name=method.substring(0,leftBracket);
          final String args=method.substring(leftBracket + 1,method.length() - 1);
          String[] types;
          if (args.isEmpty()) {
            types=new String[0];
          }
 else {
            types=args.split(",");
          }
          final String resultType=getResultType(aClass,name,types);
          if (resultType != null) {
            final StringBuilder signature=new StringBuilder(resultType);
            signature.append(" ").append(name).append(methodMap.get(method));
            result.put(method,signature.toString());
          }
        }
      }
    }
 catch (    IOException e) {
      throw new MojoExecutionException(e.getMessage(),e);
    }
 finally {
      IOUtil.close(inputStream);
    }
  }
  if (result.isEmpty()) {
    throw new MojoExecutionException("No public non-static methods found, " + "make sure Javadoc is available as project test dependency");
  }
  return new ArrayList<String>(result.values());
}
