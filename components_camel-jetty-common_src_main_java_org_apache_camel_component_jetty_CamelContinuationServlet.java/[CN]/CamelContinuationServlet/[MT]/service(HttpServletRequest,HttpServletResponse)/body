{
  log.trace("Service: {}",request);
  HttpConsumer consumer=getServletResolveConsumerStrategy().resolve(request,getConsumers());
  if (consumer == null) {
    response.sendError(HttpServletResponse.SC_NOT_FOUND);
    return;
  }
  if (consumer.getEndpoint().getHttpMethodRestrict() != null) {
    Iterator it=ObjectHelper.createIterable(consumer.getEndpoint().getHttpMethodRestrict()).iterator();
    boolean match=false;
    while (it.hasNext()) {
      String method=it.next().toString();
      if (method.equalsIgnoreCase(request.getMethod())) {
        match=true;
        break;
      }
    }
    if (!match) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED);
      return;
    }
  }
  if ("TRACE".equals(request.getMethod()) && !consumer.isTraceEnabled()) {
    response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED);
    return;
  }
  final Exchange result=(Exchange)request.getAttribute(EXCHANGE_ATTRIBUTE_NAME);
  if (result == null) {
    final Continuation continuation=ContinuationSupport.getContinuation(request);
    if (continuation.isInitial() && continuationTimeout != null) {
      continuation.setTimeout(continuationTimeout);
    }
    if (consumer.isSuspended() && continuation.isInitial()) {
      response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);
      return;
    }
    if (continuation.isExpired()) {
      String id=(String)continuation.getAttribute(EXCHANGE_ATTRIBUTE_ID);
      expiredExchanges.put(id,id);
      log.warn("Continuation expired of exchangeId: {}",id);
      response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);
      return;
    }
    final Exchange exchange=new DefaultExchange(consumer.getEndpoint(),ExchangePattern.InOut);
    if (consumer.getEndpoint().isBridgeEndpoint()) {
      exchange.setProperty(Exchange.SKIP_GZIP_ENCODING,Boolean.TRUE);
      exchange.setProperty(Exchange.SKIP_WWW_FORM_URLENCODED,Boolean.TRUE);
    }
    if (consumer.getEndpoint().isDisableStreamCache()) {
      exchange.setProperty(Exchange.DISABLE_HTTP_STREAM_CACHE,Boolean.TRUE);
    }
    HttpHelper.setCharsetFromContentType(request.getContentType(),exchange);
    exchange.setIn(new HttpMessage(exchange,request,response));
    String contextPath=consumer.getEndpoint().getPath();
    exchange.getIn().setHeader("CamelServletContextPath",contextPath);
    String httpPath=(String)exchange.getIn().getHeader(Exchange.HTTP_PATH);
    if (contextPath != null && httpPath.startsWith(contextPath)) {
      exchange.getIn().setHeader(Exchange.HTTP_PATH,httpPath.substring(contextPath.length()));
    }
    if (log.isTraceEnabled()) {
      log.trace("Suspending continuation of exchangeId: {}",exchange.getExchangeId());
    }
    continuation.setAttribute(EXCHANGE_ATTRIBUTE_ID,exchange.getExchangeId());
    try {
      consumer.createUoW(exchange);
    }
 catch (    Exception e) {
      log.error("Error processing request",e);
      throw new ServletException(e);
    }
    continuation.suspend();
    ClassLoader oldTccl=overrideTccl(exchange);
    if (log.isTraceEnabled()) {
      log.trace("Processing request for exchangeId: {}",exchange.getExchangeId());
    }
    consumer.getAsyncProcessor().process(exchange,new AsyncCallback(){
      public void done(      boolean doneSync){
        boolean expired=expiredExchanges.remove(exchange.getExchangeId()) != null;
        if (!expired) {
          if (log.isTraceEnabled()) {
            log.trace("Resuming continuation of exchangeId: {}",exchange.getExchangeId());
          }
          continuation.setAttribute(EXCHANGE_ATTRIBUTE_NAME,exchange);
          continuation.resume();
        }
 else {
          log.warn("Cannot resume expired continuation of exchangeId: {}",exchange.getExchangeId());
        }
      }
    }
);
    if (oldTccl != null) {
      restoreTccl(exchange,oldTccl);
    }
    return;
  }
  try {
    if (log.isTraceEnabled()) {
      log.trace("Resumed continuation and writing response for exchangeId: {}",result.getExchangeId());
    }
    Integer bs=consumer.getEndpoint().getResponseBufferSize();
    if (bs != null) {
      log.trace("Using response buffer size: {}",bs);
      response.setBufferSize(bs);
    }
    consumer.getBinding().writeResponse(result,response);
  }
 catch (  IOException e) {
    log.error("Error processing request",e);
    throw e;
  }
catch (  Exception e) {
    log.error("Error processing request",e);
    throw new ServletException(e);
  }
 finally {
    consumer.doneUoW(result);
  }
}
