{
  MockEndpoint mock=getMockEndpoint("mock:aggregateToZipEntry");
  mock.expectedMessageCount(1);
  assertMockEndpointsSatisfied();
  Thread.sleep(500);
  File[] files=new File("target/out").listFiles();
  assertTrue("Should be a file in target/out directory",files.length > 0);
  File resultFile=files[0];
  Set<String> expectedZipFiles=new HashSet<String>(Arrays.asList("another" + File.separator + "hello.txt","other" + File.separator + "greetings.txt","chiau.txt","hi.txt","hola.txt"));
  ZipInputStream zin=new ZipInputStream(new FileInputStream(resultFile));
  try {
    int fileCount=0;
    for (ZipEntry ze=zin.getNextEntry(); ze != null; ze=zin.getNextEntry()) {
      expectedZipFiles.remove(ze.toString());
      fileCount++;
    }
    assertTrue("Zip file should contains " + AggregationStrategyWithPreservationTest.EXPECTED_NO_FILES + " files",fileCount == AggregationStrategyWithPreservationTest.EXPECTED_NO_FILES);
    assertEquals("Should have found all of the zip files in the file.",0,expectedZipFiles.size());
  }
  finally {
    IOHelper.close(zin);
  }
}
