{
  setUp("jpa://" + Customer.class.getName() + "?usePersist=false");
  final Customer customer=createDefaultCustomer();
  transactionTemplate.execute(new TransactionCallback<Object>(){
    public Object doInTransaction(    TransactionStatus status){
      entityManager.joinTransaction();
      entityManager.persist(customer);
      entityManager.flush();
      return null;
    }
  }
);
  assertEntitiesInDatabase(1,Customer.class.getName());
  assertEntitiesInDatabase(1,Address.class.getName());
  customer.setName("Max Mustermann");
  customer.getAddress().setAddressLine1("Musterstr. 1");
  customer.getAddress().setAddressLine2("11111 Enterhausen");
  Customer receivedCustomer=template.requestBody(endpoint,customer,Customer.class);
  assertEquals(customer.getName(),receivedCustomer.getName());
  assertNotNull(receivedCustomer.getId());
  assertEquals(customer.getAddress().getAddressLine1(),receivedCustomer.getAddress().getAddressLine1());
  assertEquals(customer.getAddress().getAddressLine2(),receivedCustomer.getAddress().getAddressLine2());
  assertNotNull(receivedCustomer.getAddress().getId());
  List<?> results=entityManager.createQuery("select o from " + Customer.class.getName() + " o").getResultList();
  assertEquals(1,results.size());
  Customer persistedCustomer=(Customer)results.get(0);
  assertEquals(receivedCustomer.getName(),persistedCustomer.getName());
  assertEquals(receivedCustomer.getId(),persistedCustomer.getId());
  assertEquals(receivedCustomer.getAddress().getAddressLine1(),persistedCustomer.getAddress().getAddressLine1());
  assertEquals(receivedCustomer.getAddress().getAddressLine2(),persistedCustomer.getAddress().getAddressLine2());
  assertEquals(receivedCustomer.getAddress().getId(),persistedCustomer.getAddress().getId());
}
