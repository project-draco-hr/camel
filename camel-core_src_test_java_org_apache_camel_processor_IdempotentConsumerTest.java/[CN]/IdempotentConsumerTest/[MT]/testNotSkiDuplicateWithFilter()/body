{
  context.addRoutes(new RouteBuilder(){
    @Override public void configure() throws Exception {
      IdempotentRepository repo=MemoryIdempotentRepository.memoryIdempotentRepository(200);
      from("direct:start").idempotentConsumer(header("messageId")).messageIdRepository(repo).skipDuplicate(false).filter(property(Exchange.DUPLICATE_MESSAGE).isEqualTo(true)).to("mock:duplicate").stop().end().to("mock:result");
    }
  }
);
  context.start();
  resultEndpoint.expectedBodiesReceived("one","two","three");
  getMockEndpoint("mock:duplicate").expectedBodiesReceived("one","two","one");
  getMockEndpoint("mock:duplicate").allMessages().property(Exchange.DUPLICATE_MESSAGE).isEqualTo(Boolean.TRUE);
  sendMessage("1","one");
  sendMessage("2","two");
  sendMessage("1","one");
  sendMessage("2","two");
  sendMessage("1","one");
  sendMessage("3","three");
  assertMockEndpointsSatisfied();
}
