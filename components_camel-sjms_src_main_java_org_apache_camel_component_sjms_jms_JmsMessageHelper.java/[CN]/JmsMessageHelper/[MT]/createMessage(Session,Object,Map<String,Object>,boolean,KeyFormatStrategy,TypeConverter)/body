{
  Message answer=null;
  JmsMessageType messageType=JmsMessageHelper.discoverMessageTypeFromPayload(payload);
switch (messageType) {
case Bytes:
    BytesMessage bytesMessage=session.createBytesMessage();
  byte[] bytesToWrite=typeConverter.convertTo(byte[].class,payload);
bytesMessage.writeBytes(bytesToWrite);
answer=bytesMessage;
break;
case Map:
MapMessage mapMessage=session.createMapMessage();
Map objMap=(Map)payload;
for (final Map.Entry entry : (Set<Map.Entry>)objMap.entrySet()) {
mapMessage.setObject(entry.getKey().toString(),entry.getValue());
}
answer=mapMessage;
break;
case Object:
ObjectMessage objectMessage=session.createObjectMessage();
objectMessage.setObject((Serializable)payload);
answer=objectMessage;
break;
case Text:
TextMessage textMessage=session.createTextMessage();
String convertedText=typeConverter.convertTo(String.class,payload);
textMessage.setText(convertedText);
answer=textMessage;
break;
case Stream:
StreamMessage streamMessage=session.createStreamMessage();
Collection collection=(Collection)payload;
for (final Object obj : collection) {
streamMessage.writeObject(obj);
}
answer=streamMessage;
break;
case Message:
if (allowNullBody && payload == null) {
answer=session.createMessage();
}
 else if (payload != null) {
throw new JMSException("Unsupported message body type " + ObjectHelper.classCanonicalName(payload));
}
 else {
throw new JMSException("Null body is not allowed");
}
break;
default :
break;
}
if (messageHeaders != null && !messageHeaders.isEmpty()) {
answer=JmsMessageHelper.setJmsMessageHeaders(answer,messageHeaders,keyFormatStrategy);
}
return answer;
}
