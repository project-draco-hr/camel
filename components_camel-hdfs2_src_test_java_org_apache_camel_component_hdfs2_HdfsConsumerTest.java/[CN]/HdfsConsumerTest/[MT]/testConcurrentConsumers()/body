{
  if (!canTest()) {
    return;
  }
  final File dir=new File("target/test/multiple-consumers");
  dir.mkdirs();
  for (int i=1; i <= ITERATIONS; i++) {
    FileOutputStream fos=new FileOutputStream(new File(dir,String.format("file-%04d.txt",i)));
    fos.write(String.format("hello (%04d)\n",i).getBytes());
    fos.close();
  }
  final Set<String> fileNames=new HashSet<String>();
  final CountDownLatch latch=new CountDownLatch(ITERATIONS);
  MockEndpoint resultEndpoint=context.getEndpoint("mock:result",MockEndpoint.class);
  resultEndpoint.whenAnyExchangeReceived(new Processor(){
    @Override public void process(    Exchange exchange) throws Exception {
      fileNames.add(exchange.getIn().getHeader(Exchange.FILE_NAME,String.class));
      latch.countDown();
    }
  }
);
  context.addRoutes(new RouteBuilder(){
    public void configure(){
      from("hdfs2://" + dir.toURI() + "/?pattern=*.txt&fileSystemType=LOCAL&chunkSize=100&initialDelay=0").to("mock:result");
      from("hdfs2://" + dir.toURI() + "/?pattern=*.txt&fileSystemType=LOCAL&chunkSize=200&initialDelay=0").to("mock:result");
      from("hdfs2://" + dir.toURI() + "/?pattern=*.txt&fileSystemType=LOCAL&chunkSize=300&initialDelay=0").to("mock:result");
      from("hdfs2://" + dir.toURI() + "/?pattern=*.txt&fileSystemType=LOCAL&chunkSize=400&initialDelay=0").to("mock:result");
    }
  }
);
  context.start();
  resultEndpoint.expectedMessageCount(ITERATIONS);
  latch.await(30,TimeUnit.SECONDS);
  resultEndpoint.assertIsSatisfied();
  assertThat(fileNames.size(),equalTo(ITERATIONS));
}
