{
  if (isJava16() && isJavaVendor("ibm")) {
    return;
  }
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  dbf.setNamespaceAware(true);
  DocumentBuilder db=dbf.newDocumentBuilder();
  Document doc=db.parse(getClass().getClassLoader().getResourceAsStream("test.xml"));
  Element elem=null;
  NodeList nl=doc.getDocumentElement().getChildNodes();
  for (int i=0; i < nl.getLength(); i++) {
    Node node=nl.item(i);
    if (node instanceof Element) {
      elem=(Element)node;
      break;
    }
  }
  CamelNamespaceHandler.renameNamespaceRecursive(elem,CamelNamespaceHandler.BLUEPRINT_NS,CamelNamespaceHandler.SPRING_NS);
  JAXBContext context=JAXBContext.newInstance("org.apache.camel.blueprint:" + "org.apache.camel:org.apache.camel.model:" + "org.apache.camel.model.config:"+ "org.apache.camel.model.dataformat:"+ "org.apache.camel.model.language:"+ "org.apache.camel.model.loadbalancer");
  Unmarshaller unmarshaller=context.createUnmarshaller();
  Object object=unmarshaller.unmarshal(elem);
  assertNotNull(object);
  assertTrue(object instanceof CamelContextFactoryBean);
  assertNotNull(((CamelContextFactoryBean)object).getRoutes());
  assertEquals(1,((CamelContextFactoryBean)object).getRoutes().size());
  assertNotNull(((CamelContextFactoryBean)object).getRoutes().get(0));
  assertNotNull(((CamelContextFactoryBean)object).getRoutes().get(0).getInputs());
  assertEquals(1,((CamelContextFactoryBean)object).getRoutes().get(0).getInputs().size());
  assertNotNull(((CamelContextFactoryBean)object).getRoutes().get(0).getOutputs());
  assertEquals(1,((CamelContextFactoryBean)object).getRoutes().get(0).getOutputs().size());
  assertTrue(((CamelContextFactoryBean)object).getCamelPropertyPlaceholder().isCache());
  assertTrue(((CamelContextFactoryBean)object).getCamelPropertyPlaceholder().isIgnoreMissingLocation());
}
