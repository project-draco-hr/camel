{
  ObjectHelper.notNull(operations,"operations");
  ObjectHelper.notNull(file,"file");
  NewFileConsumer result=new NewFileConsumer(this,processor,operations);
  if (isDelete() && (getMoveNamePrefix() != null || getMoveNamePostfix() != null || getMoveExpression() != null)) {
    throw new IllegalArgumentException("You cannot set both delete=true and either a (moveNamePrefix, moveNamePostfix or moveExpression) option");
  }
  if (isNoop() && !isIdempotent()) {
    log.info("Endpoint is configured with noop=true so forcing endpoint to be idempotent as well");
    setIdempotent(true);
  }
  if (isIdempotent() && idempotentRepository == null) {
    log.info("Using default memory based idempotent repository with cache max size: " + DEFAULT_IDEMPOTENT_CACHE_SIZE);
    idempotentRepository=MemoryIdempotentRepository.memoryIdempotentRepository(DEFAULT_IDEMPOTENT_CACHE_SIZE);
  }
  if (isDirectory() && file.isFile()) {
    if (log.isDebugEnabled()) {
      log.debug(file + " is not a directory so setting option directory=false");
    }
    setDirectory(false);
  }
  configureConsumer(result);
  return result;
}
