{
  endpoint.setAmazonDynamoDbStreamsClient(amazonDynamoDBStreams);
  when(amazonDynamoDBStreams.listStreams(any(ListStreamsRequest.class))).thenReturn(new ListStreamsResult().withStreams(new Stream().withStreamArn("arn:aws:dynamodb:region:12345:table/table_name/stream/timestamp")));
  when(amazonDynamoDBStreams.describeStream(any(DescribeStreamRequest.class))).thenReturn(new DescribeStreamResult().withStreamDescription(new StreamDescription().withTableName("table_name").withShards(ShardListTest.createShardsWithSequenceNumbers(null,"a","1","5","b","8","15","c","16","16","d","20",null))));
  when(amazonDynamoDBStreams.getShardIterator(any(GetShardIteratorRequest.class))).thenAnswer(new Answer<GetShardIteratorResult>(){
    @Override public GetShardIteratorResult answer(    InvocationOnMock invocation) throws Throwable {
      return new GetShardIteratorResult().withShardIterator("shard_iterator_" + ((GetShardIteratorRequest)invocation.getArguments()[0]).getShardId() + "_000");
    }
  }
);
  final Map<String,String> shardIterators=new HashMap<>();
  shardIterators.put("shard_iterator_a_000","shard_iterator_a_001");
  shardIterators.put("shard_iterator_b_000","shard_iterator_b_001");
  shardIterators.put("shard_iterator_b_001","shard_iterator_b_002");
  shardIterators.put("shard_iterator_c_000","shard_iterator_c_001");
  shardIterators.put("shard_iterator_d_000","shard_iterator_d_001");
  final Map<String,Collection<Record>> answers=new HashMap<>();
  answers.put("shard_iterator_a_001",createRecords("2"));
  answers.put("shard_iterator_b_000",createRecords("9"));
  answers.put("shard_iterator_b_001",createRecords("11","13"));
  answers.put("shard_iterator_b_002",createRecords("14"));
  answers.put("shard_iterator_d_000",createRecords("21","25"));
  answers.put("shard_iterator_d_001",createRecords("30","35","40"));
  when(amazonDynamoDBStreams.getRecords(any(GetRecordsRequest.class))).thenAnswer(new Answer<GetRecordsResult>(){
    @Override public GetRecordsResult answer(    InvocationOnMock invocation) throws Throwable {
      final String shardIterator=((GetRecordsRequest)invocation.getArguments()[0]).getShardIterator();
      String nextShardIterator=shardIterators.get(shardIterator);
      Matcher m=Pattern.compile("shard_iterator_d_0*(\\d+)").matcher(shardIterator);
      Collection<Record> ans=answers.get(shardIterator);
      if (nextShardIterator == null && m.matches()) {
        Integer num=Integer.parseInt(m.group(1));
        nextShardIterator="shard_iterator_d_" + pad(Integer.toString(num + 1),3);
      }
      if (null == ans) {
        ans=createRecords();
      }
      return new GetRecordsResult().withRecords(ans).withNextShardIterator(nextShardIterator);
    }
  }
);
}
