{
  try {
    final SMSMessage smsMessage=exchange.getIn().getBody(SMSMessage.class);
    if (smsMessage == null) {
      throw new NullPointerException();
    }
    LOG.trace("Validating SMSMessage instance provided: {}",smsMessage.toString());
    final Set<ConstraintViolation<SMSMessage>> constraintViolations=getValidator().validate(smsMessage);
    if (constraintViolations.size() > 0) {
      final StringBuffer msg=new StringBuffer();
      for (      final ConstraintViolation<SMSMessage> cv : constraintViolations) {
        msg.append(String.format("- Invalid value for %s: %s",cv.getPropertyPath().toString(),cv.getMessage()));
      }
      throw new InvalidPayloadException(msg.toString());
    }
    LOG.trace("SMSMessage instance is valid: {}",smsMessage.toString());
    final CMMessage cmMessage=new CMMessage(smsMessage.getPhoneNumber(),smsMessage.getMessage());
    LOG.debug("CMMessage instance build from valid SMSMessage instance");
    if (smsMessage.getFrom() == null || smsMessage.getFrom().isEmpty()) {
      String df=getConfiguration().getDefaultFrom();
      cmMessage.setSender(df);
      LOG.debug("Dynamic sender is set to default dynamic sender: {}",df);
    }
    cmMessage.setIdAsString(smsMessage.getId());
    cmMessage.setUnicodeAndMultipart(getConfiguration().getDefaultMaxNumberOfParts());
    sender.send(cmMessage);
    log.debug("Request accepted by CM Host: {}",cmMessage.toString());
  }
 catch (  final NullPointerException e) {
    final String m="Check Message body - Has to be an SMSMessage instance";
    log.error(m,e);
    exchange.setException(new InvalidPayloadException(m));
  }
catch (  final RuntimeException e) {
    log.error("Message cannot be sent ",e);
    exchange.setException(e);
  }
}
