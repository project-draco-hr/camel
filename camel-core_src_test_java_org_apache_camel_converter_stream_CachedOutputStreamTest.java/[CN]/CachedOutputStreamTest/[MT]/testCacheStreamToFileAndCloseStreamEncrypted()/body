{
  context.getStreamCachingStrategy().setSpoolChiper("RC4");
  context.start();
  CachedOutputStream cos=new CachedOutputStream(exchange);
  cos.write(TEST_STRING.getBytes("UTF-8"));
  cos.flush();
  File file=new File("target/cachedir");
  String[] files=file.list();
  assertEquals("we should have a temp file",1,files.length);
  assertTrue("The content is written",new File(file,files[0]).length() > 10);
  java.io.FileInputStream tmpin=new java.io.FileInputStream(new File(file,files[0]));
  String temp=toString(tmpin);
  assertTrue("The content is not encrypted",temp.length() > 0 && temp.indexOf("aaa") < 0);
  tmpin.close();
  StreamCache cache=cos.newStreamCache();
  assertTrue("Should get the FileInputStreamCache",cache instanceof FileInputStreamCache);
  temp=toString((InputStream)cache);
  ((InputStream)cache).close();
  assertEquals("we should have a temp file",1,files.length);
  assertEquals("Cached a wrong file",temp,TEST_STRING);
  exchange.getUnitOfWork().done(exchange);
  try {
    cache.reset();
    fail("we expect the exception here");
  }
 catch (  Exception exception) {
  }
  files=file.list();
  assertEquals("we should have no temp file",0,files.length);
  IOHelper.close(cos);
}
