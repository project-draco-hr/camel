{
  List<Map<String,String>> rows=JSonSchemaHelper.parseJsonSchema("dataformat",json,false);
  DataFormatModel dataFormat=new DataFormatModel();
  dataFormat.setTitle(JSonSchemaHelper.getSafeValue("title",rows));
  dataFormat.setModelName(JSonSchemaHelper.getSafeValue("modelName",rows));
  dataFormat.setName(JSonSchemaHelper.getSafeValue("name",rows));
  dataFormat.setDescription(JSonSchemaHelper.getSafeValue("description",rows));
  dataFormat.setLabel(JSonSchemaHelper.getSafeValue("label",rows));
  dataFormat.setDeprecated(JSonSchemaHelper.getSafeValue("deprecated",rows));
  dataFormat.setJavaType(JSonSchemaHelper.getSafeValue("javaType",rows));
  dataFormat.setGroupId(JSonSchemaHelper.getSafeValue("groupId",rows));
  dataFormat.setArtifactId(JSonSchemaHelper.getSafeValue("artifactId",rows));
  dataFormat.setVersion(JSonSchemaHelper.getSafeValue("version",rows));
  rows=JSonSchemaHelper.parseJsonSchema("properties",json,true);
  for (  Map<String,String> row : rows) {
    DataFormatOptionModel option=new DataFormatOptionModel();
    option.setName(getSafeValue("name",row));
    option.setKind(getSafeValue("kind",row));
    option.setType(getSafeValue("type",row));
    option.setJavaType(getSafeValue("javaType",row));
    option.setDeprecated(getSafeValue("deprecated",row));
    option.setEnumValues(getSafeValue("enum",row));
    option.setDefaultValue(getSafeValue("defaultValue",row));
    option.setDescription(getSafeValue("description",row));
    if (dataFormatName.startsWith("bindy") && option.getName().equals("type")) {
      option.setDefaultValue("");
      String doc=option.getDescription() + " The default value is either Csv or KeyValue depending on chosen dataformat.";
      option.setDescription(doc);
    }
    if ("id".equals(option.getName())) {
      getLog().debug("Skipping option: " + option.getName());
    }
 else {
      dataFormat.addDataFormatOption(option);
    }
  }
  return dataFormat;
}
