{
  nextToken();
  while (!token.getType().isEol()) {
    templateText();
    functionText();
    unaryOperator();
    nextToken();
  }
  parseAndCreateAstModel();
  prepareBlocks();
  prepareUnaryExpressions();
  List<Expression> expressions=createExpressions();
  if (expressions.isEmpty()) {
    return ExpressionBuilder.constantExpression("");
  }
 else   if (expressions.size() == 1) {
    return expressions.get(0);
  }
 else {
    return ExpressionBuilder.concatExpression(expressions,expression);
  }
}
