{
  if (ftpFile == null) {
    return;
  }
  if (log.isTraceEnabled()) {
    log.trace("Polling file: " + ftpFile);
  }
  boolean timestampMatched=true;
  if (isTimestamp()) {
    long ts=ftpFile.getTimestamp().getTimeInMillis();
    timestampMatched=ts > lastPollTime;
    if (log.isTraceEnabled()) {
      log.trace("The file is to old + " + ftpFile + ". lastPollTime="+ lastPollTime+ " > fileTimestamp="+ ts);
    }
  }
  if (timestampMatched && isMatched(ftpFile)) {
    String fullFileName=getFullFileName(ftpFile);
    if (exclusiveReadLock) {
      acquireExclusiveReadLock(client,ftpFile);
    }
    final ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
    client.retrieveFile(ftpFile.getName(),byteArrayOutputStream);
    if (log.isDebugEnabled()) {
      log.debug("Retrieved file: " + ftpFile.getName() + " from: "+ remoteServer());
    }
    RemoteFileExchange exchange=endpoint.createExchange(fullFileName,byteArrayOutputStream);
    if (isSetNames()) {
      String ftpBasePath=endpoint.getConfiguration().getFile();
      String relativePath=fullFileName.substring(ftpBasePath.length() + 1);
      relativePath=relativePath.replaceFirst("/","");
      if (log.isDebugEnabled()) {
        log.debug("Setting exchange filename to " + relativePath);
      }
      exchange.getIn().setHeader(FileComponent.HEADER_FILE_NAME,relativePath);
    }
    if (deleteFile) {
      if (log.isDebugEnabled()) {
        log.debug("Deleteing file: " + ftpFile.getName() + " from: "+ remoteServer());
      }
      boolean deleted=client.deleteFile(ftpFile.getName());
      if (!deleted) {
        String message="Can not delete file: " + ftpFile.getName() + " from: "+ remoteServer();
        throw new FtpOperationFailedException(client.getReplyCode(),client.getReplyString(),message);
      }
    }
 else     if (isMoveFile()) {
      String fromName=ftpFile.getName();
      String toName=getMoveFileName(fromName);
      if (log.isDebugEnabled()) {
        log.debug("Moving file: " + fromName + " to: "+ toName);
      }
      boolean deleted=client.deleteFile(toName);
      if (!deleted) {
        int lastPathIndex=toName.lastIndexOf('/');
        if (lastPathIndex != -1) {
          String directory=toName.substring(0,lastPathIndex);
          if (!FtpUtils.buildDirectory(client,directory)) {
            log.warn("Can not build directory: " + directory + " (maybe because of denied permissions)");
          }
        }
      }
      boolean success=client.rename(fromName,toName);
      if (!success) {
        String message="Can not move file: " + fromName + " to: "+ toName;
        throw new FtpOperationFailedException(client.getReplyCode(),client.getReplyString(),message);
      }
    }
    getProcessor().process(exchange);
  }
}
