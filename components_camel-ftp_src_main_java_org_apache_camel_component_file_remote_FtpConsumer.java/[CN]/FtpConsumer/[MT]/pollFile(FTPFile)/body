{
  if (ftpFile == null) {
    return;
  }
  if (LOG.isTraceEnabled()) {
    LOG.trace("Polling file: " + ftpFile);
  }
  long ts=ftpFile.getTimestamp().getTimeInMillis();
  if (ts > lastPollTime && isMatched(ftpFile)) {
    String fullFileName=getFullFileName(ftpFile);
    if (exclusiveRead) {
      acquireExclusiveRead(client,ftpFile);
    }
    final ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
    client.retrieveFile(ftpFile.getName(),byteArrayOutputStream);
    if (LOG.isDebugEnabled()) {
      LOG.debug("Retrieved file: " + ftpFile.getName() + " from: "+ remoteServer());
    }
    RemoteFileExchange exchange=endpoint.createExchange(fullFileName,byteArrayOutputStream);
    if (isSetNames()) {
      String ftpBasePath=endpoint.getConfiguration().getFile();
      String relativePath=fullFileName.substring(ftpBasePath.length() + 1);
      relativePath=relativePath.replaceFirst("/","");
      if (LOG.isDebugEnabled()) {
        LOG.debug("Setting exchange filename to " + relativePath);
      }
      exchange.getIn().setHeader(FileComponent.HEADER_FILE_NAME,relativePath);
    }
    if (deleteFile) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Deleteing file: " + ftpFile.getName() + " from: "+ remoteServer());
      }
      boolean deleted=client.deleteFile(ftpFile.getName());
      if (!deleted) {
        LOG.warn("Could not delete file: " + ftpFile.getName() + " from: "+ remoteServer());
      }
    }
 else     if (isMoveFile()) {
      String fromName=ftpFile.getName();
      String toName=getMoveFileName(fromName);
      if (LOG.isDebugEnabled()) {
        LOG.debug("Moving file: " + fromName + " to: "+ toName);
      }
      boolean deleted=client.deleteFile(toName);
      if (!deleted) {
        int lastPathIndex=toName.lastIndexOf('/');
        if (lastPathIndex != -1) {
          String directory=toName.substring(0,lastPathIndex);
          if (!FtpUtils.buildDirectory(client,directory)) {
            LOG.warn("Couldn't build directory: " + directory + " (could be because of denied permissions)");
          }
        }
      }
      boolean success=client.rename(fromName,toName);
      if (!success) {
        LOG.warn("Could not move file: " + fromName + " to: "+ toName);
      }
    }
    getProcessor().process(exchange);
  }
}
