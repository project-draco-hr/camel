{
  log.trace("doPollDirectory from absolutePath: {}, dirName: {}",absolutePath,dirName);
  depth++;
  dirName=FileUtil.stripTrailingSeparator(dirName);
  String dir;
  if (isStepwise()) {
    dir=ObjectHelper.isNotEmpty(dirName) ? dirName : absolutePath;
    operations.changeCurrentDirectory(dir);
  }
 else {
    dir=absolutePath;
  }
  log.trace("Polling directory: {}",dir);
  List<FTPFile> files;
  if (isStepwise()) {
    files=operations.listFiles();
  }
 else {
    files=operations.listFiles(dir);
  }
  if (files == null || files.isEmpty()) {
    log.trace("No files found in directory: {}",dir);
    return true;
  }
 else {
    log.trace("Found {} in directory: {}",files.size(),dir);
  }
  for (  FTPFile file : files) {
    if (log.isTraceEnabled()) {
      log.trace("FtpFile[name={}, dir={}, file={}]",new Object[]{file.getName(),file.isDirectory(),file.isFile()});
    }
    if (!canPollMoreFiles(fileList)) {
      return false;
    }
    if (file.isDirectory()) {
      RemoteFile<FTPFile> remote=asRemoteFile(absolutePath,file);
      if (endpoint.isRecursive() && depth < endpoint.getMaxDepth() && isValidFile(remote,true,files)) {
        String subDirectory=file.getName();
        String path=absolutePath + "/" + subDirectory;
        boolean canPollMore=pollSubDirectory(path,subDirectory,fileList,depth);
        if (!canPollMore) {
          return false;
        }
      }
    }
 else     if (file.isFile()) {
      RemoteFile<FTPFile> remote=asRemoteFile(absolutePath,file);
      if (depth >= endpoint.getMinDepth() && isValidFile(remote,false,files)) {
        fileList.add(remote);
      }
    }
 else {
      log.debug("Ignoring unsupported remote file type: " + file);
    }
  }
  return true;
}
