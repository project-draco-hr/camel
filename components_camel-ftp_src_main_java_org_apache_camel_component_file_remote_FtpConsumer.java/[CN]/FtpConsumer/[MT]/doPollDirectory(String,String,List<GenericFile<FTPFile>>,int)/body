{
  log.trace("doPollDirectory from absolutePath: {}, dirName: {}",absolutePath,dirName);
  depth++;
  dirName=FileUtil.stripTrailingSeparator(dirName);
  String dir;
  if (isStepwise()) {
    dir=ObjectHelper.isNotEmpty(dirName) ? dirName : absolutePath;
    operations.changeCurrentDirectory(dir);
  }
 else {
    dir=absolutePath;
  }
  log.trace("Polling directory: {}",dir);
  List<FTPFile> files;
  if (isStepwise()) {
    files=operations.listFiles();
  }
 else {
    files=operations.listFiles(dir);
  }
  if (files == null || files.isEmpty()) {
    log.trace("No files found in directory: {}",dir);
    return true;
  }
 else {
    log.trace("Found {} in directory: {}",files.size(),dir);
  }
  for (  FTPFile file : files) {
    if (!canPollMoreFiles(fileList)) {
      return false;
    }
    if (file.isDirectory()) {
      RemoteFile<FTPFile> remote=asRemoteFile(absolutePath,file);
      if (endpoint.isRecursive() && isValidFile(remote,true) && depth < endpoint.getMaxDepth()) {
        String subDirectory=file.getName();
        String path=absolutePath + "/" + subDirectory;
        boolean canPollMore=pollSubDirectory(path,subDirectory,fileList,depth);
        if (!canPollMore) {
          return false;
        }
      }
    }
 else     if (file.isFile()) {
      RemoteFile<FTPFile> remote=asRemoteFile(absolutePath,file);
      if (isValidFile(remote,false) && depth >= endpoint.getMinDepth()) {
        if (isInProgress(remote)) {
          log.trace("Skipping as file is already in progress: {}",remote.getFileName());
        }
 else {
          fileList.add(remote);
        }
      }
    }
 else {
      log.debug("Ignoring unsupported remote file type: " + file);
    }
  }
  return true;
}
