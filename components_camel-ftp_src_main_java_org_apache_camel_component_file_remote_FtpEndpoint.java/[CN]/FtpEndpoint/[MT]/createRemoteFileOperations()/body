{
  FTPClient client=ftpClient;
  if (client == null) {
    client=createFtpClient();
  }
  if (getConfiguration().getReceiveBufferSize() > 0) {
    client.setBufferSize(getConfiguration().getReceiveBufferSize());
  }
  if (getConfiguration().getConnectTimeout() > -1) {
    client.setConnectTimeout(getConfiguration().getConnectTimeout());
  }
  if (getConfiguration().getSoTimeout() > -1) {
    soTimeout=getConfiguration().getSoTimeout();
  }
  dataTimeout=getConfiguration().getTimeout();
  if (ftpClientParameters != null) {
    Map<String,Object> localParameters=new HashMap<String,Object>(ftpClientParameters);
    Object timeout=localParameters.remove("soTimeout");
    if (timeout != null) {
      soTimeout=getCamelContext().getTypeConverter().convertTo(int.class,timeout);
    }
    timeout=localParameters.remove("dataTimeout");
    if (timeout != null) {
      dataTimeout=getCamelContext().getTypeConverter().convertTo(int.class,dataTimeout);
    }
    setProperties(client,localParameters);
  }
  if (ftpClientConfigParameters != null) {
    if (ftpClientConfig == null) {
      ftpClientConfig=new FTPClientConfig();
    }
    Map<String,Object> localConfigParameters=new HashMap<String,Object>(ftpClientConfigParameters);
    setProperties(ftpClientConfig,localConfigParameters);
  }
  if (dataTimeout > 0) {
    client.setDataTimeout(dataTimeout);
  }
  if (log.isDebugEnabled()) {
    log.debug("Created FTPClient [connectTimeout: {}, soTimeout: {}, dataTimeout: {}, bufferSize: {}" + ", receiveDataSocketBufferSize: {}, sendDataSocketBufferSize: {}]: {}",new Object[]{client.getConnectTimeout(),getSoTimeout(),dataTimeout,client.getBufferSize(),client.getReceiveDataSocketBufferSize(),client.getSendDataSocketBufferSize(),client});
  }
  FtpOperations operations=new FtpOperations(client,getFtpClientConfig());
  operations.setEndpoint(this);
  return operations;
}
