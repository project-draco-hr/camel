{
  try {
    LOG.debug("Subscribing {} to topic {}",threadId,topicName);
    consumer.subscribe(Arrays.asList(topicName.split(",")));
    if (endpoint.getConfiguration().isSeekToBeginning()) {
      LOG.debug("{} is seeking to the beginning on topic {}",threadId,topicName);
      consumer.poll(100);
      consumer.seekToBeginning(consumer.assignment());
    }
    while (isRunAllowed() && !isSuspendingOrSuspended()) {
      ConsumerRecords<Object,Object> allRecords=consumer.poll(pollTimeoutMs);
      for (      TopicPartition partition : allRecords.partitions()) {
        List<ConsumerRecord<Object,Object>> partitionRecords=allRecords.records(partition);
        for (        ConsumerRecord<Object,Object> record : partitionRecords) {
          if (LOG.isTraceEnabled()) {
            LOG.trace("partition = {}, offset = {}, key = {}, value = {}",record.partition(),record.offset(),record.key(),record.value());
          }
          Exchange exchange=endpoint.createKafkaExchange(record);
          try {
            processor.process(exchange);
          }
 catch (          Exception e) {
            getExceptionHandler().handleException("Error during processing",exchange,e);
          }
        }
        if (endpoint.getConfiguration().isAutoCommitEnable() != null && !endpoint.getConfiguration().isAutoCommitEnable()) {
          long partitionLastoffset=partitionRecords.get(partitionRecords.size() - 1).offset();
          consumer.commitSync(Collections.singletonMap(partition,new OffsetAndMetadata(partitionLastoffset + 1)));
        }
      }
    }
    LOG.debug("Unsubscribing {} from topic {}",threadId,topicName);
    consumer.unsubscribe();
  }
 catch (  InterruptException e) {
    getExceptionHandler().handleException("Interrupted while consuming " + threadId + " from kafka topic",e);
    consumer.unsubscribe();
    Thread.currentThread().interrupt();
  }
catch (  Exception e) {
    getExceptionHandler().handleException("Error consuming " + threadId + " from kafka topic",e);
  }
 finally {
    LOG.debug("Closing {} ",threadId);
    IOHelper.close(consumer);
  }
}
