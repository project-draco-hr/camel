{
  org.apache.camel.Message mockCamelOutMessage=Mockito.mock(org.apache.camel.Message.class);
  Mockito.when(mockExchange.hasOut()).thenReturn(true);
  Mockito.when(mockExchange.getOut()).thenReturn(mockCamelOutMessage);
  Message outboundFixMessage=new Message();
  Mockito.when(mockCamelOutMessage.getBody(Message.class)).thenReturn(outboundFixMessage);
  QuickfixjConsumer consumer=Mockito.spy(new QuickfixjConsumer(mockEndpoint,mockProcessor));
  Session mockSession=Mockito.spy(TestSupport.createSession(sessionID));
  Mockito.doReturn(mockSession).when(consumer).getSession(MessageUtils.getReverseSessionID(inboundFixMessage));
  Mockito.doReturn(true).when(mockSession).send(Mockito.isA(Message.class));
  consumer.start();
  Mockito.when(mockExchange.getPattern()).thenReturn(ExchangePattern.InOut);
  consumer.onExchange(mockExchange);
  Mockito.verify(mockExchange,Mockito.never()).setException(Mockito.isA(Exception.class));
  Mockito.verify(mockSession).send(outboundFixMessage);
}
