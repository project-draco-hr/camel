{
  Message in=exchange.getIn();
  if (in.getBody() == null) {
    return null;
  }
  HttpEntity answer=in.getBody(HttpEntity.class);
  if (answer == null) {
    try {
      Object data=in.getBody();
      if (data != null) {
        String contentTypeString=ExchangeHelper.getContentType(exchange);
        ContentType contentType=null;
        if (contentTypeString != null) {
          if (contentTypeString.indexOf("charset") > 0) {
            contentType=ContentType.parse(contentTypeString);
          }
 else {
            contentType=ContentType.create(contentTypeString);
          }
        }
        if (contentTypeString != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(contentTypeString)) {
          Serializable obj=in.getMandatoryBody(Serializable.class);
          ByteArrayOutputStream bos=new ByteArrayOutputStream();
          HttpHelper.writeObjectToStream(bos,obj);
          ByteArrayEntity entity=new ByteArrayEntity(bos.toByteArray());
          entity.setContentType(HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT);
          IOHelper.close(bos);
          answer=entity;
        }
 else         if (data instanceof File || data instanceof GenericFile) {
          File file=in.getBody(File.class);
          if (file != null) {
            if (contentType != null) {
              answer=new FileEntity(file,contentType);
            }
 else {
              answer=new FileEntity(file);
            }
          }
        }
 else         if (data instanceof String) {
          String charset=IOHelper.getCharsetName(exchange,false);
          if (charset == null && contentType != null) {
            Charset cs=contentType.getCharset();
            if (cs != null) {
              charset=cs.name();
            }
          }
          StringEntity entity=new StringEntity((String)data,charset);
          if (contentType != null) {
            entity.setContentType(contentType.toString());
          }
          answer=entity;
        }
        if (answer == null) {
          InputStream is=in.getMandatoryBody(InputStream.class);
          String length=in.getHeader(Exchange.CONTENT_LENGTH,String.class);
          InputStreamEntity entity=null;
          if (ObjectHelper.isEmpty(length)) {
            entity=new InputStreamEntity(is,-1);
          }
 else {
            entity=new InputStreamEntity(is,Long.parseLong(length));
          }
          if (contentType != null) {
            entity.setContentType(contentType.toString());
          }
          answer=entity;
        }
      }
    }
 catch (    UnsupportedEncodingException e) {
      throw new CamelExchangeException("Error creating RequestEntity from message body",exchange,e);
    }
catch (    IOException e) {
      throw new CamelExchangeException("Error serializing message body",exchange,e);
    }
  }
  return answer;
}
