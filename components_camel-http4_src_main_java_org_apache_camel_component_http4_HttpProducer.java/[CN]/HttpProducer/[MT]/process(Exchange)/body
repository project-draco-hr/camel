{
  if (((HttpEndpoint)getEndpoint()).isBridgeEndpoint()) {
    exchange.setProperty(Exchange.SKIP_GZIP_ENCODING,Boolean.TRUE);
  }
  HttpRequestBase httpRequest=createMethod(exchange);
  Message in=exchange.getIn();
  String httpProtocolVersion=in.getHeader(Exchange.HTTP_PROTOCOL_VERSION,String.class);
  if (httpProtocolVersion != null) {
    httpRequest.getParams().setParameter(CoreProtocolPNames.PROTOCOL_VERSION,HttpProducerHelper.parserHttpVersion(httpProtocolVersion));
  }
  HeaderFilterStrategy strategy=getEndpoint().getHeaderFilterStrategy();
  for (  Map.Entry<String,Object> entry : in.getHeaders().entrySet()) {
    String headerValue=in.getHeader(entry.getKey(),String.class);
    if (strategy != null && !strategy.applyFilterToCamelHeaders(entry.getKey(),headerValue,exchange)) {
      httpRequest.addHeader(entry.getKey(),headerValue);
    }
  }
  HttpResponse httpResponse=null;
  try {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Executing http " + httpRequest.getMethod() + " method: "+ httpRequest.getURI().toString());
    }
    httpResponse=executeMethod(httpRequest);
    int responseCode=httpResponse.getStatusLine().getStatusCode();
    if (LOG.isDebugEnabled()) {
      LOG.debug("Http responseCode: " + responseCode);
    }
    if (throwException && (responseCode < 100 || responseCode >= 300)) {
      throw populateHttpOperationFailedException(exchange,httpRequest,httpResponse,responseCode);
    }
 else {
      populateResponse(exchange,httpRequest,httpResponse,in,strategy,responseCode);
    }
  }
  finally {
    if (httpResponse != null && httpResponse.getEntity() != null) {
      try {
        httpResponse.getEntity().consumeContent();
      }
 catch (      IOException e) {
      }
    }
  }
}
