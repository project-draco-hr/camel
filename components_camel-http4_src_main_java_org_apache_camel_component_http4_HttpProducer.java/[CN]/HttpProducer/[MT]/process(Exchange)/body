{
  if (getEndpoint().isClearExpiredCookies() && !getEndpoint().isBridgeEndpoint()) {
    getEndpoint().getCookieStore().clearExpired(new Date());
  }
  Map<String,Object> skipRequestHeaders=null;
  if (getEndpoint().isBridgeEndpoint()) {
    exchange.setProperty(Exchange.SKIP_GZIP_ENCODING,Boolean.TRUE);
    String queryString=exchange.getIn().getHeader(Exchange.HTTP_QUERY,String.class);
    if (queryString != null) {
      skipRequestHeaders=URISupport.parseQuery(queryString,false,true);
    }
  }
  HttpRequestBase httpRequest=createMethod(exchange);
  Message in=exchange.getIn();
  String httpProtocolVersion=in.getHeader(Exchange.HTTP_PROTOCOL_VERSION,String.class);
  if (httpProtocolVersion != null) {
    int[] version=HttpHelper.parserHttpVersion(httpProtocolVersion);
    httpRequest.setProtocolVersion(new HttpVersion(version[0],version[1]));
  }
  HeaderFilterStrategy strategy=getEndpoint().getHeaderFilterStrategy();
  for (  Map.Entry<String,Object> entry : in.getHeaders().entrySet()) {
    String key=entry.getKey();
    Object headerValue=in.getHeader(key);
    if (headerValue != null) {
      final Iterator<?> it=ObjectHelper.createIterator(headerValue,null,true);
      final List<String> values=new ArrayList<String>();
      while (it.hasNext()) {
        String value=exchange.getContext().getTypeConverter().convertTo(String.class,it.next());
        if (skipRequestHeaders != null && skipRequestHeaders.containsKey(key)) {
          continue;
        }
        if (value != null && strategy != null && !strategy.applyFilterToCamelHeaders(key,value,exchange)) {
          values.add(value);
        }
      }
      if (values.size() > 0) {
        String s=values.size() > 1 ? values.toString() : values.get(0);
        httpRequest.addHeader(key,s);
      }
    }
  }
  if (getEndpoint().getCookieHandler() != null) {
    Map<String,List<String>> cookieHeaders=getEndpoint().getCookieHandler().loadCookies(exchange,httpRequest.getURI());
    for (    Map.Entry<String,List<String>> entry : cookieHeaders.entrySet()) {
      String key=entry.getKey();
      if (entry.getValue().size() > 0) {
        String s=entry.getValue().size() > 1 ? entry.getValue().toString() : entry.getValue().get(0);
        httpRequest.addHeader(key,s);
      }
    }
  }
  if (getEndpoint().isPreserveHostHeader()) {
    String hostHeader=exchange.getIn().getHeader("Host",String.class);
    if (hostHeader != null) {
      httpRequest.setHeader("Host",hostHeader);
    }
  }
  if (getEndpoint().isConnectionClose()) {
    httpRequest.addHeader("Connection",HTTP.CONN_CLOSE);
  }
  HttpResponse httpResponse=null;
  try {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Executing http {} method: {}",httpRequest.getMethod(),httpRequest.getURI().toString());
    }
    httpResponse=executeMethod(httpRequest);
    int responseCode=httpResponse.getStatusLine().getStatusCode();
    LOG.debug("Http responseCode: {}",responseCode);
    if (!throwException) {
      populateResponse(exchange,httpRequest,httpResponse,in,strategy,responseCode);
    }
 else {
      boolean ok=HttpHelper.isStatusCodeOk(responseCode,getEndpoint().getOkStatusCodeRange());
      if (ok) {
        populateResponse(exchange,httpRequest,httpResponse,in,strategy,responseCode);
      }
 else {
        throw populateHttpOperationFailedException(exchange,httpRequest,httpResponse,responseCode);
      }
    }
  }
  finally {
    final HttpResponse response=httpResponse;
    if (httpResponse != null && getEndpoint().isDisableStreamCache()) {
      exchange.addOnCompletion(new SynchronizationAdapter(){
        @Override public void onDone(        Exchange exchange){
          try {
            EntityUtils.consume(response.getEntity());
          }
 catch (          Throwable e) {
          }
        }
      }
);
    }
 else     if (httpResponse != null) {
      try {
        EntityUtils.consume(response.getEntity());
      }
 catch (      Throwable e) {
      }
    }
  }
}
