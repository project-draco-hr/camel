{
  assertEquals(0,cappedTestCollection.count());
  final MockEndpoint mock=getMockEndpoint("mock:test");
  final Calendar startTimestamp=Calendar.getInstance();
  MongoCollection<BasicDBObject> trackingCol=db.getCollection(MongoDbTailTrackingConfig.DEFAULT_COLLECTION,BasicDBObject.class);
  trackingCol.drop();
  trackingCol=db.getCollection(MongoDbTailTrackingConfig.DEFAULT_COLLECTION,BasicDBObject.class);
  db.createCollection(cappedTestCollectionName,new CreateCollectionOptions().capped(true).sizeInBytes(1000000000).maxDocuments(1000));
  cappedTestCollection=db.getCollection(cappedTestCollectionName,BasicDBObject.class);
  addTestRoutes();
  context.startRoute("tailableCursorConsumer2");
  mock.expectedMessageCount(300);
  Thread t=new Thread(new Runnable(){
    @Override public void run(){
      for (int i=1; i <= 300; i++) {
        Calendar c=(Calendar)(startTimestamp.clone());
        c.add(Calendar.MINUTE,i);
        cappedTestCollection.insertOne(new BasicDBObject("increasing",c.getTime()).append("string","value" + i));
      }
    }
  }
);
  t.start();
  t.join();
  mock.assertIsSatisfied();
  mock.reset();
  Calendar cal300=(Calendar)startTimestamp.clone();
  cal300.add(Calendar.MINUTE,300);
  context.stopRoute("tailableCursorConsumer2");
  assertEquals(cal300.getTime(),trackingCol.find(new BasicDBObject("persistentId","darwin")).first().get(MongoDbTailTrackingConfig.DEFAULT_FIELD));
  context.startRoute("tailableCursorConsumer2");
  mock.expectedMessageCount(300);
  t=new Thread(new Runnable(){
    @Override public void run(){
      for (int i=301; i <= 600; i++) {
        Calendar c=(Calendar)(startTimestamp.clone());
        c.add(Calendar.MINUTE,i);
        cappedTestCollection.insertOne(new BasicDBObject("increasing",c.getTime()).append("string","value" + i));
      }
    }
  }
);
  t.start();
  t.join();
  mock.assertIsSatisfied();
  Object firstBody=mock.getExchanges().get(0).getIn().getBody();
  assertTrue(firstBody instanceof DBObject);
  Calendar cal301=(Calendar)startTimestamp.clone();
  cal301.add(Calendar.MINUTE,301);
  assertEquals(cal301.getTime(),((DBObject)firstBody).get("increasing"));
  context.stopRoute("tailableCursorConsumer2");
  Calendar cal600=(Calendar)startTimestamp.clone();
  cal600.add(Calendar.MINUTE,600);
  assertEquals(cal600.getTime(),trackingCol.find(new BasicDBObject("persistentId","darwin")).first().get(MongoDbTailTrackingConfig.DEFAULT_FIELD));
}
