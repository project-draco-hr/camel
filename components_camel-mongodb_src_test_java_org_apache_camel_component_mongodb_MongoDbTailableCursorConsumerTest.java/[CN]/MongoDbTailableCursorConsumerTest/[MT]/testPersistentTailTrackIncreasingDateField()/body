{
  assertEquals(0,cappedTestCollection.count());
  final MockEndpoint mock=getMockEndpoint("mock:test");
  final Calendar startTimestamp=Calendar.getInstance();
  DBCollection trackingCol=db.getCollection(MongoDbTailTrackingConfig.DEFAULT_COLLECTION);
  trackingCol.drop();
  trackingCol=db.getCollection(MongoDbTailTrackingConfig.DEFAULT_COLLECTION);
  cappedTestCollection=db.createCollection(cappedTestCollectionName,BasicDBObjectBuilder.start().add("capped",true).add("size",1000000000).add("max",1000).get());
  addTestRoutes();
  context.startRoute("tailableCursorConsumer2");
  mock.expectedMessageCount(300);
  Thread t=new Thread(new Runnable(){
    @Override public void run(){
      for (int i=1; i <= 300; i++) {
        Calendar c=(Calendar)(startTimestamp.clone());
        c.add(Calendar.MINUTE,i);
        cappedTestCollection.insert(BasicDBObjectBuilder.start("increasing",c.getTime()).add("string","value" + i).get(),WriteConcern.SAFE);
      }
    }
  }
);
  t.start();
  t.join();
  mock.assertIsSatisfied();
  mock.reset();
  Calendar cal300=(Calendar)startTimestamp.clone();
  cal300.add(Calendar.MINUTE,300);
  context.stopRoute("tailableCursorConsumer2");
  assertEquals(cal300.getTime(),trackingCol.findOne(new BasicDBObject("persistentId","darwin")).get(MongoDbTailTrackingConfig.DEFAULT_FIELD));
  context.startRoute("tailableCursorConsumer2");
  mock.expectedMessageCount(300);
  t=new Thread(new Runnable(){
    @Override public void run(){
      for (int i=301; i <= 600; i++) {
        Calendar c=(Calendar)(startTimestamp.clone());
        c.add(Calendar.MINUTE,i);
        cappedTestCollection.insert(BasicDBObjectBuilder.start("increasing",c.getTime()).add("string","value" + i).get(),WriteConcern.SAFE);
      }
    }
  }
);
  t.start();
  t.join();
  mock.assertIsSatisfied();
  Object firstBody=mock.getExchanges().get(0).getIn().getBody();
  assertTrue(firstBody instanceof DBObject);
  Calendar cal301=(Calendar)startTimestamp.clone();
  cal301.add(Calendar.MINUTE,301);
  assertEquals(cal301.getTime(),((DBObject)firstBody).get("increasing"));
  context.stopRoute("tailableCursorConsumer2");
  Calendar cal600=(Calendar)startTimestamp.clone();
  cal600.add(Calendar.MINUTE,600);
  assertEquals(cal600.getTime(),trackingCol.findOne(new BasicDBObject("persistentId","darwin")).get(MongoDbTailTrackingConfig.DEFAULT_FIELD));
}
