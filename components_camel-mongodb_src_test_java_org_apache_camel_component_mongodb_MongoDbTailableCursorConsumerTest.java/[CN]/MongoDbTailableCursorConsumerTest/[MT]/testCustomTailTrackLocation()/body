{
  assertEquals(0,cappedTestCollection.count());
  final MockEndpoint mock=getMockEndpoint("mock:test");
  MongoCollection<BasicDBObject> trackingCol=mongo.getDatabase("einstein").getCollection("curie",BasicDBObject.class);
  trackingCol.drop();
  trackingCol=mongo.getDatabase("einstein").getCollection("curie",BasicDBObject.class);
  db.createCollection(cappedTestCollectionName,new CreateCollectionOptions().capped(true).sizeInBytes(1000000000).maxDocuments(1000));
  cappedTestCollection=db.getCollection(cappedTestCollectionName,BasicDBObject.class);
  addTestRoutes();
  context.startRoute("tailableCursorConsumer3");
  mock.expectedMessageCount(300);
  Thread t=new Thread(new Runnable(){
    @Override public void run(){
      for (int i=1; i <= 300; i++) {
        cappedTestCollection.insertOne(new BasicDBObject("increasing",i).append("string","value" + i));
      }
    }
  }
);
  t.start();
  t.join();
  mock.assertIsSatisfied();
  mock.reset();
  context.stopRoute("tailableCursorConsumer3");
  assertEquals(300,trackingCol.find(new BasicDBObject("persistentId","darwin")).first().get("newton"));
  context.startRoute("tailableCursorConsumer3");
  mock.expectedMessageCount(300);
  t=new Thread(new Runnable(){
    @Override public void run(){
      for (int i=301; i <= 600; i++) {
        cappedTestCollection.insertOne(new BasicDBObject("increasing",i).append("string","value" + i));
      }
    }
  }
);
  t.start();
  t.join();
  mock.assertIsSatisfied();
  Object firstBody=mock.getExchanges().get(0).getIn().getBody();
  assertTrue(firstBody instanceof DBObject);
  assertEquals(301,((DBObject)firstBody).get("increasing"));
  context.stopRoute("tailableCursorConsumer3");
  assertEquals(600,trackingCol.find(new BasicDBObject("persistentId","darwin")).first().get("newton"));
}
