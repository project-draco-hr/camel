{
class ExcludePathFilter implements PathFilter {
    public boolean accept(    Path path){
      return !(path.toString().endsWith(config.getOpenedSuffix()) || path.toString().endsWith(config.getReadSuffix()));
    }
  }
  int numMessages=0;
  HdfsInfo info=setupHdfs(false);
  FileStatus fileStatuses[];
  if (info.getFileSystem().isFile(info.getPath())) {
    fileStatuses=info.getFileSystem().globStatus(info.getPath());
  }
 else {
    Path pattern=info.getPath().suffix("/" + this.config.getPattern());
    fileStatuses=info.getFileSystem().globStatus(pattern,new ExcludePathFilter());
  }
  for (  FileStatus status : fileStatuses) {
    if (normalFileIsDirectoryNoSuccessFile(status,info)) {
      continue;
    }
    try {
      this.rwlock.writeLock().lock();
      this.istream=HdfsInputStream.createInputStream(status.getPath().toString(),this.config);
    }
  finally {
      this.rwlock.writeLock().unlock();
    }
    try {
      Holder<Object> key=new Holder<Object>();
      Holder<Object> value=new Holder<Object>();
      while (this.istream.next(key,value) != 0) {
        Exchange exchange=this.getEndpoint().createExchange();
        Message message=new DefaultMessage();
        String fileName=StringUtils.substringAfterLast(status.getPath().toString(),"/");
        message.setHeader(Exchange.FILE_NAME,fileName);
        message.setHeader(Exchange.FILE_PATH,status.getPath().toString());
        if (key.value != null) {
          message.setHeader(HdfsHeader.KEY.name(),key.value);
        }
        message.setBody(value.value);
        exchange.setIn(message);
        log.debug("Processing file {}",fileName);
        try {
          processor.process(exchange);
        }
 catch (        Exception e) {
          exchange.setException(e);
        }
        if (exchange.getException() != null) {
          getExceptionHandler().handleException(exchange.getException());
        }
        numMessages++;
      }
    }
  finally {
      IOHelper.close(istream,"input stream",log);
    }
  }
  return numMessages;
}
