{
  RestletEndpoint endpoint=(RestletEndpoint)getEndpoint();
  if (endpoint.isSynchronous()) {
    try {
      process(exchange);
    }
 catch (    Throwable e) {
      exchange.setException(e);
    }
    callback.done(true);
    return true;
  }
  LOG.trace("Processing asynchronously");
  final RestletBinding binding=endpoint.getRestletBinding();
  Request request;
  try {
    String resourceUri=buildUri(endpoint,exchange);
    URI uri=new URI(resourceUri);
    request=new Request(endpoint.getRestletMethod(),resourceUri);
    binding.populateRestletRequestFromExchange(request,exchange);
    loadCookies(exchange,uri,request);
  }
 catch (  Throwable e) {
    exchange.setException(e);
    callback.done(true);
    return true;
  }
  LOG.debug("Sending request asynchronously: {} for exchangeId: {}",request,exchange.getExchangeId());
  client.handle(request,new Uniform(){
    @Override public void handle(    Request request,    Response response){
      LOG.debug("Received response asynchronously: {} for exchangeId: {}",response,exchange.getExchangeId());
      try {
        if (response != null) {
          String resourceUri=buildUri(endpoint,exchange);
          URI uri=new URI(resourceUri);
          Integer respCode=response.getStatus().getCode();
          storeCookies(exchange,uri,response);
          if (respCode > 207 && throwException) {
            exchange.setException(populateRestletProducerException(exchange,response,respCode));
          }
 else {
            binding.populateExchangeFromRestletResponse(exchange,response);
          }
        }
      }
 catch (      Throwable e) {
        exchange.setException(e);
      }
 finally {
        callback.done(false);
      }
    }
  }
);
  return false;
}
