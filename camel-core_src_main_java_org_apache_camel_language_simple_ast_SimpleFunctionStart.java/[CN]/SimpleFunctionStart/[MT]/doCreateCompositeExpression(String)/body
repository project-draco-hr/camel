{
  final SimpleToken token=getToken();
  return new Expression(){
    @Override public <T>T evaluate(    Exchange exchange,    Class<T> type){
      StringBuilder sb=new StringBuilder();
      for (      SimpleNode child : block.getChildren()) {
        if (child instanceof LiteralNode) {
          String text=((LiteralNode)child).getText();
          sb.append(text);
        }
 else         if (child instanceof SimpleFunctionStart) {
          try {
            Expression nested=child.createExpression(null);
            String text=nested.evaluate(exchange,String.class);
            if (text != null) {
              sb.append(text);
            }
          }
 catch (          SimpleParserException e) {
            throw new SimpleIllegalSyntaxException(expression,e.getIndex(),e.getMessage(),e);
          }
        }
      }
      String exp=sb.toString();
      SimpleFunctionExpression function=new SimpleFunctionExpression(token);
      function.addText(exp);
      try {
        return function.createExpression(exp).evaluate(exchange,type);
      }
 catch (      SimpleParserException e) {
        throw new SimpleIllegalSyntaxException(expression,e.getIndex(),e.getMessage(),e);
      }
    }
    @Override public String toString(){
      return expression;
    }
  }
;
}
