{
  ReflectionHelper.doWithFields(bean.getClass(),new ReflectionHelper.FieldCallback(){
    public void doWith(    Field field) throws IllegalArgumentException, IllegalAccessException {
      PropertyInject propertyInject=field.getAnnotation(PropertyInject.class);
      if (propertyInject != null && getPostProcessorHelper().matchContext(propertyInject.context())) {
        injectFieldProperty(field,propertyInject.value(),bean,beanName);
      }
      EndpointInject endpointInject=field.getAnnotation(EndpointInject.class);
      if (endpointInject != null && getPostProcessorHelper().matchContext(endpointInject.context())) {
        injectField(field,endpointInject.uri(),endpointInject.ref(),endpointInject.property(),bean,beanName);
      }
      Produce produce=field.getAnnotation(Produce.class);
      if (produce != null && getPostProcessorHelper().matchContext(produce.context())) {
        injectField(field,produce.uri(),produce.ref(),produce.property(),bean,beanName);
      }
    }
  }
);
}
