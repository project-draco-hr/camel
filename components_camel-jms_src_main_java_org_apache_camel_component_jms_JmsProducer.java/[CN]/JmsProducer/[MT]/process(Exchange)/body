{
  final org.apache.camel.Message in=exchange.getIn();
  if (exchange.getPattern().isOutCapable()) {
    final Requestor requestor;
    try {
      requestor=endpoint.getRequestor();
    }
 catch (    Exception e) {
      throw new RuntimeExchangeException(e,exchange);
    }
    final Destination replyTo=requestor.getReplyTo();
    final boolean msgIdAsCorrId=endpoint.getConfiguration().isUseMessageIDAsCorrelationID();
    String correlationId=in.getHeader("JMSCorrelationID",String.class);
    if (correlationId == null && !msgIdAsCorrId) {
      in.setHeader("JMSCorrelationID",getUuidGenerator().generateId());
    }
    final Out<FutureTask> futureHolder=new Out<FutureTask>();
    final DeferredMessageSentCallback callback=(msgIdAsCorrId) ? deferredRequestReplyMap.createDeferredMessageSentCallback() : null;
    final CamelJmsTemplate template=(CamelJmsTemplate)getInOutTemplate();
    template.send(endpoint.getDestination(),new MessageCreator(){
      public Message createMessage(      Session session) throws JMSException {
        Message message=endpoint.getBinding().makeJmsMessage(exchange,in,session);
        message.setJMSReplyTo(replyTo);
        FutureTask future=null;
        future=(!msgIdAsCorrId) ? requestor.getReceiveFuture(message.getJMSCorrelationID(),endpoint.getRequestTimeout()) : requestor.getReceiveFuture(callback);
        futureHolder.set(future);
        if (LOG.isDebugEnabled()) {
          LOG.debug(endpoint + " sending JMS message: " + message);
        }
        return message;
      }
    }
,callback);
    long requestTimeout=endpoint.getRequestTimeout();
    try {
      Message message=null;
      try {
        if (requestTimeout < 0) {
          message=(Message)futureHolder.get().get();
        }
 else {
          message=(Message)futureHolder.get().get(requestTimeout,TimeUnit.MILLISECONDS);
        }
      }
 catch (      InterruptedException e) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Future interupted: " + e,e);
        }
      }
catch (      TimeoutException e) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Future timed out: " + e,e);
        }
      }
      if (message != null) {
        exchange.setOut(new JmsMessage(message,endpoint.getBinding()));
        if (correlationId != null) {
          message.setJMSCorrelationID(correlationId);
          exchange.getOut(false).setHeader("JMSCorrelationID",correlationId);
        }
      }
 else {
        exchange.setException(new ExchangeTimedOutException(exchange,requestTimeout));
      }
    }
 catch (    Exception e) {
      exchange.setException(e);
    }
  }
 else {
    getInOnlyTemplate().send(endpoint.getDestination(),new MessageCreator(){
      public Message createMessage(      Session session) throws JMSException {
        Message message=endpoint.getBinding().makeJmsMessage(exchange,in,session);
        if (LOG.isDebugEnabled()) {
          LOG.debug(endpoint + " sending JMS message: " + message);
        }
        return message;
      }
    }
);
  }
}
