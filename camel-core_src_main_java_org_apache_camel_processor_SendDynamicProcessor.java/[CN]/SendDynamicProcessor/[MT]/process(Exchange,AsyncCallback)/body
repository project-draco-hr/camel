{
  if (!isStarted()) {
    exchange.setException(new IllegalStateException("SendProcessor has not been started: " + this));
    callback.done(true);
    return true;
  }
  final ExchangePattern existingPattern=exchange.getPattern();
  final Endpoint endpoint;
  final ExchangePattern destinationExchangePattern;
  Object recipient=null;
  try {
    recipient=expression.evaluate(exchange,Object.class);
    endpoint=resolveEndpoint(exchange,recipient);
    destinationExchangePattern=EndpointHelper.resolveExchangePatternFromUrl(endpoint.getEndpointUri());
  }
 catch (  Throwable e) {
    if (isIgnoreInvalidEndpoint()) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Endpoint uri is invalid: " + recipient + ". This exception will be ignored.",e);
      }
    }
 else {
      exchange.setException(e);
    }
    callback.done(true);
    return true;
  }
  return producerCache.doInAsyncProducer(endpoint,exchange,pattern,callback,new AsyncProducerCallback(){
    public boolean doInAsyncProducer(    Producer producer,    AsyncProcessor asyncProducer,    final Exchange exchange,    ExchangePattern pattern,    final AsyncCallback callback){
      final Exchange target=configureExchange(exchange,pattern,destinationExchangePattern,endpoint);
      LOG.debug(">>>> {} {}",endpoint,exchange);
      return asyncProducer.process(target,new AsyncCallback(){
        public void done(        boolean doneSync){
          target.setPattern(existingPattern);
          callback.done(doneSync);
        }
      }
);
    }
  }
);
}
