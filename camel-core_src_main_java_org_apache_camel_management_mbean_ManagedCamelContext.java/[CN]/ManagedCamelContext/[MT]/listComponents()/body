{
  try {
    Map<String,Properties> components=context.findComponents();
    TabularData answer=new TabularDataSupport(CamelOpenMBeanTypes.listComponentsTabularType());
    for (    Map.Entry<String,Properties> entry : components.entrySet()) {
      String name=entry.getKey();
      String title=null;
      String syntax=null;
      String description=null;
      String label=null;
      String deprecated=null;
      String secret=null;
      String status=context.hasComponent(name) != null ? "in use" : "on classpath";
      String type=(String)entry.getValue().get("class");
      String groupId=null;
      String artifactId=null;
      String version=null;
      String defaultName=context.resolveComponentDefaultName(type);
      String target=defaultName != null ? defaultName : name;
      String json=context.getComponentParameterJsonSchema(target);
      List<Map<String,String>> rows=JsonSchemaHelper.parseJsonSchema("component",json,false);
      for (      Map<String,String> row : rows) {
        if (row.containsKey("title")) {
          title=row.get("title");
        }
 else         if (row.containsKey("syntax")) {
          syntax=row.get("syntax");
        }
 else         if (row.containsKey("description")) {
          description=row.get("description");
        }
 else         if (row.containsKey("label")) {
          label=row.get("label");
        }
 else         if (row.containsKey("deprecated")) {
          deprecated=row.get("deprecated");
        }
 else         if (row.containsKey("secret")) {
          secret=row.get("secret");
        }
 else         if (row.containsKey("javaType")) {
          type=row.get("javaType");
        }
 else         if (row.containsKey("groupId")) {
          groupId=row.get("groupId");
        }
 else         if (row.containsKey("artifactId")) {
          artifactId=row.get("artifactId");
        }
 else         if (row.containsKey("version")) {
          version=row.get("version");
        }
      }
      CompositeType ct=CamelOpenMBeanTypes.listComponentsCompositeType();
      CompositeData data=new CompositeDataSupport(ct,new String[]{"name","title","syntax","description","label","deprecated","secret","status","type","groupId","artifactId","version"},new Object[]{name,title,syntax,description,label,deprecated,secret,status,type,groupId,artifactId,version});
      answer.put(data);
    }
    return answer;
  }
 catch (  Exception e) {
    throw ObjectHelper.wrapRuntimeCamelException(e);
  }
}
