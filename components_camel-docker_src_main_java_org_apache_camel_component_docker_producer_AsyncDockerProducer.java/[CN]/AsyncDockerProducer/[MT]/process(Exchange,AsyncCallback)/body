{
  try {
    Message message=exchange.getIn();
    DockerClient client=DockerClientFactory.getDockerClient(component,configuration,message);
    DockerOperation operation=configuration.getOperation();
    Object result=null;
switch (operation) {
case BUILD_IMAGE:
      result=executeBuildImageRequest(client,message).exec(new BuildImageResultCallback(){
        @Override public void onNext(        BuildResponseItem item){
          log.trace("build image callback {}",item);
          super.onNext(item);
        }
      }
).awaitImageId();
    break;
case PULL_IMAGE:
  result=executePullImageRequest(client,message).exec(new PullImageResultCallback(){
    @Override public void onNext(    PullResponseItem item){
      log.trace("pull image callback {}",item);
      super.onNext(item);
    }
  }
);
break;
case PUSH_IMAGE:
result=executePushImageRequest(client,message).exec(new PushImageResultCallback(){
@Override public void onNext(PushResponseItem item){
  log.trace("push image callback {}",item);
  super.onNext(item);
}
}
).awaitCompletion();
break;
case ATTACH_CONTAINER:
result=executeAttachContainerRequest(client,message).exec(new AttachContainerResultCallback(){
@Override public void onNext(Frame item){
log.trace("attach container callback {}",item);
super.onNext(item);
}
}
).awaitCompletion();
break;
case LOG_CONTAINER:
result=executeLogContainerRequest(client,message).exec(new LogContainerResultCallback(){
@Override public void onNext(Frame item){
log.trace("log container callback {}",item);
super.onNext(item);
}
}
).awaitCompletion();
break;
case WAIT_CONTAINER:
result=executeWaitContainerRequest(client,message).exec(new WaitContainerResultCallback(){
@Override public void onNext(WaitResponse item){
log.trace("wait contanier callback {}",item);
super.onNext(item);
}
}
).awaitStatusCode();
break;
case EXEC_START:
result=executeExecStartRequest(client,message).exec(new ExecStartResultCallback(){
@Override public void onNext(Frame item){
log.trace("exec start callback {}",item);
super.onNext(item);
}
}
).awaitCompletion();
break;
default :
throw new DockerException("Invalid operation: " + operation);
}
if (result != null) {
exchange.getIn().setBody(result);
return true;
}
}
 catch (DockerException|InterruptedException e) {
log.error(e.getMessage(),e);
return false;
}
return false;
}
