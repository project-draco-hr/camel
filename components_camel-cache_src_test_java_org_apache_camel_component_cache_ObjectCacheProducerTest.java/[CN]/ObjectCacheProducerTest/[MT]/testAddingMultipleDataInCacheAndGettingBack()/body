{
  context.addRoutes(new RouteBuilder(){
    public void configure(){
      onException(Exception.class).handled(true).to("log:LOGGER").to("mock:ObjectCacheProducerTest.cacheException");
      from("direct:a").setHeader(CacheConstants.CACHE_OPERATION,constant(CacheConstants.CACHE_OPERATION_ADD)).setHeader(CacheConstants.CACHE_KEY,constant("Ralph_Waldo_Emerson")).to("cache://TestCache1?objectCache=true&overflowToDisk=false&diskPersistent=false&maxElementsInMemory=2");
      from("direct:aGet").setHeader(CacheConstants.CACHE_OPERATION,constant(CacheConstants.CACHE_OPERATION_GET)).setHeader(CacheConstants.CACHE_KEY,constant("Ralph_Waldo_Emerson")).to("cache://TestCache1?objectCache=true&overflowToDisk=false&diskPersistent=false&maxElementsInMemory=2").choice().when(header(CacheConstants.CACHE_ELEMENT_WAS_FOUND).isNotNull()).to("mock:ObjectCacheProducerTest.result").end();
      from("direct:b").setHeader(CacheConstants.CACHE_OPERATION,constant(CacheConstants.CACHE_OPERATION_ADD)).setHeader(CacheConstants.CACHE_KEY,constant("Ralph_Waldo_Emerson_2")).to("cache://TestCache1?objectCache=true&overflowToDisk=false&diskPersistent=false&maxElementsInMemory=2");
      from("direct:bGet").setHeader(CacheConstants.CACHE_OPERATION,constant(CacheConstants.CACHE_OPERATION_GET)).setHeader(CacheConstants.CACHE_KEY,constant("Ralph_Waldo_Emerson_2")).to("cache://TestCache1?objectCache=true&overflowToDisk=false&diskPersistent=false&maxElementsInMemory=2").choice().when(header(CacheConstants.CACHE_ELEMENT_WAS_FOUND).isNotNull()).to("mock:ObjectCacheProducerTest.result").end();
      from("direct:c").setHeader(CacheConstants.CACHE_OPERATION,constant(CacheConstants.CACHE_OPERATION_ADD)).setHeader(CacheConstants.CACHE_KEY,constant("Ralph_Waldo_Emerson_3")).to("cache://TestCache1?objectCache=true&overflowToDisk=false&diskPersistent=false&maxElementsInMemory=2");
      from("direct:cGet").setHeader(CacheConstants.CACHE_OPERATION,constant(CacheConstants.CACHE_OPERATION_GET)).setHeader(CacheConstants.CACHE_KEY,constant("Ralph_Waldo_Emerson_3")).to("cache://TestCache1?objectCache=true&overflowToDisk=false&diskPersistent=false&maxElementsInMemory=2").choice().when(header(CacheConstants.CACHE_ELEMENT_WAS_FOUND).isNotNull()).to("mock:ObjectCacheProducerTest.result").end();
    }
  }
);
  context.setTracing(true);
  context.start();
  resultEndpoint.expectedMessageCount(2);
  cacheExceptionEndpoint.expectedMessageCount(0);
  log.debug("------------Beginning CacheProducer Add and Get Test---------------");
  log.debug("Putting data into cache");
  sendNonSerializedData("direct:a",newPoetry("Ralph Waldo Emerson","Brahma"));
  sendNonSerializedData("direct:b",newPoetry("Ralph Waldo Emerson","The Rhodora"));
  sendNonSerializedData("direct:c",newPoetry("Ralph Waldo Emerson","Concord Hymn"));
  log.debug("Retrieving data from cache");
  sendEmptyBody("direct:aGet");
  sendEmptyBody("direct:bGet");
  sendEmptyBody("direct:cGet");
  cacheExceptionEndpoint.assertIsSatisfied();
  resultEndpoint.assertIsSatisfied();
}
