{
  return new ProtocolEncoder(){
    public void encode(    IoSession session,    Object message,    ProtocolEncoderOutput out) throws Exception {
      if (message == null) {
        throw new IllegalArgumentException("Message to encode is null");
      }
      CharsetEncoder encoder=(CharsetEncoder)session.getAttribute(CHARSET_ENCODER);
      if (encoder == null) {
        encoder=charset.newEncoder();
        session.setAttribute(CHARSET_ENCODER,encoder);
      }
      String body;
      if (message instanceof Message) {
        body=HL7Converter.toString((Message)message);
      }
 else       if (message instanceof String) {
        body=(String)message;
      }
 else       if (message instanceof byte[]) {
        body=new String((byte[])message);
      }
 else {
        throw new IllegalArgumentException("The message to encode is not a supported type: " + message.getClass().getCanonicalName());
      }
      body=body.replace('\n','\r');
      ByteBuffer bb=ByteBuffer.allocate(body.length() + 3).setAutoExpand(true);
      bb.put(START_MARKER);
      bb.putString(body,encoder);
      bb.put(END_MARKER_1);
      bb.put(END_MARKER_2);
      bb.flip();
      if (LOG.isDebugEnabled()) {
        LOG.debug("Encoding HL7 from " + message.getClass().getCanonicalName() + " to byte stream");
      }
      out.write(bb);
    }
    public void dispose(    IoSession session) throws Exception {
      session.removeAttribute(CHARSET_ENCODER);
    }
  }
;
}
