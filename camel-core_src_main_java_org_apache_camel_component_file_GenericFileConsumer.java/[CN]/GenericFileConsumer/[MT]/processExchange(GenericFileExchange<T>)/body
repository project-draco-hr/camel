{
  if (log.isTraceEnabled()) {
    log.trace("Processing remote file: " + exchange.getGenericFile());
  }
  try {
    final GenericFileProcessStrategy<T> processStrategy=endpoint.getGenericFileProcessStrategy();
    boolean begin=processStrategy.begin(operations,endpoint,exchange,exchange.getGenericFile());
    if (!begin) {
      log.warn(endpoint + " cannot process remote file: " + exchange.getGenericFile());
      return;
    }
    final GenericFile<T> target=exchange.getGenericFile();
    final String name=target.getAbsoluteFilePath();
    if (log.isTraceEnabled()) {
      log.trace("Retreiving file: " + name + " from: "+ endpoint);
    }
    operations.retrieveFile(name,exchange);
    if (log.isTraceEnabled()) {
      log.trace("Retrieved file: " + name + " from: "+ endpoint);
    }
    if (log.isDebugEnabled()) {
      log.debug("About to process file: " + target + " using exchange: "+ exchange);
    }
    try {
      getProcessor().process(exchange);
    }
 catch (    Exception e) {
      exchange.setException(e);
    }
    final GenericFile<T> file=exchange.getGenericFile();
    boolean failed=exchange.isFailed();
    if (log.isDebugEnabled()) {
      log.debug("Done processing file: " + file + " using exchange: "+ exchange);
    }
    boolean committed=false;
    try {
      if (!failed) {
        processStrategyCommit(processStrategy,exchange,file);
        committed=true;
      }
 else {
        if (exchange.getException() != null) {
          handleException(exchange.getException());
        }
      }
    }
  finally {
      if (!committed) {
        processStrategyRollback(processStrategy,exchange,file);
      }
    }
  }
 catch (  Exception e) {
    handleException(e);
  }
}
