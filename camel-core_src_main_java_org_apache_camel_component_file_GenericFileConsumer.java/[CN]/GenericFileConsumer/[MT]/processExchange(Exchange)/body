{
  GenericFile<T> file=getExchangeFileProperty(exchange);
  if (log.isTraceEnabled()) {
    log.trace("Processing file: " + file);
  }
  String absoluteFileName=file.getAbsoluteFilePath();
  try {
    final GenericFileProcessStrategy<T> processStrategy=endpoint.getGenericFileProcessStrategy();
    boolean begin=processStrategy.begin(operations,endpoint,exchange,file);
    if (!begin) {
      if (log.isDebugEnabled()) {
        log.debug(endpoint + " cannot begin processing file: " + file);
      }
      endpoint.getInProgressRepository().remove(absoluteFileName);
      return;
    }
  }
 catch (  Exception e) {
    if (log.isDebugEnabled()) {
      log.debug(endpoint + " cannot begin processing file: " + file+ " due to: "+ e.getMessage(),e);
    }
    endpoint.getInProgressRepository().remove(absoluteFileName);
    return;
  }
  final GenericFile<T> target=getExchangeFileProperty(exchange);
  final String name=target.getAbsoluteFilePath();
  try {
    if (log.isTraceEnabled()) {
      log.trace("Retrieving file: " + name + " from: "+ endpoint);
    }
    boolean retrieved=operations.retrieveFile(name,exchange);
    if (!retrieved) {
      throw new GenericFileOperationFailedException("Cannot retrieve file: " + file + " from: "+ endpoint);
    }
    if (log.isTraceEnabled()) {
      log.trace("Retrieved file: " + name + " from: "+ endpoint);
    }
    exchange.addOnCompletion(new GenericFileOnCompletion<T>(endpoint,operations,target,absoluteFileName));
    if (log.isDebugEnabled()) {
      log.debug("About to process file: " + target + " using exchange: "+ exchange);
    }
    getAsyncProcessor().process(exchange,new AsyncCallback(){
      public void done(      boolean doneSync){
        if (log.isTraceEnabled()) {
          log.trace("Done processing file: " + target + (doneSync ? " synchronously" : " asynchronously"));
        }
      }
    }
);
  }
 catch (  Exception e) {
    endpoint.getInProgressRepository().remove(absoluteFileName);
    handleException(e);
  }
}
