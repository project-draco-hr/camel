{
  fileExpressionResult=null;
  shutdownRunningTask=null;
  pendingExchanges=0;
  if (!prePollCheck()) {
    log.debug("Skipping poll as pre poll check returned false");
    return 0;
  }
  List<GenericFile<T>> files=new ArrayList<GenericFile<T>>();
  String name=endpoint.getConfiguration().getDirectory();
  StopWatch stop=new StopWatch();
  boolean limitHit=!pollDirectory(name,files);
  long delta=stop.stop();
  if (log.isDebugEnabled()) {
    log.debug("Took {} to poll: {}",TimeUtils.printDuration(delta),name);
  }
  if (limitHit) {
    log.debug("Limiting maximum messages to poll at {} files as there was more messages in this poll.",maxMessagesPerPoll);
  }
  if (endpoint.getSorter() != null) {
    Collections.sort(files,endpoint.getSorter());
  }
  LinkedList<Exchange> exchanges=new LinkedList<Exchange>();
  for (  GenericFile<T> file : files) {
    Exchange exchange=endpoint.createExchange(file);
    endpoint.configureExchange(exchange);
    endpoint.configureMessage(file,exchange.getIn());
    exchanges.add(exchange);
  }
  if (endpoint.getSortBy() != null) {
    Collections.sort(exchanges,endpoint.getSortBy());
  }
  int total=exchanges.size();
  if (total > 0) {
    log.debug("Total {} files to consume",total);
  }
  Queue<Exchange> q=exchanges;
  int polledMessages=processBatch(CastUtils.cast(q));
  postPollCheck();
  return polledMessages;
}
