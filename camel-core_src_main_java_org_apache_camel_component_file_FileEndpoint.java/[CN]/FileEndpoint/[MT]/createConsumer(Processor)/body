{
  ObjectHelper.notNull(operations,"operations");
  ObjectHelper.notNull(file,"file");
  if (file.getName().contains(".")) {
    throw new IllegalArgumentException("Only directory is supported. Endpoint must be configured with a valid starting directory: " + file);
  }
  FileConsumer result=new FileConsumer(this,processor,operations);
  if (isDelete() && getMove() != null) {
    throw new IllegalArgumentException("You cannot set both delete=true and move options");
  }
  if (isNoop() && !isIdempotent()) {
    log.info("Endpoint is configured with noop=true so forcing endpoint to be idempotent as well");
    setIdempotent(true);
  }
  if (isIdempotent() && idempotentRepository == null) {
    log.info("Using default memory based idempotent repository with cache max size: " + DEFAULT_IDEMPOTENT_CACHE_SIZE);
    idempotentRepository=MemoryIdempotentRepository.memoryIdempotentRepository(DEFAULT_IDEMPOTENT_CACHE_SIZE);
  }
  result.setMaxMessagesPerPoll(getMaxMessagesPerPoll());
  configureConsumer(result);
  return result;
}
