{
  org.apache.camel.Message camelMessage=EasyMock.createMock(org.apache.camel.Message.class);
  Exchange camelExchange=EasyMock.createMock(Exchange.class);
  camelExchange.getProperty(CamelTransportConstants.CXF_EXCHANGE,org.apache.cxf.message.Exchange.class);
  EasyMock.expectLastCall().andReturn(new ExchangeImpl());
  camelExchange.hasOut();
  EasyMock.expectLastCall().andReturn(false);
  camelExchange.getIn();
  EasyMock.expectLastCall().andReturn(camelMessage).times(3);
  camelMessage.getHeaders();
  EasyMock.expectLastCall().andReturn(Collections.emptyMap()).times(2);
  camelMessage.getHeader(Exchange.CONTENT_TYPE,String.class);
  EasyMock.expectLastCall().andReturn(null);
  camelMessage.getHeader("Accept",String.class);
  EasyMock.expectLastCall().andReturn(null);
  camelMessage.getHeader(Exchange.HTTP_CHARACTER_ENCODING,String.class);
  EasyMock.expectLastCall().andReturn(null);
  camelMessage.getHeader(Exchange.CHARSET_NAME,String.class);
  EasyMock.expectLastCall().andReturn(null);
  camelMessage.getHeader(Exchange.HTTP_URI,String.class);
  EasyMock.expectLastCall().andReturn(requestURI);
  camelMessage.getHeader(Exchange.HTTP_PATH,String.class);
  EasyMock.expectLastCall().andReturn(requestPath);
  camelMessage.getHeader(Exchange.HTTP_BASE_URI,String.class);
  EasyMock.expectLastCall().andReturn(requestPath);
  camelMessage.getHeader(Exchange.HTTP_METHOD,String.class);
  EasyMock.expectLastCall().andReturn("GET");
  camelMessage.getHeader(Exchange.HTTP_QUERY,String.class);
  EasyMock.expectLastCall().andReturn("");
  camelMessage.getBody(InputStream.class);
  EasyMock.expectLastCall().andReturn(new ByteArrayInputStream("".getBytes()));
  EasyMock.replay(camelExchange,camelMessage);
  return camelExchange;
}
