{
  Object request=exchange.getIn().getBody();
  AvroConfiguration configuration=getEndpoint().getConfiguration();
  if (transceiver == null) {
    try {
      transceiver=createTransceiver();
      if (configuration.isReflectionProtocol())       requestor=new AvroReflectRequestor(configuration.getProtocol(),transceiver);
 else       requestor=new AvroSpecificRequestor(configuration.getProtocol(),transceiver);
    }
 catch (    Exception e) {
      exchange.setException(e);
      callback.done(true);
      return true;
    }
  }
  try {
    String messageName;
    if (!StringUtils.isEmpty(exchange.getIn().getHeader(AvroConstants.AVRO_MESSAGE_NAME,String.class)))     messageName=exchange.getIn().getHeader(AvroConstants.AVRO_MESSAGE_NAME,String.class);
 else     messageName=configuration.getMessageName();
    requestor.request(messageName,wrapObjectToArray(request),new Callback<Object>(){
      @Override public void handleResult(      Object result){
        try {
          exchange.getOut().setHeaders(exchange.getIn().getHeaders());
          exchange.getOut().setBody(result);
        }
  finally {
          callback.done(false);
        }
      }
      @Override public void handleError(      Throwable error){
        try {
          exchange.setException(error);
        }
  finally {
          callback.done(false);
        }
      }
    }
);
  }
 catch (  Exception e) {
    exchange.setException(e);
    callback.done(true);
    return true;
  }
  return false;
}
