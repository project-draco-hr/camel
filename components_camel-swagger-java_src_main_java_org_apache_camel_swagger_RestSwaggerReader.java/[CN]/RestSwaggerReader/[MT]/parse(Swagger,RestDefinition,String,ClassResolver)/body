{
  List<VerbDefinition> verbs=new ArrayList<>(rest.getVerbs());
  Collections.sort(verbs,new VerbOrdering());
  String pathAsTag=rest.getTag() != null ? rest.getTag() : FileUtil.stripLeadingSeparator(rest.getPath());
  String summary=rest.getDescriptionText();
  if (ObjectHelper.isNotEmpty(pathAsTag)) {
    Tag tag=new Tag();
    tag.description(summary);
    tag.name(pathAsTag);
    swagger.addTag(tag);
  }
  Set<String> types=new LinkedHashSet<>();
  for (  VerbDefinition verb : verbs) {
    Boolean apiDocs;
    if (verb.getApiDocs() != null) {
      apiDocs=verb.getApiDocs();
    }
 else {
      apiDocs=rest.getApiDocs();
    }
    if (apiDocs != null && !apiDocs) {
      continue;
    }
    String type=verb.getType();
    if (ObjectHelper.isNotEmpty(type)) {
      if (type.endsWith("[]")) {
        type=type.substring(0,type.length() - 2);
      }
      types.add(type);
    }
    type=verb.getOutType();
    if (ObjectHelper.isNotEmpty(type)) {
      if (type.endsWith("[]")) {
        type=type.substring(0,type.length() - 2);
      }
      types.add(type);
    }
    if (verb.getResponseMsgs() != null) {
      for (      RestOperationResponseMsgDefinition def : verb.getResponseMsgs()) {
        type=def.getResponseModel();
        if (ObjectHelper.isNotEmpty(type)) {
          if (type.endsWith("[]")) {
            type=type.substring(0,type.length() - 2);
          }
          types.add(type);
        }
      }
    }
  }
  for (  String type : types) {
    Class<?> clazz=classResolver.resolveClass(type);
    appendModels(clazz,swagger);
  }
  doParseVerbs(swagger,rest,camelContextId,verbs,pathAsTag);
}
