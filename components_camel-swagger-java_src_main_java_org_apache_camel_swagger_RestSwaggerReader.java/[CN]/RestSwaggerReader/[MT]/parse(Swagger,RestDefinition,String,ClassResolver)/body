{
  List<VerbDefinition> verbs=new ArrayList<>(rest.getVerbs());
  Collections.sort(verbs,new VerbOrdering());
  String pathAsTag=rest.getTag() != null ? rest.getTag() : FileUtil.stripLeadingSeparator(rest.getPath());
  String summary=rest.getDescriptionText();
  if (ObjectHelper.isNotEmpty(pathAsTag)) {
    Tag tag=new Tag();
    tag.description(summary);
    tag.name(pathAsTag);
    swagger.addTag(tag);
  }
  Set<String> types=new LinkedHashSet<>();
  for (  VerbDefinition verb : verbs) {
    String type=verb.getType();
    if (ObjectHelper.isNotEmpty(type)) {
      if (type.endsWith("[]")) {
        type=type.substring(0,type.length() - 2);
      }
      types.add(type);
    }
    type=verb.getOutType();
    if (ObjectHelper.isNotEmpty(type)) {
      if (type.endsWith("[]")) {
        type=type.substring(0,type.length() - 2);
      }
      types.add(type);
    }
    if (verb.getResponseMsgs() != null) {
      for (      RestOperationResponseMsgDefinition def : verb.getResponseMsgs()) {
        type=def.getResponseModel();
        if (ObjectHelper.isNotEmpty(type)) {
          if (type.endsWith("[]")) {
            type=type.substring(0,type.length() - 2);
          }
          types.add(type);
        }
      }
    }
  }
  for (  String type : types) {
    Class<?> clazz=classResolver.resolveClass(type);
    appendModels(clazz,swagger);
  }
  List<Path> paths=new ArrayList<>();
  String basePath=rest.getPath();
  for (  VerbDefinition verb : verbs) {
    String method=verb.asVerb().toLowerCase(Locale.US);
    String opPath=SwaggerHelper.buildUrl(basePath,verb.getUri());
    Operation op=new Operation();
    if (ObjectHelper.isNotEmpty(pathAsTag)) {
      op.addTag(pathAsTag);
    }
    op.getVendorExtensions().put("x-camelContextId",camelContextId);
    op.getVendorExtensions().put("x-routeId",verb.getRouteId());
    Path path=swagger.getPath(opPath);
    if (path == null) {
      path=new Path();
      paths.add(path);
    }
    path=path.set(method,op);
    String consumes=verb.getConsumes() != null ? verb.getConsumes() : rest.getConsumes();
    if (consumes != null) {
      String[] parts=consumes.split(",");
      for (      String part : parts) {
        op.addConsumes(part);
      }
    }
    String produces=verb.getProduces() != null ? verb.getProduces() : rest.getProduces();
    if (produces != null) {
      String[] parts=produces.split(",");
      for (      String part : parts) {
        op.addProduces(part);
      }
    }
    if (verb.getDescriptionText() != null) {
      op.summary(verb.getDescriptionText());
    }
    for (    RestOperationParamDefinition param : verb.getParams()) {
      Parameter parameter=null;
      if (param.getType().equals(RestParamType.body)) {
        parameter=new BodyParameter();
      }
 else       if (param.getType().equals(RestParamType.formData)) {
        parameter=new FormParameter();
      }
 else       if (param.getType().equals(RestParamType.header)) {
        parameter=new HeaderParameter();
      }
 else       if (param.getType().equals(RestParamType.path)) {
        parameter=new PathParameter();
      }
 else       if (param.getType().equals(RestParamType.query)) {
        parameter=new QueryParameter();
      }
      if (parameter != null) {
        parameter.setName(param.getName());
        parameter.setAccess(param.getAccess());
        parameter.setDescription(param.getDescription());
        parameter.setRequired(param.getRequired());
        if (parameter instanceof SerializableParameter) {
          SerializableParameter serializableParameter=(SerializableParameter)parameter;
          if (param.getDataType() != null) {
            serializableParameter.setType(param.getDataType());
            if (param.getDataType().equalsIgnoreCase("array")) {
              if (param.getArrayType() != null) {
                if (param.getArrayType().equalsIgnoreCase("string")) {
                  serializableParameter.setItems(new StringProperty());
                }
                if (param.getArrayType().equalsIgnoreCase("int") || param.getArrayType().equalsIgnoreCase("integer")) {
                  serializableParameter.setItems(new IntegerProperty());
                }
                if (param.getArrayType().equalsIgnoreCase("long")) {
                  serializableParameter.setItems(new LongProperty());
                }
                if (param.getArrayType().equalsIgnoreCase("float")) {
                  serializableParameter.setItems(new FloatProperty());
                }
                if (param.getArrayType().equalsIgnoreCase("double")) {
                  serializableParameter.setItems(new DoubleProperty());
                }
                if (param.getArrayType().equalsIgnoreCase("boolean")) {
                  serializableParameter.setItems(new BooleanProperty());
                }
              }
            }
          }
          if (param.getCollectionFormat() != null) {
            serializableParameter.setCollectionFormat(param.getCollectionFormat().name());
          }
          if (param.getAllowableValues() != null && !param.getAllowableValues().isEmpty()) {
            serializableParameter.setEnum(param.getAllowableValues());
          }
        }
        if (parameter instanceof AbstractSerializableParameter) {
          AbstractSerializableParameter qp=(AbstractSerializableParameter)parameter;
          if (param.getDefaultValue() != null) {
            qp.setDefaultValue(param.getDefaultValue());
          }
        }
        if (parameter instanceof BodyParameter) {
          BodyParameter bp=(BodyParameter)parameter;
          if (verb.getType() != null) {
            String ref=modelTypeAsRef(verb.getType(),swagger);
            if (ref != null) {
              bp.setSchema(new RefModel(ref));
            }
          }
        }
        op.addParameter(parameter);
      }
    }
    if (verb.getOutType() != null) {
      Response response=new Response();
      Property prop=modelTypeAsProperty(verb.getOutType(),swagger);
      response.setSchema(prop);
      response.setDescription("Output type");
      op.addResponse("200",response);
    }
    for (    RestOperationResponseMsgDefinition msg : verb.getResponseMsgs()) {
      Response response=null;
      if (op.getResponses() != null) {
        response=op.getResponses().get(msg.getCode());
      }
      if (response == null) {
        response=new Response();
      }
      if (ObjectHelper.isNotEmpty(msg.getResponseModel())) {
        Property prop=modelTypeAsProperty(msg.getResponseModel(),swagger);
        response.setSchema(prop);
      }
      response.setDescription(msg.getMessage());
      if (msg.getHeaders() != null) {
        for (        RestOperationResponseHeaderDefinition header : msg.getHeaders()) {
          String name=header.getName();
          String type=header.getDataType();
          if ("string".equals(type)) {
            StringProperty sp=new StringProperty();
            sp.setName(name);
            sp.setDescription(header.getDescription());
            if (header.getAllowableValues() != null) {
              sp.setEnum(header.getAllowableValues());
            }
            response.addHeader(name,sp);
          }
 else           if ("int".equals(type) || "integer".equals(type)) {
            IntegerProperty ip=new IntegerProperty();
            ip.setName(name);
            ip.setDescription(header.getDescription());
            List<Integer> values;
            if (!header.getAllowableValues().isEmpty()) {
              values=new ArrayList<Integer>();
              for (              String text : header.getAllowableValues()) {
                values.add(Integer.valueOf(text));
              }
              ip.setEnum(values);
            }
            response.addHeader(name,ip);
          }
 else           if ("long".equals(type)) {
            LongProperty lp=new LongProperty();
            lp.setName(name);
            lp.setDescription(header.getDescription());
            List<Long> values;
            if (!header.getAllowableValues().isEmpty()) {
              values=new ArrayList<Long>();
              for (              String text : header.getAllowableValues()) {
                values.add(Long.valueOf(text));
              }
              lp.setEnum(values);
            }
            response.addHeader(name,lp);
          }
 else           if ("float".equals(type)) {
            FloatProperty lp=new FloatProperty();
            lp.setName(name);
            lp.setDescription(header.getDescription());
            List<Float> values;
            if (!header.getAllowableValues().isEmpty()) {
              values=new ArrayList<Float>();
              for (              String text : header.getAllowableValues()) {
                values.add(Float.valueOf(text));
              }
              lp.setEnum(values);
            }
            response.addHeader(name,lp);
          }
 else           if ("double".equals(type)) {
            DoubleProperty dp=new DoubleProperty();
            dp.setName(name);
            dp.setDescription(header.getDescription());
            List<Double> values;
            if (!header.getAllowableValues().isEmpty()) {
              values=new ArrayList<Double>();
              for (              String text : header.getAllowableValues()) {
                values.add(Double.valueOf(text));
              }
              dp.setEnum(values);
            }
            response.addHeader(name,dp);
          }
 else           if ("boolean".equals(type)) {
            BooleanProperty bp=new BooleanProperty();
            bp.setName(name);
            bp.setDescription(header.getDescription());
            response.addHeader(name,bp);
          }
 else           if ("array".equals(type)) {
            ArrayProperty ap=new ArrayProperty();
            ap.setName(name);
            ap.setDescription(header.getDescription());
            if (header.getArrayType() != null) {
              if (header.getArrayType().equalsIgnoreCase("string")) {
                ap.setItems(new StringProperty());
              }
              if (header.getArrayType().equalsIgnoreCase("int") || header.getArrayType().equalsIgnoreCase("integer")) {
                ap.setItems(new IntegerProperty());
              }
              if (header.getArrayType().equalsIgnoreCase("long")) {
                ap.setItems(new LongProperty());
              }
              if (header.getArrayType().equalsIgnoreCase("float")) {
                ap.setItems(new FloatProperty());
              }
              if (header.getArrayType().equalsIgnoreCase("double")) {
                ap.setItems(new DoubleProperty());
              }
              if (header.getArrayType().equalsIgnoreCase("boolean")) {
                ap.setItems(new BooleanProperty());
              }
            }
            response.addHeader(name,ap);
          }
        }
      }
      op.addResponse(msg.getCode(),response);
    }
    swagger.path(opPath,path);
  }
}
