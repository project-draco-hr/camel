{
  List<VerbDefinition> verbs=new ArrayList<>(rest.getVerbs());
  Collections.sort(verbs,new VerbOrdering());
  String pathAsTag=FileUtil.stripLeadingSeparator(rest.getPath());
  String summary=rest.getDescriptionText();
  Tag tag=new Tag();
  tag.description(summary);
  tag.name(pathAsTag);
  swagger.addTag(tag);
  Set<String> types=new LinkedHashSet<>();
  for (  VerbDefinition verb : verbs) {
    String type=verb.getType();
    if (type != null) {
      if (type.endsWith("[]")) {
        type=type.substring(0,type.length() - 2);
      }
      types.add(type);
    }
    type=verb.getOutType();
    if (type != null) {
      if (type.endsWith("[]")) {
        type=type.substring(0,type.length() - 2);
      }
      types.add(type);
    }
  }
  for (  String type : types) {
    Class<?> clazz=classResolver.resolveClass(type);
    appendModels(clazz,swagger);
  }
  List<Path> paths=new ArrayList<>();
  String basePath=rest.getPath();
  for (  VerbDefinition verb : verbs) {
    String method=verb.asVerb().toLowerCase(Locale.US);
    String opPath=SwaggerHelper.buildUrl(basePath,verb.getUri());
    Operation op=new Operation();
    op.addTag(pathAsTag);
    Path path=swagger.getPath(opPath);
    if (path == null) {
      path=new Path();
      paths.add(path);
    }
    path=path.set(method,op);
    String consumes=verb.getConsumes() != null ? verb.getConsumes() : rest.getConsumes();
    if (consumes != null) {
      String[] parts=consumes.split(",");
      for (      String part : parts) {
        op.addConsumes(part);
      }
    }
    String produces=verb.getProduces() != null ? verb.getProduces() : rest.getProduces();
    if (produces != null) {
      String[] parts=produces.split(",");
      for (      String part : parts) {
        op.addProduces(part);
      }
    }
    if (verb.getDescriptionText() != null) {
      op.summary(verb.getDescriptionText());
    }
    for (    RestOperationParamDefinition param : verb.getParams()) {
      Parameter parameter=null;
      if (param.getType().equals(RestParamType.body)) {
        parameter=new BodyParameter();
      }
 else       if (param.getType().equals(RestParamType.form)) {
        parameter=new FormParameter();
      }
 else       if (param.getType().equals(RestParamType.header)) {
        parameter=new HeaderParameter();
      }
 else       if (param.getType().equals(RestParamType.path)) {
        parameter=new PathParameter();
      }
 else       if (param.getType().equals(RestParamType.query)) {
        parameter=new QueryParameter();
      }
      if (parameter != null) {
        parameter.setName(param.getName());
        parameter.setAccess(param.getAccess());
        parameter.setDescription(param.getDescription());
        parameter.setRequired(param.getRequired());
        if (parameter instanceof SerializableParameter) {
          SerializableParameter sp=(SerializableParameter)parameter;
          if (param.getDataType() != null) {
            sp.setType(param.getDataType());
          }
        }
        if (parameter instanceof BodyParameter) {
          BodyParameter bp=(BodyParameter)parameter;
          if (verb.getType() != null) {
            String ref=modelTypeAsRef(verb.getType(),swagger);
            if (ref != null) {
              bp.setSchema(new RefModel(ref));
            }
          }
        }
        op.addParameter(parameter);
      }
    }
    if (verb.getOutType() != null) {
      Response response=new Response();
      Property prop=modelTypeAsProperty(verb.getOutType(),swagger);
      response.setSchema(prop);
      response.setDescription("Output type");
      op.addResponse("200",response);
    }
    for (    RestOperationResponseMsgDefinition msg : verb.getResponseMsgs()) {
      Response response=null;
      if (op.getResponses() != null) {
        response=op.getResponses().get(msg.getCode());
      }
      if (response == null) {
        response=new Response();
      }
      response.setDescription(msg.getMessage());
      op.addResponse(msg.getCode(),response);
    }
    swagger.path(opPath,path);
  }
}
