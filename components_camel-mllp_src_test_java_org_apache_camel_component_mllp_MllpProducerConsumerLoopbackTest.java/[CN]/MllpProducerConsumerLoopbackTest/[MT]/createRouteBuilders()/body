{
  RouteBuilder[] builders=new RouteBuilder[2];
  final int groupInterval=1000;
  final boolean groupActiveOnly=false;
  builders[0]=new RouteBuilder(){
    String routeId="mllp-receiver";
    public void configure(){
      fromF("mllp://%s:%d?autoAck=true",mllpHost,mllpPort).convertBodyTo(String.class).to(acknowledged).process(new PassthroughProcessor("after send to result")).log(LoggingLevel.DEBUG,routeId,"Receiving: ${body}").toF("log://%s?level=INFO&groupInterval=%d&groupActiveOnly=%b",routeId,groupInterval,groupActiveOnly);
    }
  }
;
  builders[1]=new RouteBuilder(){
    String routeId="mllp-sender";
    public void configure(){
      from(source.getDefaultEndpoint()).routeId(routeId).log(LoggingLevel.DEBUG,routeId,"Sending: ${body}").toF("mllp://%s:%d",mllpHost,mllpPort).setBody(header(MllpConstants.MLLP_ACKNOWLEDGEMENT)).toF("log://%s?level=INFO&groupInterval=%d&groupActiveOnly=%b",routeId,groupInterval,groupActiveOnly);
    }
  }
;
  return builders;
}
