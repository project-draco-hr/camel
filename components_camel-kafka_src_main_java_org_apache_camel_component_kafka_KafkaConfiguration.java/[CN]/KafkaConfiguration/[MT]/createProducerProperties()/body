{
  Properties props=new Properties();
  addPropertyIfNotNull(props,ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,getKeySerializerClass());
  addPropertyIfNotNull(props,ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,getSerializerClass());
  addPropertyIfNotNull(props,ProducerConfig.ACKS_CONFIG,getRequestRequiredAcks());
  addPropertyIfNotNull(props,ProducerConfig.BUFFER_MEMORY_CONFIG,getBufferMemorySize());
  addPropertyIfNotNull(props,ProducerConfig.COMPRESSION_TYPE_CONFIG,getCompressionCodec());
  addPropertyIfNotNull(props,ProducerConfig.RETRIES_CONFIG,getRetries());
  addPropertyIfNotNull(props,SslConfigs.SSL_KEY_PASSWORD_CONFIG,getSslKeyPassword());
  addPropertyIfNotNull(props,SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG,getSslKeystoreLocation());
  addPropertyIfNotNull(props,SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG,getSslKeystorePassword());
  addPropertyIfNotNull(props,SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG,getSslTruststoreLocation());
  addPropertyIfNotNull(props,SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG,getSslTruststorePassword());
  addPropertyIfNotNull(props,ProducerConfig.SEND_BUFFER_CONFIG,getRetries());
  addPropertyIfNotNull(props,ProducerConfig.BATCH_SIZE_CONFIG,getProducerBatchSize());
  addPropertyIfNotNull(props,ProducerConfig.CLIENT_ID_CONFIG,getClientId());
  addPropertyIfNotNull(props,ProducerConfig.CONNECTIONS_MAX_IDLE_MS_CONFIG,getConnectionMaxIdleMs());
  addPropertyIfNotNull(props,ProducerConfig.LINGER_MS_CONFIG,getLingerMs());
  addPropertyIfNotNull(props,ProducerConfig.MAX_BLOCK_MS_CONFIG,getMaxBlockMs());
  addPropertyIfNotNull(props,ProducerConfig.MAX_REQUEST_SIZE_CONFIG,getMaxRequestSize());
  addPropertyIfNotNull(props,ProducerConfig.PARTITIONER_CLASS_CONFIG,getPartitioner());
  addPropertyIfNotNull(props,ProducerConfig.RECEIVE_BUFFER_CONFIG,getReceiveBufferBytes());
  addPropertyIfNotNull(props,ProducerConfig.REQUEST_TIMEOUT_MS_CONFIG,getRequestTimeoutMs());
  addPropertyIfNotNull(props,CommonClientConfigs.SECURITY_PROTOCOL_CONFIG,getSecurityProtocol());
  addPropertyIfNotNull(props,ProducerConfig.SEND_BUFFER_CONFIG,getSendBufferBytes());
  addPropertyIfNotNull(props,SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG,getSslEnabledProtocols());
  addPropertyIfNotNull(props,SslConfigs.SSL_KEYSTORE_TYPE_CONFIG,getSslKeystoreType());
  addPropertyIfNotNull(props,SslConfigs.SSL_PROTOCOL_CONFIG,getSslProtocol());
  addPropertyIfNotNull(props,SslConfigs.SSL_PROVIDER_CONFIG,getSslProvider());
  addPropertyIfNotNull(props,SslConfigs.SSL_TRUSTSTORE_TYPE_CONFIG,getSslTruststoreType());
  addPropertyIfNotNull(props,ProducerConfig.MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION,getMaxInFlightRequest());
  addPropertyIfNotNull(props,ProducerConfig.METADATA_MAX_AGE_CONFIG,getMetadataMaxAgeMs());
  addPropertyIfNotNull(props,ProducerConfig.METRIC_REPORTER_CLASSES_CONFIG,getMetricReporters());
  addPropertyIfNotNull(props,ProducerConfig.METRICS_NUM_SAMPLES_CONFIG,getNoOfMetricsSample());
  addPropertyIfNotNull(props,ProducerConfig.METRICS_SAMPLE_WINDOW_MS_CONFIG,getMetricsSampleWindowMs());
  addPropertyIfNotNull(props,ProducerConfig.RECONNECT_BACKOFF_MS_CONFIG,getReconnectBackoffMs());
  addPropertyIfNotNull(props,ProducerConfig.RETRY_BACKOFF_MS_CONFIG,getRetryBackoffMs());
  addPropertyIfNotNull(props,SaslConfigs.SASL_KERBEROS_SERVICE_NAME,getSaslKerberosServiceName());
  addPropertyIfNotNull(props,SaslConfigs.SASL_KERBEROS_KINIT_CMD,getKerberosInitCmd());
  addPropertyIfNotNull(props,SaslConfigs.SASL_KERBEROS_MIN_TIME_BEFORE_RELOGIN,getKerberosBeforeReloginMinTime());
  addPropertyIfNotNull(props,SaslConfigs.SASL_KERBEROS_TICKET_RENEW_JITTER,getKerberosRenewJitter());
  addPropertyIfNotNull(props,SaslConfigs.SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTOR,getKerberosRenewWindowFactor());
  addListPropertyIfNotNull(props,SaslConfigs.SASL_KERBEROS_PRINCIPAL_TO_LOCAL_RULES,getKerberosPrincipalToLocalRules());
  addPropertyIfNotNull(props,SaslConfigs.SASL_MECHANISM,getSaslMechanism());
  addPropertyIfNotNull(props,SslConfigs.SSL_CIPHER_SUITES_CONFIG,getSslCipherSuites());
  addPropertyIfNotNull(props,SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG,getSslEndpointAlgorithm());
  addPropertyIfNotNull(props,SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG,getSslKeymanagerAlgorithm());
  addPropertyIfNotNull(props,SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_CONFIG,getSslTrustmanagerAlgorithm());
  return props;
}
