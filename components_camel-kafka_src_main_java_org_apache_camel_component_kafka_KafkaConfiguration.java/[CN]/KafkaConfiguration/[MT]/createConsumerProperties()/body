{
  Properties props=new Properties();
  addPropertyIfNotNull(props,ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG,getKeyDeserializer());
  addPropertyIfNotNull(props,ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG,getValueDeserializer());
  addPropertyIfNotNull(props,ConsumerConfig.FETCH_MIN_BYTES_CONFIG,getFetchMinBytes());
  addPropertyIfNotNull(props,ConsumerConfig.HEARTBEAT_INTERVAL_MS_CONFIG,getHeartbeatIntervalMs());
  addPropertyIfNotNull(props,ConsumerConfig.MAX_PARTITION_FETCH_BYTES_CONFIG,getMaxPartitionFetchBytes());
  addPropertyIfNotNull(props,ConsumerConfig.SESSION_TIMEOUT_MS_CONFIG,getSessionTimeoutMs());
  addPropertyIfNotNull(props,ConsumerConfig.MAX_POLL_RECORDS_CONFIG,getMaxPollRecords());
  addPropertyIfNotNull(props,SslConfigs.SSL_KEY_PASSWORD_CONFIG,getSslKeyPassword());
  addPropertyIfNotNull(props,SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG,getSslKeystoreLocation());
  addPropertyIfNotNull(props,SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG,getSslKeystorePassword());
  addPropertyIfNotNull(props,SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG,getSslTruststoreLocation());
  addPropertyIfNotNull(props,SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG,getSslTruststorePassword());
  addPropertyIfNotNull(props,ConsumerConfig.AUTO_OFFSET_RESET_CONFIG,getAutoOffsetReset());
  addPropertyIfNotNull(props,ConsumerConfig.CONNECTIONS_MAX_IDLE_MS_CONFIG,getConnectionMaxIdleMs());
  addPropertyIfNotNull(props,ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG,isAutoCommitEnable());
  addPropertyIfNotNull(props,ConsumerConfig.PARTITION_ASSIGNMENT_STRATEGY_CONFIG,getPartitionAssignor());
  addPropertyIfNotNull(props,ConsumerConfig.RECEIVE_BUFFER_CONFIG,getReceiveBufferBytes());
  addPropertyIfNotNull(props,ConsumerConfig.REQUEST_TIMEOUT_MS_CONFIG,getConsumerRequestTimeoutMs());
  addPropertyIfNotNull(props,CommonClientConfigs.SECURITY_PROTOCOL_CONFIG,getSecurityProtocol());
  addPropertyIfNotNull(props,ProducerConfig.SEND_BUFFER_CONFIG,getSendBufferBytes());
  addPropertyIfNotNull(props,SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG,getSslEnabledProtocols());
  addPropertyIfNotNull(props,SslConfigs.SSL_KEYSTORE_TYPE_CONFIG,getSslKeystoreType());
  addPropertyIfNotNull(props,SslConfigs.SSL_PROTOCOL_CONFIG,getSslProtocol());
  addPropertyIfNotNull(props,SslConfigs.SSL_PROVIDER_CONFIG,getSslProvider());
  addPropertyIfNotNull(props,SslConfigs.SSL_TRUSTSTORE_TYPE_CONFIG,getSslTruststoreType());
  addPropertyIfNotNull(props,ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG,getAutoCommitIntervalMs());
  addPropertyIfNotNull(props,ConsumerConfig.CHECK_CRCS_CONFIG,getCheckCrcs());
  addPropertyIfNotNull(props,ConsumerConfig.CLIENT_ID_CONFIG,getClientId());
  addPropertyIfNotNull(props,ConsumerConfig.FETCH_MAX_WAIT_MS_CONFIG,getFetchWaitMaxMs());
  addPropertyIfNotNull(props,ConsumerConfig.METADATA_MAX_AGE_CONFIG,getMetadataMaxAgeMs());
  addPropertyIfNotNull(props,ConsumerConfig.METRIC_REPORTER_CLASSES_CONFIG,getMetricReporters());
  addPropertyIfNotNull(props,ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG,getNoOfMetricsSample());
  addPropertyIfNotNull(props,ConsumerConfig.METRICS_SAMPLE_WINDOW_MS_CONFIG,getMetricsSampleWindowMs());
  addPropertyIfNotNull(props,ConsumerConfig.RECONNECT_BACKOFF_MS_CONFIG,getReconnectBackoffMs());
  addPropertyIfNotNull(props,ConsumerConfig.RETRY_BACKOFF_MS_CONFIG,getRetryBackoffMs());
  addPropertyIfNotNull(props,SaslConfigs.SASL_KERBEROS_SERVICE_NAME,getSaslKerberosServiceName());
  addPropertyIfNotNull(props,SaslConfigs.SASL_KERBEROS_KINIT_CMD,getKerberosInitCmd());
  addPropertyIfNotNull(props,SaslConfigs.SASL_KERBEROS_MIN_TIME_BEFORE_RELOGIN,getKerberosBeforeReloginMinTime());
  addPropertyIfNotNull(props,SaslConfigs.SASL_KERBEROS_TICKET_RENEW_JITTER,getKerberosRenewJitter());
  addPropertyIfNotNull(props,SaslConfigs.SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTOR,getKerberosRenewWindowFactor());
  addPropertyIfNotNull(props,SaslConfigs.SASL_MECHANISM,getSaslMechanism());
  addPropertyIfNotNull(props,SslConfigs.SSL_CIPHER_SUITES_CONFIG,getSslCipherSuites());
  addPropertyIfNotNull(props,SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG,getSslEndpointAlgorithm());
  addPropertyIfNotNull(props,SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG,getSslKeymanagerAlgorithm());
  addPropertyIfNotNull(props,SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_CONFIG,getSslTrustmanagerAlgorithm());
  return props;
}
