{
  Iterator<?> it=ObjectHelper.createIterator(new byte[]{13,Byte.MAX_VALUE,7,Byte.MIN_VALUE},null);
  assertTrue(it.hasNext());
  assertEquals(Byte.valueOf((byte)13),it.next());
  assertTrue(it.hasNext());
  assertEquals(Byte.MAX_VALUE,it.next());
  assertTrue(it.hasNext());
  assertEquals(Byte.valueOf((byte)7),it.next());
  assertTrue(it.hasNext());
  assertEquals(Byte.MIN_VALUE,it.next());
  assertFalse(it.hasNext());
  try {
    it.next();
    fail("Should have thrown exception");
  }
 catch (  NoSuchElementException nsee) {
    assertTrue(nsee.getMessage(),nsee.getMessage().startsWith("no more element available for '[B@"));
    assertTrue(nsee.getMessage(),nsee.getMessage().endsWith("at the index 4"));
  }
  it=ObjectHelper.createIterator(new byte[]{},null);
  assertFalse(it.hasNext());
  try {
    it.next();
    fail("Should have thrown exception");
  }
 catch (  NoSuchElementException nsee) {
    assertTrue(nsee.getMessage(),nsee.getMessage().startsWith("no more element available for '[B@"));
    assertTrue(nsee.getMessage(),nsee.getMessage().endsWith("at the index 0"));
  }
  it=ObjectHelper.createIterator(new short[]{13,Short.MAX_VALUE,7,Short.MIN_VALUE},null);
  assertTrue(it.hasNext());
  assertEquals(Short.valueOf((short)13),it.next());
  assertTrue(it.hasNext());
  assertEquals(Short.MAX_VALUE,it.next());
  assertTrue(it.hasNext());
  assertEquals(Short.valueOf((short)7),it.next());
  assertTrue(it.hasNext());
  assertEquals(Short.MIN_VALUE,it.next());
  assertFalse(it.hasNext());
  try {
    it.next();
    fail("Should have thrown exception");
  }
 catch (  NoSuchElementException nsee) {
    assertTrue(nsee.getMessage(),nsee.getMessage().startsWith("no more element available for '[S@"));
    assertTrue(nsee.getMessage(),nsee.getMessage().endsWith("at the index 4"));
  }
  it=ObjectHelper.createIterator(new short[]{},null);
  assertFalse(it.hasNext());
  try {
    it.next();
    fail("Should have thrown exception");
  }
 catch (  NoSuchElementException nsee) {
    assertTrue(nsee.getMessage(),nsee.getMessage().startsWith("no more element available for '[S@"));
    assertTrue(nsee.getMessage(),nsee.getMessage().endsWith("at the index 0"));
  }
  it=ObjectHelper.createIterator(new int[]{13,Integer.MAX_VALUE,7,Integer.MIN_VALUE},null);
  assertTrue(it.hasNext());
  assertEquals(Integer.valueOf(13),it.next());
  assertTrue(it.hasNext());
  assertEquals(Integer.MAX_VALUE,it.next());
  assertTrue(it.hasNext());
  assertEquals(Integer.valueOf(7),it.next());
  assertTrue(it.hasNext());
  assertEquals(Integer.MIN_VALUE,it.next());
  assertFalse(it.hasNext());
  try {
    it.next();
    fail("Should have thrown exception");
  }
 catch (  NoSuchElementException nsee) {
    assertTrue(nsee.getMessage(),nsee.getMessage().startsWith("no more element available for '[I@"));
    assertTrue(nsee.getMessage(),nsee.getMessage().endsWith("at the index 4"));
  }
  it=ObjectHelper.createIterator(new int[]{},null);
  assertFalse(it.hasNext());
  try {
    it.next();
    fail("Should have thrown exception");
  }
 catch (  NoSuchElementException nsee) {
    assertTrue(nsee.getMessage(),nsee.getMessage().startsWith("no more element available for '[I@"));
    assertTrue(nsee.getMessage(),nsee.getMessage().endsWith("at the index 0"));
  }
  it=ObjectHelper.createIterator(new long[]{13L,Long.MAX_VALUE,7L,Long.MIN_VALUE},null);
  assertTrue(it.hasNext());
  assertEquals(Long.valueOf(13),it.next());
  assertTrue(it.hasNext());
  assertEquals(Long.MAX_VALUE,it.next());
  assertTrue(it.hasNext());
  assertEquals(Long.valueOf(7),it.next());
  assertTrue(it.hasNext());
  assertEquals(Long.MIN_VALUE,it.next());
  assertFalse(it.hasNext());
  try {
    it.next();
    fail("Should have thrown exception");
  }
 catch (  NoSuchElementException nsee) {
    assertTrue(nsee.getMessage(),nsee.getMessage().startsWith("no more element available for '[J@"));
    assertTrue(nsee.getMessage(),nsee.getMessage().endsWith("at the index 4"));
  }
  it=ObjectHelper.createIterator(new long[]{},null);
  assertFalse(it.hasNext());
  try {
    it.next();
    fail("Should have thrown exception");
  }
 catch (  NoSuchElementException nsee) {
    assertTrue(nsee.getMessage(),nsee.getMessage().startsWith("no more element available for '[J@"));
    assertTrue(nsee.getMessage(),nsee.getMessage().endsWith("at the index 0"));
  }
  it=ObjectHelper.createIterator(new float[]{13.7F,Float.MAX_VALUE,7.13F,Float.MIN_VALUE},null);
  assertTrue(it.hasNext());
  assertEquals(Float.valueOf(13.7F),it.next());
  assertTrue(it.hasNext());
  assertEquals(Float.MAX_VALUE,it.next());
  assertTrue(it.hasNext());
  assertEquals(Float.valueOf(7.13F),it.next());
  assertTrue(it.hasNext());
  assertEquals(Float.MIN_VALUE,it.next());
  assertFalse(it.hasNext());
  try {
    it.next();
    fail("Should have thrown exception");
  }
 catch (  NoSuchElementException nsee) {
    assertTrue(nsee.getMessage(),nsee.getMessage().startsWith("no more element available for '[F@"));
    assertTrue(nsee.getMessage(),nsee.getMessage().endsWith("at the index 4"));
  }
  it=ObjectHelper.createIterator(new float[]{},null);
  assertFalse(it.hasNext());
  try {
    it.next();
    fail("Should have thrown exception");
  }
 catch (  NoSuchElementException nsee) {
    assertTrue(nsee.getMessage(),nsee.getMessage().startsWith("no more element available for '[F@"));
    assertTrue(nsee.getMessage(),nsee.getMessage().endsWith("at the index 0"));
  }
  it=ObjectHelper.createIterator(new double[]{13.7D,Double.MAX_VALUE,7.13D,Double.MIN_VALUE},null);
  assertTrue(it.hasNext());
  assertEquals(Double.valueOf(13.7D),it.next());
  assertTrue(it.hasNext());
  assertEquals(Double.MAX_VALUE,it.next());
  assertTrue(it.hasNext());
  assertEquals(Double.valueOf(7.13D),it.next());
  assertTrue(it.hasNext());
  assertEquals(Double.MIN_VALUE,it.next());
  assertFalse(it.hasNext());
  try {
    it.next();
    fail("Should have thrown exception");
  }
 catch (  NoSuchElementException nsee) {
    assertTrue(nsee.getMessage(),nsee.getMessage().startsWith("no more element available for '[D@"));
    assertTrue(nsee.getMessage(),nsee.getMessage().endsWith("at the index 4"));
  }
  it=ObjectHelper.createIterator(new double[]{},null);
  assertFalse(it.hasNext());
  try {
    it.next();
    fail("Should have thrown exception");
  }
 catch (  NoSuchElementException nsee) {
    assertTrue(nsee.getMessage(),nsee.getMessage().startsWith("no more element available for '[D@"));
    assertTrue(nsee.getMessage(),nsee.getMessage().endsWith("at the index 0"));
  }
  it=ObjectHelper.createIterator(new char[]{'C','a','m','e','l'},null);
  assertTrue(it.hasNext());
  assertEquals(Character.valueOf('C'),it.next());
  assertTrue(it.hasNext());
  assertEquals(Character.valueOf('a'),it.next());
  assertTrue(it.hasNext());
  assertEquals(Character.valueOf('m'),it.next());
  assertTrue(it.hasNext());
  assertEquals(Character.valueOf('e'),it.next());
  assertTrue(it.hasNext());
  assertEquals(Character.valueOf('l'),it.next());
  assertFalse(it.hasNext());
  try {
    it.next();
    fail("Should have thrown exception");
  }
 catch (  NoSuchElementException nsee) {
    assertTrue(nsee.getMessage(),nsee.getMessage().startsWith("no more element available for '[C@"));
    assertTrue(nsee.getMessage(),nsee.getMessage().endsWith("at the index 5"));
  }
  it=ObjectHelper.createIterator(new char[]{},null);
  assertFalse(it.hasNext());
  try {
    it.next();
    fail("Should have thrown exception");
  }
 catch (  NoSuchElementException nsee) {
    assertTrue(nsee.getMessage(),nsee.getMessage().startsWith("no more element available for '[C@"));
    assertTrue(nsee.getMessage(),nsee.getMessage().endsWith("at the index 0"));
  }
  it=ObjectHelper.createIterator(new boolean[]{false,true,false,true,true},null);
  assertTrue(it.hasNext());
  assertEquals(Boolean.FALSE,it.next());
  assertTrue(it.hasNext());
  assertEquals(Boolean.TRUE,it.next());
  assertTrue(it.hasNext());
  assertEquals(Boolean.FALSE,it.next());
  assertTrue(it.hasNext());
  assertEquals(Boolean.TRUE,it.next());
  assertTrue(it.hasNext());
  assertEquals(Boolean.TRUE,it.next());
  assertFalse(it.hasNext());
  try {
    it.next();
    fail("Should have thrown exception");
  }
 catch (  NoSuchElementException nsee) {
    assertTrue(nsee.getMessage(),nsee.getMessage().startsWith("no more element available for '[Z@"));
    assertTrue(nsee.getMessage(),nsee.getMessage().endsWith("at the index 5"));
  }
  it=ObjectHelper.createIterator(new boolean[]{},null);
  assertFalse(it.hasNext());
  try {
    it.next();
    fail("Should have thrown exception");
  }
 catch (  NoSuchElementException nsee) {
    assertTrue(nsee.getMessage(),nsee.getMessage().startsWith("no more element available for '[Z@"));
    assertTrue(nsee.getMessage(),nsee.getMessage().endsWith("at the index 0"));
  }
}
