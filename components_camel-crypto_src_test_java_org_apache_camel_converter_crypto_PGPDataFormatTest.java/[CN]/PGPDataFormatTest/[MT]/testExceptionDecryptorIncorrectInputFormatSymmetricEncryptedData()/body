{
  byte[] payload="Not Correct Format".getBytes("UTF-8");
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  PGPEncryptedDataGenerator encGen=new PGPEncryptedDataGenerator(new JcePGPDataEncryptorBuilder(SymmetricKeyAlgorithmTags.CAST5).setSecureRandom(new SecureRandom()).setProvider(getProvider()));
  encGen.addMethod(new JcePBEKeyEncryptionMethodGenerator("pw".toCharArray()));
  OutputStream encOut=encGen.open(bos,new byte[1024]);
  PGPCompressedDataGenerator comData=new PGPCompressedDataGenerator(CompressionAlgorithmTags.ZIP);
  OutputStream comOut=new BufferedOutputStream(comData.open(encOut));
  PGPLiteralDataGenerator litData=new PGPLiteralDataGenerator();
  OutputStream litOut=litData.open(comOut,PGPLiteralData.BINARY,PGPLiteralData.CONSOLE,new Date(),new byte[1024]);
  litOut.write(payload);
  litOut.flush();
  litOut.close();
  comOut.close();
  encOut.close();
  MockEndpoint mock=getMockEndpoint("mock:exception");
  mock.expectedMessageCount(1);
  template.sendBody("direct:subkeyUnmarshal",bos.toByteArray());
  assertMockEndpointsSatisfied();
  checkThrownException(mock,IllegalArgumentException.class,null,"The input message body has an invalid format.");
}
