{
  return new RouteBuilder(){
    public void configure() throws Exception {
      String keyFileName=getKeyFileName();
      String keyFileNameSec=getKeyFileNameSec();
      String keyUserid=getKeyUserId();
      String keyPassword=getKeyPassword();
      from("direct:inline").marshal().pgp(keyFileName,keyUserid).to("mock:encrypted").unmarshal().pgp(keyFileNameSec,null,keyPassword).to("mock:unencrypted");
      PGPDataFormat pgpEncrypt=new PGPDataFormat();
      pgpEncrypt.setKeyFileName(keyFileName);
      pgpEncrypt.setKeyUserid(keyUserid);
      pgpEncrypt.setProvider(getProvider());
      pgpEncrypt.setAlgorithm(getAlgorithm());
      PGPDataFormat pgpDecrypt=new PGPDataFormat();
      pgpDecrypt.setKeyFileName(keyFileNameSec);
      pgpDecrypt.setPassword(keyPassword);
      pgpDecrypt.setProvider(getProvider());
      from("direct:inline2").marshal(pgpEncrypt).to("mock:encrypted").unmarshal(pgpDecrypt).to("mock:unencrypted");
      from("direct:inline-armor").marshal().pgp(keyFileName,keyUserid,null,true,true).to("mock:encrypted").unmarshal().pgp(keyFileNameSec,null,keyPassword,true,true).to("mock:unencrypted");
      PGPDataFormat pgpSignAndEncrypt=new PGPDataFormat();
      pgpSignAndEncrypt.setKeyFileName(keyFileName);
      pgpSignAndEncrypt.setKeyUserid(keyUserid);
      pgpSignAndEncrypt.setSignatureKeyFileName(keyFileNameSec);
      PGPPassphraseAccessor passphraseAccessor=getPassphraseAccessor();
      pgpSignAndEncrypt.setSignatureKeyUserid(keyUserid);
      pgpSignAndEncrypt.setPassphraseAccessor(passphraseAccessor);
      pgpSignAndEncrypt.setProvider(getProvider());
      pgpSignAndEncrypt.setAlgorithm(getAlgorithm());
      pgpSignAndEncrypt.setHashAlgorithm(getHashAlgorithm());
      PGPDataFormat pgpVerifyAndDecrypt=new PGPDataFormat();
      pgpVerifyAndDecrypt.setKeyFileName(keyFileNameSec);
      pgpVerifyAndDecrypt.setPassword(keyPassword);
      pgpVerifyAndDecrypt.setSignatureKeyFileName(keyFileName);
      pgpVerifyAndDecrypt.setProvider(getProvider());
      from("direct:inline-sign").marshal(pgpSignAndEncrypt).to("mock:encrypted").unmarshal(pgpVerifyAndDecrypt).to("mock:unencrypted");
      PGPDataFormat pgpEncryptByteArray=new PGPDataFormat();
      pgpEncryptByteArray.setEncryptionKeyRing(getPublicKeyRing());
      pgpEncryptByteArray.setKeyUserid(keyUserid);
      pgpEncryptByteArray.setProvider(getProvider());
      pgpEncryptByteArray.setAlgorithm(SymmetricKeyAlgorithmTags.DES);
      PGPDataFormat pgpDecryptByteArray=new PGPDataFormat();
      pgpDecryptByteArray.setEncryptionKeyRing(getSecKeyRing());
      pgpDecryptByteArray.setPassphraseAccessor(passphraseAccessor);
      pgpDecryptByteArray.setProvider(getProvider());
      from("direct:key-ring-byte-array").marshal(pgpEncryptByteArray).to("mock:encrypted").unmarshal(pgpDecryptByteArray).to("mock:unencrypted");
      PGPDataFormat pgpSignAndEncryptByteArray=new PGPDataFormat();
      pgpSignAndEncryptByteArray.setKeyUserid(keyUserid);
      pgpSignAndEncryptByteArray.setSignatureKeyRing(getSecKeyRing());
      pgpSignAndEncryptByteArray.setSignatureKeyUserid(keyUserid);
      pgpSignAndEncryptByteArray.setSignaturePassword(keyPassword);
      pgpSignAndEncryptByteArray.setProvider(getProvider());
      pgpSignAndEncryptByteArray.setAlgorithm(SymmetricKeyAlgorithmTags.BLOWFISH);
      pgpSignAndEncryptByteArray.setHashAlgorithm(HashAlgorithmTags.RIPEMD160);
      PGPDataFormat pgpVerifyAndDecryptByteArray=new PGPDataFormat();
      pgpVerifyAndDecryptByteArray.setPassphraseAccessor(passphraseAccessor);
      pgpVerifyAndDecryptByteArray.setEncryptionKeyRing(getSecKeyRing());
      pgpVerifyAndDecryptByteArray.setProvider(getProvider());
      from("direct:sign-key-ring-byte-array").setHeader(PGPDataFormat.ENCRYPTION_KEY_RING).constant(getPublicKeyRing()).marshal(pgpSignAndEncryptByteArray).removeHeader(PGPDataFormat.ENCRYPTION_KEY_RING).to("mock:encrypted").setHeader(PGPDataFormat.SIGNATURE_KEY_RING).constant(getPublicKeyRing()).unmarshal(pgpVerifyAndDecryptByteArray).removeHeader(PGPDataFormat.SIGNATURE_KEY_RING).to("mock:unencrypted");
    }
  }
;
}
