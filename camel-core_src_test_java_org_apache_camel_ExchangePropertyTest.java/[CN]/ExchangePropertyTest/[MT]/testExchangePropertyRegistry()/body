{
  ExchangeProperty<Boolean> myProperty1=new ExchangeProperty<Boolean>("myProperty1",P1_NAME,Boolean.class);
  assertEquals(ExchangeProperty.get("myProperty1"),myProperty1);
  assertEquals(ExchangeProperty.values().length,1);
  assertEquals(ExchangeProperty.values()[0],myProperty1);
  ExchangeProperty<Boolean> myProperty2=new ExchangeProperty<Boolean>("myProperty2",P2_NAME,Boolean.class);
  assertEquals(ExchangeProperty.get("myProperty2"),myProperty2);
  assertEquals(ExchangeProperty.values().length,2);
  assertEquals(ExchangeProperty.values()[1],myProperty2);
  try {
    ExchangeProperty<Boolean> rejectedProperty=new ExchangeProperty<Boolean>("myProperty2",P2_NAME,Boolean.class);
    fail("Expected RuntimeCamelException to be thrown due to duplicate property " + " registration attempt");
  }
 catch (  RuntimeCamelException e) {
    assertEquals(ExchangeProperty.values().length,2);
  }
catch (  Throwable t) {
    fail("Expected RuntimeCamelException to be thrown due to duplicate propery " + " registration attempt");
  }
  ExchangeProperty.deregister(myProperty1);
  assertEquals(ExchangeProperty.get("myProperty1"),null);
  ExchangeProperty.deregister("myProperty2");
  assertEquals(ExchangeProperty.get("myProperty2"),null);
  assertEquals(ExchangeProperty.values().length,0);
}
