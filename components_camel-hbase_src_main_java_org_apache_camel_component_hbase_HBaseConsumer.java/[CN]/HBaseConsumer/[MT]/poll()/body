{
  HTableInterface table=endpoint.getTable();
  try {
    shutdownRunningTask=null;
    pendingExchanges=0;
    Queue<Exchange> queue=new LinkedList<Exchange>();
    Scan scan=new Scan();
    List<Filter> filters=new LinkedList<Filter>();
    if (endpoint.getFilters() != null) {
      filters.addAll(endpoint.getFilters());
    }
    if (maxMessagesPerPoll > 0) {
      filters.add(new PageFilter(maxMessagesPerPoll));
    }
    if (!filters.isEmpty()) {
      Filter compoundFilter=new FilterList(filters);
      scan.setFilter(compoundFilter);
    }
    if (rowModel != null && rowModel.getCells() != null) {
      Set<HBaseCell> cellModels=rowModel.getCells();
      for (      HBaseCell cellModel : cellModels) {
        scan.addColumn(HBaseHelper.getHBaseFieldAsBytes(cellModel.getFamily()),HBaseHelper.getHBaseFieldAsBytes(cellModel.getQualifier()));
      }
    }
    ResultScanner scanner=table.getScanner(scan);
    int exchangeCount=0;
    Exchange exchange=endpoint.createExchange();
    exchange.getIn().setHeader(CellMappingStrategyFactory.STRATEGY,CellMappingStrategyFactory.BODY);
    CellMappingStrategy mappingStrategy=endpoint.getCellMappingStrategyFactory().getStrategy(exchange.getIn());
    for (Result result=scanner.next(); (exchangeCount < maxMessagesPerPoll || maxMessagesPerPoll <= 0) && result != null; result=scanner.next()) {
      HBaseData data=new HBaseData();
      HBaseRow resultRow=new HBaseRow();
      resultRow.apply(rowModel);
      byte[] row=result.getRow();
      resultRow.setId(endpoint.getCamelContext().getTypeConverter().convertTo(rowModel.getRowType(),row));
      List<KeyValue> keyValues=result.list();
      if (keyValues != null) {
        Set<HBaseCell> cellModels=rowModel.getCells();
        if (cellModels.size() > 0) {
          for (          HBaseCell modelCell : cellModels) {
            HBaseCell resultCell=new HBaseCell();
            String family=modelCell.getFamily();
            String column=modelCell.getQualifier();
            resultCell.setValue(endpoint.getCamelContext().getTypeConverter().convertTo(modelCell.getValueType(),result.getValue(HBaseHelper.getHBaseFieldAsBytes(family),HBaseHelper.getHBaseFieldAsBytes(column))));
            resultCell.setFamily(modelCell.getFamily());
            resultCell.setQualifier(modelCell.getQualifier());
            resultRow.getCells().add(resultCell);
          }
        }
 else {
          for (          KeyValue keyValue : keyValues) {
            String qualifier=new String(keyValue.getQualifier());
            String family=new String(keyValue.getFamily());
            HBaseCell resultCell=new HBaseCell();
            resultCell.setFamily(family);
            resultCell.setQualifier(qualifier);
            resultCell.setValue(endpoint.getCamelContext().getTypeConverter().convertTo(String.class,keyValue.getValue()));
            resultRow.getCells().add(resultCell);
          }
        }
        data.getRows().add(resultRow);
        exchange=endpoint.createExchange();
        exchange.getIn().setHeader(CellMappingStrategyFactory.STRATEGY,CellMappingStrategyFactory.BODY);
        mappingStrategy.applyScanResults(exchange.getIn(),data);
        exchange.getIn().setHeader(HbaseAttribute.HBASE_MARKED_ROW_ID.asHeader(),result.getRow());
        queue.add(exchange);
        exchangeCount++;
      }
    }
    scanner.close();
    return queue.isEmpty() ? 0 : processBatch(CastUtils.cast(queue));
  }
  finally {
    table.close();
  }
}
