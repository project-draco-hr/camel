{
  final String key=UUID.randomUUID().toString();
  MockEndpoint mock=getMockEndpoint("mock:map-events-filtering");
  mock.expectedMessageCount(2);
  Map<String,String> map=client().acquireMap("/my/path",String.class,String.class);
  map.put(key,"val-1");
  map.put(key,"val-2");
  map.remove(key);
  mock.assertIsSatisfied();
  assertEquals(mock.getExchanges().get(0).getIn().getHeader(ChronicleEngineConstants.MAP_EVENT_TYPE),ChronicleEngineMapEventType.INSERT);
  assertEquals(mock.getExchanges().get(0).getIn().getBody(String.class),"val-1");
  assertEquals(mock.getExchanges().get(1).getIn().getHeader(ChronicleEngineConstants.MAP_EVENT_TYPE),ChronicleEngineMapEventType.REMOVE);
  assertEquals(mock.getExchanges().get(1).getIn().getHeader(ChronicleEngineConstants.OLD_VALUE),"val-2");
}
