{
  System.setProperty("org.apache.aries.blueprint.synchronous",Boolean.toString(!useAsynchronousBlueprintStartup()));
  String[] file=loadConfigAdminConfigurationFile();
  if (file != null) {
    if (file.length != 2) {
      throw new IllegalArgumentException("The returned String[] from loadConfigAdminConfigurationFile must be of length 2, was " + file.length);
    }
    if (!new File(file[0]).exists()) {
      throw new IllegalArgumentException("The provided file \"" + file[0] + "\" from loadConfigAdminConfigurationFile doesn't exist");
    }
  }
  Properties initialConfiguration=new Properties();
  String pid=setConfigAdminInitialConfiguration(initialConfiguration);
  if (pid != null) {
    file=new String[]{prepareInitialConfigFile(initialConfiguration),pid};
  }
  final String symbolicName=getClass().getSimpleName();
  final BundleContext answer=CamelBlueprintHelper.createBundleContext(symbolicName,getBlueprintDescriptor(),includeTestBundle(),getBundleFilter(),getBundleVersion(),getBundleDirectives(),file);
  boolean expectReload=expectBlueprintContainerReloadOnConfigAdminUpdate();
  Properties extra=useOverridePropertiesWithPropertiesComponent();
  if (extra != null) {
    answer.registerService(PropertiesComponent.OVERRIDE_PROPERTIES,extra,null);
  }
  Map<String,KeyValueHolder<Object,Dictionary>> map=new LinkedHashMap<String,KeyValueHolder<Object,Dictionary>>();
  addServicesOnStartup(map);
  List<KeyValueHolder<String,KeyValueHolder<Object,Dictionary>>> servicesList=new LinkedList<KeyValueHolder<String,KeyValueHolder<Object,Dictionary>>>();
  for (  Map.Entry<String,KeyValueHolder<Object,Dictionary>> entry : map.entrySet()) {
    servicesList.add(asKeyValueService(entry.getKey(),entry.getValue().getKey(),entry.getValue().getValue()));
  }
  addServicesOnStartup(servicesList);
  for (  KeyValueHolder<String,KeyValueHolder<Object,Dictionary>> item : servicesList) {
    String clazz=item.getKey();
    Object service=item.getValue().getKey();
    Dictionary dict=item.getValue().getValue();
    log.debug("Registering service {} -> {}",clazz,service);
    ServiceRegistration<?> reg=answer.registerService(clazz,service,dict);
    if (reg != null) {
      services.add(reg);
    }
  }
  Set<Long> bpEvents=new HashSet<>();
  CamelBlueprintHelper.waitForBlueprintContainer(bpEvents,answer,symbolicName,BlueprintEvent.CREATED,null);
  final Dictionary props=new Properties();
  pid=useOverridePropertiesWithConfigAdmin(props);
  if (pid != null) {
    ConfigurationAdmin configAdmin=CamelBlueprintHelper.getOsgiService(answer,ConfigurationAdmin.class);
    final Configuration config=configAdmin.getConfiguration(pid,null);
    if (config == null) {
      throw new IllegalArgumentException("Cannot find configuration with pid " + pid + " in OSGi ConfigurationAdmin service.");
    }
    Dictionary<String,Object> currentProperties=config.getProperties();
    final Dictionary newProps=new Properties();
    if (currentProperties == null) {
      currentProperties=newProps;
    }
    for (Enumeration<String> ek=currentProperties.keys(); ek.hasMoreElements(); ) {
      String k=ek.nextElement();
      newProps.put(k,currentProperties.get(k));
    }
    for (    String p : ((Properties)props).stringPropertyNames()) {
      newProps.put(p,((Properties)props).getProperty(p));
    }
    log.info("Updating ConfigAdmin {} by overriding properties {}",config,newProps);
    if (expectReload) {
      CamelBlueprintHelper.waitForBlueprintContainer(bpEvents,answer,symbolicName,BlueprintEvent.CREATED,new Runnable(){
        @Override public void run(){
          try {
            config.update(newProps);
          }
 catch (          IOException e) {
            throw new RuntimeException(e.getMessage(),e);
          }
        }
      }
);
    }
 else {
      config.update(newProps);
    }
  }
  return answer;
}
