{
  String symbolicName=getClass().getSimpleName();
  BundleContext answer=CamelBlueprintHelper.createBundleContext(symbolicName,getBlueprintDescriptor(),includeTestBundle(),getBundleFilter(),getBundleVersion(),getBundleDirectives());
  Properties extra=useOverridePropertiesWithPropertiesComponent();
  if (extra != null) {
    answer.registerService(PropertiesComponent.OVERRIDE_PROPERTIES,extra,null);
  }
  Map<String,KeyValueHolder<Object,Dictionary>> map=new LinkedHashMap<String,KeyValueHolder<Object,Dictionary>>();
  addServicesOnStartup(map);
  for (  Map.Entry<String,KeyValueHolder<Object,Dictionary>> entry : map.entrySet()) {
    String clazz=entry.getKey();
    Object service=entry.getValue().getKey();
    Dictionary dict=entry.getValue().getValue();
    log.debug("Registering service {} -> {}",clazz,service);
    ServiceRegistration<?> reg=answer.registerService(clazz,service,dict);
    if (reg != null) {
      services.add(reg);
    }
  }
  Dictionary props=new Properties();
  String[] file=loadConfigAdminConfigurationFile();
  if (file != null && file.length != 2) {
    throw new IllegalArgumentException("The returned String[] from loadConfigAdminConfigurationFile must be of length 2, was " + file.length);
  }
  if (file != null) {
    CamelBlueprintHelper.setPersistentFileForConfigAdmin(answer,file[1],file[0],props);
  }
  String pid=useOverridePropertiesWithConfigAdmin(props);
  if (pid != null) {
    ConfigurationAdmin configAdmin=CamelBlueprintHelper.getOsgiService(answer,ConfigurationAdmin.class);
    Configuration config=configAdmin.getConfiguration(pid);
    if (config == null) {
      throw new IllegalArgumentException("Cannot find configuration with pid " + pid + " in OSGi ConfigurationAdmin service.");
    }
    log.info("Updating ConfigAdmin {} by overriding properties {}",config,props);
    config.update(props);
  }
  return answer;
}
