{
  final String symbolicName=getClass().getSimpleName();
  final BundleContext answer=CamelBlueprintHelper.createBundleContext(symbolicName,getBlueprintDescriptor(),includeTestBundle(),getBundleFilter(),getBundleVersion(),getBundleDirectives());
  Properties extra=useOverridePropertiesWithPropertiesComponent();
  if (extra != null) {
    answer.registerService(PropertiesComponent.OVERRIDE_PROPERTIES,extra,null);
  }
  Map<String,KeyValueHolder<Object,Dictionary>> map=new LinkedHashMap<String,KeyValueHolder<Object,Dictionary>>();
  addServicesOnStartup(map);
  List<KeyValueHolder<String,KeyValueHolder<Object,Dictionary>>> servicesList=new LinkedList<KeyValueHolder<String,KeyValueHolder<Object,Dictionary>>>();
  for (  Map.Entry<String,KeyValueHolder<Object,Dictionary>> entry : map.entrySet()) {
    servicesList.add(asKeyValueService(entry.getKey(),entry.getValue().getKey(),entry.getValue().getValue()));
  }
  addServicesOnStartup(servicesList);
  for (  KeyValueHolder<String,KeyValueHolder<Object,Dictionary>> item : servicesList) {
    String clazz=item.getKey();
    Object service=item.getValue().getKey();
    Dictionary dict=item.getValue().getValue();
    log.debug("Registering service {} -> {}",clazz,service);
    ServiceRegistration<?> reg=answer.registerService(clazz,service,dict);
    if (reg != null) {
      services.add(reg);
    }
  }
  Dictionary props=new Properties();
  String[] file=loadConfigAdminConfigurationFile();
  if (file != null && file.length != 2) {
    throw new IllegalArgumentException("The returned String[] from loadConfigAdminConfigurationFile must be of length 2, was " + file.length);
  }
  if (file != null) {
    CamelBlueprintHelper.setPersistentFileForConfigAdmin(answer,file[1],file[0],props);
  }
  String pid=useOverridePropertiesWithConfigAdmin(props);
  if (pid != null) {
    final CountDownLatch latch=new CountDownLatch(2);
    answer.registerService(ConfigurationListener.class,new ConfigurationListener(){
      @Override public void configurationEvent(      ConfigurationEvent event){
        if (event.getType() == ConfigurationEvent.CM_LOCATION_CHANGED) {
          latch.countDown();
        }
        answer.registerService(BlueprintListener.class,new BlueprintListener(){
          @Override public void blueprintEvent(          BlueprintEvent event){
            if (event.getType() == BlueprintEvent.CREATED && event.getBundle().getSymbolicName().equals(symbolicName)) {
              latch.countDown();
            }
          }
        }
,null);
      }
    }
,null);
    ConfigurationAdmin configAdmin=CamelBlueprintHelper.getOsgiService(answer,ConfigurationAdmin.class);
    Configuration config=configAdmin.getConfiguration(pid,null);
    if (config == null) {
      throw new IllegalArgumentException("Cannot find configuration with pid " + pid + " in OSGi ConfigurationAdmin service.");
    }
    log.info("Updating ConfigAdmin {} by overriding properties {}",config,props);
    config.update(props);
    latch.await(CamelBlueprintHelper.DEFAULT_TIMEOUT,TimeUnit.MILLISECONDS);
  }
  return answer;
}
