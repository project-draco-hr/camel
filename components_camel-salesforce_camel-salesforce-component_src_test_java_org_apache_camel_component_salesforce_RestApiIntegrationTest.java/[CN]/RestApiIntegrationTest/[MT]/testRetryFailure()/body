{
  SalesforceComponent sf=context().getComponent("salesforce",SalesforceComponent.class);
  String accessToken=sf.getSession().getAccessToken();
  SslContextFactory sslContextFactory=new SslContextFactory();
  sslContextFactory.setSslContext(new SSLContextParameters().createSSLContext());
  HttpClient httpClient=new HttpClient(sslContextFactory);
  httpClient.setConnectTimeout(60000);
  httpClient.start();
  String uri=sf.getLoginConfig().getLoginUrl() + "/services/oauth2/revoke?token=" + accessToken;
  Request logoutGet=httpClient.newRequest(uri).method(HttpMethod.GET).timeout(1,TimeUnit.MINUTES);
  ContentResponse response=logoutGet.send();
  assertEquals(HttpStatus.OK_200,response.getStatus());
  final String password=sf.getLoginConfig().getPassword();
  sf.getLoginConfig().setPassword("bad_password");
  try {
    doTestGetGlobalObjects("");
    fail("Expected CamelExecutionException!");
  }
 catch (  CamelExecutionException e) {
    if (e.getCause() instanceof SalesforceException) {
      SalesforceException cause=(SalesforceException)e.getCause();
      assertEquals("Expected 400 on authentication retry failure",HttpStatus.BAD_REQUEST_400,cause.getStatusCode());
    }
 else {
      fail("Expected SalesforceException!");
    }
  }
 finally {
    sf.getLoginConfig().setPassword(password);
  }
}
