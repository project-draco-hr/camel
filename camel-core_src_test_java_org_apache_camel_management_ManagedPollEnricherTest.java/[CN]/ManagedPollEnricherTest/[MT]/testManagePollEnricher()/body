{
  if (isPlatform("aix")) {
    return;
  }
  MockEndpoint foo=getMockEndpoint("mock:foo");
  foo.expectedBodiesReceived("Hello World");
  template.sendBody("seda:foo","Hello World");
  template.sendBodyAndHeader("direct:start","Hello","whereto","foo");
  assertMockEndpointsSatisfied();
  MBeanServer mbeanServer=getMBeanServer();
  ObjectName on=ObjectName.getInstance("org.apache.camel:context=camel-1,type=processors,name=\"mysend\"");
  String routeId=(String)mbeanServer.getAttribute(on,"RouteId");
  assertEquals("route1",routeId);
  String camelId=(String)mbeanServer.getAttribute(on,"CamelId");
  assertEquals("camel-1",camelId);
  String state=(String)mbeanServer.getAttribute(on,"State");
  assertEquals(ServiceStatus.Started.name(),state);
  Long timout=(Long)mbeanServer.getAttribute(on,"Timeout");
  assertEquals(1000,timout.longValue());
  String lan=(String)mbeanServer.getAttribute(on,"ExpressionLanguage");
  assertEquals("simple",lan);
  String uri=(String)mbeanServer.getAttribute(on,"Expression");
  assertEquals("seda:${header.whereto}",uri);
  TabularData data=(TabularData)mbeanServer.invoke(on,"extendedInformation",null,null);
  assertNotNull(data);
  assertEquals(1,data.size());
  data=(TabularData)mbeanServer.invoke(on,"explain",new Object[]{false},new String[]{"boolean"});
  assertNotNull(data);
  assertEquals(3,data.size());
  data=(TabularData)mbeanServer.invoke(on,"explain",new Object[]{true},new String[]{"boolean"});
  assertNotNull(data);
  assertEquals(10,data.size());
  String json=(String)mbeanServer.invoke(on,"informationJson",null,null);
  assertNotNull(json);
  assertTrue(json.contains("\"description\": \"Enriches messages with data polled from a secondary resource"));
}
