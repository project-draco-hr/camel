{
  LOG.trace("Evaluating exchange: {} as: {}",exchange,resultQName);
  Object answer;
  this.exchange.set(exchange);
  InputStream is=null;
  try {
    Object document;
    if (ObjectHelper.isNotEmpty(getHeaderName())) {
      String headerName=getHeaderName();
      if (isInputStreamNeeded(exchange,headerName)) {
        is=exchange.getIn().getHeader(headerName,InputStream.class);
        document=getDocument(exchange,is);
      }
 else {
        Object headerObject=exchange.getIn().getHeader(getHeaderName());
        document=getDocument(exchange,headerObject);
      }
    }
 else {
      if (isInputStreamNeeded(exchange)) {
        is=exchange.getIn().getBody(InputStream.class);
        document=getDocument(exchange,is);
      }
 else {
        Object body=exchange.getIn().getBody();
        document=getDocument(exchange,body);
      }
    }
    if (resultQName != null) {
      if (document instanceof InputSource) {
        InputSource inputSource=(InputSource)document;
        answer=xpathExpression.evaluate(inputSource,resultQName);
      }
 else       if (document instanceof DOMSource) {
        DOMSource source=(DOMSource)document;
        answer=xpathExpression.evaluate(source.getNode(),resultQName);
      }
 else {
        answer=xpathExpression.evaluate(document,resultQName);
      }
    }
 else {
      if (document instanceof InputSource) {
        InputSource inputSource=(InputSource)document;
        answer=xpathExpression.evaluate(inputSource);
      }
 else       if (document instanceof DOMSource) {
        DOMSource source=(DOMSource)document;
        answer=xpathExpression.evaluate(source.getNode());
      }
 else {
        answer=xpathExpression.evaluate(document);
      }
    }
  }
 catch (  XPathExpressionException e) {
    String message=getText();
    if (ObjectHelper.isNotEmpty(getHeaderName())) {
      message=message + " with headerName " + getHeaderName();
    }
    throw new InvalidXPathExpression(message,e);
  }
 finally {
    IOHelper.close(is);
  }
  if (LOG.isTraceEnabled()) {
    LOG.trace("Done evaluating exchange: {} as: {} with result: {}",new Object[]{exchange,resultQName,answer});
  }
  return answer;
}
