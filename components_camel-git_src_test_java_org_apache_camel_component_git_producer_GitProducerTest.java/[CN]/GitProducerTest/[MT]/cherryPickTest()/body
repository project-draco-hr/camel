{
  Repository repository=getTestRepository();
  File fileToAdd=new File(gitLocalRepo,filenameToAdd);
  fileToAdd.createNewFile();
  template.send("direct:add",new Processor(){
    @Override public void process(    Exchange exchange) throws Exception {
      exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME,filenameToAdd);
    }
  }
);
  File gitDir=new File(gitLocalRepo,".git");
  assertEquals(gitDir.exists(),true);
  Status status=new Git(repository).status().call();
  assertTrue(status.getAdded().contains(filenameToAdd));
  template.send("direct:commit",new Processor(){
    @Override public void process(    Exchange exchange) throws Exception {
      exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE,commitMessage);
    }
  }
);
  Iterable<RevCommit> logs=new Git(repository).log().call();
  int count=0;
  for (  RevCommit rev : logs) {
    assertEquals(rev.getShortMessage(),commitMessage);
    count++;
  }
  assertEquals(count,1);
  template.sendBody("direct:create-branch","");
  List<Ref> branches=template.requestBody("direct:show-branches","",List.class);
  Boolean branchExists=false;
  for (  Ref reference : branches) {
    if (("refs/heads/" + branchTest).equals(reference.getName())) {
      branchExists=true;
    }
  }
  assertTrue(branchExists);
  File fileToAdd1=new File(gitLocalRepo,"filetest1test.txt");
  fileToAdd1.createNewFile();
  template.send("direct:add",new Processor(){
    @Override public void process(    Exchange exchange) throws Exception {
      exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME,"filetest1test.txt");
    }
  }
);
  status=new Git(repository).status().call();
  assertTrue(status.getAdded().contains("filetest1test.txt"));
  template.send("direct:commit",new Processor(){
    @Override public void process(    Exchange exchange) throws Exception {
      exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE,"Test second commit");
    }
  }
);
  logs=new Git(repository).log().call();
  count=0;
  String id="";
  for (  RevCommit rev : logs) {
    if (count == 0) {
      id=rev.getName();
      assertEquals(rev.getShortMessage(),"Test second commit");
    }
    count++;
  }
  assertEquals(count,2);
  final String str=id;
  template.send("direct:cherrypick",new Processor(){
    @Override public void process(    Exchange exchange) throws Exception {
      exchange.getIn().setHeader(GitConstants.GIT_COMMIT_ID,str);
    }
  }
);
  Git git=new Git(repository);
  git.checkout().setCreateBranch(false).setName(branchTest).call();
  logs=git.log().call();
  count=0;
  for (  RevCommit rev : logs) {
    if (count == 0) {
      assertEquals(rev.getShortMessage(),"Test second commit");
    }
    count++;
  }
  assertEquals(count,2);
  repository.close();
}
