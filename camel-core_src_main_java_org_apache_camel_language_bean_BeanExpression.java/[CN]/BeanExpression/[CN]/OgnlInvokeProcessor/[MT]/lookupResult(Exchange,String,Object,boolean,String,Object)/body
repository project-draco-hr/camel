{
  ObjectHelper.notEmpty(key,"key","in Simple language ognl path: " + ognlPath);
  key=key.trim();
  key=StringHelper.removeLeadingAndEndingQuotes(key);
  Map<?,?> map=exchange.getContext().getTypeConverter().convertTo(Map.class,result);
  if (map != null) {
    return map.get(key);
  }
  Integer num=exchange.getContext().getTypeConverter().tryConvertTo(Integer.class,key);
  boolean checkList=key.startsWith("last") || num != null;
  if (checkList) {
    List<?> list=exchange.getContext().getTypeConverter().convertTo(List.class,result);
    if (list != null) {
      if (key.startsWith("last")) {
        num=list.size() - 1;
        String after=ObjectHelper.after(key,"-");
        if (after != null) {
          Integer redux=exchange.getContext().getTypeConverter().tryConvertTo(Integer.class,after.trim());
          if (redux != null) {
            num-=redux;
          }
 else {
            throw new ExpressionIllegalSyntaxException(key);
          }
        }
      }
      if (num != null && num >= 0 && list.size() > num - 1 && list.size() > 0) {
        return list.get(num);
      }
      if (!nullSafe) {
        throw new IndexOutOfBoundsException("Index: " + num + ", Size: "+ list.size()+ " out of bounds with List from bean: "+ bean+ "using OGNL path ["+ ognlPath+ "]");
      }
    }
  }
  if (!nullSafe) {
    throw new IndexOutOfBoundsException("Key: " + key + " not found in bean: "+ bean+ " of type: "+ ObjectHelper.classCanonicalName(bean)+ " using OGNL path ["+ ognlPath+ "]");
  }
 else {
    return null;
  }
}
