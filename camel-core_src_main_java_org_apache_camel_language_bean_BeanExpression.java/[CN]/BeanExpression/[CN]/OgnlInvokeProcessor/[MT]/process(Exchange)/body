{
  Exchange resultExchange=exchange.copy();
  resultExchange.setException(null);
  resultExchange.setPattern(ExchangePattern.InOut);
  resultExchange.getIn().removeHeader(Exchange.BEAN_METHOD_NAME);
  String ognlPath="";
  Object beanToCall=beanHolder.getBean();
  if (beanToCall == null) {
    throw new IllegalArgumentException("Bean instance is null. OGNL bean expressions requires bean instances.");
  }
  List<String> methods=OgnlHelper.splitOgnl(ognl);
  for (  String methodName : methods) {
    BeanHolder holder=new ConstantBeanHolder(beanToCall,exchange.getContext());
    boolean nullSafe=OgnlHelper.isNullSafeOperator(methodName);
    ognlPath+=methodName;
    methodName=OgnlHelper.removeLeadingOperators(methodName);
    String key=null;
    KeyValueHolder<String,String> index=OgnlHelper.isOgnlIndex(methodName);
    if (index != null) {
      methodName=index.getKey();
      key=index.getValue();
    }
    if (methodName != null) {
      InvokeProcessor invoke=new InvokeProcessor(holder,methodName);
      invoke.process(resultExchange);
      if (resultExchange.getException() != null) {
        throw new RuntimeBeanExpressionException(exchange,beanName,methodName,resultExchange.getException());
      }
      result=invoke.getResult();
    }
    if (key != null) {
      result=lookupResult(resultExchange,key,result,nullSafe,ognlPath,holder.getBean());
    }
    if (result == null && nullSafe) {
      return;
    }
    beanToCall=result;
    resultExchange.getIn().setBody(result);
  }
}
