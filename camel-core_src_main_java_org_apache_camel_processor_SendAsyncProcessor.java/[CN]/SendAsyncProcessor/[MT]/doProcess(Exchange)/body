{
  final ProducerCache cache=getProducerCache(exchange);
  final Producer producer=cache.acquireProducer(destination);
  ObjectHelper.notNull(producer,"producer");
  final AsyncCallback callback=new AsyncCallback(){
    public void onTaskCompleted(    Exchange exchange){
      if (LOG.isTraceEnabled()) {
        LOG.trace("onTaskCompleted " + exchange);
      }
      try {
        completedTasks.add(exchange);
      }
  finally {
        try {
          cache.releaseProducer(destination,producer);
        }
 catch (        Exception e) {
          LOG.warn("Error releasing producer: " + producer + ". This exception will be ignored.",e);
        }
      }
    }
  }
;
  exchange=configureExchange(exchange,pattern);
  if (producer instanceof AsyncProcessor) {
    doAsyncProcess((AsyncProcessor)producer,exchange,callback);
  }
 else {
    doSimulateAsyncProcess(producer,exchange,callback);
  }
  return exchange;
}
