{
  Expression answer;
  if (beanType == null && beanTypeName != null) {
    try {
      beanType=camelContext.getClassResolver().resolveMandatoryClass(beanTypeName);
    }
 catch (    ClassNotFoundException e) {
      throw ObjectHelper.wrapRuntimeCamelException(e);
    }
  }
  BeanHolder holder;
  if (beanType != null) {
    if (ObjectHelper.hasDefaultPublicNoArgConstructor(beanType)) {
      instance=camelContext.getInjector().newInstance(beanType);
      holder=new ConstantBeanHolder(instance,camelContext);
    }
 else {
      holder=new ConstantStaticTypeBeanHolder(beanType,camelContext);
    }
  }
 else   if (instance != null) {
    holder=new ConstantBeanHolder(instance,camelContext);
  }
 else {
    String ref=beanName();
    BeanHolder regHolder=new RegistryBean(camelContext,ref);
    instance=regHolder.getBean();
    holder=new ConstantBeanHolder(instance,camelContext);
  }
  answer=new BeanExpression(holder,getMethod());
  validateHasMethod(camelContext,instance,beanType,getMethod());
  return answer;
}
