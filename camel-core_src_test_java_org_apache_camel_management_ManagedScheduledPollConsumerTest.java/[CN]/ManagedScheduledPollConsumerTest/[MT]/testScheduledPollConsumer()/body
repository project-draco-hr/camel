{
  if (isPlatform("aix")) {
    return;
  }
  MBeanServer mbeanServer=getMBeanServer();
  Set<ObjectName> set=mbeanServer.queryNames(new ObjectName("*:type=consumers,*"),null);
  assertEquals(1,set.size());
  ObjectName on=set.iterator().next();
  assertTrue("Should be registered",mbeanServer.isRegistered(on));
  String uri=(String)mbeanServer.getAttribute(on,"EndpointUri");
  assertEquals("file://target/foo?backoffErrorThreshold=3&backoffIdleThreshold=2&backoffMultiplier=4&delay=4000",uri);
  Long delay=(Long)mbeanServer.getAttribute(on,"Delay");
  assertEquals(4000,delay.longValue());
  Long initialDelay=(Long)mbeanServer.getAttribute(on,"InitialDelay");
  assertEquals(1000,initialDelay.longValue());
  Boolean fixedDelay=(Boolean)mbeanServer.getAttribute(on,"UseFixedDelay");
  assertEquals(Boolean.TRUE,fixedDelay);
  Boolean schedulerStarted=(Boolean)mbeanServer.getAttribute(on,"SchedulerStarted");
  assertEquals(Boolean.TRUE,schedulerStarted);
  String timeUnit=(String)mbeanServer.getAttribute(on,"TimeUnit");
  assertEquals(TimeUnit.MILLISECONDS.toString(),timeUnit);
  Integer backoffMultiplier=(Integer)mbeanServer.getAttribute(on,"BackoffMultiplier");
  assertEquals(4,backoffMultiplier.longValue());
  Integer backoffCounter=(Integer)mbeanServer.getAttribute(on,"BackoffCounter");
  assertEquals(0,backoffCounter.longValue());
  Integer backoffIdleThreshold=(Integer)mbeanServer.getAttribute(on,"BackoffIdleThreshold");
  assertEquals(2,backoffIdleThreshold.longValue());
  Integer backoffErrorThreshold=(Integer)mbeanServer.getAttribute(on,"BackoffErrorThreshold");
  assertEquals(3,backoffErrorThreshold.longValue());
  String routeId=(String)mbeanServer.getAttribute(on,"RouteId");
  assertEquals("route1",routeId);
  mbeanServer.invoke(on,"stop",null,null);
  schedulerStarted=(Boolean)mbeanServer.getAttribute(on,"SchedulerStarted");
  assertEquals(Boolean.FALSE,schedulerStarted);
  mbeanServer.setAttribute(on,new Attribute("Delay",2000));
  mbeanServer.invoke(on,"start",null,null);
  delay=(Long)mbeanServer.getAttribute(on,"Delay");
  assertEquals(2000,delay.longValue());
  mbeanServer.setAttribute(on,new Attribute("UseFixedDelay",Boolean.FALSE));
  fixedDelay=(Boolean)mbeanServer.getAttribute(on,"UseFixedDelay");
  assertEquals(Boolean.FALSE,fixedDelay);
  mbeanServer.setAttribute(on,new Attribute("TimeUnit",TimeUnit.SECONDS.name()));
  timeUnit=(String)mbeanServer.getAttribute(on,"TimeUnit");
  assertEquals(TimeUnit.SECONDS.toString(),timeUnit);
  mbeanServer.setAttribute(on,new Attribute("InitialDelay",Long.valueOf("2000")));
  initialDelay=(Long)mbeanServer.getAttribute(on,"InitialDelay");
  assertEquals(2000,initialDelay.longValue());
  context.stop();
  assertFalse("Should no longer be registered",mbeanServer.isRegistered(on));
}
