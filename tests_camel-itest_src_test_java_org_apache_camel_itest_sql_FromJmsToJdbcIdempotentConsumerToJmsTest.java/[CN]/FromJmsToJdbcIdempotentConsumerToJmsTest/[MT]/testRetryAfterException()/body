{
  checkInitialState();
  final AtomicInteger counter=new AtomicInteger();
  NotifyBuilder notify=new NotifyBuilder(context).whenDone(4).create();
  getMockEndpoint("mock:a").expectedMessageCount(4);
  getMockEndpoint("mock:b").expectedMessageCount(4);
  getMockEndpoint("mock:b").whenAnyExchangeReceived(new Processor(){
    @Override public void process(    Exchange exchange) throws Exception {
      if (counter.getAndIncrement() == 1) {
        throw new ConnectException("Forced cannot send to AMQ queue");
      }
    }
  }
);
  template.sendBodyAndHeader("activemq:queue:inbox","D","uid",111);
  template.sendBodyAndHeader("activemq:queue:inbox","E","uid",222);
  template.sendBodyAndHeader("activemq:queue:inbox","F","uid",333);
  assertMockEndpointsSatisfied();
  assertTrue("Should complete 4 messages",notify.matchesMockWaitTime());
  assertEquals(new Integer(3),jdbcTemplate.queryForObject("select count(*) from CAMEL_MESSAGEPROCESSED",Integer.class));
  assertEquals("DONE-D",consumer.receiveBody("activemq:queue:outbox",3000));
  assertEquals("DONE-E",consumer.receiveBody("activemq:queue:outbox",3000));
  assertEquals("DONE-F",consumer.receiveBody("activemq:queue:outbox",3000));
}
