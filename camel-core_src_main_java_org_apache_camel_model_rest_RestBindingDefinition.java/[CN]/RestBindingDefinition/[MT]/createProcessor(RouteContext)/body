{
  CamelContext context=routeContext.getCamelContext();
  String mode=context.getRestConfiguration().getBindingMode().name();
  if (bindingMode != null) {
    mode=bindingMode.name();
  }
  if (mode == null || "off".equals(mode)) {
    return new RestBindingProcessor(null,null,null,null,consumes,produces,mode);
  }
  String name=context.getRestConfiguration().getJsonDataFormat();
  if (name == null) {
    name="json-jackson";
  }
  DataFormat json=context.resolveDataFormat(name);
  DataFormat outJson=context.resolveDataFormat(name);
  if (mode.contains("json") && json == null) {
    throw new IllegalArgumentException("JSon DataFormat " + name + " not found.");
  }
  if (json != null) {
    Class<?> clazz=null;
    if (type != null) {
      clazz=context.getClassResolver().resolveMandatoryClass(type);
    }
    if (clazz != null) {
      IntrospectionSupport.setProperty(context.getTypeConverter(),json,"unmarshalType",clazz);
      IntrospectionSupport.setProperty(context.getTypeConverter(),json,"useList",list != null ? list : false);
    }
    setAdditionalConfiguration(context,json);
    context.addService(json);
    Class<?> outClazz=null;
    if (outType != null) {
      outClazz=context.getClassResolver().resolveMandatoryClass(outType);
    }
    if (outClazz != null) {
      IntrospectionSupport.setProperty(context.getTypeConverter(),outJson,"unmarshalType",outClazz);
      IntrospectionSupport.setProperty(context.getTypeConverter(),outJson,"useList",outList != null ? outList : false);
    }
    setAdditionalConfiguration(context,outJson);
    context.addService(outJson);
  }
  name=context.getRestConfiguration().getXmlDataFormat();
  if (name == null) {
    name="jaxb";
  }
  DataFormat jaxb=context.resolveDataFormat(name);
  DataFormat outJaxb=context.resolveDataFormat(name);
  if (mode.contains("xml") && jaxb == null) {
    throw new IllegalArgumentException("XML DataFormat " + name + " not found.");
  }
  if (jaxb != null) {
    Class<?> clazz=null;
    if (type != null) {
      clazz=context.getClassResolver().resolveMandatoryClass(type);
    }
    if (clazz != null) {
      JAXBContext jc=JAXBContext.newInstance(clazz);
      IntrospectionSupport.setProperty(context.getTypeConverter(),jaxb,"context",jc);
    }
    if (context.getRestConfiguration().getDataFormatProperties() != null) {
      IntrospectionSupport.setProperties(context.getTypeConverter(),jaxb,context.getRestConfiguration().getDataFormatProperties());
    }
    setAdditionalConfiguration(context,jaxb);
    context.addService(jaxb);
    Class<?> outClazz=null;
    if (outType != null) {
      outClazz=context.getClassResolver().resolveMandatoryClass(outType);
    }
    if (outClazz != null) {
      JAXBContext jc=JAXBContext.newInstance(outClazz);
      IntrospectionSupport.setProperty(context.getTypeConverter(),outJaxb,"context",jc);
    }
 else     if (clazz != null) {
      JAXBContext jc=JAXBContext.newInstance(clazz);
      IntrospectionSupport.setProperty(context.getTypeConverter(),outJaxb,"context",jc);
    }
    setAdditionalConfiguration(context,outJaxb);
    context.addService(outJaxb);
  }
  return new RestBindingProcessor(json,jaxb,outJson,outJaxb,consumes,produces,mode);
}
