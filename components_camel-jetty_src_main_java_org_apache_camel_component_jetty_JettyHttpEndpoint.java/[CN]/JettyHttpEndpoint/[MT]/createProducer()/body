{
  JettyHttpProducer answer=new JettyHttpProducer(this);
  if (client != null) {
    client.start();
    answer.setSharedClient(client);
    answer.setBinding(getJettyBinding(client));
  }
 else {
    Integer min=httpClientMinThreads != null ? httpClientMinThreads : getComponent().getHttpClientMinThreads();
    Integer max=httpClientMaxThreads != null ? httpClientMaxThreads : getComponent().getHttpClientMaxThreads();
    HttpClient httpClient=getComponent().createHttpClient(this,min,max,sslContextParameters);
    if (httpClientParameters != null) {
      Map<String,Object> params=new HashMap<String,Object>(httpClientParameters);
      params.remove("timeout");
      IntrospectionSupport.setProperties(httpClient,params);
      if (params.size() > 0) {
        throw new ResolveEndpointFailedException(getEndpointUri(),"There are " + params.size() + " parameters that couldn't be set on the endpoint."+ " Check the uri if the parameters are spelt correctly and that they are properties of the endpoint."+ " Unknown parameters=["+ params+ "]");
      }
    }
    answer.setClient(httpClient);
    answer.setBinding(getJettyBinding(httpClient));
  }
  if (isSynchronous()) {
    return new SynchronousDelegateProducer(answer);
  }
 else {
    return answer;
  }
}
