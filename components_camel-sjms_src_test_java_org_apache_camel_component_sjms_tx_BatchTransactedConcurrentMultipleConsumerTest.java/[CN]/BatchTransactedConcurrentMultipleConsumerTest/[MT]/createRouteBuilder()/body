{
  return new RouteBuilder(){
    @Override public void configure(){
      from("direct:start").to("sjms:queue:transacted.consumer.test");
      from("sjms:queue:transacted.consumer.test?transacted=true&transactionBatchCount=" + BATCH_COUNT + "&consumerCount="+ CONSUMER_COUNT).choice().when(header("JMSRedelivered").isEqualTo("false")).process(new Processor(){
        private final AtomicInteger counter=new AtomicInteger(0);
        @Override public void process(        Exchange exchange) throws Exception {
          if (counter.incrementAndGet() == MAX_ATTEMPTS_COUNT) {
            log.info("{} Messages have been processed. Failing the exchange to force a rollback of the transaction.",MAX_ATTEMPTS_COUNT);
            exchange.getOut().setFault(true);
          }
        }
      }
).log("1st attempt Body: ${body} | Redeliverd: ${header.JMSRedelivered}").to("mock:test.redelivered.false").when(header("JMSRedelivered").isEqualTo("true")).process(new Processor(){
        @Override public void process(        Exchange exchange) throws Exception {
          log.info("Retry processing attempt.  Continue processing the message.");
        }
      }
).log("2nd attempt Body: ${body} | Redeliverd: ${header.JMSRedelivered}").to("mock:test.redelivered.true").otherwise().to("mock:test.after");
    }
  }
;
}
