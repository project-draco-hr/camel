{
  Resource resource=resolveMandatoryResource(remaining);
  if (log.isDebugEnabled()) {
    log.debug(this + " using schema resource: " + resource);
  }
  XsltBuilder xslt=getCamelContext().getInjector().newInstance(XsltBuilder.class);
  XmlConverter converter=resolveAndRemoveReferenceParameter(parameters,"converter",XmlConverter.class);
  if (converter == null) {
    converter=getXmlConverter();
  }
  if (converter != null) {
    xslt.setConverter(converter);
  }
  String transformerFactoryClassName=getAndRemoveParameter(parameters,"transformerFactoryClass",String.class);
  TransformerFactory factory=null;
  if (transformerFactoryClassName != null) {
    Class<?> factoryClass=getCamelContext().getClassResolver().resolveClass(transformerFactoryClassName,XsltComponent.class.getClassLoader());
    if (factoryClass != null) {
      factory=(TransformerFactory)getCamelContext().getInjector().newInstance(factoryClass);
    }
 else {
      log.warn("Cannot find the TransformerFactoryClass with the class name: " + transformerFactoryClassName);
    }
  }
  if (parameters.get("transformerFactory") != null) {
    factory=resolveAndRemoveReferenceParameter(parameters,"transformerFactory",TransformerFactory.class);
  }
  if (factory != null) {
    xslt.getConverter().setTransformerFactory(factory);
  }
  URIResolver resolver=resolveAndRemoveReferenceParameter(parameters,"uriResolver",URIResolver.class);
  if (resolver == null) {
    resolver=getUriResolver();
  }
  if (resolver == null) {
    resolver=new XsltUriResolver(getCamelContext().getClassResolver(),remaining);
  }
  xslt.setUriResolver(resolver);
  ResultHandlerFactory resultHandlerFactory=resolveAndRemoveReferenceParameter(parameters,"resultHandlerFactory",ResultHandlerFactory.class);
  if (resultHandlerFactory != null) {
    xslt.setResultHandlerFactory(resultHandlerFactory);
  }
  Boolean failOnNullBody=getAndRemoveParameter(parameters,"failOnNullBody",Boolean.class);
  if (failOnNullBody != null) {
    xslt.setFailOnNullBody(failOnNullBody);
  }
  String output=getAndRemoveParameter(parameters,"output",String.class);
  configureOutput(xslt,output);
  xslt.setTransformerInputStream(resource.getInputStream());
  configureXslt(xslt,uri,remaining,parameters);
  return new ProcessorEndpoint(uri,this,xslt);
}
