{
  final File outDir=new File(OUT_DIR);
  FileUtil.removeDir(outDir);
  final File collectionFile=new File(OUT_DIR,PACKAGE_PATH + COMPONENT_NAME + "ApiCollection.java");
  final ApiComponentGeneratorMojo mojo=new ApiComponentGeneratorMojo();
  mojo.componentName=COMPONENT_NAME;
  mojo.outDir=new File(OUT_DIR);
  mojo.outPackage=AbstractGeneratorMojo.OUT_PACKAGE;
  mojo.project=new MavenProject((Model)null){
    @Override public List getRuntimeClasspathElements() throws DependencyResolutionRequiredException {
      return Collections.EMPTY_LIST;
    }
  }
;
  final ApiProxy[] proxies=new ApiProxy[2];
  mojo.apis=proxies;
  ApiProxy apiProxy=new ApiProxy();
  proxies[0]=apiProxy;
  apiProxy.setApiName("test");
  apiProxy.setProxyClass(TestProxy.class.getName());
  apiProxy.setSignatureFile(new File("src/test/resources/test-proxy-signatures.txt"));
  Substitution[] substitutions=new Substitution[1];
  substitutions[0]=new Substitution(".+","(.+)","java.util.List","$1List");
  apiProxy.setSubstitutions(substitutions);
  apiProxy=new ApiProxy();
  proxies[1]=apiProxy;
  apiProxy.setApiName("velocity");
  apiProxy.setProxyClass(VelocityEngine.class.getName());
  mojo.execute();
  assertExists(collectionFile);
}
