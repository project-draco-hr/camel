{
  Object element;
  Object body=exchange.getIn().getBody();
  if (body instanceof Serializable) {
    element=body;
  }
 else {
    InputStream is=exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class,body);
    element=exchange.getContext().getTypeConverter().mandatoryConvertTo(byte[].class,is);
  }
  if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_ADD)) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Adding an element with key " + key + " into the Cache");
    }
    cache.put(new Element(key,element),true);
  }
 else   if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_UPDATE)) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Updating an element with key " + key + " into the Cache");
    }
    cache.put(new Element(key,element),true);
  }
 else   if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETEALL)) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Deleting All elements from the Cache");
    }
    cache.removeAll();
  }
 else   if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETE)) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Deleting an element with key " + key + " into the Cache");
    }
    cache.remove(key,true);
  }
 else   if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_GET)) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Quering an element with key " + key + " from the Cache");
    }
    if (cache.isKeyInCache(key)) {
      exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);
      exchange.getIn().setBody(cache.get(key).getValue());
    }
 else {
      exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);
    }
  }
 else   if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_CHECK)) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Querying an element with key " + key + " from the Cache");
    }
    if (cache.isKeyInCache(key)) {
      exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);
    }
 else {
      exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);
    }
  }
 else {
    throw new CacheException("Operation " + operation + " is not supported.");
  }
}
