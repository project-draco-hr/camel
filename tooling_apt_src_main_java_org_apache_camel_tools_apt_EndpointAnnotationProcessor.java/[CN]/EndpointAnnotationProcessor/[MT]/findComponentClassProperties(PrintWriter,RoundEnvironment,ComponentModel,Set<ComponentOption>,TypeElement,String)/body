{
  Elements elementUtils=processingEnv.getElementUtils();
  while (true) {
    List<ExecutableElement> methods=ElementFilter.methodsIn(classElement.getEnclosedElements());
    for (    ExecutableElement method : methods) {
      String methodName=method.getSimpleName().toString();
      boolean deprecated=method.getAnnotation(Deprecated.class) != null;
      Metadata metadata=method.getAnnotation(Metadata.class);
      boolean isSetter=methodName.startsWith("set") && method.getParameters().size() == 1 & method.getReturnType().getKind().equals(TypeKind.VOID);
      if (!isSetter) {
        continue;
      }
      if ("setEndpointClass".equals(methodName) || "setCamelContext".equals(methodName) || "setEndpointHeaderFilterStrategy".equals(methodName)) {
        continue;
      }
      String fieldName=methodName.substring(3);
      fieldName=fieldName.substring(0,1).toLowerCase() + fieldName.substring(1);
      VariableElement field=findFieldElement(classElement,fieldName);
      if (field != null && metadata == null) {
        metadata=field.getAnnotation(Metadata.class);
      }
      String required=metadata != null ? metadata.required() : null;
      String label=metadata != null ? metadata.label() : null;
      boolean secret=metadata != null ? metadata.secret() : false;
      String defaultValue=metadata != null ? metadata.defaultValue() : null;
      String defaultValueNote=null;
      ExecutableElement setter=method;
      String name=fieldName;
      name=prefix + name;
      TypeMirror fieldType=setter.getParameters().get(0).asType();
      String fieldTypeName=fieldType.toString();
      TypeElement fieldTypeElement=findTypeElement(roundEnv,fieldTypeName);
      String docComment=findJavaDoc(elementUtils,method,fieldName,name,classElement,false);
      if (isNullOrEmpty(docComment)) {
        docComment=metadata != null ? metadata.description() : null;
      }
      if (isNullOrEmpty(docComment)) {
        if ("setHeaderFilterStrategy".equals(methodName)) {
          docComment=HEADER_FILTER_STRATEGY_JAVADOC;
        }
 else {
          docComment="";
        }
      }
      Set<String> enums=new LinkedHashSet<String>();
      boolean isEnum=fieldTypeElement != null && fieldTypeElement.getKind() == ElementKind.ENUM;
      if (isEnum) {
        TypeElement enumClass=findTypeElement(roundEnv,fieldTypeElement.asType().toString());
        List<VariableElement> fields=ElementFilter.fieldsIn(enumClass.getEnclosedElements());
        for (        VariableElement var : fields) {
          if (var.getKind() == ElementKind.ENUM_CONSTANT) {
            String val=var.toString();
            enums.add(val);
          }
        }
      }
      String group=EndpointHelper.labelAsGroupName(label,componentModel.isConsumerOnly(),componentModel.isProducerOnly());
      ComponentOption option=new ComponentOption(name,fieldTypeName,required,defaultValue,defaultValueNote,docComment.trim(),deprecated,secret,group,label,isEnum,enums);
      componentOptions.add(option);
    }
    TypeElement baseTypeElement=null;
    TypeMirror superclass=classElement.getSuperclass();
    if (superclass != null) {
      String superClassName=canonicalClassName(superclass.toString());
      baseTypeElement=findTypeElement(roundEnv,superClassName);
    }
    if (baseTypeElement != null) {
      classElement=baseTypeElement;
    }
 else {
      break;
    }
  }
}
