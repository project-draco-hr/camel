{
  Elements elementUtils=processingEnv.getElementUtils();
  while (true) {
    List<VariableElement> fieldElements=ElementFilter.fieldsIn(classElement.getEnclosedElements());
    for (    VariableElement fieldElement : fieldElements) {
      Metadata metadata=fieldElement.getAnnotation(Metadata.class);
      boolean deprecated=fieldElement.getAnnotation(Deprecated.class) != null;
      Boolean secret=metadata != null ? metadata.secret() : null;
      UriPath path=fieldElement.getAnnotation(UriPath.class);
      String fieldName=fieldElement.getSimpleName().toString();
      if (path != null) {
        String name=path.name();
        if (isNullOrEmpty(name)) {
          name=fieldName;
        }
        name=prefix + name;
        if (excludeProperty(excludeProperties,name)) {
          continue;
        }
        String defaultValue=path.defaultValue();
        if (defaultValue == null && metadata != null) {
          defaultValue=metadata.defaultValue();
        }
        String defaultValueNote=path.defaultValueNote();
        String required=metadata != null ? metadata.required() : null;
        String label=path.label();
        if (Strings.isNullOrEmpty(label) && metadata != null) {
          label=metadata.label();
        }
        TypeMirror fieldType=fieldElement.asType();
        String fieldTypeName=fieldType.toString();
        TypeElement fieldTypeElement=findTypeElement(roundEnv,fieldTypeName);
        String docComment=findJavaDoc(elementUtils,fieldElement,fieldName,name,classElement,false);
        if (isNullOrEmpty(docComment)) {
          docComment=path.description();
        }
        Set<String> enums=new LinkedHashSet<String>();
        boolean isEnum;
        if (!Strings.isNullOrEmpty(path.enums())) {
          isEnum=true;
          String[] values=path.enums().split(",");
          for (          String val : values) {
            enums.add(val);
          }
        }
 else {
          isEnum=fieldTypeElement != null && fieldTypeElement.getKind() == ElementKind.ENUM;
          if (isEnum) {
            TypeElement enumClass=findTypeElement(roundEnv,fieldTypeElement.asType().toString());
            List<VariableElement> fields=ElementFilter.fieldsIn(enumClass.getEnclosedElements());
            for (            VariableElement var : fields) {
              if (var.getKind() == ElementKind.ENUM_CONSTANT) {
                String val=var.toString();
                enums.add(val);
              }
            }
          }
        }
        if (!Strings.isNullOrEmpty(path.javaType())) {
          fieldTypeName=path.javaType();
        }
        String group=EndpointHelper.labelAsGroupName(label,componentModel.isConsumerOnly(),componentModel.isProducerOnly());
        boolean isSecret=secret != null ? secret : false;
        EndpointPath ep=new EndpointPath(name,fieldTypeName,required,defaultValue,docComment,deprecated,isSecret,group,label,isEnum,enums);
        endpointPaths.add(ep);
      }
      UriParam param=fieldElement.getAnnotation(UriParam.class);
      fieldName=fieldElement.getSimpleName().toString();
      if (param != null) {
        String name=param.name();
        if (isNullOrEmpty(name)) {
          name=fieldName;
        }
        name=prefix + name;
        if (excludeProperty(excludeProperties,name)) {
          continue;
        }
        String paramOptionalPrefix=param.optionalPrefix();
        String paramPrefix=param.prefix();
        boolean multiValue=param.multiValue();
        String defaultValue=param.defaultValue();
        if (defaultValue == null && metadata != null) {
          defaultValue=metadata.defaultValue();
        }
        String defaultValueNote=param.defaultValueNote();
        String required=metadata != null ? metadata.required() : null;
        String label=param.label();
        if (Strings.isNullOrEmpty(label) && metadata != null) {
          label=metadata.label();
        }
        TypeMirror fieldType=fieldElement.asType();
        String fieldTypeName=fieldType.toString();
        TypeElement fieldTypeElement=findTypeElement(roundEnv,fieldTypeName);
        UriParams fieldParams=null;
        if (fieldTypeElement != null) {
          fieldParams=fieldTypeElement.getAnnotation(UriParams.class);
        }
        if (fieldParams != null) {
          String nestedPrefix=prefix;
          String extraPrefix=fieldParams.prefix();
          if (!isNullOrEmpty(extraPrefix)) {
            nestedPrefix+=extraPrefix;
          }
          findClassProperties(writer,roundEnv,componentModel,endpointPaths,endpointOptions,fieldTypeElement,nestedPrefix,excludeProperties);
        }
 else {
          String docComment=findJavaDoc(elementUtils,fieldElement,fieldName,name,classElement,false);
          if (isNullOrEmpty(docComment)) {
            docComment=param.description();
          }
          if (isNullOrEmpty(docComment)) {
            docComment="";
          }
          Set<String> enums=new LinkedHashSet<String>();
          boolean isEnum;
          if (!Strings.isNullOrEmpty(param.enums())) {
            isEnum=true;
            String[] values=param.enums().split(",");
            for (            String val : values) {
              enums.add(val);
            }
          }
 else {
            isEnum=fieldTypeElement != null && fieldTypeElement.getKind() == ElementKind.ENUM;
            if (isEnum) {
              TypeElement enumClass=findTypeElement(roundEnv,fieldTypeElement.asType().toString());
              List<VariableElement> fields=ElementFilter.fieldsIn(enumClass.getEnclosedElements());
              for (              VariableElement var : fields) {
                if (var.getKind() == ElementKind.ENUM_CONSTANT) {
                  String val=var.toString();
                  enums.add(val);
                }
              }
            }
          }
          if (!Strings.isNullOrEmpty(param.javaType())) {
            fieldTypeName=param.javaType();
          }
          boolean isSecret=secret != null ? secret : param.secret();
          String group=EndpointHelper.labelAsGroupName(label,componentModel.isConsumerOnly(),componentModel.isProducerOnly());
          EndpointOption option=new EndpointOption(name,fieldTypeName,required,defaultValue,defaultValueNote,docComment.trim(),paramOptionalPrefix,paramPrefix,multiValue,deprecated,isSecret,group,label,isEnum,enums);
          endpointOptions.add(option);
        }
      }
    }
    TypeElement baseTypeElement=null;
    TypeMirror superclass=classElement.getSuperclass();
    if (superclass != null) {
      String superClassName=canonicalClassName(superclass.toString());
      baseTypeElement=findTypeElement(roundEnv,superClassName);
    }
    if (baseTypeElement != null) {
      classElement=baseTypeElement;
    }
 else {
      break;
    }
  }
}
