{
  final HazelcastAggregationRepository repoOne=new HazelcastAggregationRepository(REPO_NAME,false,getFirstInstance());
  final HazelcastAggregationRepository repoTwo=new HazelcastAggregationRepository(REPO_NAME,false,getSecondInstance());
  final int completionSize=4;
  final String correlator="CORRELATOR";
  RouteBuilder rbOne=new RouteBuilder(){
    @Override public void configure() throws Exception {
      onException(EverythingIsLostException.class).handled(true).useOriginalMessage().to(MOCK_GOTCHA).end();
      interceptSendToEndpoint(MOCK_FAILURE).throwException(new EverythingIsLostException("The field is lost... everything is lost")).end();
      from(DIRECT_ONE).aggregate(header(correlator)).aggregationRepository(repoOne).aggregationStrategy(new SumOfIntsAggregationStrategy()).completionSize(completionSize).to(MOCK_FAILURE);
    }
  }
;
  RouteBuilder rbTwo=new RouteBuilder(){
    @Override public void configure() throws Exception {
      onException(EverythingIsLostException.class).handled(true).useOriginalMessage().to(MOCK_GOTCHA).end();
      interceptSendToEndpoint(MOCK_FAILURE).throwException(new EverythingIsLostException("The field is lost... everything is lost")).end();
      from(DIRECT_TWO).aggregate(header(correlator)).aggregationRepository(repoTwo).aggregationStrategy(new SumOfIntsAggregationStrategy()).completionSize(completionSize).to(MOCK_FAILURE);
    }
  }
;
  context().addRoutes(rbOne);
  context().addRoutes(rbTwo);
  context().start();
  mockFailure.expectedMessageCount(0);
  mockGotcha.expectedMessageCount(1);
  mockGotcha.expectedBodiesReceived(1 + 2 + 3+ 4);
  produceOne.sendBodyAndHeader(4,correlator,correlator);
  produceTwo.sendBodyAndHeader(2,correlator,correlator);
  produceOne.sendBodyAndHeader(3,correlator,correlator);
  produceTwo.sendBodyAndHeader(1,correlator,correlator);
  mockFailure.assertIsSatisfied();
  mockFailure.assertIsSatisfied();
}
