{
  getMockEndpoint("mock:result").expectedMessageCount(7);
  template.sendBody("direct:start","<foo>Camel &gt; Donkey</foo>");
  template.sendBody("direct:start","Camel > Donkey");
  template.sendBodyAndHeader("direct:start","<foo>Camel &gt; Donkey</foo>","name","Me & You");
  template.sendBodyAndHeader("direct:start","<foo>Camel &gt; Donkey</foo>","title","<title>Me &amp; You</title>");
  template.sendBodyAndHeader("direct:start","Camel > Donkey","name","Me & You");
  template.sendBodyAndHeader("direct:start",123,"user",true);
  Map<String,Object> headers=new HashMap<String,Object>();
  headers.put("user",false);
  headers.put("uid",123);
  headers.put("title","Camel rocks");
  template.sendBodyAndHeaders("direct:start","<animal><name>Donkey</name><age>17</age></animal>",headers);
  assertMockEndpointsSatisfied();
  MBeanServer mbeanServer=getMBeanServer();
  ObjectName name=ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=endpoints,name=\"mock://result\"");
  String out=(String)mbeanServer.invoke(name,"browseMessageAsXml",new Object[]{0},new String[]{"java.lang.Integer"});
  assertNotNull(out);
  log.info(out);
  assertEquals("<message>\n<body type=\"java.lang.String\"><foo>Camel &gt; Donkey</foo></body>\n</message>",out);
  out=(String)mbeanServer.invoke(name,"browseMessageAsXml",new Object[]{1},new String[]{"java.lang.Integer"});
  assertNotNull(out);
  log.info(out);
  assertEquals("<message>\n<body type=\"java.lang.String\">Camel &gt; Donkey</body>\n</message>",out);
  out=(String)mbeanServer.invoke(name,"browseMessageAsXml",new Object[]{2},new String[]{"java.lang.Integer"});
  assertNotNull(out);
  log.info(out);
  assertEquals("<message>\n<headers>\n<header key=\"name\" type=\"java.lang.String\">Me &amp; You</header>\n</headers>\n" + "<body type=\"java.lang.String\"><foo>Camel &gt; Donkey</foo></body>\n</message>",out);
  out=(String)mbeanServer.invoke(name,"browseMessageAsXml",new Object[]{3},new String[]{"java.lang.Integer"});
  assertNotNull(out);
  log.info(out);
  assertEquals("<message>\n<headers>\n<header key=\"title\" type=\"java.lang.String\"><title>Me &amp; You</title></header>\n</headers>\n" + "<body type=\"java.lang.String\"><foo>Camel &gt; Donkey</foo></body>\n</message>",out);
  out=(String)mbeanServer.invoke(name,"browseMessageAsXml",new Object[]{4},new String[]{"java.lang.Integer"});
  assertNotNull(out);
  log.info(out);
  assertEquals("<message>\n<headers>\n<header key=\"name\" type=\"java.lang.String\">Me &amp; You</header>\n</headers>\n" + "<body type=\"java.lang.String\">Camel &gt; Donkey</body>\n</message>",out);
  out=(String)mbeanServer.invoke(name,"browseMessageAsXml",new Object[]{5},new String[]{"java.lang.Integer"});
  assertNotNull(out);
  log.info(out);
  assertEquals("<message>\n<headers>\n<header key=\"user\" type=\"java.lang.Boolean\">true</header>\n</headers>\n" + "<body type=\"java.lang.Integer\">123</body>\n</message>",out);
  out=(String)mbeanServer.invoke(name,"browseMessageAsXml",new Object[]{6},new String[]{"java.lang.Integer"});
  assertNotNull(out);
  log.info(out);
  assertEquals("<message>\n<headers>\n<header key=\"title\" type=\"java.lang.String\">Camel rocks</header>\n" + "<header key=\"uid\" type=\"java.lang.Integer\">123</header>\n" + "<header key=\"user\" type=\"java.lang.Boolean\">false</header>\n</headers>\n"+ "<body type=\"java.lang.String\"><animal><name>Donkey</name><age>17</age></animal></body>\n</message>",out);
}
