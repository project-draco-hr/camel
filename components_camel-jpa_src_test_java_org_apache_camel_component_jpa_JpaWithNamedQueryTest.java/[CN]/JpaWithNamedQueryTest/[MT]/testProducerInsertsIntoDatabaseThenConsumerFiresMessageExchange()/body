{
  transactionStrategy.execute(new JpaCallback(){
    public Object doInJpa(    EntityManager entityManager) throws PersistenceException {
      entityManager.createQuery("delete from " + entityName).executeUpdate();
      MultiSteps dummy=new MultiSteps("cheese");
      dummy.setStep(4);
      entityManager.persist(dummy);
      return null;
    }
  }
);
  List results=jpaTemplate.find(queryText);
  assertEquals("Should have no results: " + results,0,results.size());
  template.send(endpoint,new Processor(){
    public void process(    Exchange exchange){
      exchange.getIn().setBody(new MultiSteps("foo@bar.com"));
    }
  }
);
  results=jpaTemplate.find(queryText);
  assertEquals("Should have results: " + results,1,results.size());
  MultiSteps mail=(MultiSteps)results.get(0);
  assertEquals("address property","foo@bar.com",mail.getAddress());
  consumer=endpoint.createConsumer(new Processor(){
    public void process(    Exchange e){
      LOG.info("Received exchange: " + e.getIn());
      receivedExchange=e;
      latch.countDown();
    }
  }
);
  consumer.start();
  boolean received=latch.await(50,TimeUnit.SECONDS);
  assertTrue("Did not receive the message!",received);
  assertNotNull(receivedExchange);
  MultiSteps result=receivedExchange.getIn().getBody(MultiSteps.class);
  assertNotNull("Received a POJO",result);
  assertEquals("address property","foo@bar.com",result.getAddress());
  Thread.sleep(1000);
  transactionStrategy.execute(new JpaCallback(){
    @SuppressWarnings("unchecked") public Object doInJpa(    EntityManager entityManager) throws PersistenceException {
      List<MultiSteps> rows=entityManager.createQuery("select x from MultiSteps x").getResultList();
      assertEquals("Number of entities: " + rows,2,rows.size());
      int counter=1;
      for (      MultiSteps row : rows) {
        LOG.info("entity: " + counter++ + " = "+ row);
        if (row.getAddress().equals("foo@bar.com")) {
          LOG.info("Found updated row: " + row);
          assertEquals("Updated row step for: " + row,2,row.getStep());
        }
 else {
          assertEquals("dummy row step for: " + row,4,row.getStep());
        }
      }
      return null;
    }
  }
);
  JpaConsumer jpaConsumer=(JpaConsumer)consumer;
  assertEquals("step1",jpaConsumer.getNamedQuery());
}
