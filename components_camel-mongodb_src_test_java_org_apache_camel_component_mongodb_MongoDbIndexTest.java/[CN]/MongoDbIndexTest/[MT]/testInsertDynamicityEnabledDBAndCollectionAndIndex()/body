{
  assertEquals(0,testCollection.count());
  mongo.getDB("otherDB").dropDatabase();
  db.getCollection("otherCollection").drop();
  assertFalse("The otherDB database should not exist",mongo.getDatabaseNames().contains("otherDB"));
  String body="{\"_id\": \"testInsertDynamicityEnabledDBAndCollection\", \"a\" : \"1\", \"b\" : \"2\"}";
  Map<String,Object> headers=new HashMap<String,Object>();
  headers.put(MongoDbConstants.DATABASE,"otherDB");
  headers.put(MongoDbConstants.COLLECTION,"otherCollection");
  List<DBObject> objIndex=new ArrayList<DBObject>();
  DBObject index1=new BasicDBObject();
  index1.put("a",1);
  DBObject index2=new BasicDBObject();
  index2.put("b",-1);
  objIndex.add(index1);
  objIndex.add(index2);
  headers.put(MongoDbConstants.COLLECTION_INDEX,objIndex);
  Object result=template.requestBodyAndHeaders("direct:dynamicityEnabled",body,headers);
  assertEquals("Response isn't of type WriteResult",WriteResult.class,result.getClass());
  DBCollection dynamicCollection=mongo.getDB("otherDB").getCollection("otherCollection");
  List<DBObject> indexInfos=dynamicCollection.getIndexInfo();
  BasicDBObject key=(BasicDBObject)indexInfos.get(0).get("key");
  assertTrue("The field _id with the expected value not found",key.containsField("_id") && "1".equals(key.getString("_id")));
  DBObject b=dynamicCollection.findOne("testInsertDynamicityEnabledDBAndCollection");
  assertNotNull("No record with 'testInsertDynamicityEnabledDBAndCollection' _id",b);
  b=testCollection.findOne("testInsertDynamicityEnabledDBOnly");
  assertNull("There is a record with 'testInsertDynamicityEnabledDBAndCollection' _id in the test collection",b);
  assertTrue("The otherDB database should exist",mongo.getDatabaseNames().contains("otherDB"));
}
