{
  Mockito.when(mockExchange.getPattern()).thenReturn(ExchangePattern.InOut);
  SessionID responseSessionID=new SessionID(sessionID.getBeginString(),sessionID.getTargetCompID(),sessionID.getSenderCompID());
  Mockito.when(mockExchange.getProperty(QuickfixjProducer.CORRELATION_CRITERIA_KEY)).thenReturn(new MessagePredicate(responseSessionID,MsgType.EMAIL));
  Mockito.when(mockExchange.getProperty(QuickfixjProducer.CORRELATION_TIMEOUT_KEY,1000L,Long.class)).thenReturn(5000L);
  org.apache.camel.Message mockOutboundCamelMessage=Mockito.mock(org.apache.camel.Message.class);
  Mockito.when(mockExchange.getOut()).thenReturn(mockOutboundCamelMessage);
  final Message outboundFixMessage=new Email();
  outboundFixMessage.getHeader().setString(SenderCompID.FIELD,"TARGET");
  outboundFixMessage.getHeader().setString(TargetCompID.FIELD,"SENDER");
  Session mockSession=Mockito.spy(TestSupport.createSession(sessionID));
  Mockito.doReturn(mockSession).when(producer).getSession(MessageUtils.getSessionID(inboundFixMessage));
  Mockito.doAnswer(new Answer<Boolean>(){
    @Override public Boolean answer(    InvocationOnMock invocation) throws Throwable {
      new Timer().schedule(new TimerTask(){
        @Override public void run(){
          try {
            quickfixjEngine.getMessageCorrelator().onEvent(QuickfixjEventCategory.AppMessageReceived,sessionID,outboundFixMessage);
          }
 catch (          Exception e) {
            throw new RuntimeException(e);
          }
        }
      }
,10);
      return true;
    }
  }
).when(mockSession).send(Matchers.isA(Message.class));
  producer.process(mockExchange);
  Mockito.verify(mockExchange,Mockito.never()).setException(Matchers.isA(IllegalStateException.class));
  Mockito.verify(mockSession).send(inboundFixMessage);
  Mockito.verify(mockOutboundCamelMessage).getHeaders();
  Mockito.verify(mockOutboundCamelMessage).setBody(outboundFixMessage);
}
