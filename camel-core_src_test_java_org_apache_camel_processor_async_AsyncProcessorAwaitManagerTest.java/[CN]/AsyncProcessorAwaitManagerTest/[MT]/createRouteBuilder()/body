{
  return new RouteBuilder(){
    @Override public void configure() throws Exception {
      context.addComponent("async",new MyAsyncComponent());
      from("direct:start").routeId("myRoute").to("mock:before").to("async:bye:camel").id("myAsync").to("mock:after").process(new Processor(){
        @Override public void process(        Exchange exchange) throws Exception {
          int size=context.getAsyncProcessorAwaitManager().size();
          log.info("async inflight: {}",size);
          assertEquals(1,size);
          Collection<AsyncProcessorAwaitManager.AwaitThread> threads=context.getAsyncProcessorAwaitManager().browse();
          AsyncProcessorAwaitManager.AwaitThread thread=threads.iterator().next();
          long wait=thread.getWaitDuration();
          log.info("Thread {} has waited for {} msec.",thread.getBlockedThread().getName(),wait);
          assertEquals("myRoute",thread.getRouteId());
          assertEquals("myAsync",thread.getNodeId());
        }
      }
).to("mock:result");
    }
  }
;
}
