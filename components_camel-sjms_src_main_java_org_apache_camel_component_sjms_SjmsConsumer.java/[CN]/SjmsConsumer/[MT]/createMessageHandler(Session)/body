{
  TransactionCommitStrategy commitStrategy=null;
  if (this.getTransactionCommitStrategy() != null) {
    commitStrategy=this.getTransactionCommitStrategy();
  }
 else   if (this.getTransactionBatchCount() > 0) {
    commitStrategy=new BatchTransactionCommitStrategy(this.getTransactionBatchCount());
  }
 else {
    commitStrategy=new DefaultTransactionCommitStrategy();
  }
  Synchronization synchronization=null;
  if (commitStrategy instanceof BatchTransactionCommitStrategy) {
    synchronization=new SessionBatchTransactionSynchronization(session,commitStrategy,getTransactionBatchTimeout());
  }
 else {
    synchronization=new SessionTransactionSynchronization(session,commitStrategy);
  }
  AbstractMessageHandler messageHandler=null;
  if (getSjmsEndpoint().getExchangePattern().equals(ExchangePattern.InOnly)) {
    if (isTransacted()) {
      messageHandler=new InOnlyMessageHandler(getEndpoint(),executor,synchronization);
    }
 else {
      messageHandler=new InOnlyMessageHandler(getEndpoint(),executor);
    }
  }
 else {
    if (isTransacted()) {
      messageHandler=new InOutMessageHandler(getEndpoint(),executor,synchronization);
    }
 else {
      messageHandler=new InOutMessageHandler(getEndpoint(),executor);
    }
  }
  messageHandler.setSession(session);
  messageHandler.setProcessor(getAsyncProcessor());
  messageHandler.setSynchronous(isSynchronous());
  messageHandler.setTransacted(isTransacted());
  messageHandler.setTopic(isTopic());
  return messageHandler;
}
