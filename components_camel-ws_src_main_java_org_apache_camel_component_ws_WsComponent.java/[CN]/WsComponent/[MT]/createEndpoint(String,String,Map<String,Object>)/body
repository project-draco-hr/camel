{
  String addressUri=uri;
  WsEndpoint endpoint=new WsEndpoint(uri,this);
  endpoint.setClientConfig(getClientConfig());
  endpoint.setSslContextParameters(getSslContextParameters());
  setProperties(endpoint,parameters);
  if (IntrospectionSupport.hasProperties(parameters,CLIENT_CONFIG_PREFIX)) {
    AsyncHttpClientConfig.Builder builder=endpoint.getClientConfig() == null ? new AsyncHttpClientConfig.Builder() : WsComponent.cloneConfig(endpoint.getClientConfig());
    if (endpoint.getClientConfig() != null) {
      LOG.warn("The user explicitly set an AsyncHttpClientConfig instance on the component or " + "endpoint, but this endpoint URI contains client configuration parameters.  " + "Are you sure that this is what was intended?  The URI parameters will be applied"+ " to a clone of the supplied AsyncHttpClientConfig in order to prevent unintended modification"+ " of the explicitly configured AsyncHttpClientConfig.  That is, the URI parameters override the"+ " settings on the explicitly configured AsyncHttpClientConfig for this endpoint.");
    }
    Realm.RealmBuilder realmBuilder=null;
    if (IntrospectionSupport.hasProperties(parameters,CLIENT_REALM_CONFIG_PREFIX)) {
      realmBuilder=new Realm.RealmBuilder();
      Map<String,Object> realmParams=IntrospectionSupport.extractProperties(parameters,CLIENT_REALM_CONFIG_PREFIX);
      setProperties(realmBuilder,realmParams);
      validateParameters(uri,realmParams,null);
    }
    Map<String,Object> clientParams=IntrospectionSupport.extractProperties(parameters,CLIENT_CONFIG_PREFIX);
    setProperties(builder,clientParams);
    validateParameters(uri,clientParams,null);
    if (realmBuilder != null) {
      builder.setRealm(realmBuilder.build());
    }
    endpoint.setClientConfig(builder.build());
  }
  SSLContextParameters sslparams=resolveAndRemoveReferenceParameter(parameters,"sslContextParameters",SSLContextParameters.class);
  if (sslparams == null) {
    sslparams=getSslContextParameters();
  }
  if (sslparams != null) {
    endpoint.setSslContextParameters(sslparams);
  }
  addressUri=UnsafeUriCharactersEncoder.encode(addressUri);
  URI wsuri=URISupport.createRemainingURI(new URI(addressUri),parameters);
  endpoint.setWsUri(wsuri);
  return endpoint;
}
