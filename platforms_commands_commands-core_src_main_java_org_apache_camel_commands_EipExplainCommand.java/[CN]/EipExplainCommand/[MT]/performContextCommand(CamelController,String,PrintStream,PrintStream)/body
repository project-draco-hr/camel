{
  String json=camelController.explainEipAsJSon(context,nameOrId,verbose);
  if (json == null) {
    return null;
  }
  out.println("Context:       " + context);
  List<Map<String,String>> options=JsonSchemaHelper.parseJsonSchema("properties",json,true);
  Collections.sort(options,new Comparator<Map<String,String>>(){
    @Override public int compare(    Map<String,String> o1,    Map<String,String> o2){
      String kind1=o1.get("kind");
      String kind2=o2.get("kind");
      int answer=0;
      if (kind1 != null && kind2 != null) {
        answer=-1 * kind1.compareTo(kind2);
      }
      if (answer == 0) {
        answer=o1.get("name").compareTo(o2.get("name"));
      }
      return answer;
    }
  }
);
  for (  Map<String,String> option : options) {
    out.print("Option:        ");
    out.println(option.get("name"));
    String kind=option.get("kind");
    if (kind != null) {
      out.print("Kind:          ");
      out.println(kind);
    }
    String type=option.get("type");
    if (type != null) {
      out.print("Type:          ");
      out.println(type);
    }
    String javaType=option.get("javaType");
    if (javaType != null) {
      out.print("Java Type:     ");
      out.println(javaType);
    }
    String value=option.get("value");
    if (value != null) {
      out.print("Value:         ");
      out.println(value);
    }
    String defaultValue=option.get("defaultValue");
    if (defaultValue != null) {
      out.print("Default Value: ");
      out.println(defaultValue);
    }
    String description=option.get("description");
    if (description != null) {
      out.print("Description:   ");
      out.println(description);
    }
    out.println();
  }
  if (options.isEmpty()) {
    out.println();
  }
  return null;
}
