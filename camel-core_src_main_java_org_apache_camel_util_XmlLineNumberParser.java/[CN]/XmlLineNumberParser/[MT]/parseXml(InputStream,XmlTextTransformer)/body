{
  ObjectHelper.notNull(is,"is");
  ObjectHelper.notNull(transformer,"transformer");
  final Document doc;
  SAXParser parser;
  final SAXParserFactory factory=SAXParserFactory.newInstance();
  parser=factory.newSAXParser();
  final DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  dbf.setValidating(false);
  dbf.setNamespaceAware(true);
  dbf.setFeature("http://xml.org/sax/features/namespaces",false);
  dbf.setFeature("http://xml.org/sax/features/validation",false);
  dbf.setFeature("http://apache.org/xml/features/nonvalidating/load-dtd-grammar",false);
  dbf.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd",false);
  dbf.setFeature("http://xml.org/sax/features/external-parameter-entities",false);
  dbf.setFeature("http://xml.org/sax/features/external-general-entities",false);
  final DocumentBuilder docBuilder=dbf.newDocumentBuilder();
  doc=docBuilder.newDocument();
  final Stack<Element> elementStack=new Stack<Element>();
  final StringBuilder textBuffer=new StringBuilder();
  final DefaultHandler handler=new DefaultHandler(){
    private Locator locator;
    private boolean found;
    @Override public void setDocumentLocator(    final Locator locator){
      this.locator=locator;
    }
    @Override public void startElement(    final String uri,    final String localName,    final String qName,    final Attributes attributes) throws SAXException {
      addTextIfNeeded();
      Element el=doc.createElement(qName);
      for (int i=0; i < attributes.getLength(); i++) {
        el.setAttribute(transformer.transform(attributes.getQName(i)),transformer.transform(attributes.getValue(i)));
      }
      el.setUserData(LINE_NUMBER,String.valueOf(this.locator.getLineNumber()),null);
      el.setUserData(COLUMN_NUMBER,String.valueOf(this.locator.getColumnNumber()),null);
      elementStack.push(el);
    }
    @Override public void endElement(    final String uri,    final String localName,    final String qName){
      addTextIfNeeded();
      final Element closedEl=elementStack.isEmpty() ? null : elementStack.pop();
      if (closedEl != null) {
        if (elementStack.isEmpty()) {
          doc.appendChild(closedEl);
        }
 else {
          final Element parentEl=elementStack.peek();
          parentEl.appendChild(closedEl);
        }
        closedEl.setUserData(LINE_NUMBER_END,String.valueOf(this.locator.getLineNumber()),null);
        closedEl.setUserData(COLUMN_NUMBER_END,String.valueOf(this.locator.getColumnNumber()),null);
      }
    }
    @Override public void characters(    final char ch[],    final int start,    final int length) throws SAXException {
      char[] chars=new char[length];
      System.arraycopy(ch,start,chars,0,length);
      String s=new String(chars);
      s=transformer.transform(s);
      textBuffer.append(s);
    }
    @Override public InputSource resolveEntity(    String publicId,    String systemId) throws IOException, SAXException {
      return new InputSource(new StringReader(""));
    }
    private void addTextIfNeeded(){
      if (textBuffer.length() > 0) {
        final Element el=elementStack.isEmpty() ? null : elementStack.peek();
        if (el != null) {
          final Node textNode=doc.createTextNode(textBuffer.toString());
          el.appendChild(textNode);
          textBuffer.delete(0,textBuffer.length());
        }
      }
    }
  }
;
  parser.parse(is,handler);
  return doc;
}
