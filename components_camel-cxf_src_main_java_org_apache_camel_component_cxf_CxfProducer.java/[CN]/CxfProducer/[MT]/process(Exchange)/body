{
  if (LOG.isTraceEnabled()) {
    LOG.trace("Process exchange: " + camelExchange);
  }
  ExchangeImpl cxfExchange=new ExchangeImpl();
  CxfEndpoint endpoint=(CxfEndpoint)getEndpoint();
  CxfBinding binding=endpoint.getCxfBinding();
  WrappedMessageContext requestContext=new WrappedMessageContext(new HashMap<String,Object>(),null,Scope.APPLICATION);
  Map<String,Object> responseContext=new HashMap<String,Object>();
  DataFormat dataFormat=endpoint.getDataFormat();
  camelExchange.setProperty(CxfConstants.DATA_FORMAT_PROPERTY,dataFormat);
  if (LOG.isTraceEnabled()) {
    LOG.trace("Set Camel Exchange property: " + DataFormat.class.getName() + "="+ dataFormat);
  }
  requestContext.put(DataFormat.class.getName(),dataFormat);
  if (dataFormat == DataFormat.MESSAGE) {
    cxfExchange.put(Client.KEEP_CONDUIT_ALIVE,true);
    if (LOG.isTraceEnabled()) {
      LOG.trace("Set CXF Exchange property: " + Client.KEEP_CONDUIT_ALIVE + "="+ true);
    }
  }
  BindingOperationInfo boi=getBindingOperationInfo(camelExchange);
  ObjectHelper.notNull(boi,"BindingOperationInfo");
  if (dataFormat == DataFormat.PAYLOAD && boi.isUnwrapped()) {
    boi=boi.getWrappedOperation();
    cxfExchange.put(BindingOperationInfo.class,boi);
  }
  camelExchange.setProperty(BindingOperationInfo.class.getName(),boi);
  if (LOG.isTraceEnabled()) {
    LOG.trace("Set exchange property: BindingOperationInfo: " + boi);
  }
  if (dataFormat != DataFormat.PAYLOAD && !endpoint.isWrapped() && boi != null) {
    if (boi.isUnwrappedCapable()) {
      boi=boi.getUnwrappedOperation();
      if (LOG.isTraceEnabled()) {
        LOG.trace("Unwrapped BOI " + boi);
      }
    }
  }
  binding.populateCxfRequestFromExchange(cxfExchange,camelExchange,requestContext);
  requestContext.getScopes().remove(Message.PROTOCOL_HEADERS);
  Map<String,Object> invocationContext=new HashMap<String,Object>();
  invocationContext.put(Client.RESPONSE_CONTEXT,responseContext);
  invocationContext.put(Client.REQUEST_CONTEXT,requestContext.getWrappedMap());
  client.invoke(boi,getParams(endpoint,camelExchange),invocationContext,cxfExchange);
  if (!boi.getOperationInfo().isOneWay()) {
    camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders());
    binding.populateExchangeFromCxfResponse(camelExchange,cxfExchange,responseContext);
  }
}
