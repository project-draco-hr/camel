{
  ChannelPipeline pipeline=Channels.pipeline();
  SslHandler sslHandler=configureClientSSLOnDemand();
  if (sslHandler != null) {
    sslHandler.setCloseOnSSLException(true);
    LOG.debug("Client SSL handler configured and added as an interceptor against the ChannelPipeline: {}",sslHandler);
    pipeline.addLast("ssl",sslHandler);
  }
  pipeline.addLast("http",new HttpClientCodec());
  List<ChannelHandler> decoders=producer.getConfiguration().getDecoders();
  for (int x=0; x < decoders.size(); x++) {
    ChannelHandler decoder=decoders.get(x);
    if (decoder instanceof ChannelHandlerFactory) {
      decoder=((ChannelHandlerFactory)decoder).newChannelHandler();
    }
    pipeline.addLast("decoder-" + x,decoder);
  }
  List<ChannelHandler> encoders=producer.getConfiguration().getEncoders();
  for (int x=0; x < encoders.size(); x++) {
    ChannelHandler encoder=encoders.get(x);
    if (encoder instanceof ChannelHandlerFactory) {
      encoder=((ChannelHandlerFactory)encoder).newChannelHandler();
    }
    pipeline.addLast("encoder-" + x,encoder);
  }
  if (producer.getConfiguration().getRequestTimeout() > 0) {
    if (LOG.isTraceEnabled()) {
      LOG.trace("Using request timeout {} millis",producer.getConfiguration().getRequestTimeout());
    }
    ChannelHandler timeout=new ReadTimeoutHandler(producer.getEndpoint().getTimer(),producer.getConfiguration().getRequestTimeout(),TimeUnit.MILLISECONDS);
    pipeline.addLast("timeout",timeout);
  }
  pipeline.addLast("handler",new HttpClientChannelHandler(producer));
  return pipeline;
}
