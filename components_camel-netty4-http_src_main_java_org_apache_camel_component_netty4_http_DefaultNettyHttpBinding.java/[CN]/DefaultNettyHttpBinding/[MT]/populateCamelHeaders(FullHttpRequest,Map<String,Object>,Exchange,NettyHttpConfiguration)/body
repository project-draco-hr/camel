{
  LOG.trace("populateCamelHeaders: {}",request);
  headers.put(Exchange.HTTP_METHOD,request.method().name());
  String s=request.uri();
  if (s.contains("?")) {
    s=ObjectHelper.before(s,"?");
  }
  String http=configuration.isSsl() ? "https://" : "http://";
  if (!s.startsWith(http)) {
    if (configuration.getPort() != 80) {
      s=http + configuration.getHost() + ":"+ configuration.getPort()+ s;
    }
 else {
      s=http + configuration.getHost() + s;
    }
  }
  headers.put(Exchange.HTTP_URL,s);
  URI uri=new URI(request.uri());
  headers.put(Exchange.HTTP_URI,uri.getPath());
  headers.put(Exchange.HTTP_QUERY,uri.getQuery());
  headers.put(Exchange.HTTP_RAW_QUERY,uri.getRawQuery());
  String path=uri.getRawPath();
  if (configuration.getPath() != null) {
    String matchPath=path.toLowerCase(Locale.US);
    String match=configuration.getPath() != null ? configuration.getPath().toLowerCase(Locale.US) : null;
    if (match != null && matchPath.startsWith(match)) {
      path=path.substring(configuration.getPath().length());
    }
  }
  headers.put(Exchange.HTTP_PATH,path);
  if (LOG.isTraceEnabled()) {
    LOG.trace("HTTP-Method {}",request.method().name());
    LOG.trace("HTTP-Uri {}",request.uri());
  }
  for (  String name : request.headers().names()) {
    if (name.toLowerCase(Locale.US).equals("content-type")) {
      name=Exchange.CONTENT_TYPE;
    }
    if (name.toLowerCase(Locale.US).equals("authorization")) {
      String value=request.headers().get(name);
      if (value != null && value.trim().startsWith("Basic")) {
        NettyHttpHelper.appendHeader(headers,NettyHttpConstants.HTTP_AUTHENTICATION,"Basic");
      }
    }
    List<String> values=request.headers().getAll(name);
    Iterator<?> it=ObjectHelper.createIterator(values);
    while (it.hasNext()) {
      Object extracted=it.next();
      Object decoded=shouldUrlDecodeHeader(configuration,name,extracted,"UTF-8");
      LOG.trace("HTTP-header: {}",extracted);
      if (headerFilterStrategy != null && !headerFilterStrategy.applyFilterToExternalHeaders(name,decoded,exchange)) {
        NettyHttpHelper.appendHeader(headers,name,decoded);
      }
    }
  }
  if (request.uri().contains("?")) {
    String query=ObjectHelper.after(request.uri(),"?");
    Map<String,Object> uriParameters=URISupport.parseQuery(query,false,true);
    for (    Map.Entry<String,Object> entry : uriParameters.entrySet()) {
      String name=entry.getKey();
      Object values=entry.getValue();
      Iterator<?> it=ObjectHelper.createIterator(values);
      while (it.hasNext()) {
        Object extracted=it.next();
        Object decoded=shouldUrlDecodeHeader(configuration,name,extracted,"UTF-8");
        LOG.trace("URI-Parameter: {}",extracted);
        if (headerFilterStrategy != null && !headerFilterStrategy.applyFilterToExternalHeaders(name,decoded,exchange)) {
          NettyHttpHelper.appendHeader(headers,name,decoded);
        }
      }
    }
  }
  if (request.method().name().equals("POST") && request.headers().get(Exchange.CONTENT_TYPE) != null && request.headers().get(Exchange.CONTENT_TYPE).startsWith(NettyHttpConstants.CONTENT_TYPE_WWW_FORM_URLENCODED) && !configuration.isBridgeEndpoint()) {
    String charset="UTF-8";
    String body=null;
    ByteBuf buffer=request.content();
    try {
      body=buffer.toString(Charset.forName(charset));
    }
  finally {
      buffer.release();
    }
    if (ObjectHelper.isNotEmpty(body)) {
      for (      String param : body.split("&")) {
        String[] pair=param.split("=",2);
        if (pair.length == 2) {
          String name=shouldUrlDecodeHeader(configuration,"",pair[0],charset);
          String value=shouldUrlDecodeHeader(configuration,name,pair[1],charset);
          if (headerFilterStrategy != null && !headerFilterStrategy.applyFilterToExternalHeaders(name,value,exchange)) {
            NettyHttpHelper.appendHeader(headers,name,value);
          }
        }
 else {
          throw new IllegalArgumentException("Invalid parameter, expected to be a pair but was " + param);
        }
      }
    }
  }
}
