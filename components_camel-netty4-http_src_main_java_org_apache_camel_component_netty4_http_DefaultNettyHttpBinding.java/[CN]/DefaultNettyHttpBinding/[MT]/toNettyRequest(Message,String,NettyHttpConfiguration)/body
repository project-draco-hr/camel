{
  LOG.trace("toNettyRequest: {}",message);
  if (message.getBody() instanceof HttpRequest) {
    return (HttpRequest)message.getBody();
  }
  String uriForRequest=uri;
  if (configuration.isUseRelativePath()) {
    int indexOfPath=uri.indexOf((new URI(uri)).getPath());
    if (indexOfPath > 0) {
      uriForRequest=uri.substring(indexOfPath);
    }
  }
  HttpRequest request=new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.GET,uriForRequest);
  Object body=message.getBody();
  if (body != null) {
    ByteBuf buffer;
    if (body instanceof ByteBuf) {
      buffer=(ByteBuf)body;
    }
 else {
      buffer=message.getBody(ByteBuf.class);
      if (buffer == null) {
        byte[] data=message.getMandatoryBody(byte[].class);
        buffer=NettyConverter.toByteBuffer(data);
      }
    }
    if (buffer != null) {
      request=new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.POST,uriForRequest,buffer);
      int len=buffer.readableBytes();
      request.headers().set(HttpHeaderNames.CONTENT_LENGTH.toString(),len);
      LOG.trace("Content-Length: {}",len);
    }
 else {
      throw new NoTypeConversionAvailableException(body,ByteBuf.class);
    }
  }
  HttpMethod method=NettyHttpHelper.createMethod(message,body != null);
  request.setMethod(method);
  TypeConverter tc=message.getExchange().getContext().getTypeConverter();
  Map<String,Object> skipRequestHeaders=null;
  if (configuration.isBridgeEndpoint()) {
    String queryString=message.getHeader(Exchange.HTTP_QUERY,String.class);
    if (queryString != null) {
      skipRequestHeaders=URISupport.parseQuery(queryString,false,true);
    }
    message.getHeaders().remove("host");
  }
  for (  Map.Entry<String,Object> entry : message.getHeaders().entrySet()) {
    String key=entry.getKey();
    Object value=entry.getValue();
    if (skipRequestHeaders != null && skipRequestHeaders.containsKey(key)) {
      continue;
    }
    final Iterator<?> it=ObjectHelper.createIterator(value,null,true);
    while (it.hasNext()) {
      String headerValue=tc.convertTo(String.class,it.next());
      if (headerValue != null && headerFilterStrategy != null && !headerFilterStrategy.applyFilterToCamelHeaders(key,headerValue,message.getExchange())) {
        LOG.trace("HTTP-Header: {}={}",key,headerValue);
        request.headers().add(key,headerValue);
      }
    }
  }
  String contentType=MessageHelper.getContentType(message);
  if (contentType != null) {
    request.headers().set(HttpHeaderNames.CONTENT_TYPE.toString(),contentType);
    LOG.trace("Content-Type: {}",contentType);
  }
  URI u=new URI(uri);
  String hostHeader=u.getHost() + (u.getPort() == 80 ? "" : ":" + u.getPort());
  request.headers().set(HttpHeaderNames.HOST.toString(),hostHeader);
  LOG.trace("Host: {}",hostHeader);
  String connection=message.getHeader(HttpHeaderNames.CONNECTION.toString(),String.class);
  if (connection == null) {
    if (configuration.isKeepAlive()) {
      connection=HttpHeaderValues.KEEP_ALIVE.toString();
    }
 else {
      connection=HttpHeaderValues.CLOSE.toString();
    }
  }
  request.headers().set(HttpHeaderNames.CONNECTION.toString(),connection);
  LOG.trace("Connection: {}",connection);
  return request;
}
