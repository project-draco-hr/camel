{
  return new RouteBuilder(){
    public void configure() throws Exception {
      onException(NullPointerException.class).maximumRedeliveries(0).setHeader(MESSAGE_INFO,constant("Damm a NPE")).to(ERROR_QUEUE);
      onException(IOException.class).redeliveryDelay(5000L).maximumRedeliveries(3).maximumRedeliveryDelay(30000L).backOffMultiplier(1.0).useExponentialBackOff().setHeader(MESSAGE_INFO,constant("Damm somekind of IO exception")).to(ERROR_QUEUE);
      onException(Exception.class).redeliveryDelay(1000L).maximumRedeliveries(2).setHeader(MESSAGE_INFO,constant("Damm just exception")).to(ERROR_QUEUE);
      onException(MyBaseBusinessException.class).redeliveryDelay(1000L).maximumRedeliveries(3).setHeader(MESSAGE_INFO,constant("Damm my business is not going to well")).to(BUSINESS_ERROR_QUEUE);
      onException(GeneralSecurityException.class).onException(KeyException.class).maximumRedeliveries(1).setHeader(MESSAGE_INFO,constant("Damm some security error")).to(SECURITY_ERROR_QUEUE);
      onException(InstantiationException.class,IllegalAccessException.class,ClassNotFoundException.class).maximumRedeliveries(0).setHeader(MESSAGE_INFO,constant("Damm some access error")).to(ERROR_QUEUE);
      from("direct:a").process(new Processor(){
        public void process(        Exchange exchange) throws Exception {
          String s=exchange.getIn().getBody(String.class);
          if ("Hello NPE".equals(s)) {
            throw new NullPointerException();
          }
 else           if ("Hello IO".equals(s)) {
            throw new ConnectException("Forced for testing - can not connect to remote server");
          }
 else           if ("Hello Exception".equals(s)) {
            throw new CamelExchangeException("Forced for testing",exchange);
          }
 else           if ("Hello business".equals(s)) {
            throw new MyBusinessException();
          }
 else           if ("I am not allowed to do this".equals(s)) {
            throw new KeyManagementException();
          }
 else           if ("I am not allowed to access this".equals(s)) {
            throw new IllegalAccessException();
          }
          exchange.getOut().setBody("Hello World");
        }
      }
).to("mock:result");
    }
  }
;
}
