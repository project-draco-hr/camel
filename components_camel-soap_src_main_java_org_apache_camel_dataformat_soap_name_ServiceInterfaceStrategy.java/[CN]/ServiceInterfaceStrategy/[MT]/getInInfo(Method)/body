{
  List<TypeInfo> typeInfos=new ArrayList<TypeInfo>();
  RequestWrapper requestWrapper=method.getAnnotation(RequestWrapper.class);
  Class<?>[] types=method.getParameterTypes();
  if (types.length == 0) {
    typeInfos.add(new TypeInfo(null,null));
    return typeInfos;
  }
  if (requestWrapper != null && requestWrapper.className() != null) {
    typeInfos.add(new TypeInfo(requestWrapper.className(),new QName(requestWrapper.targetNamespace(),requestWrapper.localName())));
    return typeInfos;
  }
  Annotation[][] annotations=method.getParameterAnnotations();
  List<WebParam> webParams=new ArrayList<WebParam>();
  for (int i=0; i < annotations.length; i++) {
    Annotation[] singleParameterAnnotations=annotations[i];
    for (int j=0; j < singleParameterAnnotations.length; j++) {
      Annotation annotation=singleParameterAnnotations[j];
      if (annotation instanceof WebParam) {
        webParams.add((WebParam)annotation);
      }
    }
  }
  if (webParams.size() != types.length) {
    throw new IllegalArgumentException("The number of @WebParam annotations for Method " + method.getName() + " does not match the number of parameters. This is not supported.");
  }
  Iterator<WebParam> webParamIter=webParams.iterator();
  int paramCounter=-1;
  while (webParamIter.hasNext()) {
    WebParam webParam=webParamIter.next();
    typeInfos.add(new TypeInfo(types[++paramCounter].getName(),new QName(webParam.targetNamespace(),webParam.name())));
  }
  return typeInfos;
}
