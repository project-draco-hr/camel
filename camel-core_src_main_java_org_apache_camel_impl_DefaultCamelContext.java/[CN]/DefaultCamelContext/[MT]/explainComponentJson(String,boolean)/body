{
  try {
    String json=getComponentParameterJsonSchema(componentName);
    if (json == null) {
      return null;
    }
    List<Map<String,String>> rows=JsonSchemaHelper.parseJsonSchema("componentProperties",json,true);
    Map<String,String[]> selected=new LinkedHashMap<String,String[]>();
    Component component=getComponent(componentName);
    Map<String,Object> options=new HashMap<String,Object>();
    IntrospectionSupport.getProperties(component,options,null);
    for (    Map.Entry<String,Object> entry : options.entrySet()) {
      String name=entry.getKey();
      if ("camelContext".equals(name) || "endpointClass".equals(name)) {
        continue;
      }
      String value="";
      if (entry.getValue() != null) {
        value=entry.getValue().toString();
      }
      value=URISupport.sanitizePath(value);
      String type=null;
      String kind=null;
      String group=null;
      String label=null;
      String required=null;
      String javaType=null;
      String deprecated=null;
      String defaultValue=null;
      String description=null;
      for (      Map<String,String> row : rows) {
        if (name.equals(row.get("name"))) {
          type=row.get("type");
          kind=row.get("kind");
          group=row.get("group");
          label=row.get("label");
          required=row.get("required");
          javaType=row.get("javaType");
          deprecated=row.get("deprecated");
          defaultValue=row.get("defaultValue");
          description=row.get("description");
          break;
        }
      }
      selected.put(name,new String[]{name,kind,group,label,required,type,javaType,deprecated,value,defaultValue,description});
    }
    for (    Map<String,String> row : rows) {
      String name=row.get("name");
      String kind=row.get("kind");
      String group=row.get("group");
      String label=row.get("label");
      String required=row.get("required");
      String value=row.get("value");
      String defaultValue=row.get("defaultValue");
      String type=row.get("type");
      String javaType=row.get("javaType");
      String deprecated=row.get("deprecated");
      value=URISupport.sanitizePath(value);
      String description=row.get("description");
      if (includeAllOptions) {
        if (!selected.containsKey(name)) {
          selected.put(name,new String[]{name,kind,group,label,required,type,javaType,deprecated,value,defaultValue,description});
        }
      }
    }
    json=ObjectHelper.before(json,"  \"componentProperties\": {");
    StringBuilder buffer=new StringBuilder("  \"componentProperties\": {");
    boolean first=true;
    for (    String[] row : selected.values()) {
      if (first) {
        first=false;
      }
 else {
        buffer.append(",");
      }
      buffer.append("\n    ");
      String name=row[0];
      String kind=row[1];
      String group=row[2];
      String label=row[3];
      String required=row[4];
      String type=row[5];
      String javaType=row[6];
      String deprecated=row[7];
      String value=row[8];
      String defaultValue=row[9];
      String description=row[10];
      buffer.append(StringQuoteHelper.doubleQuote(name)).append(": { ");
      CollectionStringBuffer csb=new CollectionStringBuffer();
      if (kind != null) {
        csb.append("\"kind\": \"" + kind + "\"");
      }
      if (group != null) {
        csb.append("\"group\": \"" + group + "\"");
      }
      if (label != null) {
        csb.append("\"label\": \"" + label + "\"");
      }
      if (required != null) {
        csb.append("\"required\": \"" + required + "\"");
      }
      if (type != null) {
        csb.append("\"type\": \"" + type + "\"");
      }
      if (javaType != null) {
        csb.append("\"javaType\": \"" + javaType + "\"");
      }
      if (deprecated != null) {
        csb.append("\"deprecated\": \"" + deprecated + "\"");
      }
      if (value != null) {
        csb.append("\"value\": \"" + value + "\"");
      }
      if (defaultValue != null) {
        csb.append("\"defaultValue\": \"" + defaultValue + "\"");
      }
      if (description != null) {
        csb.append("\"description\": \"" + description + "\"");
      }
      if (!csb.isEmpty()) {
        buffer.append(csb.toString());
      }
      buffer.append(" }");
    }
    buffer.append("\n  }\n}\n");
    buffer.insert(0,json);
    return buffer.toString();
  }
 catch (  Exception e) {
    return null;
  }
}
