{
  Map<Integer,DefaultRouteStartupOrder> inputs=new TreeMap<Integer,DefaultRouteStartupOrder>();
  for (  RouteService routeService : routeServices) {
    DefaultRouteStartupOrder order=doPrepareRouteToBeStarted(routeService);
    if (checkClash) {
      doCheckStartupOrderClash(order,inputs);
    }
    inputs.put(order.getStartupOrder(),order);
  }
  doWarmUpRoutes(inputs,startConsumer);
  Collections.sort(startupListeners,new OrderedComparator());
  for (  StartupListener startup : startupListeners) {
    startup.onCamelContextStarted(this,isStarted());
  }
  List<StartupListener> backup=new ArrayList<>(startupListeners);
  startupListeners.clear();
  if (startConsumer) {
    if (resumeConsumer) {
      doResumeRouteConsumers(inputs,addingRoutes);
    }
 else {
      doStartRouteConsumers(inputs,addingRoutes);
    }
  }
  Collections.sort(startupListeners,new OrderedComparator());
  for (  StartupListener startup : startupListeners) {
    startup.onCamelContextStarted(this,isStarted());
  }
  startupListeners.addAll(0,backup);
  inputs.clear();
}
