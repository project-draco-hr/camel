{
  if (isStreamCaching()) {
    if (StreamCaching.getStreamCaching(this) == null) {
      LOG.info("StreamCaching is enabled on CamelContext: " + getName());
      addInterceptStrategy(new StreamCaching());
    }
  }
  if (isTracing()) {
    LOG.info("Tracing is enabled on CamelContext: " + getName());
  }
  if (isHandleFault()) {
    if (HandleFault.getHandleFault(this) == null) {
      LOG.info("HandleFault is enabled on CamelContext: " + getName());
      addInterceptStrategy(new HandleFault());
    }
  }
  if (getDelayer() != null && getDelayer() > 0) {
    if (Delayer.getDelayer(this) == null) {
      long millis=getDelayer();
      LOG.info("Delayer is enabled with: " + millis + " ms. on CamelContext: "+ getName());
      addInterceptStrategy(new Delayer(millis));
    }
  }
  if (getDebugger() != null) {
    LOG.info("Debugger: " + getDebugger() + " is enabled on CamelContext: "+ getName());
    getDebugger().setCamelContext(this);
    startServices(getDebugger());
    addInterceptStrategy(new Debug(getDebugger()));
  }
  getManagementStrategy().start();
  Iterator<LifecycleStrategy> it=lifecycleStrategies.iterator();
  while (it.hasNext()) {
    LifecycleStrategy strategy=it.next();
    try {
      strategy.onContextStart(this);
    }
 catch (    Exception e) {
      LOG.warn("Cannot start lifecycle strategy: " + strategy + ". This strategy will be removed. Cause: "+ e.getMessage(),e);
      it.remove();
    }
  }
  for (  EventNotifier notifier : getManagementStrategy().getEventNotifiers()) {
    if (notifier instanceof Service) {
      Service service=(Service)notifier;
      for (      LifecycleStrategy strategy : lifecycleStrategies) {
        strategy.onServiceAdd(this,service,null);
      }
    }
    startServices(notifier);
  }
  EventHelper.notifyCamelContextStarting(this);
  forceLazyInitialization();
  addService(executorServiceStrategy);
  addService(producerServicePool);
  addService(inflightRepository);
  addService(shutdownStrategy);
  startServices(components.values());
  startRouteDefinitions(routeDefinitions);
  if (doNotStartRoutesOnFirstStart) {
    LOG.info("Cannot start routes as CamelContext has been configured with autoStartup=false");
  }
  doStartOrResumeRoutes(routeServices,true,!doNotStartRoutesOnFirstStart,false);
}
