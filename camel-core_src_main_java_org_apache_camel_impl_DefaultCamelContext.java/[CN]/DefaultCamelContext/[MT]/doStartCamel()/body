{
  if (applicationContextClassLoader == null) {
    ClassLoader cl=Thread.currentThread().getContextClassLoader();
    if (cl == null) {
      cl=this.getClass().getClassLoader();
    }
    setApplicationContextClassLoader(cl);
  }
  if (log.isDebugEnabled()) {
    log.debug("Using ClassResolver={}, PackageScanClassResolver={}, ApplicationContextClassLoader={}",new Object[]{getClassResolver(),getPackageScanClassResolver(),getApplicationContextClassLoader()});
  }
  if (isStreamCaching()) {
    log.info("StreamCaching is enabled on CamelContext: {}",getName());
  }
  if (isTracing()) {
    log.info("Tracing is enabled on CamelContext: {}",getName());
  }
  if (isUseMDCLogging()) {
    log.info("MDC logging is enabled on CamelContext: {}",getName());
  }
  if (isHandleFault()) {
    if (HandleFault.getHandleFault(this) == null) {
      log.info("HandleFault is enabled on CamelContext: {}",getName());
      addInterceptStrategy(new HandleFault());
    }
  }
  if (getDelayer() != null && getDelayer() > 0) {
    log.info("Delayer is enabled with: {} ms. on CamelContext: {}",getDelayer(),getName());
  }
  if (getDebugger() != null) {
    log.info("Debugger: {} is enabled on CamelContext: {}",getDebugger(),getName());
    getDebugger().setCamelContext(this);
    startService(getDebugger());
    addInterceptStrategy(new Debug(getDebugger()));
  }
  ManagementStrategy managementStrategy=getManagementStrategy();
  if (managementStrategy instanceof CamelContextAware) {
    ((CamelContextAware)managementStrategy).setCamelContext(this);
  }
  ServiceHelper.startService(managementStrategy);
  ServiceHelper.startServices(lifecycleStrategies);
  Iterator<LifecycleStrategy> it=lifecycleStrategies.iterator();
  while (it.hasNext()) {
    LifecycleStrategy strategy=it.next();
    try {
      strategy.onContextStart(this);
    }
 catch (    VetoCamelContextStartException e) {
      log.warn("Lifecycle strategy vetoed starting CamelContext ({}) due {}",getName(),e.getMessage());
      throw e;
    }
catch (    Exception e) {
      log.warn("Lifecycle strategy " + strategy + " failed starting CamelContext ({}) due {}",getName(),e.getMessage());
      throw e;
    }
  }
  for (  EventNotifier notifier : getManagementStrategy().getEventNotifiers()) {
    if (notifier instanceof Service) {
      Service service=(Service)notifier;
      for (      LifecycleStrategy strategy : lifecycleStrategies) {
        strategy.onServiceAdd(this,service,null);
      }
    }
    if (notifier instanceof Service) {
      startService((Service)notifier);
    }
  }
  EventHelper.notifyCamelContextStarting(this);
  forceLazyInitialization();
  endpoints=new EndpointRegistry(this,endpoints);
  addService(endpoints);
  doAddService(executorServiceManager,false);
  addService(producerServicePool);
  addService(inflightRepository);
  addService(shutdownStrategy);
  addService(packageScanClassResolver);
  addService(restRegistry);
  if (runtimeEndpointRegistry != null) {
    if (runtimeEndpointRegistry instanceof EventNotifier) {
      getManagementStrategy().addEventNotifier((EventNotifier)runtimeEndpointRegistry);
    }
    addService(runtimeEndpointRegistry);
  }
  Component existing=CamelContextHelper.lookupPropertiesComponent(this,false);
  if (existing != null) {
    if (existing instanceof PropertiesComponent) {
      propertiesComponent=(PropertiesComponent)existing;
    }
 else {
      throw new IllegalArgumentException("Found properties component of type: " + existing.getClass() + " instead of expected: "+ PropertiesComponent.class);
    }
  }
  startServices(components.values());
  startRouteDefinitions(routeDefinitions);
  boolean streamCachingInUse=isStreamCaching();
  if (!streamCachingInUse) {
    for (    RouteDefinition route : routeDefinitions) {
      Boolean routeCache=CamelContextHelper.parseBoolean(this,route.getStreamCache());
      if (routeCache != null && routeCache) {
        streamCachingInUse=true;
        break;
      }
    }
  }
  if (isAllowUseOriginalMessage()) {
    log.info("AllowUseOriginalMessage is enabled. If access to the original message is not needed," + " then its recommended to turn this option off as it may improve performance.");
  }
  if (streamCachingInUse) {
    getStreamCachingStrategy().setEnabled(true);
    addService(getStreamCachingStrategy());
  }
 else {
    log.info("StreamCaching is not in use. If using streams then its recommended to enable stream caching." + " See more details at http://camel.apache.org/stream-caching.html");
  }
  if (doNotStartRoutesOnFirstStart) {
    log.debug("Skip starting of routes as CamelContext has been configured with autoStartup=false");
  }
  doStartOrResumeRoutes(routeServices,true,!doNotStartRoutesOnFirstStart,false,true);
}
