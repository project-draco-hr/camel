{
  boolean doNotStart=!firstStartDone && !isAutoStartup();
  firstStartDone=true;
  if (doNotStart) {
    LOG.info("Cannot start Apache Camel " + getVersion() + " (CamelContext:"+ getName()+ ") as it has been configured to not auto start");
    return;
  }
  super.start();
  LOG.debug("Starting routes...");
synchronized (this) {
    Map<Integer,DefaultRouteStartupOrder> inputs=new TreeMap<Integer,DefaultRouteStartupOrder>();
    for (    RouteService routeService : routeServices.values()) {
      Boolean autoStart=routeService.getRouteDefinition().isAutoStartup();
      if (autoStart == null || autoStart) {
        routeService.startInputs(false);
        try {
          routeService.start();
          Integer startupOrder=routeService.getRouteDefinition().getStartupOrder();
          if (startupOrder == null) {
            startupOrder=defaultRouteStartupOrder++;
          }
          DefaultRouteStartupOrder holder=null;
          for (          Map.Entry<Route,Consumer> entry : routeService.getInputs().entrySet()) {
            if (holder == null) {
              holder=new DefaultRouteStartupOrder(startupOrder,entry.getKey());
            }
            holder.addInput(entry.getValue());
          }
          DefaultRouteStartupOrder other=inputs.get(startupOrder);
          if (other != null) {
            String otherId=other.getRoute().getId();
            throw new FailedToStartRouteException(holder.getRoute().getId(),"starupOrder clash. Route " + otherId + " already has startupOrder "+ startupOrder+ " configured which this route have as well. Please correct startupOrder to be unique among all your routes.");
          }
 else {
            inputs.put(startupOrder,holder);
          }
        }
 catch (        FailedToStartRouteException e) {
          throw e;
        }
catch (        Exception e) {
          throw new FailedToStartRouteException(e);
        }
 finally {
          routeService.startInputs(true);
        }
      }
 else {
        LOG.info("Cannot start route " + routeService.getId() + " as it is configured with auto startup disabled.");
      }
    }
    List<Endpoint> routeInputs=new ArrayList<Endpoint>();
    for (    RouteService routeService : routeServices.values()) {
      for (      Consumer consumer : routeService.getInputs().values()) {
        Endpoint endpoint=consumer.getEndpoint();
        boolean multipleConsumersSupported=false;
        if (endpoint instanceof MultipleConsumersSupport) {
          multipleConsumersSupported=((MultipleConsumersSupport)endpoint).isMultipleConsumersSupported();
        }
        if (!multipleConsumersSupported && routeInputs.contains(endpoint)) {
          throw new FailedToStartRouteException(routeService.getId(),"Multiple consumers for the same endpoint is now allowed: " + endpoint);
        }
 else {
          routeInputs.add(endpoint);
        }
      }
    }
    for (    Map.Entry<Integer,DefaultRouteStartupOrder> entry : inputs.entrySet()) {
      Integer order=entry.getKey();
      Route route=entry.getValue().getRoute();
      List<Consumer> consumers=entry.getValue().getInputs();
      for (      Consumer consumer : consumers) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Starting consumer (order: " + order + ") on route: "+ route.getId());
        }
        for (        LifecycleStrategy strategy : lifecycleStrategies) {
          strategy.onServiceAdd(this,consumer,route);
        }
        ServiceHelper.startService(consumer);
        routeStartupOrder.add(entry.getValue());
      }
    }
  }
  if (LOG.isDebugEnabled()) {
    for (int i=0; i < getRoutes().size(); i++) {
      LOG.debug("Route " + i + ": "+ getRoutes().get(i));
    }
    LOG.debug("... Routes started");
  }
  LOG.info("Started " + getRoutes().size() + " routes");
  LOG.info("Apache Camel " + getVersion() + " (CamelContext:"+ getName()+ ") started");
  EventHelper.notifyCamelContextStarted(this);
}
