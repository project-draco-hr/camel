{
  ObjectHelper.notEmpty(uri,"uri");
  log.trace("Getting endpoint with uri: {}",uri);
  try {
    uri=resolvePropertyPlaceholders(uri);
  }
 catch (  Exception e) {
    throw new ResolveEndpointFailedException(uri,e);
  }
  final String rawUri=uri;
  uri=normalizeEndpointUri(uri);
  log.trace("Getting endpoint with raw uri: {}, normalized uri: {}",rawUri,uri);
  Endpoint answer;
  String scheme=null;
  EndpointKey key=getEndpointKey(uri);
  answer=endpoints.get(key);
  if (answer == null) {
    try {
      String splitURI[]=ObjectHelper.splitOnCharacter(uri,":",2);
      if (splitURI[1] != null) {
        scheme=splitURI[0];
        log.trace("Endpoint uri: {} is from component with name: {}",uri,scheme);
        Component component=getComponent(scheme);
        if (component != null) {
          log.trace("Creating endpoint from uri: {} using component: {}",uri,component);
          if (component.useRawUri()) {
            answer=component.createEndpoint(rawUri);
          }
 else {
            answer=component.createEndpoint(uri);
          }
          if (answer != null && log.isDebugEnabled()) {
            log.debug("{} converted to endpoint: {} by component: {}",new Object[]{URISupport.sanitizeUri(uri),answer,component});
          }
        }
      }
      if (answer == null) {
        answer=createEndpoint(uri);
        log.trace("No component to create endpoint from uri: {} fallback lookup in registry -> {}",uri,answer);
      }
      if (answer != null) {
        addService(answer);
        answer=addEndpointToRegistry(uri,answer);
      }
    }
 catch (    Exception e) {
      throw new ResolveEndpointFailedException(uri,e);
    }
  }
  if (answer == null && scheme != null) {
    throw new ResolveEndpointFailedException(uri,"No component found with scheme: " + scheme);
  }
  return answer;
}
