{
  ServiceTracker<T,T> tracker;
  try {
    String flt;
    if (filter != null) {
      if (filter.startsWith("(")) {
        flt="(&(" + Constants.OBJECTCLASS + "="+ type.getName()+ ")"+ filter+ ")";
      }
 else {
        flt="(&(" + Constants.OBJECTCLASS + "="+ type.getName()+ ")("+ filter+ "))";
      }
    }
 else {
      flt="(" + Constants.OBJECTCLASS + "="+ type.getName()+ ")";
    }
    Filter osgiFilter=FrameworkUtil.createFilter(flt);
    tracker=new ServiceTracker<T,T>(bundleContext,osgiFilter,null);
    tracker.open(true);
    T svc=tracker.waitForService(timeout);
    if (svc == null) {
      @SuppressWarnings("rawtypes") Dictionary dic=bundleContext.getBundle().getHeaders();
      LOG.warn("Test bundle headers: " + explode(dic));
      for (      ServiceReference<?> ref : asCollection(bundleContext.getAllServiceReferences(null,null))) {
        LOG.warn("ServiceReference: " + ref);
      }
      for (      ServiceReference<?> ref : asCollection(bundleContext.getAllServiceReferences(null,flt))) {
        LOG.warn("Filtered ServiceReference: " + ref);
      }
      throw new RuntimeException("Gave up waiting for service " + flt);
    }
    return svc;
  }
 catch (  InvalidSyntaxException e) {
    throw new IllegalArgumentException("Invalid filter",e);
  }
catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
}
