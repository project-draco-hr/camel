{
  NotifyBuilder notify=new NotifyBuilder(context).whenDone(files).create();
  ExecutorService executor=Executors.newFixedThreadPool(poolSize);
  Map<Integer,Future<String>> responses=new ConcurrentHashMap<Integer,Future<String>>();
  for (int i=0; i < files; i++) {
    final int index=i;
    Future<String> out=executor.submit(new Callable<String>(){
      public String call() throws Exception {
        String reply=template.requestBody("netty:tcp://localhost:{{port}}",index,String.class);
        log.debug("Sent {} received {}",index,reply);
        assertEquals("Bye " + index,reply);
        return reply;
      }
    }
);
    responses.put(index,out);
  }
  notify.matches(2,TimeUnit.MINUTES);
  assertEquals(files,responses.size());
  Set<Object> unique=new HashSet<Object>();
  for (  Future<String> future : responses.values()) {
    unique.add(future.get());
  }
  assertEquals("Should be " + files + " unique responses",files,unique.size());
  executor.shutdownNow();
}
