{
  File tarFile;
  Exchange answer=oldExchange;
  if (newExchange == null) {
    return oldExchange;
  }
  if (oldExchange == null) {
    try {
      tarFile=FileUtil.createTempFile(this.filePrefix,this.fileSuffix,parentDir);
      LOG.trace("Created temporary file: {}",tarFile);
    }
 catch (    IOException e) {
      throw new GenericFileOperationFailedException(e.getMessage(),e);
    }
    answer=newExchange;
    answer.addOnCompletion(new DeleteTarFileOnCompletion(tarFile));
  }
 else {
    tarFile=oldExchange.getIn().getBody(File.class);
  }
  Object body=newExchange.getIn().getBody();
  if (body instanceof WrappedFile) {
    body=((WrappedFile)body).getFile();
  }
  if (body instanceof File) {
    try {
      File appendFile=(File)body;
      if (appendFile.length() > 0) {
        String entryName=preserveFolderStructure ? newExchange.getIn().getHeader(Exchange.FILE_NAME,String.class) : newExchange.getIn().getMessageId();
        addFileToTar(tarFile,appendFile,this.preserveFolderStructure ? entryName : null);
        GenericFile<File> genericFile=FileConsumer.asGenericFile(tarFile.getParent(),tarFile,Charset.defaultCharset().toString(),false);
        genericFile.bindToExchange(answer);
      }
    }
 catch (    Exception e) {
      throw new GenericFileOperationFailedException(e.getMessage(),e);
    }
  }
 else {
    try {
      byte[] buffer=newExchange.getIn().getMandatoryBody(byte[].class);
      if (buffer.length > 0) {
        String entryName=useFilenameHeader ? newExchange.getIn().getHeader(Exchange.FILE_NAME,String.class) : newExchange.getIn().getMessageId();
        addEntryToTar(tarFile,entryName,buffer,buffer.length);
        GenericFile<File> genericFile=FileConsumer.asGenericFile(tarFile.getParent(),tarFile,Charset.defaultCharset().toString(),false);
        genericFile.bindToExchange(answer);
      }
    }
 catch (    Exception e) {
      throw new GenericFileOperationFailedException(e.getMessage(),e);
    }
  }
  return answer;
}
