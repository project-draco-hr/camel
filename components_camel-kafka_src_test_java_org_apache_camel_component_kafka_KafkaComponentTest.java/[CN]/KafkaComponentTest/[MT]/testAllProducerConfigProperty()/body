{
  Map<String,Object> params=new HashMap<String,Object>();
  setProducerProperty(params);
  String uri="kafka:dev1:12345,dev2:12566";
  String remaining="dev1:12345,dev2:12566";
  KafkaEndpoint endpoint=new KafkaComponent(context).createEndpoint(uri,remaining,params);
  assertEquals("1",endpoint.getConfiguration().getRequestRequiredAcks());
  assertEquals(new Integer(1),endpoint.getConfiguration().getBufferMemorySize());
  assertEquals(new Integer(10),endpoint.getConfiguration().getProducerBatchSize());
  assertEquals(new Integer(12),endpoint.getConfiguration().getConnectionMaxIdleMs());
  assertEquals(new Integer(1),endpoint.getConfiguration().getMaxBlockMs());
  assertEquals(new Integer(1),endpoint.getConfiguration().getBufferMemorySize());
  assertEquals("testing",endpoint.getConfiguration().getClientId());
  assertEquals("none",endpoint.getConfiguration().getCompressionCodec());
  assertEquals(new Integer(1),endpoint.getConfiguration().getLingerMs());
  assertEquals(new Integer(100),endpoint.getConfiguration().getMaxRequestSize());
  assertEquals(100,endpoint.getConfiguration().getRequestTimeoutMs().intValue());
  assertEquals(new Integer(1029),endpoint.getConfiguration().getMetadataMaxAgeMs());
  assertEquals(new Integer(23),endpoint.getConfiguration().getReceiveBufferBytes());
  assertEquals(new Integer(234),endpoint.getConfiguration().getReconnectBackoffMs());
  assertEquals(new Integer(0),endpoint.getConfiguration().getRetries());
  assertEquals(3782,endpoint.getConfiguration().getRetryBackoffMs().intValue());
  assertEquals(765,endpoint.getConfiguration().getSendBufferBytes().intValue());
  assertEquals(new Integer(1),endpoint.getConfiguration().getMaxInFlightRequest());
  assertEquals("org.apache.camel.reporters.TestReport,org.apache.camel.reporters.SampleReport",endpoint.getConfiguration().getMetricReporters());
  assertEquals(new Integer(3),endpoint.getConfiguration().getNoOfMetricsSample());
  assertEquals(new Integer(12344),endpoint.getConfiguration().getMetricsSampleWindowMs());
  assertEquals(KafkaConstants.KAFKA_DEFAULT_SERIALIZER,endpoint.getConfiguration().getSerializerClass());
  assertEquals(KafkaConstants.KAFKA_DEFAULT_SERIALIZER,endpoint.getConfiguration().getKeySerializerClass());
  assertEquals("testing",endpoint.getConfiguration().getSslKeyPassword());
  assertEquals("/abc",endpoint.getConfiguration().getSslKeystoreLocation());
  assertEquals("testing",endpoint.getConfiguration().getSslKeystorePassword());
  assertEquals("/abc",endpoint.getConfiguration().getSslTruststoreLocation());
  assertEquals("testing",endpoint.getConfiguration().getSslTruststorePassword());
  assertEquals("test",endpoint.getConfiguration().getSaslKerberosServiceName());
  assertEquals("PLAINTEXT",endpoint.getConfiguration().getSecurityProtocol());
  assertEquals("TLSv1.2",endpoint.getConfiguration().getSslEnabledProtocols());
  assertEquals("JKS",endpoint.getConfiguration().getSslKeystoreType());
  assertEquals("TLS",endpoint.getConfiguration().getSslProtocol());
  assertEquals("test",endpoint.getConfiguration().getSslProvider());
  assertEquals("JKS",endpoint.getConfiguration().getSslTruststoreType());
  assertEquals("/usr/bin/kinit",endpoint.getConfiguration().getKerberosInitCmd());
  assertEquals(new Integer(60000),endpoint.getConfiguration().getKerberosBeforeReloginMinTime());
  assertEquals(new Double(0.05),endpoint.getConfiguration().getKerberosRenewJitter());
  assertEquals(new Double(0.8),endpoint.getConfiguration().getKerberosRenewWindowFactor());
  assertEquals("MAC",endpoint.getConfiguration().getSslCipherSuites());
  assertEquals("test",endpoint.getConfiguration().getSslEndpointAlgorithm());
  assertEquals("SunX509",endpoint.getConfiguration().getSslKeymanagerAlgorithm());
  assertEquals("PKIX",endpoint.getConfiguration().getSslTrustmanagerAlgorithm());
}
