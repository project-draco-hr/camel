{
  Map<String,Object> params=new HashMap<String,Object>();
  setProducerProperty(params);
  String uri="kafka:dev1:12345,dev2:12566";
  String remaining="dev1:12345,dev2:12566";
  KafkaEndpoint endpoint=new KafkaComponent(context).createEndpoint(uri,remaining,params);
  assertEquals(new Integer(0),endpoint.getRequestRequiredAcks());
  assertEquals(new Integer(1),endpoint.getBufferMemorySize());
  assertEquals(new Integer(10),endpoint.getProducerBatchSize());
  assertEquals(new Integer(12),endpoint.getConnectionMaxIdleMs());
  assertEquals(new Integer(1),endpoint.getMaxBlockMs());
  assertEquals(new Integer(1),endpoint.getBufferMemorySize());
  assertEquals("testing",endpoint.getClientId());
  assertEquals("none",endpoint.getCompressionCodec());
  assertEquals(new Integer(1),endpoint.getLingerMs());
  assertEquals(new Integer(100),endpoint.getMaxRequestSize());
  assertEquals(100,endpoint.getRequestTimeoutMs().intValue());
  assertEquals(new Integer(1029),endpoint.getMetadataMaxAgeMs());
  assertEquals(new Integer(23),endpoint.getReceiveBufferBytes());
  assertEquals(new Integer(234),endpoint.getReconnectBackoffMs());
  assertEquals(new Integer(0),endpoint.getRetries());
  assertEquals(3782,endpoint.getRetryBackoffMs().intValue());
  assertEquals(765,endpoint.getSendBufferBytes().intValue());
  assertEquals(new Integer(1),endpoint.getMaxInFlightRequest());
  assertEquals("org.apache.camel.reporters.TestReport,org.apache.camel.reporters.SampleReport",endpoint.getMetricReporters());
  assertEquals(new Integer(3),endpoint.getNoOfMetricsSample());
  assertEquals(new Integer(12344),endpoint.getMetricsSampleWindowMs());
  assertEquals(KafkaConstants.KAFKA_DEFAULT_SERIALIZER,endpoint.getSerializerClass());
  assertEquals(KafkaConstants.KAFKA_DEFAULT_SERIALIZER,endpoint.getKeySerializerClass());
  assertEquals("testing",endpoint.getSslKeyPassword());
  assertEquals("/abc",endpoint.getSslKeystoreLocation());
  assertEquals("testing",endpoint.getSslKeystorePassword());
  assertEquals("/abc",endpoint.getSslTruststoreLocation());
  assertEquals("testing",endpoint.getSslTruststorePassword());
  assertEquals("test",endpoint.getSaslKerberosServiceName());
  assertEquals("PLAINTEXT",endpoint.getSecurityProtocol());
  assertEquals("TLSv1.2",endpoint.getSslEnabledProtocols());
  assertEquals("JKS",endpoint.getSslKeystoreType());
  assertEquals("TLS",endpoint.getSslProtocol());
  assertEquals("test",endpoint.getSslProvider());
  assertEquals("JKS",endpoint.getSslTruststoreType());
  assertEquals("/usr/bin/kinit",endpoint.getKerberosInitCmd());
  assertEquals(new Integer(60000),endpoint.getKerberosBeforeReloginMinTime());
  assertEquals(new Double(0.05),endpoint.getKerberosRenewJitter());
  assertEquals(new Double(0.8),endpoint.getKerberosRenewWindowFactor());
  assertEquals("MAC",endpoint.getSslCipherSuites());
  assertEquals("test",endpoint.getSslEndpointAlgorithm());
  assertEquals("SunX509",endpoint.getSslKeymanagerAlgorithm());
  assertEquals("PKIX",endpoint.getSslTrustmanagerAlgorithm());
}
