{
  InputStream is=exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class,graph);
  Document document=exchange.getContext().getTypeConverter().convertTo(Document.class,exchange,is);
  Key keyEncryptionkey;
  Key dataEncryptionkey;
  if (xmlCipherAlgorithm.equals(XMLCipher.TRIPLEDES)) {
    keyEncryptionkey=generateEncryptionKey("DESede");
    dataEncryptionkey=generateEncryptionKey("DESede");
  }
 else {
    keyEncryptionkey=generateEncryptionKey("AES");
    dataEncryptionkey=generateEncryptionKey("AES");
  }
  XMLCipher keyCipher=XMLCipher.getInstance(generateXmlCipherAlgorithmKeyWrap());
  keyCipher.init(XMLCipher.WRAP_MODE,keyEncryptionkey);
  XMLCipher xmlCipher=XMLCipher.getInstance(xmlCipherAlgorithm);
  xmlCipher.init(XMLCipher.ENCRYPT_MODE,dataEncryptionkey);
  if (secureTag.equalsIgnoreCase("")) {
    embedKeyInfoInEncryptedData(document,keyCipher,xmlCipher,dataEncryptionkey);
    document=xmlCipher.doFinal(document,document.getDocumentElement());
  }
 else {
    NodeIterator iter=XPathAPI.selectNodeIterator(document,secureTag);
    Node node;
    while ((node=iter.nextNode()) != null) {
      embedKeyInfoInEncryptedData(document,keyCipher,xmlCipher,dataEncryptionkey);
      Document temp=xmlCipher.doFinal(document,(Element)node,getSecureTagContents());
      document.importNode(temp.getDocumentElement().cloneNode(true),true);
    }
  }
  try {
    DOMSource source=new DOMSource(document);
    InputStream sis=exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class,source);
    IOHelper.copy(sis,stream);
  }
  finally {
    stream.close();
  }
}
