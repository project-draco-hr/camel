{
  XMLCipher xmlCipher=XMLCipher.getInstance();
  xmlCipher.setSecureValidation(true);
  xmlCipher.init(XMLCipher.DECRYPT_MODE,null);
  xmlCipher.setKEK(keyEncryptionKey);
  if (secureTag.equalsIgnoreCase("")) {
    encodedDocument=xmlCipher.doFinal(encodedDocument,encodedDocument.getDocumentElement());
  }
 else {
    XPathBuilder xpathBuilder=new XPathBuilder(secureTag);
    xpathBuilder.setNamespaceContext(getNamespaceContext());
    NodeList nodeList=xpathBuilder.evaluate(exchange,NodeList.class);
    for (int i=0; i < nodeList.getLength(); i++) {
      Node node=nodeList.item(i);
      encodedDocument=node.getOwnerDocument();
      if (getSecureTagContents()) {
        Document temp=xmlCipher.doFinal(encodedDocument,(Element)node,true);
        encodedDocument.importNode(temp.getDocumentElement().cloneNode(true),true);
      }
 else {
        NodeList childNodes=node.getChildNodes();
        for (int j=0; j < childNodes.getLength(); j++) {
          Node childNode=childNodes.item(j);
          if (childNode.getLocalName().equals("EncryptedData")) {
            Document temp=xmlCipher.doFinal(encodedDocument,(Element)childNode,false);
            encodedDocument.importNode(temp.getDocumentElement().cloneNode(true),true);
          }
        }
      }
    }
  }
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  try {
    DOMSource source=new DOMSource(encodedDocument);
    InputStream sis=exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class,source);
    IOHelper.copy(sis,bos);
  }
  finally {
    bos.close();
  }
  return bos.toByteArray();
}
