{
  String exchangeRecipientAlias=getRecipientKeyAlias(exchange);
  if (null == exchangeRecipientAlias) {
    throw new IllegalStateException("The  recipient's key alias must be defined for asymmetric key encryption.");
  }
  if (trustStore == null && null != this.keyOrTrustStoreParameters) {
    trustStore=keyOrTrustStoreParameters.createKeyStore();
    trustStorePassword=keyOrTrustStoreParameters.getPassword();
  }
  if (null == trustStore) {
    throw new IllegalStateException("A trust store must be defined for asymmetric key encryption.");
  }
  String password=this.keyPassword != null ? this.keyPassword : this.trustStorePassword;
  Key keyEncryptionKey=getPublicKey(this.trustStore,exchangeRecipientAlias,password);
  if (null == keyEncryptionKey) {
    throw new IllegalStateException("No key for the alias [ " + exchangeRecipientAlias + " ] exists in "+ "the configured trust store.");
  }
  Key dataEncryptionKey=generateDataEncryptionKey();
  XMLCipher keyCipher;
  if (null != this.getKeyCipherAlgorithm()) {
    keyCipher=XMLCipher.getInstance(this.getKeyCipherAlgorithm(),null,digestAlgorithm);
  }
 else {
    keyCipher=XMLCipher.getInstance(XMLCipher.RSA_OAEP,null,digestAlgorithm);
  }
  keyCipher.init(XMLCipher.WRAP_MODE,keyEncryptionKey);
  encrypt(exchange,document,stream,dataEncryptionKey,keyCipher,keyEncryptionKey);
}
