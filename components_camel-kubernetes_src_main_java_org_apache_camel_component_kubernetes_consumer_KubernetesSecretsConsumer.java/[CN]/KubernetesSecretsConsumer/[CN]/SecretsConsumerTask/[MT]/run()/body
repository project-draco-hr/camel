{
  if (ObjectHelper.isNotEmpty(getEndpoint().getKubernetesConfiguration().getOauthToken())) {
    if (ObjectHelper.isNotEmpty(getEndpoint().getKubernetesConfiguration().getNamespace())) {
      getEndpoint().getKubernetesClient().secrets().inNamespace(getEndpoint().getKubernetesConfiguration().getNamespace()).watch(new Watcher<Secret>(){
        @Override public void eventReceived(        io.fabric8.kubernetes.client.Watcher.Action action,        Secret resource){
          SecretEvent se=new SecretEvent(action,resource);
          Exchange exchange=getEndpoint().createExchange();
          exchange.getIn().setBody(se.getSecret());
          exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_EVENT_ACTION,se.getAction());
          exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_EVENT_TIMESTAMP,System.currentTimeMillis());
          try {
            processor.process(exchange);
          }
 catch (          Exception e) {
            getExceptionHandler().handleException("Error during processing",exchange,e);
          }
        }
        @Override public void onClose(        KubernetesClientException cause){
          if (cause != null) {
            LOG.error(cause.getMessage(),cause);
          }
        }
      }
);
    }
 else {
      getEndpoint().getKubernetesClient().secrets().watch(new Watcher<Secret>(){
        @Override public void eventReceived(        io.fabric8.kubernetes.client.Watcher.Action action,        Secret resource){
          SecretEvent se=new SecretEvent(action,resource);
          Exchange exchange=getEndpoint().createExchange();
          exchange.getIn().setBody(se.getSecret());
          exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_EVENT_ACTION,se.getAction());
          exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_EVENT_TIMESTAMP,System.currentTimeMillis());
          try {
            processor.process(exchange);
          }
 catch (          Exception e) {
            getExceptionHandler().handleException("Error during processing",exchange,e);
          }
        }
        @Override public void onClose(        KubernetesClientException cause){
          if (cause != null) {
            LOG.error(cause.getMessage(),cause);
          }
        }
      }
);
    }
  }
}
