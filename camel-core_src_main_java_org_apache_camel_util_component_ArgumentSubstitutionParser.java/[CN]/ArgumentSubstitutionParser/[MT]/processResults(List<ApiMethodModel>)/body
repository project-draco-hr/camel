{
  final List<ApiMethodModel> result=new ArrayList<ApiMethodModel>();
  for (  ApiMethodModel model : parseResult) {
    for (    Map.Entry<Pattern,Map<Pattern,List<NameReplacement>>> methodEntry : methodMap.entrySet()) {
      if (methodEntry.getKey().matcher(model.getName()).matches()) {
        final List<ApiMethodArg> updatedArguments=new ArrayList<ApiMethodArg>();
        final Map<Pattern,List<NameReplacement>> argMap=methodEntry.getValue();
        for (        ApiMethodArg argument : model.getArguments()) {
          final Class<?> argType=argument.getType();
          final String typeArgs=argument.getTypeArgs();
          final String argTypeName=argType.getCanonicalName();
          for (          Map.Entry<Pattern,List<NameReplacement>> argEntry : argMap.entrySet()) {
            final Matcher matcher=argEntry.getKey().matcher(argument.getName());
            if (matcher.find()) {
              final List<NameReplacement> adapters=argEntry.getValue();
              for (              NameReplacement adapter : adapters) {
                if (adapter.typePattern == null) {
                  final String newName=getJavaArgName(matcher.replaceAll(adapter.replacement));
                  argument=new ApiMethodArg(newName,argType,typeArgs);
                }
 else {
                  final Matcher typeMatcher=adapter.typePattern.matcher(argTypeName);
                  if (typeMatcher.find()) {
                    if (!adapter.replaceWithType) {
                      final String newName=getJavaArgName(matcher.replaceAll(adapter.replacement));
                      argument=new ApiMethodArg(newName,argType,typeArgs);
                    }
 else {
                      final String newName=getJavaArgName(typeMatcher.replaceAll(adapter.replacement));
                      argument=new ApiMethodArg(newName,argType,typeArgs);
                    }
                  }
                }
              }
            }
          }
          updatedArguments.add(argument);
        }
        model=new ApiMethodModel(model.getUniqueName(),model.getName(),model.getResultType(),updatedArguments,model.getMethod());
      }
    }
    result.add(model);
  }
  return result;
}
