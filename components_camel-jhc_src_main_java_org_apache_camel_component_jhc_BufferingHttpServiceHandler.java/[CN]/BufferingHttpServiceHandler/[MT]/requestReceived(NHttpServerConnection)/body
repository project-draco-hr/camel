{
  HttpContext context=conn.getContext();
  HttpRequest request=conn.getHttpRequest();
  request.setParams(this.params);
  ServerConnState connState=(ServerConnState)context.getAttribute(CONN_STATE);
  connState.resetInput();
  connState.setRequest(request);
  connState.setInputState(ServerConnState.REQUEST_RECEIVED);
  ProtocolVersion ver=request.getRequestLine().getProtocolVersion();
  if (!ver.lessEquals(HttpVersion.HTTP_1_1)) {
    ver=HttpVersion.HTTP_1_1;
  }
  HttpResponse response;
  try {
    if (request instanceof HttpEntityEnclosingRequest) {
      if (((HttpEntityEnclosingRequest)request).expectContinue()) {
        response=this.responseFactory.newHttpResponse(ver,HttpStatus.SC_CONTINUE,context);
        request.setParams(this.params);
        if (this.expectationVerifier != null) {
          try {
            this.expectationVerifier.verify(request,response,context);
          }
 catch (          HttpException ex) {
            response=this.responseFactory.newHttpResponse(HttpVersion.HTTP_1_0,HttpStatus.SC_INTERNAL_SERVER_ERROR,context);
            request.setParams(this.params);
            handleException(ex,response);
          }
        }
        if (response.getStatusLine().getStatusCode() < 200) {
          conn.submitResponse(response);
        }
 else {
          conn.resetInput();
          connState.resetInput();
          sendResponse(conn,response);
        }
      }
    }
 else {
      conn.suspendInput();
      processRequest(conn,request);
    }
  }
 catch (  IOException ex) {
    shutdownConnection(conn,ex);
    if (this.eventListener != null) {
      this.eventListener.fatalIOException(ex,conn);
    }
  }
catch (  HttpException ex) {
    closeConnection(conn,ex);
    if (this.eventListener != null) {
      this.eventListener.fatalProtocolException(ex,conn);
    }
  }
}
