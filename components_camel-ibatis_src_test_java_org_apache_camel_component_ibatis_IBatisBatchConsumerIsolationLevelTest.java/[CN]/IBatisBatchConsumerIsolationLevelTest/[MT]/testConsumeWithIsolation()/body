{
  Account account1=new Account();
  account1.setId(1);
  account1.setFirstName("Bob");
  account1.setLastName("Denver");
  account1.setEmailAddress("TryGuessingGilligan@gmail.com");
  Account account2=new Account();
  account2.setId(2);
  account2.setFirstName("Alan");
  account2.setLastName("Hale");
  account2.setEmailAddress("TryGuessingSkipper@gmail.com");
  List<Object> accounts=new ArrayList<Object>();
  accounts.add(account1);
  accounts.add(account2);
  strategyMock.setIsolation(TransactionIsolationLevel.TRANSACTION_READ_COMMITTED.getValue());
  expectLastCall().once();
  expect(strategyMock.poll(EasyMock.<IBatisConsumer>anyObject(),EasyMock.<IBatisEndpoint>anyObject())).andReturn(accounts).atLeastOnce();
  strategyMock.commit(EasyMock.<IBatisEndpoint>anyObject(),EasyMock.<Exchange>anyObject(),anyObject(),EasyMock.<String>anyObject());
  expectLastCall().atLeastOnce();
  replay(strategyMock);
  IBatisEndpoint iBatisEndpoint=resolveMandatoryEndpoint("ibatis:selectUnprocessedAccounts?consumer.onConsume=consumeAccount",IBatisEndpoint.class);
  iBatisEndpoint.setStrategy(strategyMock);
  iBatisEndpoint.setIsolation("TRANSACTION_READ_COMMITTED");
  template.sendBody("direct:start",account1);
  template.sendBody("direct:start",account2);
  Thread.sleep(1000);
  verify(strategyMock);
}
