{
  try {
    if (xmppServer == null) {
      xmppServer=new XMPPServer("apache.camel");
      StorageProviderRegistry providerRegistry=new MemoryStorageProviderRegistry();
      AccountManagement accountManagement=(AccountManagement)providerRegistry.retrieve(AccountManagement.class);
      Entity user=EntityImpl.parseUnchecked("camel_consumer@apache.camel");
      accountManagement.addUser(user,"secret");
      Entity user2=EntityImpl.parseUnchecked("camel_producer@apache.camel");
      accountManagement.addUser(user2,"secret");
      Entity user3=EntityImpl.parseUnchecked("camel_producer1@apache.camel");
      accountManagement.addUser(user3,"secret");
      xmppServer.setStorageProviderRegistry(providerRegistry);
      if (endpoint == null) {
        endpoint=new TCPEndpoint();
        this.port=AvailablePortFinder.getNextAvailable(5222);
        endpoint.setPort(port);
      }
      xmppServer.addEndpoint(endpoint);
      InputStream stream=Thread.currentThread().getContextClassLoader().getResourceAsStream("xmppServer.jks");
      xmppServer.setTLSCertificateInfo(stream,"secret");
      xmppServer.setSASLMechanisms(Arrays.asList(new SASLMechanism[]{new Anonymous()}));
      xmppServer.start();
      Conference conference=new Conference("test conference");
      conference.createRoom(EntityImpl.parseUnchecked("camel-anon@apache.camel"),"camel-anon",RoomType.FullyAnonymous);
      conference.createRoom(EntityImpl.parseUnchecked("camel-test@apache.camel"),"camel-test",RoomType.Public);
      xmppServer.addModule(new MUCModule("conference",conference));
    }
  }
 catch (  Exception e) {
    throw new RuntimeException("An error occurred when initializing the XMPP Test Server.",e);
  }
}
