{
  String name=item.getAttribute(Constants.NAME_ATTRIBUTE_NAME);
  if (isNullOrEmpty(name)) {
    return;
  }
  String descriptionText=null;
  String defaultValueText=null;
  List<Map<String,String>> rows=JsonSchemaHelper.parseJsonSchema(Constants.PROPERTIES_ATTRIBUTE_NAME,PackageHelper.fileToString(jsonFile),true);
  for (  Map<String,String> row : rows) {
    if (name.equals(row.get(Constants.NAME_ATTRIBUTE_NAME))) {
      descriptionText=row.get(Constants.DESCRIPTION_ATTRIBUTE_NAME);
      defaultValueText=row.get(Constants.DEFAULT_VALUE_ATTRIBUTE_NAME);
    }
  }
  if ("useBlueprintPropertyResolver".equals(name)) {
    descriptionText="Whether to automatic detect OSGi Blueprint property placeholder service in use, and bridge with Camel property placeholder." + " When enabled this allows you to only setup OSGi Blueprint property placeholder and Camel can use the properties in the <camelContext>.";
    defaultValueText="true";
  }
  if (!isNullOrEmpty(descriptionText)) {
    String text=descriptionText;
    if (!isNullOrEmpty(defaultValueText)) {
      text+=". Default value: " + defaultValueText;
    }
    addDocumentation(item,text);
  }
 else {
    boolean skip="customId".equals(name) || "inheritErrorHandler".equals(name) || "rest".equals(name) && jsonFile.getName().endsWith("route.json");
    if (!skip) {
      log.warn("Cannot find documentation for name: " + name + " in json schema: "+ jsonFile);
    }
  }
}
