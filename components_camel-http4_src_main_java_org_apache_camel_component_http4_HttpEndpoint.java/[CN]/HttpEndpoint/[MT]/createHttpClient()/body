{
  ObjectHelper.notNull(clientParams,"clientParams");
  ObjectHelper.notNull(clientConnectionManager,"httpConnectionManager");
  HttpClient answer=new DefaultHttpClient(clientConnectionManager,getClientParams());
  if (ObjectHelper.isNotEmpty(getCamelContext().getProperty("http.proxyHost")) && ObjectHelper.isNotEmpty(getCamelContext().getProperty("http.proxyPort"))) {
    String host=getCamelContext().getProperty("http.proxyHost");
    int port=Integer.parseInt(getCamelContext().getProperty("http.proxyPort"));
    String scheme=getCamelContext().getProperty("http.proxyScheme");
    if (scheme == null) {
      scheme=HttpHelper.isSecureConnection(getEndpointUri()) ? "https" : "http";
    }
    LOG.debug("CamelContext properties http.proxyHost, http.proxyPort, and http.proxyScheme detected. Using http proxy host: {} port: {} scheme: {}",new Object[]{host,port,scheme});
    try {
      component.registerPort(HttpHelper.isSecureConnection(scheme),component.getX509HostnameVerifier(),port,component.getSslContextParameters());
    }
 catch (    Exception ex) {
      throw new RuntimeCamelException(ex);
    }
    HttpHost proxy=new HttpHost(host,port,scheme);
    answer.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY,proxy);
  }
  HttpClientConfigurer configurer=getHttpClientConfigurer();
  if (configurer != null) {
    configurer.configureHttpClient(answer);
  }
  LOG.debug("Created HttpClient {}",answer);
  return answer;
}
