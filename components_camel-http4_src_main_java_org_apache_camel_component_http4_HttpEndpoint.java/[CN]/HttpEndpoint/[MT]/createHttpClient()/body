{
  ObjectHelper.notNull(clientBuilder,"httpClientBuilder");
  ObjectHelper.notNull(clientConnectionManager,"httpConnectionManager");
  clientBuilder.setDefaultCookieStore(cookieStore);
  clientBuilder.setConnectionManager(clientConnectionManager);
  if (ObjectHelper.isNotEmpty(getCamelContext().getProperty("http.proxyHost")) && ObjectHelper.isNotEmpty(getCamelContext().getProperty("http.proxyPort"))) {
    String host=getCamelContext().getProperty("http.proxyHost");
    int port=Integer.parseInt(getCamelContext().getProperty("http.proxyPort"));
    String scheme=getCamelContext().getProperty("http.proxyScheme");
    if (scheme == null) {
      scheme=HttpHelper.isSecureConnection(getEndpointUri()) ? "https" : "http";
    }
    LOG.debug("CamelContext properties http.proxyHost, http.proxyPort, and http.proxyScheme detected. Using http proxy host: {} port: {} scheme: {}",new Object[]{host,port,scheme});
    HttpHost proxy=new HttpHost(host,port,scheme);
    clientBuilder.setProxy(proxy);
  }
  if (isAuthenticationPreemptive()) {
    clientBuilder.addInterceptorFirst(new PreemptiveAuthInterceptor());
  }
  HttpClientConfigurer configurer=getHttpClientConfigurer();
  if (configurer != null) {
    configurer.configureHttpClient(clientBuilder);
  }
  if (isBridgeEndpoint()) {
    clientBuilder.setDefaultCookieStore(new NoopCookieStore());
  }
  LOG.debug("Setup the HttpClientBuilder {}",clientBuilder);
  return clientBuilder.build();
}
