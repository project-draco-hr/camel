{
  context.getRouteDefinition("a").adviceWith(context,new AdviceWithRouteBuilder(){
    @Override public void configure() throws Exception {
      interceptSendToEndpoint("mock:a").skipSendToOriginalEndpoint().to("mock:error");
    }
  }
);
  context.getRouteDefinition("b").adviceWith(context,new AdviceWithRouteBuilder(){
    @Override public void configure() throws Exception {
      interceptSendToEndpoint("mock:b").skipSendToOriginalEndpoint().to("mock:error");
    }
  }
);
  getMockEndpoint("mock:error").whenAnyExchangeReceived(new Processor(){
    @Override public void process(    Exchange exchange) throws Exception {
      String body=exchange.getIn().getBody(String.class);
      throw new IllegalArgumentException("Forced " + body);
    }
  }
);
  getMockEndpoint("mock:a").expectedMessageCount(0);
  getMockEndpoint("mock:b").expectedMessageCount(0);
  getMockEndpoint("mock:error").expectedBodiesReceived("A","B");
  getMockEndpoint("mock:handled").expectedBodiesReceived("Handling Forced A","Handling Forced B");
  Object outA=template.requestBody("direct:a","A");
  assertEquals("Handling Forced A",outA);
  Object outB=template.requestBody("direct:b","B");
  assertEquals("Handling Forced B",outB);
  assertMockEndpointsSatisfied();
}
