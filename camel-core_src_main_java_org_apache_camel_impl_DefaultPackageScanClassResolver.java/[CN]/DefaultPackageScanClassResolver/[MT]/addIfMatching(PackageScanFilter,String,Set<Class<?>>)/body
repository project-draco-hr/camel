{
  try {
    String externalName=fqn.substring(0,fqn.indexOf('.')).replace('/','.');
    Set<ClassLoader> set=getClassLoaders();
    boolean found=false;
    for (    ClassLoader classLoader : set) {
      if (log.isTraceEnabled()) {
        log.trace("Testing for class " + externalName + " matches criteria ["+ test+ "] using classloader:"+ classLoader);
      }
      try {
        Class<?> type=classLoader.loadClass(externalName);
        if (log.isTraceEnabled()) {
          log.trace("Loaded the class: " + type + " in classloader: "+ classLoader);
        }
        if (test.matches(type)) {
          if (log.isTraceEnabled()) {
            log.trace("Found class: " + type + " which matches the filter in classloader: "+ classLoader);
          }
          classes.add(type);
        }
        found=true;
        break;
      }
 catch (      ClassNotFoundException e) {
        if (log.isDebugEnabled()) {
          log.debug("Cannot find class '" + fqn + "' in classloader: "+ classLoader+ ". Reason: "+ e,e);
        }
      }
catch (      NoClassDefFoundError e) {
        if (log.isDebugEnabled()) {
          log.debug("Cannot find the class definition '" + fqn + "' in classloader: "+ classLoader+ ". Reason: "+ e,e);
        }
      }
    }
    if (!found) {
      if (log.isDebugEnabled()) {
        log.debug("Cannot find class '" + fqn + "' in any classloaders: "+ set);
      }
    }
  }
 catch (  Exception e) {
    if (log.isWarnEnabled()) {
      log.warn("Cannot examine class '" + fqn + "' due to a "+ e.getClass().getName()+ " with message: "+ e.getMessage(),e);
    }
  }
}
