{
  if (log.isTraceEnabled()) {
    log.trace("Searching for: " + test + " in package: "+ packageName+ " using classloader: "+ loader.getClass().getName());
  }
  Enumeration<URL> urls;
  try {
    urls=getResources(loader,packageName);
    if (!urls.hasMoreElements()) {
      log.trace("No URLs returned by classloader");
    }
  }
 catch (  IOException ioe) {
    log.warn("Cannot read package: " + packageName,ioe);
    return;
  }
  while (urls.hasMoreElements()) {
    URL url=null;
    try {
      url=urls.nextElement();
      if (log.isTraceEnabled()) {
        log.trace("URL from classloader: " + url);
      }
      String urlPath=url.getFile();
      urlPath=URLDecoder.decode(urlPath,"UTF-8");
      if (log.isTraceEnabled()) {
        log.trace("Decoded urlPath: " + urlPath + " with protocol: "+ url.getProtocol());
      }
      boolean isLocalFileSystem="file".equals(url.getProtocol());
      if (urlPath.startsWith("file:")) {
        try {
          urlPath=new URI(url.getFile()).getPath();
        }
 catch (        URISyntaxException e) {
        }
        if (urlPath.startsWith("file:")) {
          urlPath=urlPath.substring(5);
        }
        isLocalFileSystem=true;
      }
      if (url.toString().startsWith("bundle:") || urlPath.startsWith("bundle:")) {
        log.trace("It's a virtual osgi bundle, skipping");
        continue;
      }
      if (urlPath.indexOf('!') > 0) {
        urlPath=urlPath.substring(0,urlPath.indexOf('!'));
      }
      if (log.isTraceEnabled()) {
        log.trace("isLocalFileSystem: " + isLocalFileSystem);
        log.trace("Scanning for classes in [" + urlPath + "] matching criteria: "+ test);
      }
      File file=new File(urlPath);
      if (file.isDirectory()) {
        if (log.isTraceEnabled()) {
          log.trace("Loading from directory using file: " + file);
        }
        loadImplementationsInDirectory(test,packageName,file,classes);
      }
 else {
        InputStream stream;
        if (!isLocalFileSystem) {
          if (log.isTraceEnabled()) {
            log.trace("Loading from jar using http/https: " + urlPath);
          }
          URL urlStream=new URL(urlPath);
          URLConnection con=urlStream.openConnection();
          con.setUseCaches(false);
          stream=con.getInputStream();
        }
 else {
          if (log.isTraceEnabled()) {
            log.trace("Loading from jar using file: " + file);
          }
          stream=new FileInputStream(file);
        }
        loadImplementationsInJar(test,packageName,stream,urlPath,classes);
      }
    }
 catch (    IOException e) {
      log.debug("Cannot read entries in url: " + url,e);
    }
  }
}
