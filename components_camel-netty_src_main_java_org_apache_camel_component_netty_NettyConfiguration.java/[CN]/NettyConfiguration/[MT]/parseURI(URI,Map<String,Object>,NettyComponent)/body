{
  protocol=uri.getScheme();
  if ((!protocol.equalsIgnoreCase("tcp")) && (!protocol.equalsIgnoreCase("udp"))) {
    throw new IllegalArgumentException("Unrecognized Netty protocol: " + protocol + " for uri: "+ uri);
  }
  setHost(uri.getHost());
  setPort(uri.getPort());
  sslHandler=component.resolveAndRemoveReferenceParameter(parameters,"sslHandler",SslHandler.class,null);
  passphrase=component.resolveAndRemoveReferenceParameter(parameters,"passphrase",String.class,null);
  keyStoreFormat=component.getAndRemoveParameter(parameters,"keyStoreFormat",String.class,"JKS");
  securityProvider=component.getAndRemoveParameter(parameters,"securityProvider",String.class,"SunX509");
  keyStoreFile=component.resolveAndRemoveReferenceParameter(parameters,"keyStoreFile",File.class,null);
  trustStoreFile=component.resolveAndRemoveReferenceParameter(parameters,"trustStoreFile",File.class,null);
  clientPipelineFactory=component.resolveAndRemoveReferenceParameter(parameters,"clientPipelineFactory",ClientPipelineFactory.class,null);
  serverPipelineFactory=component.resolveAndRemoveReferenceParameter(parameters,"serverPipelineFactory",ServerPipelineFactory.class,null);
  List<ChannelDownstreamHandler> referencedEncoders=component.resolveAndRemoveReferenceListParameter(parameters,"encoders",ChannelDownstreamHandler.class,null);
  addToHandlersList(encoders,referencedEncoders,ChannelDownstreamHandler.class);
  List<ChannelUpstreamHandler> referencedDecoders=component.resolveAndRemoveReferenceListParameter(parameters,"decoders",ChannelUpstreamHandler.class,null);
  addToHandlersList(decoders,referencedDecoders,ChannelUpstreamHandler.class);
  EndpointHelper.setProperties(component.getCamelContext(),this,parameters);
  if (encoders.isEmpty() && decoders.isEmpty()) {
    if (allowDefaultCodec) {
      if (isTextline()) {
        Charset charset=getEncoding() != null ? Charset.forName(getEncoding()) : CharsetUtil.UTF_8;
        encoders.add(new StringEncoder(charset));
        decoders.add(new DelimiterBasedFrameDecoder(decoderMaxLineLength,true,delimiter == TextLineDelimiter.LINE ? Delimiters.lineDelimiter() : Delimiters.nulDelimiter()));
        decoders.add(new StringDecoder(charset));
        if (LOG.isDebugEnabled()) {
          LOG.debug("Using textline encoders and decoders with charset: {}, delimiter: {} and decoderMaxLineLength: {}",new Object[]{charset,delimiter,decoderMaxLineLength});
        }
      }
 else {
        encoders.add(new ObjectEncoder());
        decoders.add(new ObjectDecoder());
        LOG.debug("Using object encoders and decoders");
      }
    }
 else {
      LOG.debug("No encoders and decoders will be used");
    }
  }
 else {
    LOG.debug("Using configured encoders and/or decoders");
  }
}
