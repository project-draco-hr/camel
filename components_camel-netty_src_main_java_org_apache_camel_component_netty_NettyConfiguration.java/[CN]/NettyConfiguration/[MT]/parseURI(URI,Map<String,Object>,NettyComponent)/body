{
  protocol=uri.getScheme();
  if ((!protocol.equalsIgnoreCase("tcp")) && (!protocol.equalsIgnoreCase("udp"))) {
    throw new IllegalArgumentException("Unrecognized Netty protocol: " + protocol + " for uri: "+ uri);
  }
  setHost(uri.getHost());
  setPort(uri.getPort());
  sslHandler=component.resolveAndRemoveReferenceParameter(parameters,"sslHandler",SslHandler.class,null);
  passphrase=component.resolveAndRemoveReferenceParameter(parameters,"passphrase",String.class,null);
  keyStoreFormat=component.getAndRemoveParameter(parameters,"keyStoreFormat",String.class,"JKS");
  securityProvider=component.getAndRemoveParameter(parameters,"securityProvider",String.class,"SunX509");
  keyStoreFile=component.resolveAndRemoveReferenceParameter(parameters,"keyStoreFile",File.class,null);
  trustStoreFile=component.resolveAndRemoveReferenceParameter(parameters,"trustStoreFile",File.class,null);
  List<ChannelDownstreamHandler> referencedEncoders=component.resolveAndRemoveReferenceParameter(parameters,"encoders",List.class,null);
  addToHandlersList(encoders,referencedEncoders,ChannelDownstreamHandler.class);
  List<ChannelUpstreamHandler> referencedDecoders=component.resolveAndRemoveReferenceParameter(parameters,"decoders",List.class,null);
  addToHandlersList(decoders,referencedDecoders,ChannelUpstreamHandler.class);
  if (encoders.isEmpty() && decoders.isEmpty()) {
    encoders.add(component.resolveAndRemoveReferenceParameter(parameters,"encoder",ChannelDownstreamHandler.class,new ObjectEncoder()));
    decoders.add(component.resolveAndRemoveReferenceParameter(parameters,"decoder",ChannelUpstreamHandler.class,new ObjectDecoder()));
  }
  handler=component.resolveAndRemoveReferenceParameter(parameters,"handler",SimpleChannelHandler.class,null);
  Map<String,Object> settings=URISupport.parseParameters(uri);
  if (settings.containsKey("keepAlive")) {
    setKeepAlive(Boolean.valueOf((String)settings.get("keepAlive")));
  }
  if (settings.containsKey("tcpNoDelay")) {
    setTcpNoDelay(Boolean.valueOf((String)settings.get("tcpNoDelay")));
  }
  if (settings.containsKey("broadcast")) {
    setBroadcast(Boolean.valueOf((String)settings.get("broadcast")));
  }
  if (settings.containsKey("reuseAddress")) {
    setReuseAddress(Boolean.valueOf((String)settings.get("reuseAddress")));
  }
  if (settings.containsKey("connectTimeoutMillis")) {
    setConnectTimeoutMillis(Long.valueOf((String)settings.get("connectTimeoutMillis")));
  }
  if (settings.containsKey("sync")) {
    setTcpNoDelay(Boolean.valueOf((String)settings.get("sync")));
  }
  if (settings.containsKey("receiveTimeoutMillis")) {
    setReceiveTimeoutMillis(Long.valueOf((String)settings.get("receiveTimeoutMillis")));
  }
  if (settings.containsKey("sendBufferSize")) {
    setSendBufferSize(Long.valueOf((String)settings.get("sendBufferSize")));
  }
  if (settings.containsKey("receiveBufferSize")) {
    setReceiveBufferSize(Long.valueOf((String)settings.get("receiveBufferSize")));
  }
  if (settings.containsKey("ssl")) {
    setTcpNoDelay(Boolean.valueOf((String)settings.get("ssl")));
  }
  if (settings.containsKey("corePoolSize")) {
    setCorePoolSize(Integer.valueOf((String)settings.get("corePoolSize")));
  }
  if (settings.containsKey("maxPoolSize")) {
    setMaxPoolSize(Integer.valueOf((String)settings.get("maxPoolSize")));
  }
}
