{
  ObjectHelper.notNull(config,"ScpConfiguration");
  try {
    final JSch jsch=new JSch();
    if (ObjectHelper.isNotEmpty(config.getCiphers())) {
      LOG.trace("Using ciphers: {}",config.getCiphers());
      Hashtable<String,String> ciphers=new Hashtable<String,String>();
      ciphers.put("cipher.s2c",config.getCiphers());
      ciphers.put("cipher.c2s",config.getCiphers());
      JSch.setConfig(ciphers);
    }
    if (ObjectHelper.isNotEmpty(config.getPrivateKeyFile())) {
      LOG.trace("Using private keyfile: {}",config.getPrivateKeyFile());
      String pkfp=config.getPrivateKeyFilePassphrase();
      jsch.addIdentity(config.getPrivateKeyFile(),ObjectHelper.isNotEmpty(pkfp) ? pkfp : null);
    }
    String knownHostsFile=config.getKnownHostsFile();
    if (knownHostsFile == null && config.isUseUserKnownHostsFile()) {
      if (userKnownHostFile == null) {
        userKnownHostFile=System.getProperty("user.home") + "/.ssh/known_hosts";
        LOG.info("Known host file not configured, using user known host file: " + userKnownHostFile);
      }
      knownHostsFile=userKnownHostFile;
    }
    jsch.setKnownHosts(ObjectHelper.isEmpty(knownHostsFile) ? null : knownHostsFile);
    session=jsch.getSession(config.getUsername(),config.getHost(),config.getPort());
    session.setTimeout(config.getTimeout());
    session.setUserInfo(new SessionUserInfo(config));
    if (ObjectHelper.isNotEmpty(config.getStrictHostKeyChecking())) {
      LOG.trace("Using StrickHostKeyChecking: {}",config.getStrictHostKeyChecking());
      session.setConfig("StrictHostKeyChecking",config.getStrictHostKeyChecking());
    }
    int timeout=config.getConnectTimeout();
    LOG.debug("Connecting to {} with {} timeout...",config.remoteServerInformation(),timeout > 0 ? (Integer.toString(timeout) + " ms") : "no");
    if (timeout > 0) {
      session.connect(timeout);
    }
 else {
      session.connect();
    }
  }
 catch (  JSchException e) {
    session=null;
    LOG.warn("Could not create ssh session for " + config.remoteServerInformation(),e);
  }
  return session;
}
