{
  boolean minaLogger=configuration.isMinaLogger();
  boolean transferExchange=configuration.isTransferExchange();
  List<IoFilter> filters=configuration.getFilters();
  if (transferExchange) {
    throw new IllegalArgumentException("transferExchange=true is not supported for datagram protocol");
  }
  address=new InetSocketAddress(configuration.getHost(),configuration.getPort());
  final int processorCount=Runtime.getRuntime().availableProcessors() + 1;
  connector=new NioDatagramConnector(processorCount);
  workerPool=new UnorderedThreadPoolExecutor(configuration.getMaximumPoolSize());
  connectorConfig=connector.getSessionConfig();
  connector.getFilterChain().addLast("threadPool",new ExecutorFilter(workerPool));
  if (minaLogger) {
    connector.getFilterChain().addLast("logger",new LoggingFilter());
  }
  appendIoFiltersToChain(filters,connector.getFilterChain());
  if (configuration.getSslContextParameters() != null) {
    LOG.warn("Using datagram protocol, " + configuration.getProtocol() + ", but an SSLContextParameters instance was provided.  SSLContextParameters is only supported on the TCP protocol.");
  }
  configureDataGramCodecFactory("Mina2Producer",connector,configuration);
  connector.setConnectTimeoutMillis(timeout);
}
