{
  LOG.debug("createSocketEndpoint");
  boolean minaLogger=configuration.isMinaLogger();
  long timeout=configuration.getTimeout();
  List<IoFilter> filters=configuration.getFilters();
  address=new InetSocketAddress(configuration.getHost(),configuration.getPort());
  connector=new NioSocketConnector(new NioProcessor(this.getEndpoint().getCamelContext().getExecutorServiceManager().newDefaultThreadPool(this,"MinaSocketConnector")));
  connectorConfig=connector.getSessionConfig();
  connector.getFilterChain().addLast("threadPool",new ExecutorFilter(this.getEndpoint().getCamelContext().getExecutorServiceManager().newDefaultThreadPool(this,"MinaThreadPool")));
  if (minaLogger) {
    connector.getFilterChain().addLast("logger",new LoggingFilter());
  }
  appendIoFiltersToChain(filters,connector.getFilterChain());
  if (configuration.getSslContextParameters() != null) {
    connector.getFilterChain().addFirst("sslFilter",new SslFilter(configuration.getSslContextParameters().createSSLContext(),configuration.isAutoStartTls()));
  }
  configureCodecFactory("Mina2Producer",connector);
  connector.setConnectTimeoutMillis(timeout);
  if (sync) {
    this.getEndpoint().setExchangePattern(ExchangePattern.InOut);
  }
 else {
    this.getEndpoint().setExchangePattern(ExchangePattern.InOnly);
  }
}
