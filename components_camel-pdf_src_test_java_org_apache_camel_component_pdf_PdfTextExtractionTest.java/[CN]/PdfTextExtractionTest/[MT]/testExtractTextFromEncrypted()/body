{
  final String ownerPass="ownerPass";
  final String userPass="userPass";
  AccessPermission accessPermission=new AccessPermission();
  accessPermission.setCanExtractContent(false);
  StandardProtectionPolicy protectionPolicy=new StandardProtectionPolicy(ownerPass,userPass,accessPermission);
  protectionPolicy.setEncryptionKeyLength(128);
  PDDocument document=new PDDocument();
  final String expectedText="Test string";
  PDPage page=new PDPage(PDPage.PAGE_SIZE_A4);
  document.addPage(page);
  PDPageContentStream contentStream=new PDPageContentStream(document,page);
  contentStream.setFont(PDType1Font.HELVETICA,12);
  contentStream.beginText();
  contentStream.moveTextPositionByAmount(20,400);
  contentStream.drawString(expectedText);
  contentStream.endText();
  contentStream.close();
  document.protect(protectionPolicy);
  ByteArrayOutputStream output=new ByteArrayOutputStream();
  document.save(output);
  PDDocument encryptedDocument=PDDocument.load(new ByteArrayInputStream(output.toByteArray()));
  template.sendBodyAndHeader("direct:start",encryptedDocument,PdfHeaderConstants.DECRYPTION_MATERIAL_HEADER_NAME,new StandardDecryptionMaterial(userPass));
  resultEndpoint.setExpectedMessageCount(1);
  resultEndpoint.expectedMessagesMatches(new Predicate(){
    @Override public boolean matches(    Exchange exchange){
      Object body=exchange.getIn().getBody();
      assertThat(body,instanceOf(String.class));
      assertThat((String)body,containsString(expectedText));
      return true;
    }
  }
);
  resultEndpoint.assertIsSatisfied();
  document.isEncrypted();
}
