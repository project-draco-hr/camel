{
  a.expectedMessageCount(1);
  b.expectedMessageCount(0);
  c.expectedMessageCount(0);
  err.expectedMessageCount(errors);
  try {
    template.sendBody(startPoint,"in");
  }
 catch (  RuntimeCamelException e) {
  }
  MockEndpoint.assertIsSatisfied(a,b,c,err);
  List<Exchange> list=a.getReceivedExchanges();
  Exchange exchange=list.get(0);
  Message fault=exchange.getFault();
  assertNotNull("Should have a fault on A",fault);
  if (startPoint.equals("direct:exception")) {
    assertTrue("It should be the IllegalStateException",fault.getBody() instanceof IllegalStateException);
    assertEquals("Fault message","It makes no sense of business logic",((IllegalStateException)(fault.getBody())).getMessage());
  }
 else {
    if (errors == 0) {
      assertTrue("It should be the CamelException",fault.getBody() instanceof CamelException);
      assertEquals("Fault message","ExceptionMessage",((CamelException)(fault.getBody())).getMessage());
    }
 else {
      assertNull("Fault body should be null",fault.getBody());
      CamelException faultex=(CamelException)exchange.getException();
      assertNotNull("Exception body should contain the fault",faultex);
      assertEquals("Fault message","ExceptionMessage",faultex.getMessage());
    }
  }
}
