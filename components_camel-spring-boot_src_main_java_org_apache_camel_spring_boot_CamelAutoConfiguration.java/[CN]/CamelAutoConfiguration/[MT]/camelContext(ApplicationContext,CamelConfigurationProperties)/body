{
  if (ObjectHelper.isNotEmpty(config.getFileConfigurations())) {
    Environment env=applicationContext.getEnvironment();
    if (env instanceof ConfigurableEnvironment) {
      MutablePropertySources sources=((ConfigurableEnvironment)env).getPropertySources();
      if (sources != null) {
        if (!sources.contains("camel-file-configuration")) {
          sources.addFirst(new FilePropertySource("camel-file-configuration",applicationContext,config.getFileConfigurations()));
        }
      }
    }
  }
  CamelContext camelContext=new SpringCamelContext(applicationContext);
  SpringCamelContext.setNoStart(true);
  if (!config.isJmxEnabled()) {
    camelContext.disableJMX();
  }
  if (config.getName() != null) {
    ((SpringCamelContext)camelContext).setName(config.getName());
  }
  if (config.getLogDebugMaxChars() > 0) {
    camelContext.getProperties().put(Exchange.LOG_DEBUG_BODY_MAX_CHARS,"" + config.getLogDebugMaxChars());
  }
  camelContext.setStreamCaching(config.isStreamCachingEnabled());
  camelContext.getStreamCachingStrategy().setAnySpoolRules(config.isStreamCachingAnySpoolRules());
  camelContext.getStreamCachingStrategy().setBufferSize(config.getStreamCachingBufferSize());
  camelContext.getStreamCachingStrategy().setRemoveSpoolDirectoryWhenStopping(config.isStreamCachingRemoveSpoolDirectoryWhenStopping());
  camelContext.getStreamCachingStrategy().setSpoolChiper(config.getStreamCachingSpoolChiper());
  if (config.getStreamCachingSpoolDirectory() != null) {
    camelContext.getStreamCachingStrategy().setSpoolDirectory(config.getStreamCachingSpoolDirectory());
  }
  if (config.getStreamCachingSpoolThreshold() != 0) {
    camelContext.getStreamCachingStrategy().setSpoolThreshold(config.getStreamCachingSpoolThreshold());
  }
  if (config.getStreamCachingSpoolUsedHeapMemoryLimit() != null) {
    StreamCachingStrategy.SpoolUsedHeapMemoryLimit limit;
    if ("Committed".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {
      limit=StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Committed;
    }
 else     if ("Max".equalsIgnoreCase(config.getStreamCachingSpoolUsedHeapMemoryLimit())) {
      limit=StreamCachingStrategy.SpoolUsedHeapMemoryLimit.Max;
    }
 else {
      throw new IllegalArgumentException("Invalid option " + config.getStreamCachingSpoolUsedHeapMemoryLimit() + " must either be Committed or Max");
    }
    camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryLimit(limit);
  }
  if (config.getStreamCachingSpoolUsedHeapMemoryThreshold() != 0) {
    camelContext.getStreamCachingStrategy().setSpoolUsedHeapMemoryThreshold(config.getStreamCachingSpoolUsedHeapMemoryThreshold());
  }
  camelContext.setTracing(config.isTracing());
  camelContext.setMessageHistory(config.isMessageHistory());
  camelContext.setLogExhaustedMessageBody(config.isLogExhaustedMessageBody());
  camelContext.setHandleFault(config.isHandleFault());
  camelContext.setAutoStartup(config.isAutoStartup());
  camelContext.setAllowUseOriginalMessage(config.isAllowUseOriginalMessage());
  if (camelContext.getManagementStrategy().getManagementAgent() != null) {
    camelContext.getManagementStrategy().getManagementAgent().setEndpointRuntimeStatisticsEnabled(config.isEndpointRuntimeStatisticsEnabled());
    camelContext.getManagementStrategy().getManagementAgent().setStatisticsLevel(config.getJmxManagementStatisticsLevel());
    camelContext.getManagementStrategy().getManagementAgent().setManagementNamePattern(config.getJmxManagementNamePattern());
    camelContext.getManagementStrategy().getManagementAgent().setCreateConnector(config.isJmxCreateConnector());
  }
  camelContext.setPackageScanClassResolver(new FatJarPackageScanClassResolver());
  afterPropertiesSet(applicationContext,camelContext);
  return camelContext;
}
