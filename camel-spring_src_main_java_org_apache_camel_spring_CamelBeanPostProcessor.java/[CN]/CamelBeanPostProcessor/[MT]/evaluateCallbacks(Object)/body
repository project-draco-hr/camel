{
  ReflectionUtils.doWithMethods(bean.getClass(),new ReflectionUtils.MethodCallback(){
    @SuppressWarnings("unchecked") public void doWith(    Method method) throws IllegalArgumentException, IllegalAccessException {
      MessageDriven annotation=method.getAnnotation(MessageDriven.class);
      if (annotation != null) {
        Endpoint endpoint=getEndpointInjection(annotation.uri(),annotation.name());
        if (endpoint != null) {
          try {
            Processor processor=createConsumerProcessor(bean,method,endpoint);
            Consumer consumer=endpoint.createConsumer(processor);
            addConsumer(consumer);
          }
 catch (          Exception e) {
            throw new RuntimeCamelException(e);
          }
        }
      }
    }
  }
);
}
