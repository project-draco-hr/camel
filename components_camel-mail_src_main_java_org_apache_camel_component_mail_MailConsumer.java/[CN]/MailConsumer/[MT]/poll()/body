{
  shutdownRunningTask=null;
  pendingExchanges=0;
  int polledMessages=0;
  ensureIsConnected();
  if (store == null || folder == null) {
    throw new IllegalStateException("MailConsumer did not connect properly to the MailStore: " + getEndpoint().getConfiguration().getMailStoreLogInformation());
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Polling mailbox folder: " + getEndpoint().getConfiguration().getMailStoreLogInformation());
  }
  if (getEndpoint().getConfiguration().getFetchSize() == 0) {
    LOG.warn("Fetch size is 0 meaning the configuration is set to poll no new messages at all. Camel will skip this poll.");
    return 0;
  }
  if (!folder.isOpen()) {
    folder.open(Folder.READ_WRITE);
  }
  try {
    int count=folder.getMessageCount();
    if (count > 0) {
      Message[] messages=retrieveMessages();
      if (getEndpoint().getConfiguration().isPeek()) {
        for (        Message message : messages) {
          peekMessage(message);
        }
      }
      polledMessages=processBatch(CastUtils.cast(createExchanges(messages)));
      final MailBoxPostProcessAction postProcessor=getEndpoint().getPostProcessAction();
      if (postProcessor != null) {
        postProcessor.process(folder);
      }
    }
 else     if (count == -1) {
      throw new MessagingException("Folder: " + folder.getFullName() + " is closed");
    }
  }
 catch (  Exception e) {
    handleException(e);
  }
 finally {
    if (getEndpoint().getConfiguration().isCloseFolder() || getEndpoint().getConfiguration().isDisconnect()) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Close mailbox folder {} from {}",folder.getName(),getEndpoint().getConfiguration().getMailStoreLogInformation());
      }
      try {
        if (folder.isOpen()) {
          folder.close(true);
        }
      }
 catch (      Exception e) {
        LOG.debug("Could not close mailbox folder: " + folder.getName() + ". This exception is ignored.",e);
      }
    }
  }
  boolean disconnect=getEndpoint().getConfiguration().isDisconnect();
  if (disconnect) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Disconnecting from {}",getEndpoint().getConfiguration().getMailStoreLogInformation());
    }
    try {
      store.close();
    }
 catch (    Exception e) {
      LOG.debug("Could not disconnect from {}: " + getEndpoint().getConfiguration().getMailStoreLogInformation() + ". This exception is ignored.",e);
    }
    store=null;
    folder=null;
  }
  return polledMessages;
}
