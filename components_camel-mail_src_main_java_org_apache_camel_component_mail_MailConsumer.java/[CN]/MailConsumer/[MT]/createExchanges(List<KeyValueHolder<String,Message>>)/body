{
  Queue<Exchange> answer=new LinkedList<Exchange>();
  int fetchSize=getEndpoint().getConfiguration().getFetchSize();
  int count=fetchSize == -1 ? messages.size() : Math.min(fetchSize,messages.size());
  if (LOG.isDebugEnabled()) {
    LOG.debug("Fetching {} messages. Total {} messages.",count,messages.size());
  }
  for (int i=0; i < count; i++) {
    try {
      KeyValueHolder<String,Message> holder=messages.get(i);
      String key=holder.getKey();
      Message message=holder.getValue();
      if (LOG.isTraceEnabled()) {
        LOG.trace("Mail #{} is of type: {} - {}",new Object[]{i,ObjectHelper.classCanonicalName(message),message});
      }
      if (!message.getFlags().contains(Flags.Flag.DELETED)) {
        Exchange exchange=getEndpoint().createExchange(message);
        if (getEndpoint().getConfiguration().isMapMailMessage()) {
          LOG.trace("Mapping #{} from javax.mail.Message to Camel MailMessage",i);
          exchange.getIn().getBody();
          exchange.getIn().getHeaders();
          exchange.getIn().getAttachments();
        }
        exchange.setProperty(MAIL_MESSAGE_UID,key);
        answer.add(exchange);
      }
 else {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Skipping message as it was flagged as deleted: {}",MailUtils.dumpMessage(message));
        }
      }
    }
 catch (    MessagingException e) {
      if (skipFailedMessage) {
        LOG.debug("Skipping failed message at index " + i + " due "+ e.getMessage(),e);
      }
 else       if (handleFailedMessage) {
        handleException(e);
      }
 else {
        throw e;
      }
    }
  }
  return answer;
}
