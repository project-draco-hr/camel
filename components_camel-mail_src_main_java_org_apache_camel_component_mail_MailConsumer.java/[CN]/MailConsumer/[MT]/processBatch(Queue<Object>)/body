{
  int total=exchanges.size();
  if (maxMessagesPerPoll > 0 && total > maxMessagesPerPoll) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Limiting to maximum messages to poll " + maxMessagesPerPoll + " as there was "+ total+ " messages in this poll.");
    }
    total=maxMessagesPerPoll;
  }
  for (int index=0; index < total && isBatchAllowed(); index++) {
    Exchange exchange=ObjectHelper.cast(Exchange.class,exchanges.poll());
    exchange.setProperty(Exchange.BATCH_INDEX,index);
    exchange.setProperty(Exchange.BATCH_SIZE,total);
    exchange.setProperty(Exchange.BATCH_COMPLETE,index == total - 1);
    pendingExchanges=total - index - 1;
    final Message mail=exchange.getIn(MailMessage.class).getOriginalMessage();
    exchange.addOnCompletion(new Synchronization(){
      public void onComplete(      Exchange exchange){
        processCommit(mail,exchange);
      }
      public void onFailure(      Exchange exchange){
        processRollback(mail,exchange);
      }
      @Override public String toString(){
        return "MailConsumerOnCompletion";
      }
    }
);
    processExchange(exchange);
  }
}
