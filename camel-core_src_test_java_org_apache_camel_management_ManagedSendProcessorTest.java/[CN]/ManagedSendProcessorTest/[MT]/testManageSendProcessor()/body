{
  if (isPlatform("aix")) {
    return;
  }
  MockEndpoint result=getMockEndpoint("mock:result");
  result.expectedMessageCount(1);
  MockEndpoint foo=getMockEndpoint("mock:foo");
  foo.expectedMessageCount(0);
  template.sendBody("direct:start","Hello World");
  assertMockEndpointsSatisfied();
  MBeanServer mbeanServer=getMBeanServer();
  ObjectName on=ObjectName.getInstance("org.apache.camel:context=camel-1,type=processors,name=\"mysend\"");
  String routeId=(String)mbeanServer.getAttribute(on,"RouteId");
  assertEquals("route1",routeId);
  String camelId=(String)mbeanServer.getAttribute(on,"CamelId");
  assertEquals("camel-1",camelId);
  String state=(String)mbeanServer.getAttribute(on,"State");
  assertEquals(ServiceStatus.Started.name(),state);
  String destination=(String)mbeanServer.getAttribute(on,"Destination");
  assertEquals("mock://result",destination);
  String pattern=(String)mbeanServer.getAttribute(on,"MessageExchangePattern");
  assertNull(pattern);
  TabularData data=(TabularData)mbeanServer.invoke(on,"explain",new Object[]{false},new String[]{"boolean"});
  assertNotNull(data);
  assertEquals(2,data.size());
  data=(TabularData)mbeanServer.invoke(on,"explain",new Object[]{true},new String[]{"boolean"});
  assertNotNull(data);
  assertEquals(5,data.size());
  String json=(String)mbeanServer.invoke(on,"informationJson",null,null);
  assertNotNull(json);
  assertTrue(json.contains("\"description\": \"Sends the message to a static endpoint\""));
  assertTrue(json.contains(" \"uri\": { \"kind\": \"attribute\", \"required\": \"false\", \"type\": \"string\", \"javaType\": \"java.lang.String\"," + " \"deprecated\": \"false\", \"value\": \"mock:result\""));
}
