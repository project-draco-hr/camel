{
  when(exchange.getIn()).thenReturn(inMessage);
  when(inMessage.getBody(String.class)).thenReturn(MESSAGE);
  when(inMessage.getHeader(WebsocketConstants.SEND_TO_ALL,false,Boolean.class)).thenReturn(false);
  when(inMessage.getHeader(WebsocketConstants.CONNECTION_KEY,String.class)).thenReturn(null);
  try {
    websocketProducer.process(exchange);
    fail("Exception expected");
  }
 catch (  Exception e) {
    assertEquals(IllegalArgumentException.class,e.getClass());
    assertNotNull(e.getMessage());
    assertNull(e.getCause());
  }
  InOrder inOrder=inOrder(endpoint,store,connection,defaultWebsocket1,defaultWebsocket2,exchange,inMessage);
  inOrder.verify(exchange,times(1)).getIn();
  inOrder.verify(inMessage,times(1)).getMandatoryBody(String.class);
  inOrder.verify(inMessage,times(1)).getHeader(WebsocketConstants.SEND_TO_ALL,false,Boolean.class);
  inOrder.verify(inMessage,times(1)).getHeader(WebsocketConstants.CONNECTION_KEY,String.class);
  inOrder.verifyNoMoreInteractions();
}
