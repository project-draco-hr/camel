{
  when(exchange.getIn()).thenReturn(inMessage);
  when(inMessage.getMandatoryBody()).thenReturn(MESSAGE);
  when(inMessage.getHeader(WebsocketConstants.SEND_TO_ALL,false,Boolean.class)).thenReturn(true);
  when(store.getAll()).thenReturn(sockets);
  when(defaultWebsocket1.getSession()).thenReturn(session);
  when(defaultWebsocket2.getSession()).thenReturn(session);
  when(session.isOpen()).thenReturn(true);
  when(session.getRemote()).thenReturn(remoteEndpoint);
  websocketProducer.process(exchange);
  InOrder inOrder=inOrder(endpoint,store,session,defaultWebsocket1,defaultWebsocket2,exchange,inMessage,remoteEndpoint);
  inOrder.verify(exchange,times(1)).getIn();
  inOrder.verify(inMessage,times(1)).getMandatoryBody();
  inOrder.verify(inMessage,times(1)).getHeader(WebsocketConstants.SEND_TO_ALL,false,Boolean.class);
  inOrder.verify(store,times(1)).getAll();
  inOrder.verify(defaultWebsocket1,times(1)).getSession();
  inOrder.verify(session,times(1)).isOpen();
  inOrder.verify(defaultWebsocket1,times(1)).getSession();
  inOrder.verify(remoteEndpoint,times(1)).sendStringByFuture(MESSAGE);
  inOrder.verify(defaultWebsocket2,times(1)).getSession();
  inOrder.verify(session,times(1)).isOpen();
  inOrder.verify(defaultWebsocket2,times(1)).getSession();
  inOrder.verify(remoteEndpoint,times(1)).sendStringByFuture(MESSAGE);
  inOrder.verify(endpoint,times(1)).getSendTimeout();
  inOrder.verifyNoMoreInteractions();
}
