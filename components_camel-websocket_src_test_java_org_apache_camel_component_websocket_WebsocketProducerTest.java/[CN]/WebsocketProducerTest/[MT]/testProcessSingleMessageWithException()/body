{
  when(exchange.getIn()).thenReturn(inMessage);
  when(inMessage.getMandatoryBody()).thenReturn(MESSAGE);
  when(inMessage.getHeader(WebsocketConstants.SEND_TO_ALL,false,Boolean.class)).thenReturn(false);
  when(inMessage.getHeader(WebsocketConstants.CONNECTION_KEY,String.class)).thenReturn(SESSION_KEY);
  when(store.get(SESSION_KEY)).thenReturn(defaultWebsocket1);
  when(defaultWebsocket1.getSession()).thenReturn(session);
  when(session.isOpen()).thenReturn(true);
  when(session.getRemote()).thenReturn(remoteEndpoint);
  doThrow(exception).when(remoteEndpoint).sendString(MESSAGE);
  try {
    websocketProducer.process(exchange);
    fail("Exception expected");
  }
 catch (  IOException ioe) {
    assertEquals(exception,ioe);
  }
  InOrder inOrder=inOrder(endpoint,store,session,defaultWebsocket1,defaultWebsocket2,exchange,inMessage,remoteEndpoint);
  inOrder.verify(exchange,times(1)).getIn();
  inOrder.verify(inMessage,times(1)).getMandatoryBody();
  inOrder.verify(inMessage,times(1)).getHeader(WebsocketConstants.SEND_TO_ALL,false,Boolean.class);
  inOrder.verify(inMessage,times(1)).getHeader(WebsocketConstants.CONNECTION_KEY,String.class);
  inOrder.verify(store,times(1)).get(SESSION_KEY);
  inOrder.verify(defaultWebsocket1,times(1)).getSession();
  inOrder.verify(session,times(1)).isOpen();
  inOrder.verify(defaultWebsocket1,times(1)).getSession();
  inOrder.verify(remoteEndpoint,times(1)).sendString(MESSAGE);
  inOrder.verifyNoMoreInteractions();
}
