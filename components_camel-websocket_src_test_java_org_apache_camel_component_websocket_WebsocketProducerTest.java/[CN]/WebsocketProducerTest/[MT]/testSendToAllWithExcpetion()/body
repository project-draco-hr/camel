{
  when(store.getAll()).thenReturn(sockets);
  when(defaultWebsocket1.getSession()).thenReturn(session);
  when(defaultWebsocket2.getSession()).thenReturn(session);
  when(session.getRemote()).thenReturn(remoteEndpoint);
  doThrow(exception).when(remoteEndpoint).sendString(MESSAGE);
  when(session.isOpen()).thenReturn(true);
  try {
    websocketProducer.sendToAll(store,MESSAGE,exchange);
    fail("Exception expected");
  }
 catch (  Exception e) {
    assertEquals(exception,e.getCause());
  }
  InOrder inOrder=inOrder(store,session,defaultWebsocket1,defaultWebsocket2,remoteEndpoint);
  inOrder.verify(store,times(1)).getAll();
  inOrder.verify(defaultWebsocket1,times(1)).getSession();
  inOrder.verify(session,times(1)).isOpen();
  inOrder.verify(defaultWebsocket1,times(1)).getSession();
  inOrder.verify(remoteEndpoint,times(1)).sendString(MESSAGE);
  inOrder.verify(defaultWebsocket2,times(1)).getSession();
  inOrder.verify(session,times(1)).isOpen();
  inOrder.verify(defaultWebsocket2,times(1)).getSession();
  inOrder.verify(remoteEndpoint,times(1)).sendString(MESSAGE);
  inOrder.verifyNoMoreInteractions();
}
