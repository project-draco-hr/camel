{
  log.trace("Service: {}",request);
  HttpConsumer consumer=getServletResolveConsumerStrategy().resolve(request,getConsumers());
  if (consumer == null) {
    log.debug("No consumer to service request {}",request);
    response.sendError(HttpServletResponse.SC_NOT_FOUND);
    return;
  }
  if (consumer.isSuspended()) {
    log.debug("Consumer suspended, cannot service request {}",request);
    response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);
    return;
  }
  if (consumer.getEndpoint().getHttpMethodRestrict() != null && !consumer.getEndpoint().getHttpMethodRestrict().equals(request.getMethod())) {
    response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED);
    return;
  }
  if ("TRACE".equals(request.getMethod()) && !consumer.isTraceEnabled()) {
    response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED);
    return;
  }
  if (!(consumer instanceof WebsocketConsumer)) {
    log.debug("Consumer not supporting websocket {}",request);
    response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);
    return;
  }
  log.debug("Dispatching to Websocket Consumer at {}",consumer.getPath());
  ((WebsocketConsumer)consumer).service(request,response,enableEventsResending);
}
