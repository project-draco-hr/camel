{
  final List<String> withNullableArgsList;
  if (!nullableArguments.isEmpty()) {
    withNullableArgsList=new ArrayList<>(argNames);
    withNullableArgsList.addAll(nullableArguments);
  }
 else {
    withNullableArgsList=null;
  }
  List<ApiMethod> result=new ArrayList<>();
  List<ApiMethod> extraArgs=null;
  List<ApiMethod> nullArgs=null;
  for (  ApiMethod method : methods) {
    final List<String> methodArgs=method.getArgNames();
switch (matchType) {
case EXACT:
      if (methodArgs.containsAll(argNames) && argNames.containsAll(methodArgs)) {
        result.add(method);
      }
    break;
case SUBSET:
  if (methodArgs.containsAll(argNames)) {
    result.add(method);
  }
break;
default :
case SUPER_SET:
if (argNames.containsAll(methodArgs)) {
if (methodArgs.containsAll(argNames)) {
  result.add(method);
}
 else if (result.isEmpty()) {
  if (extraArgs == null) {
    extraArgs=new ArrayList<>();
  }
  extraArgs.add(method);
}
}
 else if (result.isEmpty() && extraArgs != null && extraArgs.isEmpty()) {
if (withNullableArgsList != null && withNullableArgsList.containsAll(methodArgs)) {
  if (nullArgs == null) {
    nullArgs=new ArrayList<>();
  }
  nullArgs.add(method);
}
}
break;
}
}
List<ApiMethod> methodList=result.isEmpty() ? (extraArgs != null && extraArgs.isEmpty()) ? nullArgs : extraArgs : result;
return methodList != null ? Collections.unmodifiableList(methodList) : Collections.emptyList();
}
