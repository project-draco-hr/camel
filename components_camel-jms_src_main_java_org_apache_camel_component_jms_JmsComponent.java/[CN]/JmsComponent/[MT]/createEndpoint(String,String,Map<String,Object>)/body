{
  boolean pubSubDomain=false;
  boolean tempDestination=false;
  if (remaining.startsWith(JmsConfiguration.QUEUE_PREFIX)) {
    pubSubDomain=false;
    remaining=removeStartingCharacters(remaining.substring(JmsConfiguration.QUEUE_PREFIX.length()),'/');
  }
 else   if (remaining.startsWith(JmsConfiguration.TOPIC_PREFIX)) {
    pubSubDomain=true;
    remaining=removeStartingCharacters(remaining.substring(JmsConfiguration.TOPIC_PREFIX.length()),'/');
  }
 else   if (remaining.startsWith(JmsConfiguration.TEMP_QUEUE_PREFIX)) {
    pubSubDomain=false;
    tempDestination=true;
    remaining=removeStartingCharacters(remaining.substring(JmsConfiguration.TEMP_QUEUE_PREFIX.length()),'/');
  }
 else   if (remaining.startsWith(JmsConfiguration.TEMP_TOPIC_PREFIX)) {
    pubSubDomain=true;
    tempDestination=true;
    remaining=removeStartingCharacters(remaining.substring(JmsConfiguration.TEMP_TOPIC_PREFIX.length()),'/');
  }
  final String subject=convertPathToActualDestination(remaining,parameters);
  JmsConfiguration newConfiguration=getConfiguration().copy();
  JmsEndpoint endpoint;
  if (pubSubDomain) {
    if (tempDestination) {
      endpoint=createTemporaryTopicEndpoint(uri,this,subject,newConfiguration);
    }
 else {
      endpoint=createTopicEndpoint(uri,this,subject,newConfiguration);
    }
  }
 else {
    QueueBrowseStrategy strategy=getQueueBrowseStrategy();
    if (tempDestination) {
      endpoint=createTemporaryQueueEndpoint(uri,this,subject,newConfiguration,strategy);
    }
 else {
      endpoint=createQueueEndpoint(uri,this,subject,newConfiguration,strategy);
    }
  }
  ConnectionFactory cf=resolveAndRemoveReferenceParameter(parameters,"connectionFactory",ConnectionFactory.class);
  if (cf != null) {
    endpoint.getConfiguration().setConnectionFactory(cf);
  }
  String cfUsername=getAndRemoveParameter(parameters,"username",String.class,getConfiguration().getUsername());
  String cfPassword=getAndRemoveParameter(parameters,"password",String.class,getConfiguration().getPassword());
  if (cfUsername != null && cfPassword != null) {
    cf=endpoint.getConfiguration().getConnectionFactory();
    ObjectHelper.notNull(cf,"ConnectionFactory");
    LOG.debug("Wrapping existing ConnectionFactory with UserCredentialsConnectionFactoryAdapter using username: {} and password: ******",cfUsername);
    UserCredentialsConnectionFactoryAdapter ucfa=new UserCredentialsConnectionFactoryAdapter();
    ucfa.setTargetConnectionFactory(cf);
    ucfa.setPassword(cfPassword);
    ucfa.setUsername(cfUsername);
    endpoint.getConfiguration().setConnectionFactory(ucfa);
  }
 else {
    if (cfUsername != null || cfPassword != null) {
      if (cfUsername == null) {
        throw new IllegalArgumentException("Username must also be provided when using username/password as credentials.");
      }
 else {
        throw new IllegalArgumentException("Password must also be provided when using username/password as credentials.");
      }
    }
  }
  String strategyVal=getAndRemoveParameter(parameters,KEY_FORMAT_STRATEGY_PARAM,String.class);
  JmsKeyFormatStrategy strategy=resolveStandardJmsKeyFormatStrategy(strategyVal);
  if (strategy != null) {
    endpoint.setJmsKeyFormatStrategy(strategy);
  }
 else {
    parameters.put(KEY_FORMAT_STRATEGY_PARAM,strategyVal);
    endpoint.setJmsKeyFormatStrategy(resolveAndRemoveReferenceParameter(parameters,KEY_FORMAT_STRATEGY_PARAM,JmsKeyFormatStrategy.class));
  }
  MessageListenerContainerFactory messageListenerContainerFactory=resolveAndRemoveReferenceParameter(parameters,"messageListenerContainerFactoryRef",MessageListenerContainerFactory.class);
  if (messageListenerContainerFactory == null) {
    messageListenerContainerFactory=resolveAndRemoveReferenceParameter(parameters,"messageListenerContainerFactory",MessageListenerContainerFactory.class);
  }
  if (messageListenerContainerFactory != null) {
    endpoint.setMessageListenerContainerFactory(messageListenerContainerFactory);
  }
  setProperties(endpoint.getConfiguration(),parameters);
  endpoint.setHeaderFilterStrategy(getHeaderFilterStrategy());
  return endpoint;
}
