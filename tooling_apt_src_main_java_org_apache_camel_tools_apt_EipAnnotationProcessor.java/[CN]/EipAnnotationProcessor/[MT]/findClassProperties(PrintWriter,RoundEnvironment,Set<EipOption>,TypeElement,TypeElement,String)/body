{
  while (true) {
    List<VariableElement> fieldElements=ElementFilter.fieldsIn(classElement.getEnclosedElements());
    for (    VariableElement fieldElement : fieldElements) {
      String fieldName=fieldElement.getSimpleName().toString();
      XmlAttribute attribute=fieldElement.getAnnotation(XmlAttribute.class);
      if (attribute != null) {
        boolean skip=processAttribute(roundEnv,originalClassType,classElement,fieldElement,fieldName,attribute,eipOptions,prefix);
        if (skip) {
          continue;
        }
      }
      XmlValue value=fieldElement.getAnnotation(XmlValue.class);
      if (value != null) {
        processValue(roundEnv,originalClassType,classElement,fieldElement,fieldName,value,eipOptions,prefix);
      }
      XmlElements elements=fieldElement.getAnnotation(XmlElements.class);
      if (elements != null) {
        processElements(roundEnv,classElement,elements,fieldElement,eipOptions,prefix);
      }
      XmlElement element=fieldElement.getAnnotation(XmlElement.class);
      if (element != null) {
        processElement(roundEnv,classElement,element,fieldElement,eipOptions,prefix);
      }
      XmlElementRef elementRef=fieldElement.getAnnotation(XmlElementRef.class);
      if (elementRef != null) {
        processOutputs(roundEnv,originalClassType,elementRef,fieldElement,fieldName,eipOptions,prefix);
        processRefExpression(roundEnv,originalClassType,classElement,elementRef,fieldElement,fieldName,eipOptions,prefix);
      }
    }
    if ("OptionalIdentifiedDefinition".equals(classElement.getSimpleName().toString())) {
      processIdentified(roundEnv,originalClassType,classElement,eipOptions,prefix);
    }
 else     if ("RouteDefinition".equals(classElement.getSimpleName().toString())) {
      processRoute(roundEnv,originalClassType,classElement,eipOptions,prefix);
    }
    TypeElement baseTypeElement=null;
    TypeMirror superclass=classElement.getSuperclass();
    if (superclass != null) {
      String superClassName=canonicalClassName(superclass.toString());
      baseTypeElement=findTypeElement(roundEnv,superClassName);
    }
    if (baseTypeElement != null) {
      classElement=baseTypeElement;
    }
 else {
      break;
    }
  }
}
