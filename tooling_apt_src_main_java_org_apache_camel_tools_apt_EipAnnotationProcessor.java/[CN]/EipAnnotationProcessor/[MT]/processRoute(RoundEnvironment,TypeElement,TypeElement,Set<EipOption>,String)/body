{
  Elements elementUtils=processingEnv.getElementUtils();
  String docComment=findJavaDoc(elementUtils,null,"group",classElement,true);
  EipOption ep=new EipOption("group","attribute","java.lang.String",false,"",docComment,false,false,null,false,null);
  eipOptions.add(ep);
  docComment=findJavaDoc(elementUtils,null,"streamCache",classElement,true);
  ep=new EipOption("streamCache","attribute","java.lang.String",false,"",docComment,false,false,null,false,null);
  eipOptions.add(ep);
  docComment=findJavaDoc(elementUtils,null,"trace",classElement,true);
  ep=new EipOption("trace","attribute","java.lang.String",false,"",docComment,false,false,null,false,null);
  eipOptions.add(ep);
  docComment=findJavaDoc(elementUtils,null,"messageHistory",classElement,true);
  ep=new EipOption("messageHistory","attribute","java.lang.String",false,"",docComment,false,false,null,false,null);
  eipOptions.add(ep);
  docComment=findJavaDoc(elementUtils,null,"handleFault",classElement,true);
  ep=new EipOption("handleFault","attribute","java.lang.String",false,"",docComment,false,false,null,false,null);
  eipOptions.add(ep);
  docComment=findJavaDoc(elementUtils,null,"delayer",classElement,true);
  ep=new EipOption("delayer","attribute","java.lang.String",false,"",docComment,false,false,null,false,null);
  eipOptions.add(ep);
  docComment=findJavaDoc(elementUtils,null,"autoStartup",classElement,true);
  ep=new EipOption("autoStartup","attribute","java.lang.String",false,"",docComment,false,false,null,false,null);
  eipOptions.add(ep);
  docComment=findJavaDoc(elementUtils,null,"startupOrder",classElement,true);
  ep=new EipOption("startupOrder","attribute","java.lang.Integer",false,"",docComment,false,false,null,false,null);
  eipOptions.add(ep);
  docComment=findJavaDoc(elementUtils,null,"errorHandlerRef",classElement,true);
  ep=new EipOption("errorHandlerRef","attribute","java.lang.String",false,"",docComment,false,false,null,false,null);
  eipOptions.add(ep);
  docComment=findJavaDoc(elementUtils,null,"routePolicyRef",classElement,true);
  ep=new EipOption("routePolicyRef","attribute","java.lang.String",false,"",docComment,false,false,null,false,null);
  eipOptions.add(ep);
  Set<String> enums=new LinkedHashSet<String>();
  enums.add("Default");
  enums.add("Defer");
  docComment=findJavaDoc(elementUtils,null,"shutdownRoute",classElement,true);
  ep=new EipOption("shutdownRoute","attribute","org.apache.camel.ShutdownRoute",false,"",docComment,false,true,enums,false,null);
  eipOptions.add(ep);
  enums=new LinkedHashSet<String>();
  enums.add("CompleteCurrentTaskOnly");
  enums.add("CompleteAllTasks");
  docComment=findJavaDoc(elementUtils,null,"shutdownRunningTask",classElement,true);
  ep=new EipOption("shutdownRunningTask","attribute","org.apache.camel.ShutdownRunningTask",false,"",docComment,false,true,enums,false,null);
  eipOptions.add(ep);
  Set<String> oneOfTypes=new TreeSet<String>();
  oneOfTypes.add("from");
  docComment=findJavaDoc(elementUtils,null,"inputs",classElement,true);
  ep=new EipOption("inputs","element","java.util.List<org.apache.camel.model.FromDefinition>",true,"",docComment,false,false,null,true,oneOfTypes);
  eipOptions.add(ep);
  oneOfTypes=new TreeSet<String>();
  Set<TypeElement> children=new LinkedHashSet<TypeElement>();
  for (  String superclass : ONE_OF_OUTPUTS) {
    findTypeElementChildren(roundEnv,children,superclass);
  }
  for (  TypeElement child : children) {
    XmlRootElement rootElement=child.getAnnotation(XmlRootElement.class);
    if (rootElement != null) {
      String childName=rootElement.name();
      if (childName != null) {
        oneOfTypes.add(childName);
      }
    }
  }
  oneOfTypes.remove("route");
  docComment=findJavaDoc(elementUtils,null,"outputs",classElement,true);
  ep=new EipOption("outputs","element","java.util.List<org.apache.camel.model.ProcessorDefinition<?>>",true,"",docComment,false,false,null,true,oneOfTypes);
  eipOptions.add(ep);
}
