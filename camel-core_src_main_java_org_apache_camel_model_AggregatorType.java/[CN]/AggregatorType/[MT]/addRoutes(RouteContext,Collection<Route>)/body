{
  Endpoint from=routeContext.getEndpoint();
  final Processor processor=routeContext.createProcessor(this);
  final Aggregator service;
  if (aggregationCollection != null) {
    service=new Aggregator(from,processor,aggregationCollection);
  }
 else {
    AggregationStrategy strategy=getAggregationStrategy();
    if (strategy == null && strategyRef != null) {
      strategy=routeContext.lookup(strategyRef,AggregationStrategy.class);
    }
    if (strategy == null) {
      strategy=new UseLatestAggregationStrategy();
    }
    Expression aggregateExpression=getExpression().createExpression(routeContext);
    Predicate predicate=null;
    if (completedPredicate != null) {
      predicate=completedPredicate.createPredicate(routeContext);
    }
    if (predicate != null) {
      service=new Aggregator(from,processor,aggregateExpression,strategy,predicate);
    }
 else {
      service=new Aggregator(from,processor,aggregateExpression,strategy);
    }
  }
  if (batchSize != null) {
    service.setBatchSize(batchSize);
  }
  if (batchTimeout != null) {
    service.setBatchTimeout(batchTimeout);
  }
  Route route=new Route<Exchange>(from,service){
    @Override public String toString(){
      return "AggregatorRoute[" + getEndpoint() + " -> "+ processor+ "]";
    }
  }
;
  routes.add(route);
}
