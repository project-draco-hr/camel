{
  Exchange exchange=consumer.endpoint.createRabbitExchange(envelope,properties,body);
  mergeAmqpProperties(exchange,properties);
  boolean sendReply=properties.getReplyTo() != null;
  if (sendReply && !exchange.getPattern().isOutCapable()) {
    exchange.setPattern(ExchangePattern.InOut);
  }
  log.trace("Created exchange [exchange={}]",exchange);
  long deliveryTag=envelope.getDeliveryTag();
  try {
    consumer.getProcessor().process(exchange);
  }
 catch (  Exception e) {
    exchange.setException(e);
  }
  Message msg;
  if (exchange.hasOut()) {
    msg=exchange.getOut();
  }
 else {
    msg=exchange.getIn();
  }
  if (!exchange.isFailed()) {
    if (sendReply && exchange.getPattern().isOutCapable()) {
      AMQP.BasicProperties replyProps=new AMQP.BasicProperties.Builder().headers(msg.getHeaders()).correlationId(properties.getCorrelationId()).build();
      channel.basicPublish("",properties.getReplyTo(),replyProps,msg.getBody(byte[].class));
    }
    if (!consumer.endpoint.isAutoAck()) {
      log.trace("Acknowledging receipt [delivery_tag={}]",deliveryTag);
      channel.basicAck(deliveryTag,false);
    }
  }
 else {
    boolean isRequeueHeaderSet=msg.getHeader(RabbitMQConstants.REQUEUE,false,boolean.class);
    if (deliveryTag != 0 && !consumer.endpoint.isAutoAck()) {
      log.trace("Rejecting receipt [delivery_tag={}] with requeue={}",deliveryTag,isRequeueHeaderSet);
      if (isRequeueHeaderSet) {
        channel.basicReject(deliveryTag,true);
      }
 else {
        channel.basicReject(deliveryTag,false);
      }
    }
    if (exchange.getException() != null) {
      getExceptionHandler().handleException("Error processing exchange",exchange,exchange.getException());
    }
  }
}
