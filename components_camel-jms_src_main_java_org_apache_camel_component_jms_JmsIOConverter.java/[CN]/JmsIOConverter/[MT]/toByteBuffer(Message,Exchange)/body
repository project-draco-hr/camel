{
  if (message instanceof TextMessage) {
    final String text=((TextMessage)message).getText();
    return NIOConverter.toByteBuffer(text,exchange);
  }
  if (message instanceof BytesMessage) {
    final BytesMessage bmsg=(BytesMessage)message;
    final int len=(int)bmsg.getBodyLength();
    final byte[] data=new byte[len];
    bmsg.readBytes(data,len);
    return NIOConverter.toByteBuffer(data);
  }
  if (message instanceof StreamMessage) {
    final StreamMessage msg=(StreamMessage)message;
    final ByteArrayOutputStream bytesOut=new ByteArrayOutputStream();
    final DataOutputStream dataOut=new DataOutputStream(bytesOut);
    try {
      while (true) {
        final Object obj=msg.readObject();
        writeData(dataOut,obj);
      }
    }
 catch (    MessageEOFException e) {
    }
    dataOut.close();
    return NIOConverter.toByteBuffer(bytesOut.toByteArray());
  }
  if (message instanceof MapMessage) {
    final MapMessage msg=(MapMessage)message;
    final ByteArrayOutputStream bytesOut=new ByteArrayOutputStream();
    final DataOutputStream dataOut=new DataOutputStream(bytesOut);
    for (final Enumeration en=msg.getMapNames(); en.hasMoreElements(); ) {
      final Object obj=msg.getObject(en.nextElement().toString());
      writeData(dataOut,obj);
    }
    dataOut.close();
    return NIOConverter.toByteBuffer(bytesOut.toByteArray());
  }
  if (message instanceof ObjectMessage) {
    ObjectMessage objMessage=(ObjectMessage)message;
    Object object=objMessage.getObject();
    ByteArrayOutputStream bytesOut=new ByteArrayOutputStream();
    ObjectOutputStream objectOut=new ObjectOutputStream(bytesOut);
    objectOut.writeObject(object);
    objectOut.close();
    return NIOConverter.toByteBuffer(bytesOut.toByteArray());
  }
  return null;
}
