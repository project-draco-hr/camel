{
  request=(HttpRequest)messageEvent.getMessage();
  LOG.debug("Message received: {}",request);
  if (consumer.isSuspended()) {
    LOG.debug("Consumer suspended, cannot service request {}",request);
    HttpResponse response=new DefaultHttpResponse(HTTP_1_1,SERVICE_UNAVAILABLE);
    response.setChunked(false);
    response.headers().set(Exchange.CONTENT_TYPE,"text/plain");
    response.headers().set(Exchange.CONTENT_LENGTH,0);
    response.setContent(ChannelBuffers.copiedBuffer(new byte[]{}));
    messageEvent.getChannel().write(response);
    return;
  }
  if ("OPTIONS".equals(request.getMethod().getName())) {
    String s;
    if (consumer.getEndpoint().getHttpMethodRestrict() != null) {
      s="OPTIONS," + consumer.getEndpoint().getHttpMethodRestrict();
    }
 else {
      s="GET,HEAD,POST,PUT,DELETE,TRACE,OPTIONS,CONNECT,PATCH";
    }
    HttpResponse response=new DefaultHttpResponse(HTTP_1_1,OK);
    response.setChunked(false);
    response.headers().set("Allow",s);
    response.headers().set(Exchange.CONTENT_TYPE,"text/plain");
    response.headers().set(Exchange.CONTENT_LENGTH,0);
    messageEvent.getChannel().write(response);
    return;
  }
  if (consumer.getEndpoint().getHttpMethodRestrict() != null && !consumer.getEndpoint().getHttpMethodRestrict().contains(request.getMethod().getName())) {
    HttpResponse response=new DefaultHttpResponse(HTTP_1_1,METHOD_NOT_ALLOWED);
    response.setChunked(false);
    response.headers().set(Exchange.CONTENT_TYPE,"text/plain");
    response.headers().set(Exchange.CONTENT_LENGTH,0);
    response.setContent(ChannelBuffers.copiedBuffer(new byte[]{}));
    messageEvent.getChannel().write(response);
    return;
  }
  if ("TRACE".equals(request.getMethod().getName()) && !consumer.getEndpoint().isTraceEnabled()) {
    HttpResponse response=new DefaultHttpResponse(HTTP_1_1,METHOD_NOT_ALLOWED);
    response.setChunked(false);
    response.headers().set(Exchange.CONTENT_TYPE,"text/plain");
    response.headers().set(Exchange.CONTENT_LENGTH,0);
    response.setContent(ChannelBuffers.copiedBuffer(new byte[]{}));
    messageEvent.getChannel().write(response);
    return;
  }
  if (!request.headers().names().contains(HttpHeaders.Names.HOST)) {
    HttpResponse response=new DefaultHttpResponse(HTTP_1_1,BAD_REQUEST);
    response.setChunked(false);
    response.headers().set(Exchange.CONTENT_TYPE,"text/plain");
    response.headers().set(Exchange.CONTENT_LENGTH,0);
    response.setContent(ChannelBuffers.copiedBuffer(new byte[]{}));
    messageEvent.getChannel().write(response);
    return;
  }
  NettyHttpSecurityConfiguration security=consumer.getEndpoint().getSecurityConfiguration();
  if (security != null && security.isAuthenticate() && "Basic".equalsIgnoreCase(security.getConstraint())) {
    String url=request.getUri();
    if (url.contains("?")) {
      url=ObjectHelper.before(url,"?");
    }
    URI uri=new URI(request.getUri());
    String target=uri.getPath();
    String path=consumer.getConfiguration().getPath();
    if (path != null && target.startsWith(path)) {
      target=target.substring(path.length());
    }
    String roles;
    if (security.getSecurityConstraint() != null) {
      roles=security.getSecurityConstraint().restricted(target);
    }
 else {
      roles="*";
    }
    if (roles != null) {
      HttpPrincipal principal=extractBasicAuthSubject(request);
      Subject subject=null;
      boolean inRole=true;
      if (principal != null) {
        subject=authenticate(security.getSecurityAuthenticator(),security.getLoginDeniedLoggingLevel(),principal);
        if (subject != null) {
          String userRoles=security.getSecurityAuthenticator().getUserRoles(subject);
          inRole=matchesRoles(roles,userRoles);
        }
      }
      if (principal == null || subject == null || !inRole) {
        if (principal == null) {
          LOG.debug("Http Basic Auth required for resource: {}",url);
        }
 else         if (subject == null) {
          LOG.debug("Http Basic Auth not authorized for username: {}",principal.getUsername());
        }
 else {
          LOG.debug("Http Basic Auth not in role for username: {}",principal.getUsername());
        }
        HttpResponse response=new DefaultHttpResponse(HTTP_1_1,UNAUTHORIZED);
        response.headers().set("WWW-Authenticate","Basic realm=\"" + security.getRealm() + "\"");
        response.headers().set(Exchange.CONTENT_TYPE,"text/plain");
        response.headers().set(Exchange.CONTENT_LENGTH,0);
        response.setContent(ChannelBuffers.copiedBuffer(new byte[]{}));
        messageEvent.getChannel().write(response);
        return;
      }
 else {
        LOG.debug("Http Basic Auth authorized for username: {}",principal.getUsername());
      }
    }
  }
  super.messageReceived(ctx,messageEvent);
}
