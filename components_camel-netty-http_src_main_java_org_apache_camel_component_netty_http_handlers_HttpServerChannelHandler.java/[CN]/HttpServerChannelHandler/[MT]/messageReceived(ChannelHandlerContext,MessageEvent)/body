{
  request=(HttpRequest)messageEvent.getMessage();
  LOG.debug("Message received: {}",request);
  if (is100ContinueExpected(request)) {
    HttpResponse response=new DefaultHttpResponse(HTTP_1_1,CONTINUE);
    messageEvent.getChannel().write(response);
    return;
  }
  if (consumer.isSuspended()) {
    LOG.debug("Consumer suspended, cannot service request {}",request);
    HttpResponse response=new DefaultHttpResponse(HTTP_1_1,SERVICE_UNAVAILABLE);
    response.setHeader(Exchange.CONTENT_TYPE,"text/plain");
    response.setHeader(Exchange.CONTENT_LENGTH,0);
    response.setContent(ChannelBuffers.copiedBuffer(new byte[]{}));
    messageEvent.getChannel().write(response);
    return;
  }
  if (consumer.getEndpoint().getHttpMethodRestrict() != null && !consumer.getEndpoint().getHttpMethodRestrict().contains(request.getMethod().getName())) {
    HttpResponse response=new DefaultHttpResponse(HTTP_1_1,METHOD_NOT_ALLOWED);
    response.setHeader(Exchange.CONTENT_TYPE,"text/plain");
    response.setHeader(Exchange.CONTENT_LENGTH,0);
    response.setContent(ChannelBuffers.copiedBuffer(new byte[]{}));
    messageEvent.getChannel().write(response);
    return;
  }
  if ("TRACE".equals(request.getMethod().getName()) && !consumer.getEndpoint().isTraceEnabled()) {
    HttpResponse response=new DefaultHttpResponse(HTTP_1_1,METHOD_NOT_ALLOWED);
    response.setHeader(Exchange.CONTENT_TYPE,"text/plain");
    response.setHeader(Exchange.CONTENT_LENGTH,0);
    response.setContent(ChannelBuffers.copiedBuffer(new byte[]{}));
    messageEvent.getChannel().write(response);
    return;
  }
  NettyHttpSecurityConfiguration security=consumer.getEndpoint().getNettyHttpSecurityConfiguration();
  if (security != null && security.isAuthenticate()) {
    String url=request.getUri();
    boolean restricted=security.getContextPathMatcher() == null || security.getContextPathMatcher().matches(url);
    if (restricted) {
      HttpPrincipal principal=extractBasicAuthSubject(request);
      boolean authenticated=principal != null && authenticate(security.getSecurityAuthenticator(),principal) != null;
      if (principal == null || !authenticated) {
        if (principal == null) {
          LOG.debug("Http Basic Auth required for resource: {}",url);
        }
 else {
          LOG.debug("Http Basic Auth not authorized for username: {}",principal.getUsername());
        }
        HttpResponse response=new DefaultHttpResponse(HTTP_1_1,UNAUTHORIZED);
        response.setHeader("WWW-Authenticate","Basic realm=\"" + security.getRealm() + "\"");
        response.setHeader(Exchange.CONTENT_TYPE,"text/plain");
        response.setHeader(Exchange.CONTENT_LENGTH,0);
        response.setContent(ChannelBuffers.copiedBuffer(new byte[]{}));
        messageEvent.getChannel().write(response);
        return;
      }
 else {
        LOG.debug("Http Basic Auth authorized for username: {}",principal.getUsername());
      }
    }
  }
  super.messageReceived(ctx,messageEvent);
}
