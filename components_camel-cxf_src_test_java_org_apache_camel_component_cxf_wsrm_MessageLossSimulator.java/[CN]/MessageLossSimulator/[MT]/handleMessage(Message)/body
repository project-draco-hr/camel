{
  AddressingProperties maps=RMContextUtils.retrieveMAPs(message,false,true);
  String action=null;
  if (maps != null && null != maps.getAction()) {
    action=maps.getAction().getValue();
  }
  if (RMContextUtils.isRMProtocolMessage(action)) {
    return;
  }
  appMessageCount++;
  if (0 != (appMessageCount % 2)) {
    return;
  }
  InterceptorChain chain=message.getInterceptorChain();
  ListIterator<Interceptor<? extends Message>> it=chain.getIterator();
  while (it.hasNext()) {
    PhaseInterceptor<?> pi=(PhaseInterceptor<?>)it.next();
    if (MessageSenderInterceptor.class.getName().equals(pi.getId())) {
      chain.remove(pi);
      LOG.debug("Removed MessageSenderInterceptor from interceptor chain.");
      break;
    }
  }
  message.setContent(OutputStream.class,new WrappedOutputStream(message));
  message.getInterceptorChain().add(new AbstractPhaseInterceptor<Message>(Phase.PREPARE_SEND_ENDING){
    public void handleMessage(    Message message) throws Fault {
      try {
        message.getContent(OutputStream.class).close();
      }
 catch (      IOException e) {
        throw new Fault(e);
      }
    }
  }
);
}
