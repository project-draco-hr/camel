{
  if (ObjectHelper.isEqualToAny(expression,"body","in.body")) {
    return ExpressionBuilder.bodyExpression();
  }
 else   if (ObjectHelper.equal(expression,"out.body")) {
    return ExpressionBuilder.outBodyExpression();
  }
 else   if (ObjectHelper.equal(expression,"id")) {
    return ExpressionBuilder.messageIdExpression();
  }
  String remainder=ifStartsWithReturnRemainder("in.header.",expression);
  if (remainder == null) {
    remainder=ifStartsWithReturnRemainder("header.",expression);
  }
  if (remainder == null) {
    remainder=ifStartsWithReturnRemainder("headers.",expression);
  }
  if (remainder == null) {
    remainder=ifStartsWithReturnRemainder("in.headers.",expression);
  }
  if (remainder != null) {
    return ExpressionBuilder.headerExpression(remainder);
  }
  remainder=ifStartsWithReturnRemainder("out.header.",expression);
  if (remainder == null) {
    remainder=ifStartsWithReturnRemainder("out.headers.",expression);
  }
  if (remainder != null) {
    return ExpressionBuilder.outHeaderExpression(remainder);
  }
  remainder=ifStartsWithReturnRemainder("property.",expression);
  if (remainder != null) {
    return ExpressionBuilder.propertyExpression(remainder);
  }
  remainder=ifStartsWithReturnRemainder("sys.",expression);
  if (remainder != null) {
    return ExpressionBuilder.propertyExpression(remainder);
  }
  throw new IllegalSyntaxException(this,expression);
}
