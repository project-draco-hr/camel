{
  Expression answer=createSimpleExpressionDirectly(expression);
  if (answer != null) {
    return answer;
  }
  String remainder=ifStartsWithReturnRemainder("bodyAs",expression);
  if (remainder != null) {
    String type=ObjectHelper.between(remainder,"(",")");
    if (type == null) {
      throw new ExpressionIllegalSyntaxException("Valid syntax: ${bodyAs(type)} was: " + expression);
    }
    return ExpressionBuilder.bodyExpression(type);
  }
  remainder=ifStartsWithReturnRemainder("body",expression);
  if (remainder == null) {
    remainder=ifStartsWithReturnRemainder("in.body",expression);
  }
  if (remainder != null) {
    boolean invalid=OgnlHelper.isInvalidValidOgnlExpression(remainder);
    if (invalid) {
      throw new ExpressionIllegalSyntaxException("Valid syntax: ${body.OGNL} was: " + expression);
    }
    return ExpressionBuilder.bodyOgnlExpression(remainder);
  }
  remainder=ifStartsWithReturnRemainder("exception",expression);
  if (remainder != null) {
    boolean invalid=OgnlHelper.isInvalidValidOgnlExpression(remainder);
    if (invalid) {
      throw new ExpressionIllegalSyntaxException("Valid syntax: ${exception.OGNL} was: " + expression);
    }
    return ExpressionBuilder.exchangeExceptionOgnlExpression(remainder);
  }
  remainder=ifStartsWithReturnRemainder("in.headers",expression);
  if (remainder == null) {
    remainder=ifStartsWithReturnRemainder("in.header",expression);
  }
  if (remainder == null) {
    remainder=ifStartsWithReturnRemainder("headers",expression);
  }
  if (remainder == null) {
    remainder=ifStartsWithReturnRemainder("header",expression);
  }
  if (remainder != null) {
    remainder=remainder.substring(1);
    boolean invalid=OgnlHelper.isInvalidValidOgnlExpression(remainder);
    if (invalid) {
      throw new ExpressionIllegalSyntaxException("Valid syntax: ${header.name[key]} was: " + expression);
    }
    if (OgnlHelper.isValidOgnlExpression(remainder)) {
      return ExpressionBuilder.headersOgnlExpression(remainder);
    }
 else {
      return ExpressionBuilder.headerExpression(remainder);
    }
  }
  remainder=ifStartsWithReturnRemainder("out.header.",expression);
  if (remainder == null) {
    remainder=ifStartsWithReturnRemainder("out.headers.",expression);
  }
  if (remainder != null) {
    return ExpressionBuilder.outHeaderExpression(remainder);
  }
  remainder=ifStartsWithReturnRemainder("property.",expression);
  if (remainder != null) {
    return ExpressionBuilder.propertyExpression(remainder);
  }
  remainder=ifStartsWithReturnRemainder("sys.",expression);
  if (remainder != null) {
    return ExpressionBuilder.systemPropertyExpression(remainder);
  }
  remainder=ifStartsWithReturnRemainder("sysenv.",expression);
  if (remainder != null) {
    return ExpressionBuilder.systemEnvironmentExpression(remainder);
  }
  remainder=ifStartsWithReturnRemainder("file:",expression);
  if (remainder != null) {
    Expression fileExpression=createSimpleFileExpression(remainder);
    if (expression != null) {
      return fileExpression;
    }
  }
  remainder=ifStartsWithReturnRemainder("date:",expression);
  if (remainder != null) {
    String[] parts=remainder.split(":");
    if (parts.length < 2) {
      throw new ExpressionIllegalSyntaxException("Valid syntax: ${date:command:pattern} was: " + expression);
    }
    String command=ObjectHelper.before(remainder,":");
    String pattern=ObjectHelper.after(remainder,":");
    return ExpressionBuilder.dateExpression(command,pattern);
  }
  remainder=ifStartsWithReturnRemainder("bean:",expression);
  if (remainder != null) {
    return ExpressionBuilder.beanExpression(remainder);
  }
  remainder=ifStartsWithReturnRemainder("properties:",expression);
  if (remainder != null) {
    String[] parts=remainder.split(":");
    if (parts.length > 2) {
      throw new ExpressionIllegalSyntaxException("Valid syntax: ${properties:[locations]:key} was: " + expression);
    }
    String locations=null;
    String key=remainder;
    if (parts.length == 2) {
      locations=ObjectHelper.before(remainder,":");
      key=ObjectHelper.after(remainder,":");
    }
    return ExpressionBuilder.propertiesComponentExpression(key,locations);
  }
  if (strict) {
    throw new ExpressionIllegalSyntaxException(expression);
  }
 else {
    return ExpressionBuilder.constantExpression(expression);
  }
}
