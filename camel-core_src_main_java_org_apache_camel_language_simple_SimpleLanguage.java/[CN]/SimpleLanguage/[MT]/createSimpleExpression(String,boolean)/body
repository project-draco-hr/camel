{
  if (ObjectHelper.isEqualToAny(expression,"body","in.body")) {
    return ExpressionBuilder.bodyExpression();
  }
 else   if (ObjectHelper.equal(expression,"out.body")) {
    return ExpressionBuilder.outBodyExpression();
  }
 else   if (ObjectHelper.equal(expression,"id")) {
    return ExpressionBuilder.messageIdExpression();
  }
 else   if (ObjectHelper.equal(expression,"exception.message")) {
    return ExpressionBuilder.exchangeExceptionMessageExpression();
  }
  String remainder=ifStartsWithReturnRemainder("in.header.",expression);
  if (remainder == null) {
    remainder=ifStartsWithReturnRemainder("header.",expression);
  }
  if (remainder == null) {
    remainder=ifStartsWithReturnRemainder("headers.",expression);
  }
  if (remainder == null) {
    remainder=ifStartsWithReturnRemainder("in.headers.",expression);
  }
  if (remainder != null) {
    return ExpressionBuilder.headerExpression(remainder);
  }
  remainder=ifStartsWithReturnRemainder("out.header.",expression);
  if (remainder == null) {
    remainder=ifStartsWithReturnRemainder("out.headers.",expression);
  }
  if (remainder != null) {
    return ExpressionBuilder.outHeaderExpression(remainder);
  }
  remainder=ifStartsWithReturnRemainder("property.",expression);
  if (remainder != null) {
    return ExpressionBuilder.propertyExpression(remainder);
  }
  remainder=ifStartsWithReturnRemainder("sys.",expression);
  if (remainder != null) {
    return ExpressionBuilder.systemPropertyExpression(remainder);
  }
  remainder=ifStartsWithReturnRemainder("file:",expression);
  if (remainder != null) {
    if (ObjectHelper.equal(remainder,"name")) {
      return ExpressionBuilder.fileNameExpression();
    }
 else     if (ObjectHelper.equal(remainder,"name.noext")) {
      return ExpressionBuilder.fileNameNoExtensionExpression();
    }
 else     if (ObjectHelper.equal(remainder,"onlyname")) {
      return ExpressionBuilder.fileOnlyNameExpression();
    }
 else     if (ObjectHelper.equal(remainder,"onlyname.noext")) {
      return ExpressionBuilder.fileOnlyNameNoExtensionExpression();
    }
 else     if (ObjectHelper.equal(remainder,"ext")) {
      return ExpressionBuilder.fileExtensionExpression();
    }
 else     if (ObjectHelper.equal(remainder,"parent")) {
      return ExpressionBuilder.fileParentExpression();
    }
 else     if (ObjectHelper.equal(remainder,"path")) {
      return ExpressionBuilder.filePathExpression();
    }
 else     if (ObjectHelper.equal(remainder,"absolute")) {
      return ExpressionBuilder.fileAbsoluteExpression();
    }
 else     if (ObjectHelper.equal(remainder,"absolute.path")) {
      return ExpressionBuilder.fileAbsolutePathExpression();
    }
 else     if (ObjectHelper.equal(remainder,"length")) {
      return ExpressionBuilder.fileSizeExpression();
    }
 else     if (ObjectHelper.equal(remainder,"modified")) {
      return ExpressionBuilder.fileLastModifiedExpression();
    }
  }
  remainder=ifStartsWithReturnRemainder("date:",expression);
  if (remainder != null) {
    String[] parts=remainder.split(":");
    if (parts.length != 2) {
      throw new ExpressionIllegalSyntaxException("Valid syntax: ${date:command:pattern} was: " + expression);
    }
    String command=parts[0];
    String pattern=parts[1];
    return ExpressionBuilder.dateExpression(command,pattern);
  }
  remainder=ifStartsWithReturnRemainder("bean:",expression);
  if (remainder != null) {
    return ExpressionBuilder.beanExpression(remainder);
  }
  if (strict) {
    throw new ExpressionIllegalSyntaxException(expression);
  }
 else {
    return ExpressionBuilder.constantExpression(expression);
  }
}
