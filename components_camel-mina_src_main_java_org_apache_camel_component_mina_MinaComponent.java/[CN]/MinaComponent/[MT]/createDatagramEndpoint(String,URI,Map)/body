{
  IoAcceptor acceptor=new DatagramAcceptor();
  SocketAddress address=new InetSocketAddress(connectUri.getHost(),connectUri.getPort());
  IoConnector connector=new DatagramConnector();
  if (transferExchange) {
    throw new IllegalArgumentException("transferExchange=true is not supported for datagram protocol");
  }
  DatagramConnectorConfig connectorConfig=new DatagramConnectorConfig();
  configureDataGramCodecFactory("MinaProducer",connectorConfig,encoding,codec);
  if (minaLogger) {
    connectorConfig.getFilterChain().addLast("logger",new LoggingFilter());
  }
  long connectTimeout=timeout > 0 ? timeout : DEFAULT_CONNECT_TIMEOUT;
  connectorConfig.setConnectTimeout((int)(connectTimeout / 1000));
  DatagramAcceptorConfig acceptorConfig=new DatagramAcceptorConfig();
  configureDataGramCodecFactory("MinaConsumer",acceptorConfig,encoding,codec);
  acceptorConfig.setDisconnectOnUnbind(true);
  if (minaLogger) {
    acceptorConfig.getFilterChain().addLast("logger",new LoggingFilter());
  }
  MinaEndpoint endpoint=new MinaEndpoint(uri,this,address,acceptor,acceptorConfig,connector,connectorConfig,lazySessionCreation,timeout,transferExchange,sync);
  if (sync) {
    endpoint.setExchangePattern(ExchangePattern.InOut);
  }
 else {
    endpoint.setExchangePattern(ExchangePattern.InOnly);
  }
  return endpoint;
}
