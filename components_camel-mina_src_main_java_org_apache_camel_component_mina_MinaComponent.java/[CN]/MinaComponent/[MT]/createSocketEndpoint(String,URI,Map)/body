{
  IoAcceptor acceptor=new SocketAcceptor();
  SocketAddress address=new InetSocketAddress(connectUri.getHost(),connectUri.getPort());
  IoConnector connector=new SocketConnector();
  SocketConnectorConfig connectorConfig=new SocketConnectorConfig();
  configureCodecFactory("MinaProducer",connectorConfig,textline,encoding,codec);
  if (minaLogger) {
    connectorConfig.getFilterChain().addLast("logger",new LoggingFilter());
  }
  long connectTimeout=timeout > 0 ? timeout : DEFAULT_CONNECT_TIMEOUT;
  connectorConfig.setConnectTimeout((int)(connectTimeout / 1000));
  SocketAcceptorConfig acceptorConfig=new SocketAcceptorConfig();
  configureCodecFactory("MinaConsumer",acceptorConfig,textline,encoding,codec);
  acceptorConfig.setReuseAddress(true);
  acceptorConfig.setDisconnectOnUnbind(true);
  if (minaLogger) {
    acceptorConfig.getFilterChain().addLast("logger",new LoggingFilter());
  }
  MinaEndpoint endpoint=new MinaEndpoint(uri,this,address,acceptor,acceptorConfig,connector,connectorConfig,lazySessionCreation,timeout,transferExchange,sync);
  if (encoding != null) {
    endpoint.setCharsetName(getEncodingParameter("MinaProducer",encoding).name());
  }
  if (sync) {
    endpoint.setExchangePattern(ExchangePattern.InOut);
  }
 else {
    endpoint.setExchangePattern(ExchangePattern.InOnly);
  }
  return endpoint;
}
