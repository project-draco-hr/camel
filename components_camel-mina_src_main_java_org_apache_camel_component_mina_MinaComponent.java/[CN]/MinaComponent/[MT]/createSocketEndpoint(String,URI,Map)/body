{
  IoAcceptor acceptor=new SocketAcceptor();
  SocketAddress address=new InetSocketAddress(connectUri.getHost(),connectUri.getPort());
  IoConnector connector=new SocketConnector();
  boolean lazySessionCreation=getAndRemoveParameter(parameters,"lazySessionCreation",Boolean.class,false);
  long timeout=getAndRemoveParameter(parameters,"timeout",Long.class,0L);
  boolean transferExchange=getAndRemoveParameter(parameters,"transferExchange",Boolean.class,false);
  boolean sync=getAndRemoveParameter(parameters,"sync",Boolean.class,false);
  boolean minaLogger=getAndRemoveParameter(parameters,"minaLogger",Boolean.class,false);
  boolean textline=getAndRemoveParameter(parameters,"textline",Boolean.class,false);
  String encoding=getAndRemoveParameter(parameters,"encoding",String.class);
  String codec=getAndRemoveParameter(parameters,"codec",String.class);
  SocketConnectorConfig connectorConfig=new SocketConnectorConfig();
  configureSocketCodecFactory("MinaProducer",connectorConfig,textline,encoding,codec);
  if (minaLogger) {
    connectorConfig.getFilterChain().addLast("logger",new LoggingFilter());
  }
  long connectTimeout=timeout > 0 ? timeout : DEFAULT_CONNECT_TIMEOUT;
  connectorConfig.setConnectTimeout((int)(connectTimeout / 1000));
  SocketAcceptorConfig acceptorConfig=new SocketAcceptorConfig();
  configureSocketCodecFactory("MinaConsumer",acceptorConfig,textline,encoding,codec);
  acceptorConfig.setReuseAddress(true);
  acceptorConfig.setDisconnectOnUnbind(true);
  if (minaLogger) {
    acceptorConfig.getFilterChain().addLast("logger",new LoggingFilter());
  }
  MinaEndpoint endpoint=new MinaEndpoint(uri,this,address,acceptor,acceptorConfig,connector,connectorConfig,lazySessionCreation,timeout,transferExchange);
  if (sync) {
    endpoint.setExchangePattern(ExchangePattern.InOut);
  }
 else {
    endpoint.setExchangePattern(ExchangePattern.InOnly);
  }
  return endpoint;
}
