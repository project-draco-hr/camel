{
  ObjectHelper.notNull(exchange,"exchange");
  ObjectHelper.notNull(endpoint,"endpoint");
  Object args=exchange.getIn().removeHeader(EXEC_COMMAND_ARGS);
  String cmd=getAndRemoveHeader(exchange.getIn(),EXEC_COMMAND_EXECUTABLE,endpoint.getExecutable(),String.class);
  String dir=getAndRemoveHeader(exchange.getIn(),EXEC_COMMAND_WORKING_DIR,endpoint.getWorkingDir(),String.class);
  long timeout=getAndRemoveHeader(exchange.getIn(),EXEC_COMMAND_TIMEOUT,endpoint.getTimeout(),Long.class);
  String outFilePath=getAndRemoveHeader(exchange.getIn(),EXEC_COMMAND_OUT_FILE,endpoint.getOutFile(),String.class);
  boolean useStderrOnEmptyStdout=getAndRemoveHeader(exchange.getIn(),EXEC_USE_STDERR_ON_EMPTY_STDOUT,endpoint.isUseStderrOnEmptyStdout(),Boolean.class);
  InputStream input=exchange.getIn().getBody(InputStream.class);
  List<String> argsList=null;
  if (isListOfStrings(args)) {
    argsList=(List<String>)args;
  }
  if (argsList == null) {
    String s=endpoint.getArgs();
    if (args != null) {
      s=exchange.getContext().getTypeConverter().convertTo(String.class,exchange,args);
    }
    LOG.debug("Parsing argument String to a List: {}",s);
    argsList=splitToWhiteSpaceSeparatedTokens(s);
  }
  File outFile=outFilePath == null ? null : new File(outFilePath);
  return new ExecCommand(cmd,argsList,dir,timeout,input,outFile,useStderrOnEmptyStdout);
}
