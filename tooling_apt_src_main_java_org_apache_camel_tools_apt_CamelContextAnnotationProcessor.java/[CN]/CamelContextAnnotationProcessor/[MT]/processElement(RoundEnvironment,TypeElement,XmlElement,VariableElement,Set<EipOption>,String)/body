{
  Elements elementUtils=processingEnv.getElementUtils();
  String fieldName;
  fieldName=fieldElement.getSimpleName().toString();
  if (element != null) {
    String kind="element";
    String name=element.name();
    if (isNullOrEmpty(name) || "##default".equals(name)) {
      name=fieldName;
    }
    name=prefix + name;
    TypeMirror fieldType=fieldElement.asType();
    String fieldTypeName=fieldType.toString();
    TypeElement fieldTypeElement=findTypeElement(roundEnv,fieldTypeName);
    String defaultValue=findDefaultValue(fieldElement,fieldTypeName);
    String docComment=findJavaDoc(elementUtils,fieldElement,fieldName,name,classElement,true);
    boolean required=element.required();
    required=findRequired(fieldElement,required);
    Set<String> enums=new LinkedHashSet<String>();
    boolean isEnum=fieldTypeElement != null && fieldTypeElement.getKind() == ElementKind.ENUM;
    if (isEnum) {
      TypeElement enumClass=findTypeElement(roundEnv,fieldTypeElement.asType().toString());
      List<VariableElement> fields=ElementFilter.fieldsIn(enumClass.getEnclosedElements());
      for (      VariableElement var : fields) {
        if (var.getKind() == ElementKind.ENUM_CONSTANT) {
          String val=var.toString();
          enums.add(val);
        }
      }
    }
    boolean deprecated=fieldElement.getAnnotation(Deprecated.class) != null;
    EipOption ep=new EipOption(name,kind,fieldTypeName,required,defaultValue,docComment,deprecated,isEnum,enums,false,null);
    eipOptions.add(ep);
  }
}
