{
  Elements elementUtils=processingEnv.getElementUtils();
  String name=attribute.name();
  if (isNullOrEmpty(name) || "##default".equals(name)) {
    name=fieldName;
  }
  if (skipUnwanted) {
  }
  name=prefix + name;
  TypeMirror fieldType=fieldElement.asType();
  String fieldTypeName=fieldType.toString();
  TypeElement fieldTypeElement=findTypeElement(roundEnv,fieldTypeName);
  String defaultValue=findDefaultValue(fieldElement,fieldTypeName);
  String docComment=findJavaDoc(elementUtils,fieldElement,fieldName,name,classElement,true);
  if (isNullOrEmpty(docComment)) {
    Metadata metadata=fieldElement.getAnnotation(Metadata.class);
    docComment=metadata != null ? metadata.description() : null;
  }
  boolean required=attribute.required();
  required=findRequired(fieldElement,required);
  Set<String> enums=new TreeSet<String>();
  boolean isEnum=fieldTypeElement != null && fieldTypeElement.getKind() == ElementKind.ENUM;
  if (isEnum) {
    TypeElement enumClass=findTypeElement(roundEnv,fieldTypeElement.asType().toString());
    List<VariableElement> fields=ElementFilter.fieldsIn(enumClass.getEnclosedElements());
    for (    VariableElement var : fields) {
      if (var.getKind() == ElementKind.ENUM_CONSTANT) {
        String val=var.toString();
        enums.add(val);
      }
    }
  }
  boolean deprecated=fieldElement.getAnnotation(Deprecated.class) != null;
  if ("id".equals(name) && isNullOrEmpty(docComment)) {
    if ("CamelContextFactoryBean".equals(originalClassType.getSimpleName().toString())) {
      docComment="Sets the id (name) of this CamelContext";
    }
 else {
      docComment="Sets the id of this node";
    }
  }
  EipOption ep=new EipOption(name,"attribute",fieldTypeName,required,defaultValue,docComment,deprecated,isEnum,enums,false,null);
  eipOptions.add(ep);
  return false;
}
