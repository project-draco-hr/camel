{
  if (log.isTraceEnabled()) {
    log.trace("Converting {} -> {} with value: {}",new Object[]{value == null ? "null" : value.getClass().getCanonicalName(),type.getCanonicalName(),value});
  }
  if (value == null) {
    if (boolean.class.isAssignableFrom(type)) {
      return Boolean.FALSE;
    }
    if (statistics.isStatisticsEnabled()) {
      noopCounter.incrementAndGet();
    }
    return null;
  }
  if (type.isInstance(value)) {
    if (statistics.isStatisticsEnabled()) {
      noopCounter.incrementAndGet();
    }
    return type.cast(value);
  }
  if (ObjectHelper.isNaN(value)) {
    if (statistics.isStatisticsEnabled()) {
      noopCounter.incrementAndGet();
    }
    if (Float.class.isAssignableFrom(type)) {
      return Float.NaN;
    }
 else     if (Double.class.isAssignableFrom(type)) {
      return Double.NaN;
    }
 else {
      return Void.TYPE;
    }
  }
  if (statistics.isStatisticsEnabled()) {
    attemptCounter.incrementAndGet();
  }
  TypeMapping key=new TypeMapping(type,value.getClass());
  if (misses.containsKey(key)) {
    return Void.TYPE;
  }
  TypeConverter converter=getOrFindTypeConverter(key);
  if (converter != null) {
    log.trace("Using converter: {} to convert {}",converter,key);
    Object rc;
    if (tryConvert) {
      rc=converter.tryConvertTo(type,exchange,value);
    }
 else {
      rc=converter.convertTo(type,exchange,value);
    }
    if (rc == null && converter.allowNull()) {
      return null;
    }
 else     if (rc != null) {
      return rc;
    }
  }
  if (type.isPrimitive()) {
    Class<?> primitiveType=ObjectHelper.convertPrimitiveTypeToWrapperType(type);
    if (primitiveType != type) {
      Class<?> fromType=value.getClass();
      TypeConverter tc=getOrFindTypeConverter(new TypeMapping(primitiveType,fromType));
      if (tc != null) {
        addTypeConverter(type,fromType,tc);
        Object rc;
        if (tryConvert) {
          rc=tc.tryConvertTo(primitiveType,exchange,value);
        }
 else {
          rc=tc.convertTo(primitiveType,exchange,value);
        }
        if (rc == null && tc.allowNull()) {
          return null;
        }
 else         if (rc != null) {
          return rc;
        }
      }
    }
  }
  for (  FallbackTypeConverter fallback : fallbackConverters) {
    TypeConverter tc=fallback.getFallbackTypeConverter();
    Object rc;
    if (tryConvert) {
      rc=tc.tryConvertTo(type,exchange,value);
    }
 else {
      rc=tc.convertTo(type,exchange,value);
    }
    if (rc == null && tc.allowNull()) {
      return null;
    }
    if (Void.TYPE.equals(rc)) {
      return Void.TYPE;
    }
    if (rc != null) {
      if (fallback.isCanPromote()) {
        if (log.isDebugEnabled()) {
          log.debug("Promoting fallback type converter as a known type converter to convert from: {} to: {} for the fallback converter: {}",new Object[]{type.getCanonicalName(),value.getClass().getCanonicalName(),fallback.getFallbackTypeConverter()});
        }
        addTypeConverter(type,value.getClass(),fallback.getFallbackTypeConverter());
      }
      if (log.isTraceEnabled()) {
        log.trace("Fallback type converter {} converted type from: {} to: {}",new Object[]{fallback.getFallbackTypeConverter(),type.getCanonicalName(),value.getClass().getCanonicalName()});
      }
      return rc;
    }
  }
  if (!tryConvert) {
    misses.put(key,key);
  }
  return Void.TYPE;
}
