{
  int min=1;
  int max=10;
  int iterations=30;
  int i=0;
  for (i=0; i < iterations; i++) {
    Expression expression=SimpleLanguage.simple("${random(1,10)}",Integer.class);
    assertTrue(min <= expression.evaluate(exchange,Integer.class) && expression.evaluate(exchange,Integer.class) < max);
  }
  for (i=0; i < iterations; i++) {
    Expression expression=SimpleLanguage.simple("${random(10)}",Integer.class);
    assertTrue(0 <= expression.evaluate(exchange,Integer.class) && expression.evaluate(exchange,Integer.class) < max);
  }
  Expression expression=SimpleLanguage.simple("${random(1, 10)}",Integer.class);
  assertTrue(min <= expression.evaluate(exchange,Integer.class) && expression.evaluate(exchange,Integer.class) < max);
  Expression expression1=SimpleLanguage.simple("${random( 10)}",Integer.class);
  assertTrue(0 <= expression1.evaluate(exchange,Integer.class) && expression1.evaluate(exchange,Integer.class) < max);
  try {
    assertExpression("${random(10,21,30)}",null);
    fail("Should have thrown exception");
  }
 catch (  Exception e) {
    assertEquals("Valid syntax: ${random(min,max)} or ${random(max)} was: random(10,21,30)",e.getCause().getMessage());
  }
  try {
    assertExpression("${random()}",null);
    fail("Should have thrown exception");
  }
 catch (  Exception e) {
    assertEquals("Valid syntax: ${random(min,max)} or ${random(max)} was: random()",e.getCause().getMessage());
  }
  exchange.getIn().setHeader("max",20);
  Expression expression3=SimpleLanguage.simple("${random(10,${header.max})}",Integer.class);
  int num=expression3.evaluate(exchange,Integer.class);
  assertTrue("Should be 10..20",num >= 0 && num < 20);
}
