{
  ExecutorService executorService=Executors.newFixedThreadPool(clientCount);
  Future<?>[] replies=new Future[clientCount];
  for (int i=0; i < clientCount; i++) {
    replies[i]=executorService.submit(new Callable<Object>(){
      @Override public Object call() throws Exception {
        startLatch.await();
        Object reply=template.requestBody(uri,"World");
        finishLatch.countDown();
        return reply;
      }
    }
);
  }
  Object[] expectedReplies=new Object[clientCount];
  for (int i=0; i < clientCount; i++) {
    expectedReplies[i]="Bye World";
  }
  getMockEndpoint("mock:result").expectedMessageCount(clientCount);
  getMockEndpoint("mock:result").expectedBodiesReceived(expectedReplies);
  startLatch.countDown();
  assertTrue("Waiting on the latch ended up with a timeout!",finishLatch.await(5,TimeUnit.SECONDS));
  executorService.shutdown();
  for (int i=0; i < clientCount; i++) {
    assertEquals("Bye World",replies[i].get());
  }
  assertMockEndpointsSatisfied();
}
