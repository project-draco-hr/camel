{
  log.info("********************************************************************************");
  log.info("Testing: " + getTestMethodName() + "("+ getClass().getName()+ ")");
  log.info("********************************************************************************");
  log.debug("setUp test");
  if (!useJmx()) {
    disableJMX();
  }
 else {
    enableJMX();
  }
  context=createCamelContext();
  assertNotNull("No context found!",context);
  context.getShutdownStrategy().setTimeout(getShutdownTimeout());
  context.setDebugger(new DefaultDebugger());
  context.getDebugger().addBreakpoint(breakpoint);
  template=context.createProducerTemplate();
  template.start();
  consumer=context.createConsumerTemplate();
  consumer.start();
  String pattern=isMockEndpoints();
  if (pattern != null) {
    context.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(pattern));
  }
  postProcessTest();
  if (isUseRouteBuilder()) {
    RouteBuilder[] builders=createRouteBuilders();
    for (    RouteBuilder builder : builders) {
      log.debug("Using created route builder: " + builder);
      context.addRoutes(builder);
    }
    boolean skip="true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"));
    if (skip) {
      log.info("Skipping starting CamelContext as system property skipStartingCamelContext is set to be true.");
    }
 else     if (isUseAdviceWith()) {
      log.info("Skipping starting CamelContext as isUseAdviceWith is set to true.");
    }
 else {
      startCamelContext();
    }
  }
 else {
    log.debug("Using route builder from the created context: " + context);
  }
  log.debug("Routing Rules are: " + context.getRoutes());
  assertValidContext(context);
  watch.restart();
}
