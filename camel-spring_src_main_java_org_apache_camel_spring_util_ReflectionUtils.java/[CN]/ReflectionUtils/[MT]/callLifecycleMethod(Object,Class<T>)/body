{
  ReflectionUtils.doWithMethods(bean.getClass(),new ReflectionUtils.MethodCallback(){
    public void doWith(    Method method) throws IllegalArgumentException, IllegalAccessException {
      if (method.getAnnotation(annotation) != null) {
        try {
          method.invoke(bean,(Object[])null);
        }
 catch (        IllegalArgumentException ex) {
          throw new IllegalStateException("Failure to invoke " + method + " on "+ bean.getClass()+ ": args=[]",ex);
        }
catch (        IllegalAccessException ex) {
          throw new UnsupportedOperationException(ex.toString());
        }
catch (        InvocationTargetException ex) {
          throw new UnsupportedOperationException("PostConstruct method on bean threw exception",ex.getTargetException());
        }
      }
    }
  }
);
}
