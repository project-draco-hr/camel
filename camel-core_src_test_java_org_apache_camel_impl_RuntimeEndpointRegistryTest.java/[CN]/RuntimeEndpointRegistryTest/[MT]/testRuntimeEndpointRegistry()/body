{
  RuntimeEndpointRegistry registry=context.getRuntimeEndpointRegistry();
  assertEquals(0,registry.getAllEndpoints(false).size());
  assertEquals(2,registry.getAllEndpoints(true).size());
  MockEndpoint mock=getMockEndpoint("mock:foo2");
  mock.expectedMessageCount(1);
  template.sendBodyAndHeader("seda:foo","Hello World","slip","mock:foo2");
  mock.assertIsSatisfied();
  assertEquals(4,registry.getAllEndpoints(true).size());
  assertEquals(3,registry.getEndpointsPerRoute("foo",true).size());
  assertEquals(1,registry.getEndpointsPerRoute("bar",true).size());
  mock=getMockEndpoint("mock:bar2");
  mock.expectedMessageCount(1);
  template.sendBodyAndHeader("seda:bar","Bye World","slip","mock:bar2");
  mock.assertIsSatisfied();
  assertEquals(6,registry.getAllEndpoints(true).size());
  assertEquals(3,registry.getEndpointsPerRoute("foo",true).size());
  assertEquals(3,registry.getEndpointsPerRoute("bar",true).size());
  String json=context.createRouteStaticEndpointJson(null);
  assertNotNull(json);
  log.info(json);
  assertTrue("Should have outputs",json.contains(" { \"uri\": \"mock://foo\" }"));
  assertTrue("Should have outputs",json.contains(" { \"uri\": \"mock://foo2\" }"));
  assertTrue("Should have outputs",json.contains(" { \"uri\": \"mock://bar\" }"));
  assertTrue("Should have outputs",json.contains(" { \"uri\": \"mock://bar2\" }"));
}
