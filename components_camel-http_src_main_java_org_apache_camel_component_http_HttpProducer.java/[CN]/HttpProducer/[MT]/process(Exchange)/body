{
  HttpMethod method=createMethod(exchange);
  Message in=exchange.getIn();
  HeaderFilterStrategy strategy=((HttpEndpoint)getEndpoint()).getHeaderFilterStrategy();
  for (  String headerName : in.getHeaders().keySet()) {
    String headerValue=in.getHeader(headerName,String.class);
    if (strategy != null && !strategy.applyFilterToCamelHeaders(headerName,headerValue)) {
      method.addRequestHeader(headerName,headerValue);
    }
  }
  try {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Executing http " + method.getName() + " method: "+ method.getURI().toString());
    }
    int responseCode=executeMethod(method);
    if (LOG.isDebugEnabled()) {
      LOG.debug("Http responseCode: " + responseCode);
    }
    if (responseCode >= 100 && responseCode < 300) {
      Message answer=exchange.getOut(true);
      answer.setHeaders(in.getHeaders());
      answer.setHeader(HTTP_RESPONSE_CODE,responseCode);
      answer.setBody(extractResponseBody(method));
      Header[] headers=method.getResponseHeaders();
      for (      Header header : headers) {
        String name=header.getName();
        String value=header.getValue();
        if (strategy != null && !strategy.applyFilterToExternalHeaders(name,value)) {
          answer.setHeader(name,value);
        }
      }
    }
 else {
      HttpOperationFailedException exception=null;
      if (responseCode < 400 && responseCode >= 300) {
        String redirectLocation;
        Header locationHeader=method.getResponseHeader("location");
        if (locationHeader != null) {
          redirectLocation=locationHeader.getValue();
          exception=new HttpOperationFailedException(responseCode,method.getStatusLine(),redirectLocation);
        }
      }
 else {
        exception=new HttpOperationFailedException(responseCode,method.getStatusLine());
      }
      if (exception != null) {
        throw exception;
      }
    }
  }
  finally {
    method.releaseConnection();
  }
}
