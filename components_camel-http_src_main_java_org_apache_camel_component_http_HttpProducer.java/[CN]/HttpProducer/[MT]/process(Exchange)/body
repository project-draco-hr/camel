{
  if (getEndpoint().isBridgeEndpoint()) {
    exchange.setProperty(Exchange.SKIP_GZIP_ENCODING,Boolean.TRUE);
  }
  HttpMethod method=createMethod(exchange);
  Message in=exchange.getIn();
  String httpProtocolVersion=in.getHeader(Exchange.HTTP_PROTOCOL_VERSION,String.class);
  if (httpProtocolVersion != null) {
    HttpMethodParams params=method.getParams();
    params.setVersion(HttpVersion.parse(httpProtocolVersion));
  }
  HeaderFilterStrategy strategy=getEndpoint().getHeaderFilterStrategy();
  for (  Map.Entry<String,Object> entry : in.getHeaders().entrySet()) {
    String headerValue=in.getHeader(entry.getKey(),String.class);
    if (strategy != null && !strategy.applyFilterToCamelHeaders(entry.getKey(),headerValue,exchange)) {
      method.addRequestHeader(entry.getKey(),headerValue);
    }
  }
  try {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Executing http " + method.getName() + " method: "+ method.getURI().toString());
    }
    int responseCode=executeMethod(method);
    if (LOG.isDebugEnabled()) {
      LOG.debug("Http responseCode: " + responseCode);
    }
    if (!throwException) {
      populateResponse(exchange,method,in,strategy,responseCode);
    }
 else {
      if (responseCode >= 100 && responseCode < 300) {
        populateResponse(exchange,method,in,strategy,responseCode);
      }
 else {
        throw populateHttpOperationFailedException(exchange,method,responseCode);
      }
    }
  }
  finally {
    method.releaseConnection();
  }
}
