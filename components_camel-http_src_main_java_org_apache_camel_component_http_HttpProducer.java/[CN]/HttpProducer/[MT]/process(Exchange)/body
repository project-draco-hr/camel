{
  HttpMethod method=createMethod(exchange);
  Message in=exchange.getIn();
  HeaderFilterStrategy strategy=((HttpEndpoint)getEndpoint()).getHeaderFilterStrategy();
  for (  String headerName : in.getHeaders().keySet()) {
    String headerValue=in.getHeader(headerName,String.class);
    if (strategy != null && !strategy.applyFilterToCamelHeaders(headerName,headerValue)) {
      method.addRequestHeader(headerName,headerValue);
    }
  }
  try {
    Message answer=null;
    int responseCode=httpClient.executeMethod(method);
    if (responseCode == 200) {
      answer=exchange.getOut(true);
    }
 else {
      answer=exchange.getFault(true);
    }
    answer.setHeaders(in.getHeaders());
    answer.setHeader(HTTP_RESPONSE_CODE,responseCode);
    LoadingByteArrayOutputStream bos=new LoadingByteArrayOutputStream();
    InputStream is=method.getResponseBodyAsStream();
    IOUtils.copy(is,bos);
    bos.flush();
    is.close();
    answer.setBody(bos.createInputStream());
    Header[] headers=method.getResponseHeaders();
    for (    Header header : headers) {
      String name=header.getName();
      String value=header.getValue();
      if (strategy != null && !strategy.applyFilterToExternalHeaders(name,value)) {
        answer.setHeader(name,value);
      }
    }
  }
  finally {
    method.releaseConnection();
  }
}
