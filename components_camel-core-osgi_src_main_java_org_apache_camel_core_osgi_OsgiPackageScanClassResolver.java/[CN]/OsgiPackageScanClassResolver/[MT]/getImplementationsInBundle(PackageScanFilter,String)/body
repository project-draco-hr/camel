{
  Bundle[] bundles;
  if (bundle.getBundleContext() != null) {
    bundles=bundle.getBundleContext().getBundles();
  }
 else {
    bundles=new Bundle[]{bundle};
  }
  Set<String> urls=new LinkedHashSet<String>();
  for (  Bundle bd : bundles) {
    if (log.isTraceEnabled()) {
      log.trace("Searching in bundle:" + bd);
    }
    try {
      Enumeration<URL> paths=bd.findEntries("/" + packageName,"*.class",true);
      while (paths != null && paths.hasMoreElements()) {
        URL path=paths.nextElement();
        String pathString=path.getPath();
        String urlString=pathString.substring(pathString.indexOf(packageName));
        urls.add(urlString);
        if (log.isTraceEnabled()) {
          log.trace("Added url: " + urlString);
        }
      }
    }
 catch (    Throwable t) {
      log.warn("Cannot search in bundle: " + bundle + " for classes matching criteria: "+ test+ " due: "+ t.getMessage()+ ". This exception will be ignored.",t);
    }
  }
  return urls;
}
