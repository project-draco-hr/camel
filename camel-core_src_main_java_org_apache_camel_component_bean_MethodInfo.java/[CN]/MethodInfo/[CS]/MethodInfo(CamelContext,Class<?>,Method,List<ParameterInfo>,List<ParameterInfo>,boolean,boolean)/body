{
  this.camelContext=camelContext;
  this.type=type;
  this.method=method;
  this.parameters=parameters;
  this.bodyParameters=bodyParameters;
  this.hasCustomAnnotation=hasCustomAnnotation;
  this.hasHandlerAnnotation=hasHandlerAnnotation;
  this.parametersExpression=createParametersExpression();
  Map<Class<?>,Annotation> collectedMethodAnnotation=collectMethodAnnotations(type,method);
  Pattern oneway=findOneWayAnnotation(method);
  if (oneway != null) {
    pattern=oneway.value();
  }
  org.apache.camel.RoutingSlip routingSlipAnnotation=(org.apache.camel.RoutingSlip)collectedMethodAnnotation.get(org.apache.camel.RoutingSlip.class);
  if (routingSlipAnnotation != null && matchContext(routingSlipAnnotation.context())) {
    routingSlip=new RoutingSlip(camelContext);
    routingSlip.setDelimiter(routingSlipAnnotation.delimiter());
    routingSlip.setIgnoreInvalidEndpoints(routingSlipAnnotation.ignoreInvalidEndpoints());
    try {
      camelContext.addService(routingSlip);
    }
 catch (    Exception e) {
      throw ObjectHelper.wrapRuntimeCamelException(e);
    }
  }
  org.apache.camel.DynamicRouter dynamicRouterAnnotation=(org.apache.camel.DynamicRouter)collectedMethodAnnotation.get(org.apache.camel.DynamicRouter.class);
  if (dynamicRouterAnnotation != null && matchContext(dynamicRouterAnnotation.context())) {
    dynamicRouter=new DynamicRouter(camelContext);
    dynamicRouter.setDelimiter(dynamicRouterAnnotation.delimiter());
    dynamicRouter.setIgnoreInvalidEndpoints(dynamicRouterAnnotation.ignoreInvalidEndpoints());
    try {
      camelContext.addService(dynamicRouter);
    }
 catch (    Exception e) {
      throw ObjectHelper.wrapRuntimeCamelException(e);
    }
  }
  org.apache.camel.RecipientList recipientListAnnotation=(org.apache.camel.RecipientList)collectedMethodAnnotation.get(org.apache.camel.RecipientList.class);
  if (recipientListAnnotation != null && matchContext(recipientListAnnotation.context())) {
    recipientList=new RecipientList(camelContext,recipientListAnnotation.delimiter());
    recipientList.setStopOnException(recipientListAnnotation.stopOnException());
    recipientList.setIgnoreInvalidEndpoints(recipientListAnnotation.ignoreInvalidEndpoints());
    recipientList.setParallelProcessing(recipientListAnnotation.parallelProcessing());
    recipientList.setParallelAggregate(recipientListAnnotation.parallelAggregate());
    recipientList.setStreaming(recipientListAnnotation.streaming());
    recipientList.setTimeout(recipientListAnnotation.timeout());
    recipientList.setShareUnitOfWork(recipientListAnnotation.shareUnitOfWork());
    if (ObjectHelper.isNotEmpty(recipientListAnnotation.executorServiceRef())) {
      ExecutorService executor=camelContext.getExecutorServiceManager().newDefaultThreadPool(this,recipientListAnnotation.executorServiceRef());
      recipientList.setExecutorService(executor);
    }
    if (recipientListAnnotation.parallelProcessing() && recipientList.getExecutorService() == null) {
      ExecutorService executor=camelContext.getExecutorServiceManager().newDefaultThreadPool(this,"@RecipientList");
      recipientList.setExecutorService(executor);
    }
    if (ObjectHelper.isNotEmpty(recipientListAnnotation.strategyRef())) {
      AggregationStrategy strategy=CamelContextHelper.mandatoryLookup(camelContext,recipientListAnnotation.strategyRef(),AggregationStrategy.class);
      recipientList.setAggregationStrategy(strategy);
    }
    if (ObjectHelper.isNotEmpty(recipientListAnnotation.onPrepareRef())) {
      Processor onPrepare=CamelContextHelper.mandatoryLookup(camelContext,recipientListAnnotation.onPrepareRef(),Processor.class);
      recipientList.setOnPrepare(onPrepare);
    }
    try {
      camelContext.addService(recipientList);
    }
 catch (    Exception e) {
      throw ObjectHelper.wrapRuntimeCamelException(e);
    }
  }
}
