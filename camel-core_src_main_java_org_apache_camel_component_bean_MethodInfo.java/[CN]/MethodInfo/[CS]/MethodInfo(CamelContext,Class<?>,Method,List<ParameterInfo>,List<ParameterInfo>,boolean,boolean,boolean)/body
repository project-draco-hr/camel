{
  this.camelContext=camelContext;
  this.type=type;
  this.method=method;
  this.parameters=parameters;
  this.bodyParameters=bodyParameters;
  this.hasCustomAnnotation=hasCustomAnnotation;
  this.hasHandlerAnnotation=hasHandlerAnnotation;
  this.parametersExpression=createParametersExpression();
  Pattern oneway=findOneWayAnnotation(method);
  if (oneway != null) {
    pattern=oneway.value();
  }
 else   if (voidAsInOnly && isReturnTypeVoid()) {
    pattern=ExchangePattern.InOnly;
  }
  if (method.getAnnotation(org.apache.camel.RecipientList.class) != null && matchContext(method.getAnnotation(org.apache.camel.RecipientList.class).context())) {
    org.apache.camel.RecipientList annotation=method.getAnnotation(org.apache.camel.RecipientList.class);
    recipientList=new RecipientList(camelContext,annotation.delimiter());
    recipientList.setStopOnException(annotation.stopOnException());
    recipientList.setParallelProcessing(annotation.parallelProcessing());
    if (ObjectHelper.isNotEmpty(annotation.executorServiceRef())) {
      ExecutorService executor=CamelContextHelper.mandatoryLookup(camelContext,annotation.executorServiceRef(),ExecutorService.class);
      recipientList.setExecutorService(executor);
    }
    if (annotation.parallelProcessing() && recipientList.getExecutorService() == null) {
      ExecutorService executor=camelContext.getExecutorServiceStrategy().newDefaultThreadPool(this,"@RecipientList");
      recipientList.setExecutorService(executor);
    }
    if (ObjectHelper.isNotEmpty(annotation.strategyRef())) {
      AggregationStrategy strategy=CamelContextHelper.mandatoryLookup(camelContext,annotation.strategyRef(),AggregationStrategy.class);
      recipientList.setAggregationStrategy(strategy);
    }
    try {
      camelContext.addService(recipientList);
    }
 catch (    Exception e) {
      throw ObjectHelper.wrapRuntimeCamelException(e);
    }
  }
}
