{
  final Object[] arguments=parametersExpression.evaluate(exchange,Object[].class);
  return new MethodInvocation(){
    public Method getMethod(){
      return method;
    }
    public Object[] getArguments(){
      return arguments;
    }
    public Object proceed() throws Exception {
      if (LOG.isTraceEnabled()) {
        LOG.trace(">>>> invoking: " + method + " on bean: "+ pojo+ " with arguments: "+ asString(arguments)+ " for exchange: "+ exchange);
      }
      Object result=invoke(method,pojo,arguments,exchange);
      if (recipientList != null) {
        if (!recipientList.isStarted()) {
          ServiceHelper.startService(recipientList);
        }
        recipientList.sendToRecipientList(exchange,result);
        return Void.TYPE;
      }
      if (routingSlip != null) {
        if (!routingSlip.isStarted()) {
          ServiceHelper.startService(routingSlip);
        }
        routingSlip.doRoutingSlip(exchange,result);
        return Void.TYPE;
      }
      return result;
    }
    public Object getThis(){
      return pojo;
    }
    public AccessibleObject getStaticPart(){
      return method;
    }
  }
;
}
