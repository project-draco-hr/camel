{
  final Object[] arguments=parametersExpression.evaluate(exchange,Object[].class);
  return new MethodInvocation(){
    public Method getMethod(){
      return method;
    }
    public Object[] getArguments(){
      return arguments;
    }
    public boolean proceed(    AsyncCallback callback){
      try {
        return doProceed(callback);
      }
 catch (      InvocationTargetException e) {
        exchange.setException(e.getTargetException());
        callback.done(true);
        return true;
      }
catch (      Throwable e) {
        exchange.setException(e);
        callback.done(true);
        return true;
      }
    }
    private boolean doProceed(    AsyncCallback callback) throws Exception {
      if (dynamicRouter != null) {
        if (!dynamicRouter.isStarted()) {
          ServiceHelper.startService(dynamicRouter);
        }
        Expression expression=new DynamicRouterExpression(pojo);
        return dynamicRouter.doRoutingSlip(exchange,expression,callback);
      }
      if (LOG.isTraceEnabled()) {
        LOG.trace(">>>> invoking: {} on bean: {} with arguments: {} for exchange: {}",new Object[]{method,pojo,asString(arguments),exchange});
      }
      Object result=invoke(method,pojo,arguments,exchange);
      if (recipientList != null) {
        if (!recipientList.isStarted()) {
          ServiceHelper.startService(recipientList);
        }
        return recipientList.sendToRecipientList(exchange,result,callback);
      }
      if (routingSlip != null) {
        if (!routingSlip.isStarted()) {
          ServiceHelper.startService(routingSlip);
        }
        return routingSlip.doRoutingSlip(exchange,result,callback);
      }
      if (!getMethod().getReturnType().equals(Void.TYPE) && result != Void.TYPE) {
        if (exchange.getPattern().isOutCapable()) {
          LOG.debug("Setting bean invocation result on the OUT message: {}",result);
          exchange.getOut().setBody(result);
          exchange.getOut().getHeaders().putAll(exchange.getIn().getHeaders());
        }
 else {
          LOG.debug("Setting bean invocation result on the IN message: {}",result);
          exchange.getIn().setBody(result);
        }
      }
      callback.done(true);
      return true;
    }
    public Object getThis(){
      return pojo;
    }
    public AccessibleObject getStaticPart(){
      return method;
    }
  }
;
}
