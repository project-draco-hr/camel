{
  final int size=parameters.size();
  final Expression[] expressions=new Expression[size];
  for (int i=0; i < size; i++) {
    Expression parameterExpression=parameters.get(i).getExpression();
    expressions[i]=parameterExpression;
  }
  return new Expression<Exchange>(){
    public Object evaluate(    Exchange exchange){
      Object[] answer=new Object[size];
      Object body=exchange.getIn().getBody();
      boolean multiParameterArray=false;
      if (exchange.getIn().getHeader(BeanProcessor.MULTI_PARAMETER_ARRAY) != null) {
        multiParameterArray=exchange.getIn().getHeader(BeanProcessor.MULTI_PARAMETER_ARRAY,Boolean.class);
      }
      for (int i=0; i < size; i++) {
        Object value=null;
        if (multiParameterArray) {
          value=((Object[])body)[i];
        }
 else {
          value=expressions[i].evaluate(exchange);
        }
        Class expectedType=parameters.get(i).getType();
        value=ExchangeHelper.convertToType(exchange,expectedType,value);
        answer[i]=value;
      }
      return answer;
    }
    @Override public String toString(){
      return "ParametersExpression: " + Arrays.asList(expressions);
    }
  }
;
}
