{
  if (isPlatform("aix")) {
    return;
  }
  if (isPlatform("windows")) {
    return;
  }
  getMockEndpoint("mock:result").expectedMessageCount(1);
  getMockEndpoint("foo").expectedMessageCount(1);
  template.sendBody("direct:start","Hello World");
  assertMockEndpointsSatisfied();
  MBeanServer mbeanServer=getMBeanServer();
  Set<ObjectName> set=mbeanServer.queryNames(new ObjectName("*:type=producers,*"),null);
  assertEquals(2,set.size());
  Iterator<ObjectName> it=set.iterator();
  for (int i=0; i < 2; i++) {
    ObjectName on=it.next();
    boolean registered=mbeanServer.isRegistered(on);
    assertEquals("Should be registered",true,registered);
    String uri=(String)mbeanServer.getAttribute(on,"EndpointUri");
    assertTrue(uri,uri.equals("mock://foo") || uri.equals("mock://result"));
    String state=(String)mbeanServer.getAttribute(on,"State");
    assertEquals("Should be started",ServiceStatus.Started.name(),state);
  }
  set=mbeanServer.queryNames(new ObjectName("*:type=endpoints,*"),null);
  assertEquals(3,set.size());
  it=set.iterator();
  for (int i=0; i < 3; i++) {
    ObjectName on=it.next();
    boolean registered=mbeanServer.isRegistered(on);
    assertEquals("Should be registered",true,registered);
    String uri=(String)mbeanServer.getAttribute(on,"EndpointUri");
    assertTrue(uri,uri.equals("direct://start") || uri.equals("mock://foo") || uri.equals("mock://result"));
  }
}
