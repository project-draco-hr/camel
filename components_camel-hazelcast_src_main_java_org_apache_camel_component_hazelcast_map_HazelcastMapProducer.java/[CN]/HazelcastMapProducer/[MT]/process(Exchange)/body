{
  Map<String,Object> headers=exchange.getIn().getHeaders();
  Object oid=null;
  Object ovalue=null;
  Object ttl=null;
  Object ttlUnit=null;
  String query=null;
  if (headers.containsKey(HazelcastConstants.OBJECT_ID)) {
    oid=headers.get(HazelcastConstants.OBJECT_ID);
  }
  if (headers.containsKey(HazelcastConstants.OBJECT_VALUE)) {
    ovalue=headers.get(HazelcastConstants.OBJECT_VALUE);
  }
  if (headers.containsKey(HazelcastConstants.TTL_VALUE)) {
    ttl=headers.get(HazelcastConstants.TTL_VALUE);
  }
  if (headers.containsKey(HazelcastConstants.TTL_UNIT)) {
    ttlUnit=headers.get(HazelcastConstants.TTL_UNIT);
  }
  if (headers.containsKey(HazelcastConstants.QUERY)) {
    query=(String)headers.get(HazelcastConstants.QUERY);
  }
  final int operation=lookupOperationNumber(exchange);
switch (operation) {
case HazelcastConstants.PUT_OPERATION:
    if (ObjectHelper.isEmpty(ttl) && ObjectHelper.isEmpty(ttlUnit)) {
      this.put(oid,exchange);
    }
 else {
      this.put(oid,ttl,ttlUnit,exchange);
    }
  break;
case HazelcastConstants.PUT_IF_ABSENT_OPERATION:
if (ObjectHelper.isEmpty(ttl) && ObjectHelper.isEmpty(ttlUnit)) {
  this.putIfAbsent(oid,exchange);
}
 else {
  this.putIfAbsent(oid,ttl,ttlUnit,exchange);
}
break;
case HazelcastConstants.GET_OPERATION:
this.get(oid,exchange);
break;
case HazelcastConstants.GET_ALL_OPERATION:
this.getAll(oid,exchange);
break;
case HazelcastConstants.DELETE_OPERATION:
this.delete(oid);
break;
case HazelcastConstants.UPDATE_OPERATION:
if (ObjectHelper.isEmpty(ovalue)) {
this.update(oid,exchange);
}
 else {
this.update(oid,ovalue,exchange);
}
break;
case HazelcastConstants.QUERY_OPERATION:
this.query(query,exchange);
break;
case HazelcastConstants.CLEAR_OPERATION:
this.clear(exchange);
break;
default :
throw new IllegalArgumentException(String.format("The value '%s' is not allowed for parameter '%s' on the MAP cache.",operation,HazelcastConstants.OPERATION));
}
HazelcastComponentHelper.copyHeaders(exchange);
}
