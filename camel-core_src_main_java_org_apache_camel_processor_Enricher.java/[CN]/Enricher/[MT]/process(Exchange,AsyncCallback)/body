{
  final Exchange resourceExchange=createResourceExchange(exchange,ExchangePattern.InOut);
  AsyncProcessor ap=AsyncProcessorConverterHelper.convert(producer);
  boolean sync=AsyncProcessorHelper.process(ap,resourceExchange,new AsyncCallback(){
    public void done(    boolean doneSync){
      if (doneSync) {
        return;
      }
      if (resourceExchange.isFailed()) {
        copyResultsPreservePattern(exchange,resourceExchange);
      }
 else {
        prepareResult(exchange);
        ExchangeHelper.prepareAggregation(exchange,resourceExchange);
        Exchange aggregatedExchange=aggregationStrategy.aggregate(exchange,resourceExchange);
        if (aggregatedExchange != null) {
          copyResultsPreservePattern(exchange,aggregatedExchange);
        }
      }
      if (exchange.hasOut()) {
        exchange.getOut().setHeader(Exchange.TO_ENDPOINT,producer.getEndpoint().getEndpointUri());
      }
 else {
        exchange.getIn().setHeader(Exchange.TO_ENDPOINT,producer.getEndpoint().getEndpointUri());
      }
      callback.done(false);
    }
  }
);
  if (!sync) {
    LOG.trace("Processing exchangeId: {} is continued being processed asynchronously",exchange.getExchangeId());
    return false;
  }
  LOG.trace("Processing exchangeId: {} is continued being processed synchronously",exchange.getExchangeId());
  if (resourceExchange.isFailed()) {
    copyResultsPreservePattern(exchange,resourceExchange);
  }
 else {
    prepareResult(exchange);
    ExchangeHelper.prepareAggregation(exchange,resourceExchange);
    Exchange aggregatedExchange;
    try {
      aggregatedExchange=aggregationStrategy.aggregate(exchange,resourceExchange);
    }
 catch (    Throwable e) {
      exchange.setException(new CamelExchangeException("Error occurred during aggregation",exchange,e));
      callback.done(true);
      return true;
    }
    if (aggregatedExchange != null) {
      copyResultsPreservePattern(exchange,aggregatedExchange);
    }
  }
  if (exchange.hasOut()) {
    exchange.getOut().setHeader(Exchange.TO_ENDPOINT,producer.getEndpoint().getEndpointUri());
  }
 else {
    exchange.getIn().setHeader(Exchange.TO_ENDPOINT,producer.getEndpoint().getEndpointUri());
  }
  callback.done(true);
  return true;
}
