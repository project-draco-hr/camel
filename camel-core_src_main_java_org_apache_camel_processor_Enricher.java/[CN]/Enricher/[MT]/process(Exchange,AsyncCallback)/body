{
  final Exchange resourceExchange=createResourceExchange(exchange,ExchangePattern.InOut);
  final Endpoint destination=producer.getEndpoint();
  EventHelper.notifyExchangeSending(exchange.getContext(),resourceExchange,destination);
  final StopWatch watch=new StopWatch();
  AsyncProcessor ap=AsyncProcessorConverterHelper.convert(producer);
  boolean sync=ap.process(resourceExchange,new AsyncCallback(){
    public void done(    boolean doneSync){
      if (doneSync) {
        return;
      }
      long timeTaken=watch.stop();
      EventHelper.notifyExchangeSent(resourceExchange.getContext(),resourceExchange,destination,timeTaken);
      if (!isAggregateOnException() && resourceExchange.isFailed()) {
        copyResultsPreservePattern(exchange,resourceExchange);
      }
 else {
        prepareResult(exchange);
        try {
          ExchangeHelper.prepareAggregation(exchange,resourceExchange);
          Exchange aggregatedExchange=aggregationStrategy.aggregate(exchange,resourceExchange);
          if (aggregatedExchange != null) {
            copyResultsPreservePattern(exchange,aggregatedExchange);
          }
        }
 catch (        Throwable e) {
          exchange.setException(new CamelExchangeException("Error occurred during aggregation",exchange,e));
          callback.done(false);
          return;
        }
      }
      exchange.setProperty(Exchange.TO_ENDPOINT,producer.getEndpoint().getEndpointUri());
      callback.done(false);
    }
  }
);
  if (!sync) {
    LOG.trace("Processing exchangeId: {} is continued being processed asynchronously",exchange.getExchangeId());
    return false;
  }
  LOG.trace("Processing exchangeId: {} is continued being processed synchronously",exchange.getExchangeId());
  long timeTaken=watch.stop();
  EventHelper.notifyExchangeSent(resourceExchange.getContext(),resourceExchange,destination,timeTaken);
  if (!isAggregateOnException() && resourceExchange.isFailed()) {
    copyResultsPreservePattern(exchange,resourceExchange);
  }
 else {
    prepareResult(exchange);
    try {
      ExchangeHelper.prepareAggregation(exchange,resourceExchange);
      Exchange aggregatedExchange=aggregationStrategy.aggregate(exchange,resourceExchange);
      if (aggregatedExchange != null) {
        copyResultsPreservePattern(exchange,aggregatedExchange);
      }
    }
 catch (    Throwable e) {
      exchange.setException(new CamelExchangeException("Error occurred during aggregation",exchange,e));
      callback.done(true);
      return true;
    }
  }
  exchange.setProperty(Exchange.TO_ENDPOINT,producer.getEndpoint().getEndpointUri());
  callback.done(true);
  return true;
}
