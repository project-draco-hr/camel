{
  final String ownerPass="ownerPass";
  final String userPass="userPass";
  final String expectedText="expectedText";
  AccessPermission accessPermission=new AccessPermission();
  accessPermission.setCanPrint(false);
  StandardProtectionPolicy protectionPolicy=new StandardProtectionPolicy(ownerPass,userPass,accessPermission);
  protectionPolicy.setEncryptionKeyLength(128);
  template.sendBodyAndHeader("direct:start",expectedText,PdfHeaderConstants.PROTECTION_POLICY_HEADER_NAME,protectionPolicy);
  resultEndpoint.setExpectedMessageCount(1);
  resultEndpoint.expectedMessagesMatches(new Predicate(){
    @Override public boolean matches(    Exchange exchange){
      Object body=exchange.getIn().getBody();
      assertThat(body,instanceOf(ByteArrayOutputStream.class));
      try {
        PDDocument doc=PDDocument.load(new ByteArrayInputStream(((ByteArrayOutputStream)body).toByteArray()));
        assertTrue("Expected encrypted document",doc.isEncrypted());
        doc.decrypt(userPass);
        assertFalse("Printing should not be permitted",doc.getCurrentAccessPermission().canPrint());
        PDFTextStripper pdfTextStripper=new PDFTextStripper();
        String text=pdfTextStripper.getText(doc);
        assertEquals(1,doc.getNumberOfPages());
        assertThat(text,containsString(expectedText));
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
      return true;
    }
  }
);
  resultEndpoint.assertIsSatisfied();
}
