{
  SSLContext controlContext=SSLContext.getInstance("TLS");
  controlContext.init(null,null,null);
  SSLEngine controlEngine=controlContext.createSSLEngine();
  SSLSocket controlSocket=(SSLSocket)controlContext.getSocketFactory().createSocket();
  SSLServerSocket controlServerSocket=(SSLServerSocket)controlContext.getServerSocketFactory().createServerSocket();
  SSLContextParameters scp=new SSLContextParameters();
  SSLContext context=scp.createSSLContext();
  CipherSuitesParameters csp=new CipherSuitesParameters();
  scp.setCipherSuites(csp);
  SSLEngine engine=context.createSSLEngine();
  SSLSocket socket=(SSLSocket)context.getSocketFactory().createSocket();
  SSLServerSocket serverSocket=(SSLServerSocket)context.getServerSocketFactory().createServerSocket();
  assertTrue(Arrays.equals(controlEngine.getEnabledCipherSuites(),engine.getEnabledCipherSuites()));
  assertTrue(Arrays.equals(controlSocket.getEnabledCipherSuites(),socket.getEnabledCipherSuites()));
  assertTrue(Arrays.equals(this.getDefaultCipherSuiteIncludes(controlServerSocket.getSupportedCipherSuites()),serverSocket.getEnabledCipherSuites()));
  FilterParameters filter=new FilterParameters();
  scp.setCipherSuitesFilter(filter);
  context=scp.createSSLContext();
  engine=context.createSSLEngine();
  socket=(SSLSocket)context.getSocketFactory().createSocket();
  serverSocket=(SSLServerSocket)context.getServerSocketFactory().createServerSocket();
  assertEquals(0,engine.getEnabledCipherSuites().length);
  assertEquals(0,socket.getEnabledCipherSuites().length);
  assertEquals(0,serverSocket.getEnabledCipherSuites().length);
  filter.getInclude().add(".*");
  context=scp.createSSLContext();
  engine=context.createSSLEngine();
  socket=(SSLSocket)context.getSocketFactory().createSocket();
  serverSocket=(SSLServerSocket)context.getServerSocketFactory().createServerSocket();
  assertEquals(0,engine.getEnabledCipherSuites().length);
  assertEquals(0,socket.getEnabledCipherSuites().length);
  assertEquals(0,serverSocket.getEnabledCipherSuites().length);
  filter.getExclude().add(".*");
  context=scp.createSSLContext();
  engine=context.createSSLEngine();
  socket=(SSLSocket)context.getSocketFactory().createSocket();
  serverSocket=(SSLServerSocket)context.getServerSocketFactory().createServerSocket();
  assertEquals(0,engine.getEnabledCipherSuites().length);
  assertEquals(0,socket.getEnabledCipherSuites().length);
  assertEquals(0,serverSocket.getEnabledCipherSuites().length);
  filter.getInclude().clear();
  filter.getExclude().clear();
  csp.getCipherSuite().add("TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256");
  filter.getInclude().add("TLS.*");
  context=scp.createSSLContext();
  engine=context.createSSLEngine();
  socket=(SSLSocket)context.getSocketFactory().createSocket();
  serverSocket=(SSLServerSocket)context.getServerSocketFactory().createServerSocket();
  assertTrue(engine.getEnabledCipherSuites().length >= 1);
  assertStartsWith(engine.getEnabledCipherSuites(),"TLS");
  assertTrue(socket.getEnabledCipherSuites().length >= 1);
  assertStartsWith(socket.getEnabledCipherSuites(),"TLS");
  assertTrue(serverSocket.getEnabledCipherSuites().length >= 1);
  assertStartsWith(serverSocket.getEnabledCipherSuites(),"TLS");
}
