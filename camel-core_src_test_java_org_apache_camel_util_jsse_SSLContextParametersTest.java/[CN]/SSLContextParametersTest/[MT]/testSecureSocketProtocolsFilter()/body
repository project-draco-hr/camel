{
  SSLContext controlContext=SSLContext.getInstance("TLS");
  controlContext.init(null,null,null);
  SSLEngine controlEngine=controlContext.createSSLEngine();
  SSLSocket controlSocket=(SSLSocket)controlContext.getSocketFactory().createSocket();
  SSLServerSocket controlServerSocket=(SSLServerSocket)controlContext.getServerSocketFactory().createServerSocket();
  SSLContextParameters scp=new SSLContextParameters();
  SSLContext context=scp.createSSLContext();
  SSLEngine engine=context.createSSLEngine();
  SSLSocket socket=(SSLSocket)context.getSocketFactory().createSocket();
  SSLServerSocket serverSocket=(SSLServerSocket)context.getServerSocketFactory().createServerSocket();
  assertTrue(Arrays.equals(controlEngine.getEnabledProtocols(),engine.getEnabledProtocols()));
  assertTrue(Arrays.equals(controlSocket.getEnabledProtocols(),socket.getEnabledProtocols()));
  checkProtocols(controlServerSocket.getEnabledProtocols(),serverSocket.getEnabledProtocols());
  FilterParameters filter=new FilterParameters();
  scp.setSecureSocketProtocolsFilter(filter);
  context=scp.createSSLContext();
  engine=context.createSSLEngine();
  socket=(SSLSocket)context.getSocketFactory().createSocket();
  serverSocket=(SSLServerSocket)context.getServerSocketFactory().createServerSocket();
  assertEquals(0,engine.getEnabledProtocols().length);
  assertEquals(0,socket.getEnabledProtocols().length);
  assertEquals(0,serverSocket.getEnabledProtocols().length);
  filter.getInclude().add(".*");
  context=scp.createSSLContext();
  engine=context.createSSLEngine();
  socket=(SSLSocket)context.getSocketFactory().createSocket();
  serverSocket=(SSLServerSocket)context.getServerSocketFactory().createServerSocket();
  assertTrue(Arrays.equals(controlEngine.getEnabledProtocols(),engine.getEnabledProtocols()));
  assertTrue(Arrays.equals(controlSocket.getEnabledProtocols(),socket.getEnabledProtocols()));
  checkProtocols(controlServerSocket.getEnabledProtocols(),serverSocket.getEnabledProtocols());
  filter.getExclude().add(".*");
  context=scp.createSSLContext();
  engine=context.createSSLEngine();
  socket=(SSLSocket)context.getSocketFactory().createSocket();
  serverSocket=(SSLServerSocket)context.getServerSocketFactory().createServerSocket();
  assertEquals(0,engine.getEnabledProtocols().length);
  assertEquals(0,socket.getEnabledProtocols().length);
  assertEquals(0,serverSocket.getEnabledProtocols().length);
  filter.getInclude().clear();
  filter.getExclude().clear();
  filter.getInclude().add("TLS.*");
  context=scp.createSSLContext();
  engine=context.createSSLEngine();
  socket=(SSLSocket)context.getSocketFactory().createSocket();
  serverSocket=(SSLServerSocket)context.getServerSocketFactory().createServerSocket();
  if (!isPlatform("aix")) {
    assertTrue(engine.getEnabledProtocols().length >= 1);
    assertStartsWith(engine.getEnabledProtocols(),"TLS");
    assertTrue(socket.getEnabledProtocols().length >= 1);
    assertStartsWith(socket.getEnabledProtocols(),"TLS");
    assertTrue(socket.getEnabledProtocols().length >= 1);
    assertStartsWith(serverSocket.getEnabledProtocols(),"TLS");
  }
}
