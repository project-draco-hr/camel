{
  SSLContext controlContext=SSLContext.getInstance("TLS");
  controlContext.init(null,null,null);
  SSLEngine controlEngine=controlContext.createSSLEngine();
  SSLSocket controlSocket=(SSLSocket)controlContext.getSocketFactory().createSocket();
  SSLServerSocket controlServerSocket=(SSLServerSocket)controlContext.getServerSocketFactory().createServerSocket();
  SSLContextParameters scp=new SSLContextParameters();
  SSLContext context=scp.createSSLContext();
  SSLEngine engine=context.createSSLEngine();
  SSLSocket socket=(SSLSocket)context.getSocketFactory().createSocket();
  SSLServerSocket serverSocket=(SSLServerSocket)context.getServerSocketFactory().createServerSocket();
  assertTrue(Arrays.equals(controlEngine.getEnabledProtocols(),engine.getEnabledProtocols()));
  assertTrue(Arrays.equals(controlSocket.getEnabledProtocols(),socket.getEnabledProtocols()));
  checkProtocols(controlServerSocket.getEnabledProtocols(),serverSocket.getEnabledProtocols());
  SecureSocketProtocolsParameters sspp=new SecureSocketProtocolsParameters();
  scp.setSecureSocketProtocols(sspp);
  context=scp.createSSLContext();
  engine=context.createSSLEngine();
  socket=(SSLSocket)context.getSocketFactory().createSocket();
  serverSocket=(SSLServerSocket)context.getServerSocketFactory().createServerSocket();
  assertEquals(0,engine.getEnabledProtocols().length);
  assertEquals(0,socket.getEnabledProtocols().length);
  assertEquals(0,serverSocket.getEnabledProtocols().length);
  sspp.getSecureSocketProtocol().add("TLSv1");
  context=scp.createSSLContext();
  engine=context.createSSLEngine();
  socket=(SSLSocket)context.getSocketFactory().createSocket();
  serverSocket=(SSLServerSocket)context.getServerSocketFactory().createServerSocket();
  assertEquals(1,engine.getEnabledProtocols().length);
  assertEquals("TLSv1",engine.getEnabledProtocols()[0]);
  assertEquals(1,socket.getEnabledProtocols().length);
  assertEquals("TLSv1",socket.getEnabledProtocols()[0]);
  assertEquals(1,serverSocket.getEnabledProtocols().length);
  assertEquals("TLSv1",serverSocket.getEnabledProtocols()[0]);
  FilterParameters filter=new FilterParameters();
  filter.getInclude().add(".*");
  scp.setSecureSocketProtocolsFilter(filter);
  context=scp.createSSLContext();
  engine=context.createSSLEngine();
  socket=(SSLSocket)context.getSocketFactory().createSocket();
  serverSocket=(SSLServerSocket)context.getServerSocketFactory().createServerSocket();
  if (!isPlatform("aix")) {
    assertEquals(1,engine.getEnabledProtocols().length);
    assertEquals("TLSv1",engine.getEnabledProtocols()[0]);
    assertEquals(1,socket.getEnabledProtocols().length);
    assertEquals("TLSv1",socket.getEnabledProtocols()[0]);
    assertEquals(1,socket.getEnabledProtocols().length);
    assertEquals("TLSv1",serverSocket.getEnabledProtocols()[0]);
  }
}
