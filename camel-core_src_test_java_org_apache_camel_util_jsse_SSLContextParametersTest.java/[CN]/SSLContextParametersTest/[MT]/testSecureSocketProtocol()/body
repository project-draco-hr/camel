{
  SSLContextParameters scp=new SSLContextParameters();
  scp.setSecureSocketProtocol("SSLv3");
  SSLContext context=scp.createSSLContext();
  assertEquals("SSLv3",context.getProtocol());
  SSLEngine engine=context.createSSLEngine();
  SSLSocket socket=(SSLSocket)context.getSocketFactory().createSocket();
  SSLServerSocket serverSocket=(SSLServerSocket)context.getServerSocketFactory().createServerSocket();
  assertStartsWith(engine.getEnabledProtocols(),"TLS");
  assertStartsWith(socket.getEnabledProtocols(),"TLS");
  assertStartsWith(serverSocket.getEnabledProtocols(),"TLS");
  final SecureSocketProtocolsParameters protocols=new SecureSocketProtocolsParameters();
  protocols.setSecureSocketProtocol(Collections.singletonList("SSLv3"));
  scp.setSecureSocketProtocols(protocols);
  context=scp.createSSLContext();
  engine=context.createSSLEngine();
  socket=(SSLSocket)context.getSocketFactory().createSocket();
  serverSocket=(SSLServerSocket)context.getServerSocketFactory().createServerSocket();
  assertEquals(engine.getEnabledProtocols().length,1);
  assertEquals(engine.getEnabledProtocols()[0],"SSLv3");
  assertEquals(socket.getEnabledProtocols().length,1);
  assertEquals(socket.getEnabledProtocols()[0],"SSLv3");
  assertEquals(serverSocket.getEnabledProtocols().length,1);
  assertEquals(serverSocket.getEnabledProtocols()[0],"SSLv3");
}
