{
  MailEndpoint endpoint=context.getEndpoint("smtp://ryan@mymailserver.com?password=secret",MailEndpoint.class);
  endpoint.getConfiguration().setUseInlineAttachments(true);
  endpoint.getConfiguration().setAlternateBodyHeader(MailConfiguration.DEFAULT_ALTERNATE_BODY_HEADER);
  Exchange exchange=endpoint.createExchange();
  Message in=exchange.getIn();
  in.setBody(htmlBody);
  in.setHeader("mail_alternateBody",alternativeBody);
  in.addAttachment("cid:0001",new DataHandler(new FileDataSource("src/test/data/logo.jpeg")));
  Producer producer=endpoint.createProducer();
  producer.start();
  producer.process(exchange);
  Thread.sleep(1000);
  MockEndpoint mock=getMockEndpoint("mock:result");
  mock.expectedMessageCount(1);
  Exchange out=mock.assertExchangeReceived(0);
  mock.assertIsSatisfied();
  if (log.isTraceEnabled()) {
    ByteArrayOutputStream baos=new ByteArrayOutputStream(((MailMessage)out.getIn()).getMessage().getSize());
    ((MailMessage)out.getIn()).getMessage().writeTo(baos);
    String dumpedMessage=baos.toString();
    log.trace("multipart alternative: \n" + dumpedMessage);
  }
  assertEquals(alternativeBody,out.getIn().getBody(String.class));
  Map<String,DataHandler> attachments=out.getIn().getAttachments();
  assertNotNull("Should not have null attachments",attachments);
  assertEquals(1,attachments.size());
  assertEquals("multipart body should have 2 parts",2,out.getIn().getBody(MimeMultipart.class).getCount());
  producer.stop();
}
