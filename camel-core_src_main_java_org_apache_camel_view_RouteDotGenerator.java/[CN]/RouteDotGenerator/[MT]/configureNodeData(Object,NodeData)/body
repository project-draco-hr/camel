{
  if (node instanceof FromType) {
    FromType fromType=(FromType)node;
    nodeData.label=fromType.getRef();
    if (isNullOrBlank(nodeData.label)) {
      nodeData.label=fromType.getUri();
    }
  }
 else   if (node instanceof ToType) {
    ToType toType=(ToType)node;
    String ref=toType.getRef();
    if (isNullOrBlank(ref)) {
      ref=toType.getUri();
    }
    nodeData.label=ref;
  }
 else   if (node instanceof FilterType) {
    FilterType filterType=(FilterType)node;
    nodeData.image=imagePrefix + "MessageFilterIcon.gif";
    nodeData.edgeLabel=getLabel(filterType.getExpression());
    nodeData.nodeType="Message Filter";
  }
 else   if (node instanceof ChoiceType) {
    ChoiceType choiceType=(ChoiceType)node;
    nodeData.image=imagePrefix + "ContentBasedRouterIcon.gif";
    CollectionStringBuffer buffer=new CollectionStringBuffer();
    List<WhenType> list=choiceType.getWhenClauses();
    for (    WhenType whenType : list) {
      buffer.append(getLabel(whenType.getExpression()));
    }
    nodeData.edgeLabel=buffer.toString();
    nodeData.nodeType="Content Based Router";
  }
 else   if (node instanceof RecipientListType) {
    RecipientListType recipientListType=(RecipientListType)node;
    nodeData.image=imagePrefix + "RecipientListIcon.gif";
    nodeData.edgeLabel=getLabel(recipientListType.getExpression());
    nodeData.nodeType="Recipient List";
  }
 else   if (node instanceof SplitterType) {
    SplitterType splitterType=(SplitterType)node;
    nodeData.image=imagePrefix + "SplitterIcon.gif";
    nodeData.edgeLabel=getLabel(splitterType.getExpression());
    nodeData.nodeType="Splitter";
  }
 else   if (node instanceof AggregatorType) {
    AggregatorType aggregatorType=(AggregatorType)node;
    nodeData.image=imagePrefix + "AggregatorIcon.gif";
    nodeData.edgeLabel=getLabel(aggregatorType.getExpression());
    nodeData.nodeType="Aggregator";
  }
 else   if (node instanceof ResequencerType) {
    ResequencerType resequencerType=(ResequencerType)node;
    nodeData.image=imagePrefix + "ResequencerIcon.gif";
    nodeData.edgeLabel=getLabel(resequencerType.getExpressions());
    nodeData.nodeType="Resequencer";
  }
  if (nodeData.label == null) {
    if (isNotNullAndNonEmpty(nodeData.edgeLabel)) {
      nodeData.label="";
    }
 else {
      nodeData.label=node.toString();
    }
  }
  if (isNullOrBlank(nodeData.tooltop)) {
    if (isNotNullAndNonEmpty(nodeData.nodeType)) {
      String description=isNotNullAndNonEmpty(nodeData.edgeLabel) ? nodeData.edgeLabel : nodeData.label;
      nodeData.tooltop=nodeData.nodeType + ": " + description;
    }
 else {
      nodeData.tooltop=nodeData.label;
    }
  }
}
