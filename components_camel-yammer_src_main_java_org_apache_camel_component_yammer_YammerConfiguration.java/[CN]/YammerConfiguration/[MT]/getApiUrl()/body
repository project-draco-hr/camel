{
  StringBuilder url=new StringBuilder();
switch (YammerFunctionType.fromUri(function)) {
case MESSAGES:
    url.append(YammerConstants.YAMMER_BASE_API_URL);
  url.append(function);
url.append(".json");
break;
case ALGO:
case FOLLOWING:
case MY_FEED:
case PRIVATE:
case SENT:
url.append(YammerConstants.YAMMER_BASE_API_URL);
url.append("messages/");
url.append(function);
url.append(".json");
break;
default :
throw new Exception(String.format("%s is not a valid Yammer function type.",function));
}
StringBuilder args=new StringBuilder();
if (limit > 0) {
args.append("limit=");
args.append(limit);
}
if (getOlderThan() > 0) {
if (args.length() > 0) {
args.append("&");
}
args.append("older_than=");
args.append(getOlderThan());
}
if (getNewerThan() > 0) {
if (args.length() > 0) {
args.append("&");
}
args.append("newer_than=");
args.append(getNewerThan());
}
if (ObjectHelper.isNotEmpty(getThreaded()) && ("true".equals(getThreaded()) || "extended".equals(getThreaded()))) {
if (args.length() > 0) {
args.append("&");
}
args.append("threaded=");
args.append(getThreaded());
}
if (args.length() > 0) {
url.append("?");
url.append(args);
}
return url.toString();
}
