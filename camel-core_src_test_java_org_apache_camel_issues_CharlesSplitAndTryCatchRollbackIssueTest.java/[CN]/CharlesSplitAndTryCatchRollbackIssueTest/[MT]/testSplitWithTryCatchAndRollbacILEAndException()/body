{
  MockEndpoint split=getMockEndpoint("mock:split");
  MockEndpoint ile=getMockEndpoint("mock:ile");
  MockEndpoint exception=getMockEndpoint("mock:exception");
  split.expectedBodiesReceived("A","B");
  ile.expectedMessageCount(1);
  exception.expectedMessageCount(1);
  try {
    template.sendBody("direct:start","A,Forced,B,Kaboom,C");
    fail("Should thrown an exception");
  }
 catch (  CamelExecutionException e) {
    CamelExchangeException ee=assertIsInstanceOf(CamelExchangeException.class,e.getCause());
    assertTrue(ee.getMessage().startsWith("Sequential processing failed for number 3 on the exchange: Exchange[Message: Kaboom]"));
    RollbackExchangeException re=assertIsInstanceOf(RollbackExchangeException.class,ee.getCause());
    assertEquals("Intended rollback on the exchange: Exchange[Message: Kaboom]",re.getMessage());
  }
  assertMockEndpointsSatisfied();
}
