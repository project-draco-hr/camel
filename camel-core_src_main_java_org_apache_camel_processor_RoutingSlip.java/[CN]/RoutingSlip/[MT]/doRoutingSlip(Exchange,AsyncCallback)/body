{
  Exchange current=exchange;
  RoutingSlipIterator iter;
  try {
    iter=createRoutingSlipIterator(exchange);
  }
 catch (  Exception e) {
    exchange.setException(e);
    callback.done(true);
    return true;
  }
  if (current.hasProperties()) {
    current.setProperty(Exchange.SLIP_ENDPOINT,null);
  }
  while (iter.hasNext(current)) {
    Endpoint endpoint;
    try {
      endpoint=resolveEndpoint(iter,exchange);
      if (endpoint == null) {
        continue;
      }
    }
 catch (    Exception e) {
      current.setException(e);
      break;
    }
    Exchange copy=prepareExchangeForRoutingSlip(current,endpoint);
    boolean sync=processExchange(endpoint,copy,exchange,callback,iter);
    current=copy;
    if (!sync) {
      log.trace("Processing exchangeId: {} is continued being processed asynchronously",exchange.getExchangeId());
      return false;
    }
    log.trace("Processing exchangeId: {} is continued being processed synchronously",exchange.getExchangeId());
    if (isIgnoreInvalidEndpoints()) {
      FailedToCreateProducerException e=current.getException(FailedToCreateProducerException.class);
      if (e != null) {
        if (log.isDebugEnabled()) {
          log.debug("Endpoint uri is invalid: " + endpoint + ". This exception will be ignored.",e);
        }
        current.setException(null);
      }
    }
    if (!continueProcessing(current,"so breaking out of the routing slip",log)) {
      break;
    }
  }
  log.trace("Processing complete for exchangeId: {} >>> {}",exchange.getExchangeId(),current);
  ExchangeHelper.copyResults(exchange,current);
  callback.done(true);
  return true;
}
