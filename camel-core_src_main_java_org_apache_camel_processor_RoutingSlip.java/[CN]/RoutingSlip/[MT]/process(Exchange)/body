{
  Message message=exchange.getIn();
  String[] recipients=recipients(message);
  Exchange current=exchange;
  for (  String nextRecipient : recipients) {
    Endpoint endpoint=resolveEndpoint(exchange,nextRecipient);
    Exchange copy=new DefaultExchange(current);
    updateRoutingSlip(current);
    copyOutToIn(copy,current);
    try {
      getProducerCache(exchange).doInProducer(endpoint,copy,null,new ProducerCallback<Object>(){
        public Object doInProducer(        Producer producer,        Exchange exchange,        ExchangePattern exchangePattern) throws Exception {
          exchange.setProperty(Exchange.TO_ENDPOINT,producer.getEndpoint().getEndpointUri());
          producer.process(exchange);
          return exchange;
        }
      }
);
    }
 catch (    Exception e) {
      copy.setException(e);
    }
 finally {
      current=copy;
    }
    boolean exceptionHandled=hasExceptionBeenHandledByErrorHandler(current);
    if (current.isFailed() || current.isRollbackOnly() || exceptionHandled) {
      if (LOG.isDebugEnabled()) {
        StringBuilder sb=new StringBuilder();
        sb.append("Message exchange has failed so breaking out of the routing slip: ").append(current);
        if (current.isRollbackOnly()) {
          sb.append(" Marked as rollback only.");
        }
        if (current.getException() != null) {
          sb.append(" Exception: ").append(current.getException());
        }
        if (current.hasOut() && current.getOut().isFault()) {
          sb.append(" Fault: ").append(current.getOut());
        }
        if (exceptionHandled) {
          sb.append(" Handled by the error handler.");
        }
        LOG.debug(sb.toString());
      }
      break;
    }
  }
  ExchangeHelper.copyResults(exchange,current);
}
