{
  int messageInTopic=10;
  int messageInOtherTopic=5;
  CountDownLatch messagesLatch=new CountDownLatch(messageInTopic + messageInOtherTopic);
  sendMessagesInRoute(messageInTopic,stringsTemplate,"IT test message",KafkaConstants.PARTITION_KEY,"1");
  sendMessagesInRoute(messageInOtherTopic,stringsTemplate,"IT test message in other topic",KafkaConstants.PARTITION_KEY,"1",KafkaConstants.TOPIC,TOPIC_STRINGS_IN_HEADER);
  createKafkaMessageConsumer(stringsConsumerConn,TOPIC_STRINGS,TOPIC_STRINGS_IN_HEADER,messagesLatch);
  boolean allMessagesReceived=messagesLatch.await(200,TimeUnit.MILLISECONDS);
  assertTrue("Not all messages were published to the kafka topics. Not received: " + messagesLatch.getCount(),allMessagesReceived);
  List<Exchange> exchangeList=mockEndpoint.getExchanges();
  assertEquals("Fifteen Exchanges are expected",exchangeList.size(),15);
  for (  Exchange exchange : exchangeList) {
    @SuppressWarnings("unchecked") List<RecordMetadata> recordMetaData1=(List<RecordMetadata>)(exchange.getIn().getHeader(KafkaConstants.KAFKA_RECORDMETA));
    assertEquals("One RecordMetadata is expected.",recordMetaData1.size(),1);
    assertTrue("Offset is positive",recordMetaData1.get(0).offset() >= 0);
    assertTrue("Topic Name start with 'test'",recordMetaData1.get(0).topic().startsWith("test"));
  }
}
