{
  int messageInTopic=10;
  int messageInOtherTopic=5;
  CountDownLatch messagesLatch=new CountDownLatch(messageInTopic + messageInOtherTopic);
  List<String> msgs=new ArrayList<String>();
  for (int x=0; x < messageInTopic; x++) {
    msgs.add("Message " + x);
  }
  sendMessagesInRoute(1,stringsTemplate,msgs,KafkaConstants.PARTITION_KEY,"1");
  msgs=new ArrayList<String>();
  for (int x=0; x < messageInOtherTopic; x++) {
    msgs.add("Other Message " + x);
  }
  sendMessagesInRoute(1,stringsTemplate,msgs,KafkaConstants.PARTITION_KEY,"1",KafkaConstants.TOPIC,TOPIC_STRINGS_IN_HEADER);
  createKafkaMessageConsumer(stringsConsumerConn,TOPIC_STRINGS,TOPIC_STRINGS_IN_HEADER,messagesLatch);
  boolean allMessagesReceived=messagesLatch.await(200,TimeUnit.MILLISECONDS);
  assertTrue("Not all messages were published to the kafka topics. Not received: " + messagesLatch.getCount(),allMessagesReceived);
  List<Exchange> exchangeList=mockEndpoint.getExchanges();
  assertEquals("Two Exchanges are expected",exchangeList.size(),2);
  Exchange e1=exchangeList.get(0);
  @SuppressWarnings("unchecked") List<RecordMetadata> recordMetaData1=(List<RecordMetadata>)(e1.getIn().getHeader(KafkaConstants.KAFKA_RECORDMETA));
  assertEquals("Ten RecordMetadata is expected.",recordMetaData1.size(),10);
  for (  RecordMetadata recordMeta : recordMetaData1) {
    assertTrue("Offset is positive",recordMeta.offset() >= 0);
    assertTrue("Topic Name start with 'test'",recordMeta.topic().startsWith("test"));
  }
  Exchange e2=exchangeList.get(1);
  @SuppressWarnings("unchecked") List<RecordMetadata> recordMetaData2=(List<RecordMetadata>)(e2.getIn().getHeader(KafkaConstants.KAFKA_RECORDMETA));
  assertEquals("Five RecordMetadata is expected.",recordMetaData2.size(),5);
  for (  RecordMetadata recordMeta : recordMetaData2) {
    assertTrue("Offset is positive",recordMeta.offset() >= 0);
    assertTrue("Topic Name start with 'test'",recordMeta.topic().startsWith("test"));
  }
}
