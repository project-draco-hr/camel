{
  if (!isStarted()) {
    exchange.setException(new IllegalStateException("SendProcessor has not been started: " + this));
    callback.done(true);
    return true;
  }
  final ExchangePattern existingPattern=exchange.getPattern();
  if (producer != null) {
    final StopWatch watch=new StopWatch();
    final Exchange target=configureExchange(exchange,pattern);
    EventHelper.notifyExchangeSending(exchange.getContext(),target,destination);
    LOG.debug(">>>> {} {}",destination,exchange);
    boolean sync=true;
    try {
      sync=producer.process(exchange,new AsyncCallback(){
        @Override public void done(        boolean doneSync){
          try {
            target.setPattern(existingPattern);
            long timeTaken=watch.stop();
            EventHelper.notifyExchangeSent(target.getContext(),target,destination,timeTaken);
          }
  finally {
            checkException(target);
            callback.done(doneSync);
          }
        }
      }
);
    }
 catch (    Throwable throwable) {
      exchange.setException(throwable);
      checkException(exchange);
      callback.done(sync);
    }
    return sync;
  }
  return producerCache.doInAsyncProducer(destination,exchange,pattern,callback,new AsyncProducerCallback(){
    public boolean doInAsyncProducer(    Producer producer,    AsyncProcessor asyncProducer,    final Exchange exchange,    ExchangePattern pattern,    final AsyncCallback callback){
      final Exchange target=configureExchange(exchange,pattern);
      LOG.debug(">>>> {} {}",destination,exchange);
      return asyncProducer.process(target,new AsyncCallback(){
        public void done(        boolean doneSync){
          target.setPattern(existingPattern);
          checkException(target);
          callback.done(doneSync);
        }
      }
);
    }
  }
);
}
