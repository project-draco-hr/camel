{
  if (!isStarted()) {
    exchange.setException(new IllegalStateException("SendProcessor has not been started: " + this));
    callback.done(true);
    return true;
  }
  final ExchangePattern existingPattern=exchange.getPattern();
  return producerCache.doInAsyncProducer(destination,exchange,pattern,callback,new AsyncProducerCallback(){
    public boolean doInAsyncProducer(    Producer producer,    AsyncProcessor asyncProducer,    final Exchange exchange,    ExchangePattern pattern,    final AsyncCallback callback){
      final Exchange target=configureExchange(exchange,pattern);
      log.debug(">>>> {} {}",destination,exchange);
      return asyncProducer.process(target,new AsyncCallback(){
        public void done(        boolean doneSync){
          target.setPattern(existingPattern);
          callback.done(doneSync);
        }
      }
);
    }
  }
);
}
