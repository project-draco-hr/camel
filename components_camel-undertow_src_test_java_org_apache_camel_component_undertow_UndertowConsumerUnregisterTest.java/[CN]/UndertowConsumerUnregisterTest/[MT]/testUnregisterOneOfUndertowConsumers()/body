{
  MockEndpoint mockFoo=getMockEndpoint("mock:foo");
  mockFoo.expectedBodiesReceived("test");
  MockEndpoint mockBar=getMockEndpoint("mock:bar");
  mockBar.expectedBodiesReceived("test","test");
  Processor sender=new Processor(){
    public void process(    Exchange exchange){
      exchange.getIn().setBody("test");
    }
  }
;
  Exchange ret=template.request("undertow:http://localhost:{{port}}/foo",sender);
  Assert.assertEquals(200,ret.getOut().getHeader(Exchange.HTTP_RESPONSE_CODE));
  Assert.assertEquals("test",ret.getOut().getBody(String.class));
  ret=template.request("undertow:http://localhost:{{port}}/bar",sender);
  Assert.assertEquals(200,ret.getOut().getHeader(Exchange.HTTP_RESPONSE_CODE));
  Assert.assertEquals("test",ret.getOut().getBody(String.class));
  UndertowComponent component=context.getComponent("undertow",UndertowComponent.class);
  UndertowConsumer consumerFoo=(UndertowConsumer)context.getRoute("route-foo").getConsumer();
  component.unregisterConsumer(consumerFoo);
  ret=template.request("undertow:http://localhost:{{port}}/foo",sender);
  Assert.assertEquals(404,ret.getOut().getHeader(Exchange.HTTP_RESPONSE_CODE));
  Assert.assertEquals("No matching path found",ret.getOut().getBody(String.class));
  ret=template.request("undertow:http://localhost:{{port}}/bar",sender);
  Assert.assertEquals(200,ret.getOut().getHeader(Exchange.HTTP_RESPONSE_CODE));
  Assert.assertEquals("test",ret.getOut().getBody(String.class));
  mockFoo.assertIsSatisfied();
  mockBar.assertIsSatisfied();
}
