{
  if (inited.compareAndSet(false,true)) {
    ContextBuilder contextBuilderMessageID=new ContextBuilderMessageID();
    ContextBuilder contextBuilderCorrelationID=new ContextBuilder(){
      public CamelContext buildContext(      CamelContext context) throws Exception {
        ConnectionFactory connectionFactory=new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false&broker.useJmx=false");
        ActiveMQComponent jmsComponent=ActiveMQComponent.activeMQComponent();
        jmsComponent.setConnectionFactory(connectionFactory);
        jmsComponent.setUseMessageIDAsCorrelationID(false);
        jmsComponent.setConcurrentConsumers(maxServerTasks);
        context.addComponent(componentName,jmsComponent);
        return context;
      }
    }
;
    ContextBuilder contextBuilderMessageIDNamedReplyToSelector=new ContextBuilder(){
      public CamelContext buildContext(      CamelContext context) throws Exception {
        ConnectionFactory connectionFactory=new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false&broker.useJmx=false");
        ActiveMQComponent jmsComponent=ActiveMQComponent.activeMQComponent();
        jmsComponent.setConnectionFactory(connectionFactory);
        jmsComponent.setUseMessageIDAsCorrelationID(true);
        jmsComponent.setConcurrentConsumers(maxServerTasks);
        jmsComponent.getConfiguration().setReplyToDestinationSelectorName(REPLY_TO_DESTINATION_SELECTOR_NAME);
        context.addComponent(componentName,jmsComponent);
        return context;
      }
    }
;
    ContextBuilder contextBuilderCorrelationIDNamedReplyToSelector=new ContextBuilder(){
      public CamelContext buildContext(      CamelContext context) throws Exception {
        ConnectionFactory connectionFactory=new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false&broker.useJmx=false");
        ActiveMQComponent jmsComponent=ActiveMQComponent.activeMQComponent();
        jmsComponent.setConnectionFactory(connectionFactory);
        jmsComponent.setUseMessageIDAsCorrelationID(false);
        jmsComponent.setConcurrentConsumers(maxServerTasks);
        jmsComponent.getConfiguration().setReplyToDestinationSelectorName(REPLY_TO_DESTINATION_SELECTOR_NAME);
        context.addComponent(componentName,jmsComponent);
        return context;
      }
    }
;
    ContextBuilder contextBuilderCorrelationIDDiffComp=new ContextBuilder(){
      public CamelContext buildContext(      CamelContext context) throws Exception {
        ConnectionFactory connectionFactory=new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false&broker.useJmx=false");
        ActiveMQComponent jmsComponent=ActiveMQComponent.activeMQComponent();
        jmsComponent.setConnectionFactory(connectionFactory);
        jmsComponent.setConcurrentConsumers(maxServerTasks);
        context.addComponent(componentName,jmsComponent);
        ActiveMQComponent jmsComponent1=ActiveMQComponent.activeMQComponent();
        jmsComponent1.setConnectionFactory(connectionFactory);
        jmsComponent1.setUseMessageIDAsCorrelationID(false);
        jmsComponent1.setConcurrentConsumers(maxServerTasks);
        context.addComponent(componentName1,jmsComponent1);
        return context;
      }
    }
;
    ContextBuilder contextBuilderMessageIDDiffComp=new ContextBuilder(){
      public CamelContext buildContext(      CamelContext context) throws Exception {
        ConnectionFactory connectionFactory=new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false&broker.useJmx=false");
        ActiveMQComponent jmsComponent=ActiveMQComponent.activeMQComponent();
        jmsComponent.setConnectionFactory(connectionFactory);
        jmsComponent.setUseMessageIDAsCorrelationID(true);
        jmsComponent.setConcurrentConsumers(maxServerTasks);
        context.addComponent(componentName,jmsComponent);
        ActiveMQComponent jmsComponent1=ActiveMQComponent.activeMQComponent();
        jmsComponent1.setConnectionFactory(connectionFactory);
        jmsComponent1.setUseMessageIDAsCorrelationID(true);
        jmsComponent1.setConcurrentConsumers(maxServerTasks);
        context.addComponent(componentName1,jmsComponent1);
        return context;
      }
    }
;
    contextBuilders.put("testUseMessageIDAsCorrelationID",contextBuilderMessageID);
    contextBuilders.put("testUseCorrelationID",contextBuilderCorrelationID);
    contextBuilders.put("testUseMessageIDAsCorrelationIDMultiNode",contextBuilderMessageID);
    contextBuilders.put("testUseCorrelationIDMultiNode",contextBuilderCorrelationID);
    contextBuilders.put("testUseMessageIDAsCorrelationIDPersistReplyToMultiNode",contextBuilderMessageID);
    contextBuilders.put("testUseCorrelationIDPersistReplyToMultiNode",contextBuilderCorrelationID);
    contextBuilders.put("testUseMessageIDAsCorrelationIDPersistMultiReplyToMultiNode",contextBuilderMessageID);
    contextBuilders.put("testUseCorrelationIDPersistMultiReplyToMultiNode",contextBuilderCorrelationID);
    contextBuilders.put("testUseMessageIDAsCorrelationIDPersistMultiReplyToWithNamedSelectorMultiNode",contextBuilderMessageIDNamedReplyToSelector);
    contextBuilders.put("testUseCorrelationIDPersistMultiReplyToWithNamedSelectorMultiNode",contextBuilderCorrelationIDNamedReplyToSelector);
    contextBuilders.put("testUseCorrelationIDMultiNodeDiffComponents",contextBuilderCorrelationIDDiffComp);
    contextBuilders.put("testUseMessageIDAsCorrelationIDMultiNodeDiffComponents",contextBuilderMessageIDDiffComp);
    contextBuilders.put("testUseMessageIDAsCorrelationIDTimeout",contextBuilderMessageID);
    contextBuilders.put("testUseCorrelationIDTimeout",contextBuilderMessageID);
    routeBuilders.put("testUseMessageIDAsCorrelationID",new SingleNodeRouteBuilder());
    routeBuilders.put("testUseMessageIDAsCorrelationIDReplyToTempDestinationPerComponent",new SingleNodeRouteBuilder());
    routeBuilders.put("testUseMessageIDAsCorrelationIDReplyToTempDestinationPerProducer",new SingleNodeRouteBuilder());
    routeBuilders.put("testUseCorrelationID",new SingleNodeRouteBuilder());
    routeBuilders.put("testUseMessageIDAsCorrelationIDMultiNode",new MultiNodeRouteBuilder());
    routeBuilders.put("testUseCorrelationIDMultiNode",new MultiNodeRouteBuilder());
    routeBuilders.put("testUseMessageIDAsCorrelationIDPersistReplyToMultiNode",new MultiNodeRouteBuilder());
    routeBuilders.put("testUseCorrelationIDPersistReplyToMultiNode",new MultiNodeRouteBuilder());
    routeBuilders.put("testUseMessageIDAsCorrelationIDPersistMultiReplyToMultiNode",new MultiNodeReplyToRouteBuilder());
    routeBuilders.put("testUseCorrelationIDPersistMultiReplyToMultiNode",new MultiNodeReplyToRouteBuilder());
    routeBuilders.put("testUseMessageIDAsCorrelationIDPersistMultiReplyToWithNamedSelectorMultiNode",new MultiNodeReplyToRouteBuilder());
    routeBuilders.put("testUseCorrelationIDPersistMultiReplyToWithNamedSelectorMultiNode",new MultiNodeReplyToRouteBuilder());
    routeBuilders.put("testUseCorrelationIDMultiNodeDiffComponents",new MultiNodeDiffCompRouteBuilder());
    routeBuilders.put("testUseMessageIDAsCorrelationIDMultiNodeDiffComponents",new MultiNodeDiffCompRouteBuilder());
    routeBuilders.put("testUseMessageIDAsCorrelationIDTimeout",new SingleNodeDeadEndRouteBuilder());
    routeBuilders.put("testUseCorrelationIDTimeout",new SingleNodeDeadEndRouteBuilder());
  }
}
