{
  int total=exchanges.size();
  for (int index=0; index < total && isBatchAllowed(); index++) {
    Exchange exchange=ObjectHelper.cast(Exchange.class,exchanges.poll());
    exchange.setProperty(Exchange.BATCH_INDEX,index);
    exchange.setProperty(Exchange.BATCH_SIZE,total);
    exchange.setProperty(Exchange.BATCH_COMPLETE,index == total - 1);
    pendingExchanges=total - index - 1;
    exchange.addOnCompletion(new Synchronization(){
      public void onComplete(      Exchange exchange){
        processCommit(exchange);
      }
      public void onFailure(      Exchange exchange){
        processRollback(exchange);
      }
      @Override public String toString(){
        return "SqsConsumerOnCompletion";
      }
    }
);
    ScheduledFuture<?> scheduledFuture=null;
    Integer visibilityTimeout=getConfiguration().getVisibilityTimeout();
    if (scheduledExecutor != null && visibilityTimeout != null && (visibilityTimeout.intValue() / 2) > 0) {
      int delay=visibilityTimeout.intValue() / 2;
      int period=visibilityTimeout.intValue();
      LOG.debug("Scheduled TimeoutExtender task to start after {} delay, and run with {} period (seconds) to extend exchangeId: {}",new Object[]{delay,period,exchange.getExchangeId()});
      scheduledFuture=this.scheduledExecutor.scheduleAtFixedRate(new TimeoutExtender(exchange,visibilityTimeout),delay,period,TimeUnit.SECONDS);
    }
    LOG.trace("Processing exchange [{}]...",exchange);
    try {
      getProcessor().process(exchange);
    }
  finally {
      LOG.trace("Processing exchange [{}] done.",exchange);
      if (scheduledFuture != null) {
        LOG.trace("Processing done so cancelling TimeoutExtender task for exchangeId: {}",exchange.getExchangeId());
        scheduledFuture.cancel(true);
      }
    }
  }
  return total;
}
