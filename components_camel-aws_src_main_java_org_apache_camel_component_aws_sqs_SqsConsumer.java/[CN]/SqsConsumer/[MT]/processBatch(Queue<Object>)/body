{
  int total=exchanges.size();
  for (int index=0; index < total && isBatchAllowed(); index++) {
    final Exchange exchange=ObjectHelper.cast(Exchange.class,exchanges.poll());
    exchange.setProperty(Exchange.BATCH_INDEX,index);
    exchange.setProperty(Exchange.BATCH_SIZE,total);
    exchange.setProperty(Exchange.BATCH_COMPLETE,index == total - 1);
    pendingExchanges=total - index - 1;
    Integer visibilityTimeout=getConfiguration().getVisibilityTimeout();
    if (this.scheduledExecutor != null && visibilityTimeout != null && (visibilityTimeout.intValue() / 2) > 0) {
      int delay=visibilityTimeout.intValue() / 2;
      int period=visibilityTimeout.intValue();
      int repeatSeconds=new Double(visibilityTimeout.doubleValue() * 1.5).intValue();
      if (LOG.isDebugEnabled()) {
        LOG.debug("Scheduled TimeoutExtender task to start after {} delay, and run with {}/{} period/repeat (seconds), to extend exchangeId: {}",new Object[]{delay,period,repeatSeconds,exchange.getExchangeId()});
      }
      final ScheduledFuture<?> scheduledFuture=this.scheduledExecutor.scheduleAtFixedRate(new TimeoutExtender(exchange,repeatSeconds),delay,period,TimeUnit.SECONDS);
      exchange.addOnCompletion(new Synchronization(){
        @Override public void onComplete(        Exchange exchange){
          cancelExtender(exchange);
        }
        @Override public void onFailure(        Exchange exchange){
          cancelExtender(exchange);
        }
        private void cancelExtender(        Exchange exchange){
          LOG.trace("Processing done so cancelling TimeoutExtender task for exchangeId: {}",exchange.getExchangeId());
          scheduledFuture.cancel(true);
        }
      }
);
    }
    exchange.addOnCompletion(new Synchronization(){
      public void onComplete(      Exchange exchange){
        processCommit(exchange);
      }
      public void onFailure(      Exchange exchange){
        processRollback(exchange);
      }
      @Override public String toString(){
        return "SqsConsumerOnCompletion";
      }
    }
);
    LOG.trace("Processing exchange [{}]...",exchange);
    getAsyncProcessor().process(exchange,new AsyncCallback(){
      @Override public void done(      boolean doneSync){
        LOG.trace("Processing exchange [{}] done.",exchange);
      }
    }
);
  }
  return total;
}
