{
  ShardIteratorType iteratorType=getEndpoint().getIteratorType();
  String sequenceNumber=getEndpoint().getSequenceNumber();
  if (resumeFromSequenceNumber != null) {
    currentShard=null;
    currentShardIterator=null;
    iteratorType=ShardIteratorType.AFTER_SEQUENCE_NUMBER;
    sequenceNumber=resumeFromSequenceNumber;
  }
  if (currentShardIterator == null) {
    ListStreamsResult streamsListResult=getClient().listStreams(new ListStreamsRequest().withTableName(getEndpoint().getTableName()));
    final String streamArn=streamsListResult.getStreams().get(0).getStreamArn();
    DescribeStreamResult streamDescriptionResult=getClient().describeStream(new DescribeStreamRequest().withStreamArn(streamArn));
    shardList.addAll(streamDescriptionResult.getStreamDescription().getShards());
    LOG.trace("Current shard is: {} (in {})",currentShard,shardList);
    if (currentShard == null) {
      currentShard=resolveNewShard(iteratorType,resumeFromSequenceNumber);
    }
 else {
      currentShard=shardList.nextAfter(currentShard);
    }
    shardList.removeOlderThan(currentShard);
    LOG.trace("Next shard is: {} (in {})",currentShard,shardList);
    GetShardIteratorResult result=getClient().getShardIterator(buildGetShardIteratorRequest(streamArn,iteratorType,sequenceNumber));
    currentShardIterator=result.getShardIterator();
  }
  LOG.trace("Shard Iterator is: {}",currentShardIterator);
  return currentShardIterator;
}
