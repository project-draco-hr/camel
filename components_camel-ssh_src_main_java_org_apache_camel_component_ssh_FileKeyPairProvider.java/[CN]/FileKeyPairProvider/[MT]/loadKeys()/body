{
  if (!SecurityUtils.isBouncyCastleRegistered()) {
    throw new IllegalStateException("BouncyCastle must be registered as a JCE provider");
  }
  List<KeyPair> keys=new ArrayList<KeyPair>();
  for (int i=0; i < files.length; i++) {
    try {
      PEMParser r=new PEMParser(new InputStreamReader(new FileInputStream(files[i])));
      try {
        Object o=r.readObject();
        JcaPEMKeyConverter pemConverter=new JcaPEMKeyConverter();
        pemConverter.setProvider("BC");
        if (passwordFinder != null && o instanceof PEMEncryptedKeyPair) {
          JcePEMDecryptorProviderBuilder decryptorBuilder=new JcePEMDecryptorProviderBuilder();
          PEMDecryptorProvider pemDecryptor=decryptorBuilder.build(passwordFinder.getPassword());
          o=pemConverter.getKeyPair(((PEMEncryptedKeyPair)o).decryptKeyPair(pemDecryptor));
        }
        if (o instanceof PEMKeyPair) {
          o=pemConverter.getKeyPair((PEMKeyPair)o);
          keys.add((KeyPair)o);
        }
 else         if (o instanceof KeyPair) {
          keys.add((KeyPair)o);
        }
      }
  finally {
        r.close();
      }
    }
 catch (    Exception e) {
      log.warn("Unable to read key {}: {}",files[i],e);
    }
  }
  return keys;
}
