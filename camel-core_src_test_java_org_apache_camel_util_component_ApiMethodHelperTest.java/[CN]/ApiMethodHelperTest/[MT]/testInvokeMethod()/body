{
  TestProxy proxy=new TestProxy();
  assertEquals("sayHi()","Hello!",ApiMethodHelper.invokeMethod(proxy,TestMethod.SAYHI,Collections.<String,Object>emptyMap()));
  final HashMap<String,Object> properties=new HashMap<String,Object>();
  properties.put("name","Dave");
  assertEquals("sayHi(name)","Hello Dave",ApiMethodHelper.invokeMethod(proxy,TestMethod.SAYHI_1,properties));
  assertEquals("greetMe(name)","Greetings Dave",ApiMethodHelper.invokeMethod(proxy,TestMethod.GREETME,properties));
  properties.clear();
  properties.put("name1","Dave");
  properties.put("name2","Frank");
  assertEquals("greetUs(name1, name2)","Greetings Dave, Frank",ApiMethodHelper.invokeMethod(proxy,TestMethod.GREETUS,properties));
  properties.clear();
  properties.put("names",new String[]{"Dave","Frank"});
  assertEquals("greetAll(names)","Greetings Dave, Frank",ApiMethodHelper.invokeMethod(proxy,TestMethod.GREETALL,properties));
  properties.clear();
  Map<String,String> nameMap=new HashMap<String,String>();
  nameMap.put("Dave","Hello");
  nameMap.put("Frank","Goodbye");
  properties.put("nameMap",nameMap);
  final Map<String,String> result=(Map<String,String>)ApiMethodHelper.invokeMethod(proxy,TestMethod.GREETALL_2,properties);
  assertNotNull("greetAll(nameMap)",result);
  for (  Map.Entry<String,String> entry : result.entrySet()) {
    assertTrue("greetAll(nameMap)",entry.getValue().endsWith(entry.getKey()));
  }
  proxy=new TestProxy(){
    @Override public String sayHi(    String name){
      return "Howdy " + name;
    }
  }
;
  properties.clear();
  properties.put("name","Dave");
  assertEquals("Derived sayHi(name)","Howdy Dave",ApiMethodHelper.invokeMethod(proxy,TestMethod.SAYHI_1,properties));
}
