{
  try {
    connection=endpoint.createConnection();
  }
 catch (  XMPPException e) {
    if (endpoint.isTestConnectionOnStartup()) {
      throw new RuntimeException("Could not connect to XMPP server.",e);
    }
 else {
      LOG.warn(XmppEndpoint.getXmppExceptionLogMessage(e));
      if (getExceptionHandler() != null) {
        getExceptionHandler().handleException(XmppEndpoint.getXmppExceptionLogMessage(e),e);
      }
      scheduleDelayedStart();
      return;
    }
  }
  chatManager=connection.getChatManager();
  chatManager.addChatListener(this);
  if (endpoint.getRoom() == null) {
    privateChat=chatManager.getThreadChat(endpoint.getChatId());
    if (privateChat != null) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Adding listener to existing chat opened to " + privateChat.getParticipant());
      }
      privateChat.addMessageListener(this);
    }
 else {
      privateChat=connection.getChatManager().createChat(endpoint.getParticipant(),endpoint.getChatId(),this);
      if (LOG.isDebugEnabled()) {
        LOG.debug("Opening private chat to " + privateChat.getParticipant());
      }
    }
  }
 else {
    final ToContainsFilter toFilter=new ToContainsFilter(endpoint.getParticipant());
    final AndFilter packetFilter=new AndFilter(new PacketTypeFilter(Presence.class),toFilter);
    connection.addPacketListener(this,packetFilter);
    muc=new MultiUserChat(connection,endpoint.resolveRoom(connection));
    muc.addMessageListener(this);
    DiscussionHistory history=new DiscussionHistory();
    history.setMaxChars(0);
    muc.join(endpoint.getNickname(),null,history,SmackConfiguration.getPacketReplyTimeout());
    if (LOG.isInfoEnabled()) {
      LOG.info("Joined room: {} as: {}",muc.getRoom(),endpoint.getNickname());
    }
  }
  this.startRobustConnectionMonitor();
  super.doStart();
}
