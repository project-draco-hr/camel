{
  if (LOG.isDebugEnabled()) {
    Object in=object;
    if (in instanceof byte[]) {
      in=getEndpoint().getCamelContext().getTypeConverter().convertTo(String.class,in);
    }
    LOG.debug("Received body: " + in);
  }
  Exchange exchange=getEndpoint().createExchange(session,object);
  if (getEndpoint().getConfiguration().getCharsetName() != null) {
    exchange.setProperty(Exchange.CHARSET_NAME,IOConverter.normalizeCharset(getEndpoint().getConfiguration().getCharsetName()));
  }
  try {
    getProcessor().process(exchange);
  }
 catch (  Throwable e) {
    getExceptionHandler().handleException(e);
  }
  if (sync) {
    Object body;
    if (ExchangeHelper.isOutCapable(exchange)) {
      body=MinaPayloadHelper.getOut(getEndpoint(),exchange);
    }
 else {
      body=MinaPayloadHelper.getIn(getEndpoint(),exchange);
    }
    boolean failed=exchange.isFailed();
    if (failed && !getEndpoint().getConfiguration().isTransferExchange()) {
      if (exchange.getException() != null) {
        body=exchange.getException();
      }
 else {
        body=exchange.getOut().getBody();
      }
    }
    if (body == null) {
      noReplyLogger.log("No payload to send as reply for exchange: " + exchange);
      if (getEndpoint().getConfiguration().isDisconnectOnNoReply()) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Closing session as no payload to send as reply at address: " + address);
        }
        session.close();
      }
    }
 else {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Writing body: " + body);
      }
      MinaHelper.writeBody(session,body,exchange);
    }
  }
  Boolean close;
  if (ExchangeHelper.isOutCapable(exchange)) {
    close=exchange.getOut().getHeader(MinaConstants.MINA_CLOSE_SESSION_WHEN_COMPLETE,Boolean.class);
  }
 else {
    close=exchange.getIn().getHeader(MinaConstants.MINA_CLOSE_SESSION_WHEN_COMPLETE,Boolean.class);
  }
  boolean disconnect=getEndpoint().getConfiguration().isDisconnect();
  if (close != null) {
    disconnect=close;
  }
  if (disconnect) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Closing session when complete at address: " + address);
    }
    session.close();
  }
}
