{
  if (LOG.isDebugEnabled()) {
    LOG.debug("Binding to server address: " + address + " using acceptor: "+ acceptor);
  }
  IoHandler handler=new IoHandlerAdapter(){
    @Override public void exceptionCaught(    IoSession session,    Throwable cause) throws Exception {
      if (session != null) {
        LOG.debug("Closing session as an exception was thrown from MINA");
        session.close();
      }
      throw new CamelException(cause);
    }
    @Override public void messageReceived(    IoSession session,    Object object) throws Exception {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Received body: " + object);
      }
      MinaExchange exchange=endpoint.createExchange(session,object);
      getProcessor().process(exchange);
      if (ExchangeHelper.isOutCapable(exchange)) {
        Object body=exchange.getOut().getBody();
        boolean failed=exchange.isFailed();
        if (failed) {
          LOG.warn("Can not write body since the exchange is failed, closing session: " + exchange);
          session.close();
        }
 else         if (body == null) {
          LOG.warn("Can not write body since its null, closing session: " + exchange);
          session.close();
        }
 else {
          if (LOG.isDebugEnabled()) {
            LOG.debug("Writing body: " + body);
          }
          session.write(body);
        }
      }
 else {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Can not write body since this exchange is not out capable: " + exchange);
        }
      }
    }
  }
;
  acceptor.bind(address,handler,endpoint.getAcceptorConfig());
}
