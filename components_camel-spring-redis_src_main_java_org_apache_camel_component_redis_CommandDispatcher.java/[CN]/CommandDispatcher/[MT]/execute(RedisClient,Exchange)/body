{
  final Command command=determineCommand(exchange);
switch (command) {
case PING:
    setResult(exchange,redisClient.ping());
  break;
case SET:
redisClient.set(getKey(exchange),getValue(exchange));
break;
case GET:
setResult(exchange,redisClient.get(getKey(exchange)));
break;
case QUIT:
redisClient.quit();
break;
case EXISTS:
setResult(exchange,redisClient.exists(getKey(exchange)));
break;
case DEL:
redisClient.del(getKeys(exchange));
break;
case TYPE:
setResult(exchange,redisClient.type(getKey(exchange)));
break;
case KEYS:
setResult(exchange,redisClient.keys(getPattern(exchange)));
break;
case RANDOMKEY:
setResult(exchange,redisClient.randomkey());
break;
case RENAME:
redisClient.rename(getKey(exchange),getStringValue(exchange));
break;
case RENAMENX:
setResult(exchange,redisClient.renamenx(getKey(exchange),getStringValue(exchange)));
break;
case EXPIRE:
setResult(exchange,redisClient.expire(getKey(exchange),getTimeout(exchange)));
break;
case EXPIREAT:
setResult(exchange,redisClient.expireat(getKey(exchange),getTimestamp(exchange)));
break;
case PEXPIRE:
setResult(exchange,redisClient.pexpire(getKey(exchange),getTimeout(exchange)));
break;
case PEXPIREAT:
setResult(exchange,redisClient.pexpireat(getKey(exchange),getTimestamp(exchange)));
break;
case TTL:
setResult(exchange,redisClient.ttl(getKey(exchange)));
break;
case MOVE:
setResult(exchange,redisClient.move(getKey(exchange),getDb(exchange)));
break;
case GETSET:
setResult(exchange,redisClient.getset(getKey(exchange),getValue(exchange)));
break;
case MGET:
setResult(exchange,redisClient.mget(getFields(exchange)));
break;
case SETNX:
setResult(exchange,redisClient.setnx(getKey(exchange),getValue(exchange)));
break;
case SETEX:
redisClient.setex(getKey(exchange),getValue(exchange),getTimeout(exchange),TimeUnit.SECONDS);
break;
case MSET:
redisClient.mset(getValuesAsMap(exchange));
break;
case MSETNX:
redisClient.msetnx(getValuesAsMap(exchange));
break;
case DECRBY:
setResult(exchange,redisClient.decrby(getKey(exchange),getLongValue(exchange)));
break;
case DECR:
setResult(exchange,redisClient.decr(getKey(exchange)));
break;
case INCRBY:
setResult(exchange,redisClient.incrby(getKey(exchange),getLongValue(exchange)));
break;
case INCR:
setResult(exchange,redisClient.incr(getKey(exchange)));
break;
case APPEND:
setResult(exchange,redisClient.append(getKey(exchange),getStringValue(exchange)));
break;
case HSET:
redisClient.hset(getKey(exchange),getField(exchange),getValue(exchange));
break;
case HGET:
setResult(exchange,redisClient.hget(getKey(exchange),getField(exchange)));
break;
case HSETNX:
setResult(exchange,redisClient.hsetnx(getKey(exchange),getField(exchange),getValue(exchange)));
break;
case HMSET:
redisClient.hmset(getKey(exchange),getValuesAsMap(exchange));
break;
case HMGET:
setResult(exchange,redisClient.hmget(getKey(exchange),getFields(exchange)));
break;
case HINCRBY:
setResult(exchange,redisClient.hincrBy(getKey(exchange),getField(exchange),getValueAsLong(exchange)));
break;
case HEXISTS:
setResult(exchange,redisClient.hexists(getKey(exchange),getField(exchange)));
break;
case HDEL:
redisClient.hdel(getKey(exchange),getField(exchange));
break;
case HLEN:
setResult(exchange,redisClient.hlen(getKey(exchange)));
break;
case HKEYS:
setResult(exchange,redisClient.hkeys(getKey(exchange)));
break;
case HVALS:
setResult(exchange,redisClient.hvals(getKey(exchange)));
break;
case HGETALL:
setResult(exchange,redisClient.hgetAll(getKey(exchange)));
break;
case RPUSH:
setResult(exchange,redisClient.rpush(getKey(exchange),getValue(exchange)));
break;
case LPUSH:
setResult(exchange,redisClient.lpush(getKey(exchange),getValue(exchange)));
break;
case LLEN:
setResult(exchange,redisClient.llen(getKey(exchange)));
break;
case LRANGE:
setResult(exchange,redisClient.lrange(getKey(exchange),getStart(exchange),getEnd(exchange)));
break;
case LTRIM:
redisClient.ltrim(getKey(exchange),getStart(exchange),getEnd(exchange));
break;
case LINDEX:
setResult(exchange,redisClient.lindex(getKey(exchange),getIndex(exchange)));
break;
case LSET:
redisClient.lset(getKey(exchange),getValue(exchange),getIndex(exchange));
break;
case LREM:
setResult(exchange,redisClient.lrem(getKey(exchange),getValue(exchange),getCount(exchange)));
break;
case LPOP:
setResult(exchange,redisClient.lpop(getKey(exchange)));
break;
case RPOP:
setResult(exchange,redisClient.rpop(getKey(exchange)));
break;
case RPOPLPUSH:
setResult(exchange,redisClient.rpoplpush(getKey(exchange),getDestination(exchange)));
break;
case SADD:
setResult(exchange,redisClient.sadd(getKey(exchange),getValue(exchange)));
break;
case SMEMBERS:
setResult(exchange,redisClient.smembers(getKey(exchange)));
break;
case SREM:
setResult(exchange,redisClient.srem(getKey(exchange),getValue(exchange)));
break;
case SPOP:
setResult(exchange,redisClient.spop(getKey(exchange)));
break;
case SMOVE:
setResult(exchange,redisClient.smove(getKey(exchange),getValue(exchange),getDestination(exchange)));
break;
case SCARD:
setResult(exchange,redisClient.scard(getKey(exchange)));
break;
case SISMEMBER:
setResult(exchange,redisClient.sismember(getKey(exchange),getValue(exchange)));
break;
case SINTER:
setResult(exchange,redisClient.sinter(getKey(exchange),getKeys(exchange)));
break;
case SINTERSTORE:
redisClient.sinterstore(getKey(exchange),getKeys(exchange),getDestination(exchange));
break;
case SUNION:
setResult(exchange,redisClient.sunion(getKey(exchange),getKeys(exchange)));
break;
case SUNIONSTORE:
redisClient.sunionstore(getKey(exchange),getKeys(exchange),getDestination(exchange));
break;
case SDIFF:
setResult(exchange,redisClient.sdiff(getKey(exchange),getKeys(exchange)));
break;
case SDIFFSTORE:
redisClient.sdiffstore(getKey(exchange),getKeys(exchange),getDestination(exchange));
break;
case SRANDMEMBER:
setResult(exchange,redisClient.srandmember(getKey(exchange)));
break;
case ZADD:
setResult(exchange,redisClient.zadd(getKey(exchange),getValue(exchange),getScore(exchange)));
break;
case ZRANGE:
setResult(exchange,redisClient.zrange(getKey(exchange),getStart(exchange),getEnd(exchange),getWithScore(exchange)));
break;
case ZREM:
setResult(exchange,redisClient.zrem(getKey(exchange),getValue(exchange)));
break;
case ZINCRBY:
setResult(exchange,redisClient.zincrby(getKey(exchange),getValue(exchange),getIncrement(exchange)));
break;
case ZRANK:
setResult(exchange,redisClient.zrank(getKey(exchange),getValue(exchange)));
break;
case ZREVRANK:
setResult(exchange,redisClient.zrevrank(getKey(exchange),getValue(exchange)));
break;
case ZREVRANGE:
setResult(exchange,redisClient.zrevrange(getKey(exchange),getStart(exchange),getEnd(exchange),getWithScore(exchange)));
break;
case ZCARD:
setResult(exchange,redisClient.zcard(getKey(exchange)));
break;
case MULTI:
redisClient.multi();
break;
case DISCARD:
redisClient.discard();
break;
case EXEC:
redisClient.exec();
break;
case WATCH:
redisClient.watch(getKeys(exchange));
break;
case UNWATCH:
redisClient.unwatch();
break;
case SORT:
setResult(exchange,redisClient.sort(getKey(exchange)));
break;
case BLPOP:
setResult(exchange,redisClient.blpop(getKey(exchange),getTimeout(exchange)));
break;
case BRPOP:
setResult(exchange,redisClient.brpop(getKey(exchange),getTimeout(exchange)));
break;
case PUBLISH:
redisClient.publish(getChannel(exchange),getMessage(exchange));
break;
case ZCOUNT:
setResult(exchange,redisClient.zcount(getKey(exchange),getMin(exchange),getMax(exchange)));
break;
case ZRANGEBYSCORE:
setResult(exchange,redisClient.zrangebyscore(getKey(exchange),getMin(exchange),getMax(exchange)));
break;
case ZREVRANGEBYSCORE:
setResult(exchange,redisClient.zrevrangebyscore(getKey(exchange),getMin(exchange),getMax(exchange)));
break;
case ZREMRANGEBYRANK:
redisClient.zremrangebyrank(getKey(exchange),getStart(exchange),getEnd(exchange));
break;
case ZREMRANGEBYSCORE:
redisClient.zremrangebyscore(getKey(exchange),getStart(exchange),getEnd(exchange));
break;
case ZUNIONSTORE:
redisClient.zunionstore(getKey(exchange),getKeys(exchange),getDestination(exchange));
break;
case ZINTERSTORE:
redisClient.zinterstore(getKey(exchange),getKeys(exchange),getDestination(exchange));
break;
case STRLEN:
setResult(exchange,redisClient.strlen(getKey(exchange)));
break;
case PERSIST:
setResult(exchange,redisClient.persist(getKey(exchange)));
break;
case RPUSHX:
setResult(exchange,redisClient.rpushx(getKey(exchange),getValue(exchange)));
break;
case ECHO:
setResult(exchange,redisClient.echo(getStringValue(exchange)));
break;
case LINSERT:
setResult(exchange,redisClient.linsert(getKey(exchange),getValue(exchange),getPivot(exchange),getPosition(exchange)));
break;
case BRPOPLPUSH:
setResult(exchange,redisClient.brpoplpush(getKey(exchange),getDestination(exchange),getTimeout(exchange)));
break;
case SETBIT:
redisClient.setbit(getKey(exchange),getOffset(exchange),getBooleanValue(exchange));
break;
case GETBIT:
setResult(exchange,redisClient.getbit(getKey(exchange),getOffset(exchange)));
break;
case SETRANGE:
redisClient.setex(getKey(exchange),getValue(exchange),getOffset(exchange));
break;
case GETRANGE:
setResult(exchange,redisClient.getrange(getKey(exchange),getStart(exchange),getEnd(exchange)));
break;
default :
throw new RuntimeExchangeException("Unsupported command: " + command,exchange);
}
}
