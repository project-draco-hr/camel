{
  Source sourcePayload=exchange.getIn().getMandatoryBody(Source.class);
  String endpointUriHeader=exchange.getIn().getHeader(SpringWebserviceConstants.SPRING_WS_ENDPOINT_URI,String.class);
  String soapActionHeader=exchange.getIn().getHeader(SpringWebserviceConstants.SPRING_WS_SOAP_ACTION,String.class);
  URI wsAddressingActionHeader=exchange.getIn().getHeader(SpringWebserviceConstants.SPRING_WS_ADDRESSING_ACTION,URI.class);
  URI wsReplyToHeader=exchange.getIn().getHeader(SpringWebserviceConstants.SPRING_WS_ADDRESSING_PRODUCER_REPLY_TO,URI.class);
  URI wsFaultToHeader=exchange.getIn().getHeader(SpringWebserviceConstants.SPRING_WS_ADDRESSING_PRODUCER_FAULT_TO,URI.class);
  WebServiceMessageCallback callback=new DefaultWebserviceMessageCallback(soapActionHeader,wsAddressingActionHeader,wsReplyToHeader,wsFaultToHeader,getEndpoint().getConfiguration(),exchange);
  Object body=null;
  if (endpointUriHeader != null) {
    body=getEndpoint().getConfiguration().getWebServiceTemplate().sendSourceAndReceive(endpointUriHeader,sourcePayload,callback,SOURCE_EXTRACTOR);
  }
 else {
    body=getEndpoint().getConfiguration().getWebServiceTemplate().sendSourceAndReceive(sourcePayload,callback,SOURCE_EXTRACTOR);
  }
  if (ExchangeHelper.isOutCapable(exchange)) {
    exchange.getOut().copyFrom(exchange.getIn());
    exchange.getOut().setBody(body);
  }
 else {
    exchange.getIn().setBody(body);
  }
}
