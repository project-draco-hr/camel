{
  if (isSuccess()) {
    return null;
  }
  if (syntaxError != null) {
    return "Syntax error " + syntaxError;
  }
 else   if (unknownComponent != null) {
    return "Unknown component " + unknownComponent;
  }
  Map<String,String> options=new LinkedHashMap<String,String>();
  if (unknown != null) {
    for (    String name : unknown) {
      options.put(name,"Unknown field");
    }
  }
  if (required != null) {
    for (    String name : required) {
      options.put(name,"Missing required field");
    }
  }
  if (invalidEnum != null) {
    for (    Map.Entry<String,String> entry : invalidEnum.entrySet()) {
      options.put(entry.getKey(),"Invalid enum value: " + entry.getValue());
    }
  }
  if (invalidBoolean != null) {
    for (    Map.Entry<String,String> entry : invalidBoolean.entrySet()) {
      options.put(entry.getKey(),"Invalid boolean value: " + entry.getValue());
    }
  }
  if (invalidInteger != null) {
    for (    Map.Entry<String,String> entry : invalidInteger.entrySet()) {
      options.put(entry.getKey(),"Invalid integer value: " + entry.getValue());
    }
  }
  if (invalidNumber != null) {
    for (    Map.Entry<String,String> entry : invalidNumber.entrySet()) {
      options.put(entry.getKey(),"Invalid number value: " + entry.getValue());
    }
  }
  int maxLen=24;
  for (  String key : options.keySet()) {
    maxLen=Math.max(maxLen,key.length());
  }
  String format="%" + maxLen + "s    %s";
  StringBuilder sb=new StringBuilder();
  sb.append("Endpoint validator error\n");
  sb.append("---------------------------------------------------------------------------------------------------------------------------------------\n");
  sb.append("\n\t").append(uri).append("\n");
  for (  Map.Entry<String,String> option : options.entrySet()) {
    String out=String.format(format,option.getKey(),option.getValue());
    sb.append("\n\t").append(out);
  }
  sb.append("\n\n");
  return sb.toString();
}
