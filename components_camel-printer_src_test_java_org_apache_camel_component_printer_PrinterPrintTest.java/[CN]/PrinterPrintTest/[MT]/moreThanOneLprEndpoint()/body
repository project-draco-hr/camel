{
  if (isAwtHeadless()) {
    return;
  }
  int numberOfPrintservicesBefore=PrintServiceLookup.lookupPrintServices(null,null).length;
  PrintService ps1=mock(PrintService.class);
  when(ps1.getName()).thenReturn("printer1");
  when(ps1.isDocFlavorSupported(any(DocFlavor.class))).thenReturn(Boolean.TRUE);
  PrintService ps2=mock(PrintService.class);
  when(ps2.getName()).thenReturn("printer2");
  boolean res1=PrintServiceLookup.registerService(ps1);
  assertTrue("PrintService #1 should be registered.",res1);
  boolean res2=PrintServiceLookup.registerService(ps2);
  assertTrue("PrintService #2 should be registered.",res2);
  PrintService[] pss=PrintServiceLookup.lookupPrintServices(null,null);
  assertEquals("lookup should report two PrintServices.",numberOfPrintservicesBefore + 2,pss.length);
  DocPrintJob job1=mock(DocPrintJob.class);
  when(ps1.createPrintJob()).thenReturn(job1);
  context.addRoutes(new RouteBuilder(){
    public void configure(){
      from("direct:start1").to("lpr://localhost/printer1?sendToPrinter=true");
      from("direct:start2").to("lpr://localhost/printer2?sendToPrinter=false");
    }
  }
);
  context.start();
  Map<String,Endpoint> epm=context().getEndpointMap();
  assertEquals("Four endpoints",4,epm.size());
  Endpoint lp1=null;
  Endpoint lp2=null;
  for (  Map.Entry<String,Endpoint> ep : epm.entrySet()) {
    if (ep.getKey().contains("printer1")) {
      lp1=ep.getValue();
    }
    if (ep.getKey().contains("printer2")) {
      lp2=ep.getValue();
    }
  }
  assertNotNull(lp1);
  assertNotNull(lp2);
  assertEquals("printer1",((PrinterEndpoint)lp1).getConfig().getPrintername());
  assertEquals("printer2",((PrinterEndpoint)lp2).getConfig().getPrintername());
  template.sendBody("direct:start1","Hello Printer 1");
  context.stop();
  verify(job1,times(1)).print(any(Doc.class),any(PrintRequestAttributeSet.class));
}
