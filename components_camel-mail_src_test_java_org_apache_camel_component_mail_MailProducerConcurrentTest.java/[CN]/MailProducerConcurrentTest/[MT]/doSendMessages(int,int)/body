{
  Mailbox.clearAll();
  getMockEndpoint("mock:result").expectedMessageCount(files);
  getMockEndpoint("mock:result").expectsNoDuplicates(body());
  final CountDownLatch latch=new CountDownLatch(files);
  ExecutorService executor=Executors.newFixedThreadPool(poolSize);
  for (int i=0; i < files; i++) {
    final int index=i;
    executor.submit(new Callable<Object>(){
      public Object call() throws Exception {
        template.sendBodyAndHeader("direct:start","Message " + index,"To","someone@localhost");
        latch.countDown();
        return null;
      }
    }
);
  }
  assertTrue(latch.await(2,TimeUnit.SECONDS));
  assertMockEndpointsSatisfied();
  Mailbox box=Mailbox.get("someone@localhost");
  assertEquals(files,box.size());
  Set<Object> bodies=new HashSet<Object>();
  for (int i=0; i < files; i++) {
    bodies.add(box.get(i).getContent());
  }
  assertEquals("There should be " + files + " unique mails",files,bodies.size());
  executor.shutdownNow();
}
