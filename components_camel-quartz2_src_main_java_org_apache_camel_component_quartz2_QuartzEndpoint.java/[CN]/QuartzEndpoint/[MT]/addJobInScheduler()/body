{
  Scheduler scheduler=getComponent().getScheduler();
  JobDetail jobDetail=null;
  Trigger trigger=scheduler.getTrigger(triggerKey);
  if (trigger == null) {
    jobDetail=createJobDetail();
    trigger=createTrigger();
    updateJobDataMap(jobDetail);
    Date nextFireDate=scheduler.scheduleJob(jobDetail,trigger);
    LOG.info("Job {} (triggerType={}, jobClass={}) is scheduled. Next fire date is {}",new Object[]{trigger.getKey(),trigger.getClass().getSimpleName(),jobDetail.getJobClass().getSimpleName(),nextFireDate});
  }
 else {
    ensureNoDupTriggerKey();
    jobDetail=scheduler.getJobDetail(trigger.getJobKey());
    updateJobDataMap(jobDetail);
    scheduler.addJob(jobDetail,true);
    Date nextFireDate=trigger.getNextFireTime();
    LOG.info("Reuse existing Job {} (triggerType={}, jobType={}) is scheduled. Next fire date is {}",new Object[]{trigger.getKey(),trigger.getClass().getSimpleName(),jobDetail.getJobClass().getSimpleName(),nextFireDate});
  }
  AtomicInteger number=(AtomicInteger)scheduler.getContext().get(QuartzConstants.QUARTZ_CAMEL_JOBS_COUNT);
  number.incrementAndGet();
  jobAdded.set(true);
}
