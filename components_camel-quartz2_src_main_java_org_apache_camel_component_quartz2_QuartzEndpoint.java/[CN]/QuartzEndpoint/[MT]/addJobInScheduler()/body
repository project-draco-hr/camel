{
  Scheduler scheduler=getComponent().getScheduler();
  JobDetail jobDetail;
  Trigger oldTrigger=scheduler.getTrigger(triggerKey);
  boolean triggerExisted=oldTrigger != null;
  if (triggerExisted && !isRecoverableJob()) {
    ensureNoDupTriggerKey();
  }
  jobDetail=createJobDetail();
  Trigger trigger=createTrigger(jobDetail);
  QuartzHelper.updateJobDataMap(getCamelContext(),jobDetail,getEndpointUri(),isUsingFixedCamelContextName());
  if (triggerExisted) {
    if (hasTriggerChanged(oldTrigger,trigger)) {
      scheduler.rescheduleJob(triggerKey,trigger);
    }
  }
 else {
    try {
      scheduler.scheduleJob(jobDetail,trigger);
    }
 catch (    ObjectAlreadyExistsException ex) {
      if (!(getComponent().isClustered())) {
        throw ex;
      }
 else {
        trigger=scheduler.getTrigger(triggerKey);
        if (trigger == null) {
          throw new SchedulerException("Trigger could not be found in quartz scheduler.");
        }
      }
    }
  }
  if (LOG.isInfoEnabled()) {
    LOG.info("Job {} (triggerType={}, jobClass={}) is scheduled. Next fire date is {}",new Object[]{trigger.getKey(),trigger.getClass().getSimpleName(),jobDetail.getJobClass().getSimpleName(),trigger.getNextFireTime()});
  }
  AtomicInteger number=(AtomicInteger)scheduler.getContext().get(QuartzConstants.QUARTZ_CAMEL_JOBS_COUNT);
  if (number != null) {
    number.incrementAndGet();
  }
  jobAdded.set(true);
}
