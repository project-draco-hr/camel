{
  if (processor == null || !continueProcessing(exchange)) {
    callback.done(true);
    return true;
  }
  final List<Object> states=new ArrayList<Object>(tasks.size());
  for (  CamelInternalProcessorTask task : tasks) {
    try {
      Object state=task.before(exchange);
      states.add(state);
    }
 catch (    Throwable e) {
      exchange.setException(e);
      callback.done(true);
      return true;
    }
  }
  callback=new InternalCallback(states,exchange,callback);
  Object synchronous=exchange.removeProperty(Exchange.UNIT_OF_WORK_PROCESS_SYNC);
  if (exchange.isTransacted() || synchronous != null) {
    if (LOG.isTraceEnabled()) {
      if (exchange.isTransacted()) {
        LOG.trace("Transacted Exchange must be routed synchronously for exchangeId: {} -> {}",exchange.getExchangeId(),exchange);
      }
 else {
        LOG.trace("Synchronous UnitOfWork Exchange must be routed synchronously for exchangeId: {} -> {}",exchange.getExchangeId(),exchange);
      }
    }
    try {
      processor.process(exchange);
    }
 catch (    Throwable e) {
      exchange.setException(e);
    }
    callback.done(true);
    return true;
  }
 else {
    final UnitOfWork uow=exchange.getUnitOfWork();
    AsyncCallback async=callback;
    if (uow != null) {
      async=uow.beforeProcess(processor,exchange,callback);
    }
    if (LOG.isTraceEnabled()) {
      LOG.trace("Processing exchange for exchangeId: {} -> {}",exchange.getExchangeId(),exchange);
    }
    boolean sync=processor.process(exchange,async);
    if (uow != null) {
      uow.afterProcess(processor,exchange,callback,sync);
    }
    if (LOG.isTraceEnabled()) {
      LOG.trace("Exchange processed and is continued routed {} for exchangeId: {} -> {}",new Object[]{sync ? "synchronously" : "asynchronously",exchange.getExchangeId(),exchange});
    }
    return sync;
  }
}
