{
  for (int i=0; i < 100; i++) {
    template.requestBody("ignite:queue:abc?operation=ADD","hello" + i);
  }
  int size=template.requestBody("ignite:queue:abc?operation=SIZE","hello",int.class);
  assert_().that(size).isEqualTo(100);
  assert_().that(ignite().queue("abc",0,new CollectionConfiguration()).size()).isEqualTo(100);
  List<String> toRetain=Lists.newArrayList();
  for (int i=0; i < 50; i++) {
    toRetain.add("hello" + i);
  }
  boolean retained=template.requestBodyAndHeader("ignite:queue:abc?operation=CLEAR",toRetain,IgniteConstants.IGNITE_QUEUE_OPERATION,IgniteQueueOperation.RETAIN_ALL,boolean.class);
  assert_().that(retained).isTrue();
  size=template.requestBody("ignite:queue:abc?operation=SIZE","hello",int.class);
  assert_().that(size).isEqualTo(50);
  assert_().that(ignite().queue("abc",0,new CollectionConfiguration()).size()).isEqualTo(50);
  Iterator<String> iterator=template.requestBody("ignite:queue:abc?operation=ITERATOR","hello",Iterator.class);
  assert_().that(Iterators.toArray(iterator,String.class)).asList().containsExactlyElementsIn(toRetain).inOrder();
  String[] array=template.requestBody("ignite:queue:abc?operation=ARRAY","hello",String[].class);
  assert_().that(array).asList().containsExactlyElementsIn(toRetain).inOrder();
  Object result=template.requestBody("ignite:queue:abc?operation=CLEAR","hello",String.class);
  assert_().that(result).isEqualTo("hello");
  assert_().that(ignite().queue("abc",0,new CollectionConfiguration()).size()).isEqualTo(0);
  size=template.requestBody("ignite:queue:abc?operation=SIZE","hello",int.class);
  assert_().that(size).isEqualTo(0);
  assert_().that(ignite().queue("abc",0,new CollectionConfiguration()).size()).isEqualTo(0);
}
