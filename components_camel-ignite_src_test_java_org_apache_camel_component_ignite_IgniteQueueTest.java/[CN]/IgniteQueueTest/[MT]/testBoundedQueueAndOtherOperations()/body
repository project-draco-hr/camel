{
  List<String> list=Lists.newArrayList();
  for (int i=0; i < 100; i++) {
    template.requestBody("ignite:queue:def?operation=ADD&capacity=100","hello" + i);
    list.add("hello" + i);
  }
  assert_().that(template.requestBody("ignite:queue:def?operation=ADD&capacity=100","hello101",boolean.class)).isFalse();
  assert_().that(template.requestBody("ignite:queue:def?operation=OFFER&capacity=100","hello101",boolean.class)).isFalse();
  final CountDownLatch latch=new CountDownLatch(1);
  Thread t=new Thread(new Runnable(){
    @Override public void run(){
      assert_().that(template.requestBody("ignite:queue:def?operation=PUT&capacity=100","hello101",boolean.class)).isFalse();
      latch.countDown();
    }
  }
);
  t.start();
  assert_().that(latch.await(2000,TimeUnit.MILLISECONDS)).isFalse();
  t.interrupt();
  assert_().that(template.requestBody("ignite:queue:def?operation=PEEK&capacity=100",null,String.class)).isEqualTo("hello0");
  assert_().that(template.requestBody("ignite:queue:def?operation=ELEMENT&capacity=100",null,String.class)).isEqualTo("hello0");
  assert_().that(template.requestBody("ignite:queue:def?operation=TAKE&capacity=100",null,String.class)).isEqualTo("hello0");
  assert_().that(template.requestBody("ignite:queue:def?operation=SIZE&capacity=100",null,int.class)).isEqualTo(99);
  assert_().that(template.requestBody("ignite:queue:def?operation=DRAIN&capacity=100",null,String[].class)).asList().hasSize(99);
  assert_().that(template.requestBody("ignite:queue:def?operation=SIZE&capacity=100",null,int.class)).isEqualTo(0);
  assert_().that(template.requestBody("ignite:queue:def?operation=POLL&capacity=100",null,String.class)).isNull();
  t=new Thread(new Runnable(){
    @Override public void run(){
      assert_().that(template.requestBody("ignite:queue:def?operation=TAKE&capacity=100",null,String.class)).isEqualTo("hello102");
      latch.countDown();
    }
  }
);
  t.start();
  assert_().that(template.requestBody("ignite:queue:def?operation=ADD&capacity=100","hello102",boolean.class)).isTrue();
  assert_().that(latch.await(1000,TimeUnit.MILLISECONDS)).isTrue();
  assert_().that(Executors.newSingleThreadExecutor().submit(new Callable<Long>(){
    @Override public Long call() throws Exception {
      Stopwatch sw=Stopwatch.createStarted();
      assert_().that(template.requestBody("ignite:queue:def?operation=POLL&timeoutMillis=1000&capacity=100",null,String.class)).isNull();
      return sw.elapsed(TimeUnit.MILLISECONDS);
    }
  }
).get()).isAtLeast(1000L);
}
