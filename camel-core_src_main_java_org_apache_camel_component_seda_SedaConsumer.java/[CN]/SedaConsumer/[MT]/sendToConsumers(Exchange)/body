{
  int size=endpoint.getConsumers().size();
  if (size > 1 && !endpoint.isMultipleConsumersSupported()) {
    throw new IllegalStateException("Multiple consumers for the same endpoint is not allowed: " + endpoint);
  }
  if (endpoint.isMultipleConsumersSupported()) {
    if (LOG.isTraceEnabled()) {
      LOG.trace("Multicasting to {} consumers for Exchange: {}",size,exchange);
    }
    final List<Synchronization> completions=exchange.handoverCompletions();
    MulticastProcessor mp=endpoint.getConsumerMulticastProcessor();
    ObjectHelper.notNull(mp,"ConsumerMulticastProcessor",this);
    mp.process(exchange,new AsyncCallback(){
      public void done(      boolean doneSync){
        UnitOfWorkHelper.doneSynchronizations(exchange,completions,LOG);
      }
    }
);
  }
 else {
    processor.process(exchange,new AsyncCallback(){
      public void done(      boolean doneSync){
      }
    }
);
  }
}
