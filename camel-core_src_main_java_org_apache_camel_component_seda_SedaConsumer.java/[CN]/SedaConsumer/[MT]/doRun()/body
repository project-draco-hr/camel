{
  BlockingQueue<Exchange> queue=endpoint.getQueue();
  while (queue != null && (isRunAllowed())) {
    if (getEndpoint().getCamelContext().getStatus().isStarting()) {
      LOG.trace("CamelContext is starting so skip polling");
      try {
        Thread.sleep(Math.min(pollTimeout,1000));
      }
 catch (      InterruptedException e) {
        LOG.debug("Sleep interrupted, are we stopping? {}",isStopping() || isStopped());
      }
      continue;
    }
    if (isSuspending() || isSuspended() || isStarting()) {
      if (shutdownPending && queue.isEmpty()) {
        LOG.trace("Consumer is suspended and shutdown is pending, so this consumer thread is breaking out because the task queue is empty.");
        break;
      }
 else {
        LOG.trace("Consumer is suspended so skip polling");
        try {
          Thread.sleep(Math.min(pollTimeout,1000));
        }
 catch (        InterruptedException e) {
          LOG.debug("Sleep interrupted, are we stopping? {}",isStopping() || isStopped());
        }
        continue;
      }
    }
    Exchange exchange=null;
    try {
      exchange=queue.poll(pollTimeout,TimeUnit.MILLISECONDS);
      if (LOG.isTraceEnabled()) {
        LOG.trace("Polled queue {} with timeout {} ms. -> {}",new Object[]{ObjectHelper.getIdentityHashCode(queue),pollTimeout,exchange});
      }
      if (exchange != null) {
        try {
          Exchange newExchange=prepareExchange(exchange);
          sendToConsumers(newExchange);
          if (newExchange.hasOut()) {
            exchange.setOut(newExchange.getOut().copy());
          }
 else {
            exchange.setIn(newExchange.getIn());
          }
          if (newExchange.getException() != null) {
            exchange.setException(newExchange.getException());
            getExceptionHandler().handleException("Error processing exchange",exchange,exchange.getException());
          }
        }
 catch (        Exception e) {
          getExceptionHandler().handleException("Error processing exchange",exchange,e);
        }
      }
 else       if (shutdownPending && queue.isEmpty()) {
        LOG.trace("Shutdown is pending, so this consumer thread is breaking out because the task queue is empty.");
        break;
      }
    }
 catch (    InterruptedException e) {
      LOG.debug("Sleep interrupted, are we stopping? {}",isStopping() || isStopped());
      continue;
    }
catch (    Throwable e) {
      if (exchange != null) {
        getExceptionHandler().handleException("Error processing exchange",exchange,e);
      }
 else {
        getExceptionHandler().handleException(e);
      }
    }
  }
  latch.countDown();
  LOG.debug("Ending this polling consumer thread, there are still {} consumer threads left.",latch.getCount());
}
