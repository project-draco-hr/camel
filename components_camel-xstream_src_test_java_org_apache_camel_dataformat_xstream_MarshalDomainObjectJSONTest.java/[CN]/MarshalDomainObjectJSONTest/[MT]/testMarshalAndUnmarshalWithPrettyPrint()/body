{
  PurchaseOrder order=new PurchaseOrder();
  order.setName("pretty printed Camel");
  order.setAmount(1);
  order.setPrice(7.91);
  MockEndpoint mock=getMockEndpoint("mock:reverse");
  mock.expectedMessageCount(1);
  mock.message(0).body().isInstanceOf(PurchaseOrder.class);
  mock.message(0).body().equals(order);
  Object marshalled=template.requestBody("direct:inPretty",order);
  String marshalledAsString=context.getTypeConverter().convertTo(String.class,marshalled);
  String expected="{\"org.apache.camel.dataformat.xstream.PurchaseOrder\": {\n" + "  \"name\": \"pretty printed Camel\",\n" + "  \"price\": 7.91,\n"+ "  \"amount\": 1.0\n"+ "}}";
  assertEquals(expected,marshalledAsString);
  template.sendBody("direct:backPretty",marshalled);
  mock.assertIsSatisfied();
}
