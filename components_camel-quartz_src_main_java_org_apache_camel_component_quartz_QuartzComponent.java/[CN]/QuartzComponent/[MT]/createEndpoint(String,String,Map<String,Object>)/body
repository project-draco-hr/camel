{
  URI u=new URI(uri);
  String path=ObjectHelper.after(u.getPath(),"/");
  String host=u.getHost();
  String cron=getAndRemoveParameter(parameters,"cron",String.class);
  boolean fireNow=getAndRemoveParameter(parameters,"fireNow",Boolean.class,Boolean.FALSE);
  Integer startDelayedSeconds=getAndRemoveParameter(parameters,"startDelayedSeconds",Integer.class);
  if (startDelayedSeconds != null) {
    if (scheduler.isStarted()) {
      LOG.warn("A Quartz job is already started. Cannot apply the 'startDelayedSeconds' configuration!");
    }
 else     if (this.startDelayedSeconds != 0 && !(this.startDelayedSeconds == startDelayedSeconds)) {
      LOG.warn("A Quartz job is already configured with a different 'startDelayedSeconds' configuration! " + "All Quartz jobs must share the same 'startDelayedSeconds' configuration! Cannot apply the 'startDelayedSeconds' configuration!");
    }
 else {
      this.startDelayedSeconds=startDelayedSeconds;
    }
  }
  if (host == null) {
    host=ObjectHelper.before(remaining,"/");
    if (host == null) {
      host=remaining;
    }
  }
  String name;
  String group;
  if (ObjectHelper.isNotEmpty(path) && ObjectHelper.isNotEmpty(host)) {
    group=host;
    name=path;
  }
 else {
    group="Camel";
    name=host;
  }
  Map<String,Object> triggerParameters=IntrospectionSupport.extractProperties(parameters,"trigger.");
  Map<String,Object> jobParameters=IntrospectionSupport.extractProperties(parameters,"job.");
  Trigger trigger;
  boolean stateful="true".equals(parameters.get("stateful"));
  if (!isClustered() && !stateful) {
    trigger=getScheduler().getTrigger(name,group);
    if (trigger != null) {
      String msg="A Quartz job already exists with the name/group: " + name + "/"+ group;
      throw new IllegalArgumentException(msg);
    }
  }
  if (ObjectHelper.isNotEmpty(cron)) {
    cron=encodeCronExpression(cron);
    trigger=createCronTrigger(cron);
  }
 else {
    trigger=new SimpleTrigger();
    if (fireNow) {
      String intervalString=(String)triggerParameters.get("repeatInterval");
      if (intervalString != null) {
        long interval=EndpointHelper.resolveParameter(getCamelContext(),intervalString,Long.class);
        trigger.setStartTime(new Date(System.currentTimeMillis() - interval));
      }
    }
  }
  QuartzEndpoint answer=new QuartzEndpoint(uri,this);
  answer.setGroupName(group);
  answer.setTimerName(name);
  answer.setCron(cron);
  answer.setFireNow(fireNow);
  if (startDelayedSeconds != null) {
    answer.setStartDelayedSeconds(startDelayedSeconds);
  }
  if (triggerParameters != null && !triggerParameters.isEmpty()) {
    answer.setTriggerParameters(triggerParameters);
  }
  if (jobParameters != null && !jobParameters.isEmpty()) {
    answer.setJobParameters(jobParameters);
    setProperties(answer.getJobDetail(),jobParameters);
  }
  if (cron != null) {
    answer.getJobDetail().getJobDataMap().put(QuartzConstants.QUARTZ_TRIGGER_TYPE,"cron");
    answer.getJobDetail().getJobDataMap().put(QuartzConstants.QUARTZ_TRIGGER_CRON_EXPRESSION,cron);
    String timeZone=EndpointHelper.resolveParameter(getCamelContext(),(String)triggerParameters.get("timeZone"),String.class);
    if (timeZone != null) {
      answer.getJobDetail().getJobDataMap().put(QuartzConstants.QUARTZ_TRIGGER_CRON_TIMEZONE,timeZone);
    }
  }
 else {
    answer.getJobDetail().getJobDataMap().put(QuartzConstants.QUARTZ_TRIGGER_TYPE,"simple");
    Long interval=EndpointHelper.resolveParameter(getCamelContext(),(String)triggerParameters.get("repeatInterval"),Long.class);
    if (interval != null) {
      triggerParameters.put("repeatInterval",interval);
      answer.getJobDetail().getJobDataMap().put(QuartzConstants.QUARTZ_TRIGGER_SIMPLE_REPEAT_INTERVAL,interval);
    }
    Integer counter=EndpointHelper.resolveParameter(getCamelContext(),(String)triggerParameters.get("repeatCount"),Integer.class);
    if (counter != null) {
      triggerParameters.put("repeatCount",counter);
      answer.getJobDetail().getJobDataMap().put(QuartzConstants.QUARTZ_TRIGGER_SIMPLE_REPEAT_COUNTER,counter);
    }
  }
  setProperties(trigger,triggerParameters);
  trigger.setName(name);
  trigger.setGroup(group);
  answer.setTrigger(trigger);
  return answer;
}
