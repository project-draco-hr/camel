{
  HttpString requestMethod=httpExchange.getRequestMethod();
  if (Methods.OPTIONS.equals(requestMethod) && !getEndpoint().isOptionsEnabled()) {
    String allowedMethods;
    if (getEndpoint().getHttpMethodRestrict() != null) {
      allowedMethods="OPTIONS," + getEndpoint().getHttpMethodRestrict();
    }
 else {
      allowedMethods="GET,HEAD,POST,PUT,DELETE,TRACE,OPTIONS,CONNECT,PATCH";
    }
    httpExchange.setStatusCode(StatusCodes.OK);
    httpExchange.getResponseHeaders().put(ExchangeHeaders.CONTENT_TYPE,MimeMappings.DEFAULT_MIME_MAPPINGS.get("txt"));
    httpExchange.getResponseHeaders().put(ExchangeHeaders.CONTENT_LENGTH,0);
    httpExchange.getResponseHeaders().put(Headers.ALLOW,allowedMethods);
    httpExchange.getResponseSender().close();
    return;
  }
  if (httpExchange.isInIoThread()) {
    httpExchange.dispatch(this);
    return;
  }
  Exchange camelExchange=getEndpoint().createExchange(httpExchange);
  createUoW(camelExchange);
  try {
    getProcessor().process(camelExchange);
  }
 catch (  Exception e) {
    getExceptionHandler().handleException(e);
  }
 finally {
    doneUoW(camelExchange);
  }
  Object body=getResponseBody(httpExchange,camelExchange);
  TypeConverter tc=getEndpoint().getCamelContext().getTypeConverter();
  if (body == null) {
    LOG.trace("No payload to send as reply for exchange: " + camelExchange);
    httpExchange.getResponseHeaders().put(ExchangeHeaders.CONTENT_TYPE,MimeMappings.DEFAULT_MIME_MAPPINGS.get("txt"));
    httpExchange.getResponseSender().send("No response available");
  }
 else {
    ByteBuffer bodyAsByteBuffer=tc.convertTo(ByteBuffer.class,body);
    httpExchange.getResponseSender().send(bodyAsByteBuffer);
  }
  httpExchange.getResponseSender().close();
}
