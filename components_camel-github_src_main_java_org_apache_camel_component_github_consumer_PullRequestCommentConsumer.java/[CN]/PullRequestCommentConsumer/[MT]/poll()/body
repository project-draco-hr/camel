{
  Map<Long,PullRequest> commentIdToPullRequest=new HashMap<Long,PullRequest>();
  List<PullRequest> pullRequests=pullRequestService.getPullRequests(getRepository(),"open");
  Stack<Comment> newComments=new Stack<Comment>();
  for (  PullRequest pullRequest : pullRequests) {
    List<CommitComment> commitComments=pullRequestService.getComments(getRepository(),pullRequest.getNumber());
    for (    Comment comment : commitComments) {
      if (!commentIds.contains(comment.getId())) {
        newComments.add(comment);
        commentIds.add(comment.getId());
        commentIdToPullRequest.put(comment.getId(),pullRequest);
      }
    }
    List<Comment> comments=issueService.getComments(getRepository(),pullRequest.getNumber());
    for (    Comment comment : comments) {
      if (!commentIds.contains(comment.getId())) {
        newComments.add(comment);
        commentIds.add(comment.getId());
        commentIdToPullRequest.put(comment.getId(),pullRequest);
      }
    }
  }
  while (!newComments.empty()) {
    Comment newComment=newComments.pop();
    Exchange e=getEndpoint().createExchange();
    e.getIn().setBody(newComment);
    e.getIn().setHeader("GitHubPullRequest",commentIdToPullRequest.get(newComment.getId()));
    getProcessor().process(e);
  }
  return newComments.size();
}
