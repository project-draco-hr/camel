{
  Expression exp=exchange.getIn().getHeader(Exchange.LANGUAGE_SCRIPT,Expression.class);
  if (exp == null) {
    String script=exchange.getIn().getHeader(Exchange.LANGUAGE_SCRIPT,String.class);
    if (script != null) {
      script=getEndpoint().resolveScript(script);
      exp=getEndpoint().getLanguage().createExpression(script);
    }
  }
  if (exp == null && getEndpoint().isCacheScript()) {
    exp=getEndpoint().getExpression();
  }
  if (exp == null) {
    String script=getEndpoint().getScript();
    if (script == null && getEndpoint().getResourceUri() == null) {
      throw new CamelExchangeException("No script to evaluate",exchange);
    }
    InputStream is=null;
    if (script == null) {
      is=getEndpoint().getResourceAsInputStream();
    }
 else     if (ResourceHelper.hasScheme(script)) {
      is=ResourceHelper.resolveMandatoryResourceAsInputStream(getEndpoint().getCamelContext().getClassResolver(),script);
    }
    if (is != null) {
      try {
        script=getEndpoint().getCamelContext().getTypeConverter().convertTo(String.class,exchange,is);
      }
  finally {
        IOHelper.close(is);
      }
    }
    if (script != null) {
      exp=getEndpoint().getLanguage().createExpression(script);
      getEndpoint().setContentResolvedFromResource(true);
      if (getEndpoint().isCacheScript()) {
        getEndpoint().setExpression(exp);
      }
    }
 else {
      throw new CamelExchangeException("No script to evaluate",exchange);
    }
  }
  ObjectHelper.notNull(exp,"expression");
  Object result;
  try {
    result=exp.evaluate(exchange,Object.class);
    log.debug("Evaluated expression as: {} with: {}",result,exchange);
  }
  finally {
    if (!getEndpoint().isCacheScript()) {
      ServiceHelper.stopService(exp);
      getEndpoint().getCamelContext().removeService(exp);
    }
  }
  if (getEndpoint().isTransform()) {
    if (exchange.hasOut()) {
      exchange.getOut().setBody(result);
    }
 else {
      exchange.getIn().setBody(result);
    }
  }
}
