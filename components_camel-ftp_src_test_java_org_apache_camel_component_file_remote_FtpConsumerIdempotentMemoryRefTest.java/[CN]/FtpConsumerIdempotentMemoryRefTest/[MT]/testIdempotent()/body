{
  NotifyBuilder notify=new NotifyBuilder(context).whenDone(5).create();
  getMockEndpoint("mock:result").expectedMessageCount(5);
  sendFile(getFtpUrl(),"Hello A","a.txt");
  sendFile(getFtpUrl(),"Hello B","b.txt");
  sendFile(getFtpUrl(),"Hello C","c.txt");
  sendFile(getFtpUrl(),"Hello D","d.txt");
  sendFile(getFtpUrl(),"Hello E","e.txt");
  assertMockEndpointsSatisfied();
  assertTrue(notify.matchesMockWaitTime());
  assertEquals(5,repo.getCache().size());
  assertTrue(repo.contains("a.txt"));
  assertTrue(repo.contains("b.txt"));
  assertTrue(repo.contains("c.txt"));
  assertTrue(repo.contains("d.txt"));
  assertTrue(repo.contains("e.txt"));
  resetMocks();
  notify=new NotifyBuilder(context).whenDone(2).create();
  getMockEndpoint("mock:result").expectedMessageCount(2);
  sendFile(getFtpUrl(),"Hello A","a.txt");
  sendFile(getFtpUrl(),"Hello B","b.txt");
  sendFile(getFtpUrl(),"Hello F","f.txt");
  sendFile(getFtpUrl(),"Hello G","g.txt");
  assertMockEndpointsSatisfied();
  assertTrue(notify.matchesMockWaitTime());
  assertEquals(5,repo.getCache().size());
}
