{
  String start=startToken;
  if (SimpleLanguage.hasSimpleFunction(start)) {
    start=SimpleLanguage.expression(start).evaluate(exchange,String.class);
  }
  String end=endToken;
  if (SimpleLanguage.hasSimpleFunction(end)) {
    end=SimpleLanguage.expression(end).evaluate(exchange,String.class);
  }
  String inherit=inheritNamespaceToken;
  if (inherit != null && SimpleLanguage.hasSimpleFunction(inherit)) {
    inherit=SimpleLanguage.expression(inherit).evaluate(exchange,String.class);
  }
  if (!start.startsWith("<") || !start.endsWith(">")) {
    throw new IllegalArgumentException("Start token must be a valid XML token, was: " + start);
  }
  if (!end.startsWith("<") || !end.endsWith(">")) {
    throw new IllegalArgumentException("End token must be a valid XML token, was: " + end);
  }
  if (inherit != null && (!inherit.startsWith("<") || !inherit.endsWith(">"))) {
    throw new IllegalArgumentException("Namespace token must be a valid XML token, was: " + inherit);
  }
  XMLTokenPairIterator iterator=new XMLTokenPairIterator(start,end,inherit,in,charset);
  iterator.init();
  return iterator;
}
