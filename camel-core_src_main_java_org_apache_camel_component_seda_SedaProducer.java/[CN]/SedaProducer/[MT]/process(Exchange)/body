{
  Exchange copy=ExchangeHelper.createCorrelatedCopy(exchange,true);
  copy.setFromEndpoint(endpoint);
  WaitForTaskToComplete wait=waitForTaskToComplete;
  if (exchange.getProperty(Exchange.ASYNC_WAIT) != null) {
    wait=exchange.getProperty(Exchange.ASYNC_WAIT,WaitForTaskToComplete.class);
  }
  if (wait == WaitForTaskToComplete.Always || (wait == WaitForTaskToComplete.IfReplyExpected && ExchangeHelper.isOutCapable(exchange))) {
    final CountDownLatch latch=new CountDownLatch(1);
    copy.addOnCompletion(new SynchronizationAdapter(){
      @Override public void onDone(      Exchange response){
        if (latch.getCount() == 0) {
          if (log.isTraceEnabled()) {
            log.trace(this + ". Timeout occurred so response will be ignored: " + (response.hasOut() ? response.getOut() : response.getIn()));
          }
          return;
        }
 else {
          if (log.isTraceEnabled()) {
            log.trace(this + " with response: " + (response.hasOut() ? response.getOut() : response.getIn()));
          }
          try {
            ExchangeHelper.copyResults(exchange,response);
          }
  finally {
            latch.countDown();
          }
        }
      }
      @Override public String toString(){
        return "onDone at [" + endpoint.getEndpointUri() + "]";
      }
    }
);
    queue.add(copy);
    if (timeout > 0) {
      if (log.isTraceEnabled()) {
        log.trace("Waiting for task to complete using timeout (ms): " + timeout + " at ["+ endpoint.getEndpointUri()+ "]");
      }
      boolean done=latch.await(timeout,TimeUnit.MILLISECONDS);
      if (!done) {
        exchange.setException(new ExchangeTimedOutException(exchange,timeout));
      }
    }
 else {
      if (log.isTraceEnabled()) {
        log.trace("Waiting for task to complete (blocking) at [" + endpoint.getEndpointUri() + "]");
      }
      latch.await();
    }
  }
 else {
    queue.add(copy);
  }
}
