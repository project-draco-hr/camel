{
  final String fieldPreamble;
  final String fieldPostamble;
  final int columnWidthIncrement;
  if (isHeader) {
    fieldPreamble=DEFAULT_HEADER_PREAMBLE;
    fieldPostamble=DEFAULT_HEADER_POSTAMBLE;
  }
 else {
    fieldPreamble=DEFAULT_FIELD_PREAMBLE;
    fieldPostamble=DEFAULT_FIELD_POSTAMBLE;
  }
  columnWidthIncrement=DEFAULT_COLUMN_WIDTH_INCREMENT;
  if (verbose) {
    int labelLen=Math.min(columnWidths.get(LABEL_COLUMN_LABEL) + columnWidthIncrement,getMaxColumnWidth(isHeader));
    int numberLen=Math.min(columnWidths.get(NUMBER_COLUMN_LABEL) + columnWidthIncrement,getMaxColumnWidth(isHeader));
    labelLen=Math.max(MIN_COLUMN_WIDTH,labelLen);
    numberLen=Math.max(MIN_NUMBER_COLUMN_WIDTH,numberLen);
    final StringBuilder retval=new StringBuilder(DEFAULT_FORMAT_BUFFER_LENGTH);
    retval.append(fieldPreamble).append("%-").append(labelLen).append('.').append(labelLen).append('s').append(fieldPostamble).append(' ');
    retval.append(fieldPreamble).append("%-").append(numberLen).append('.').append(numberLen).append('s').append(fieldPostamble).append(' ');
    retval.append(fieldPreamble).append("%s").append(fieldPostamble).append(' ');
    return retval.toString();
  }
 else {
    int labelLen=Math.min(columnWidths.get(LABEL_COLUMN_LABEL) + columnWidthIncrement,getMaxColumnWidth(isHeader));
    labelLen=Math.max(MIN_COLUMN_WIDTH,labelLen);
    final StringBuilder retval=new StringBuilder(DEFAULT_FORMAT_BUFFER_LENGTH);
    retval.append(fieldPreamble).append("%-").append(labelLen).append('.').append(labelLen).append('s').append(fieldPostamble).append(' ');
    return retval.toString();
  }
}
