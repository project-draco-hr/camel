{
  super(uri,component);
  this.configuration=properties;
  if (LOG.isTraceEnabled()) {
    configuration.setTracer(new Tracer(){
      @Override public void debug(      String message,      Object... args){
        LOG.trace("tracer.debug() " + this + ": uri="+ uri+ ", message="+ String.format(message,args));
      }
      @Override public void onSend(      MQTTFrame frame){
        String decoded=null;
        try {
switch (frame.messageType()) {
case PINGREQ.TYPE:
            decoded=new PINGREQ().decode(frame).toString();
          break;
case PINGRESP.TYPE:
        decoded=new PINGRESP().decode(frame).toString();
      break;
case CONNECT.TYPE:
    decoded=new CONNECT().decode(frame).toString();
  break;
case DISCONNECT.TYPE:
decoded=new DISCONNECT().decode(frame).toString();
break;
case SUBSCRIBE.TYPE:
decoded=new SUBSCRIBE().decode(frame).toString();
break;
case UNSUBSCRIBE.TYPE:
decoded=new UNSUBSCRIBE().decode(frame).toString();
break;
case PUBLISH.TYPE:
decoded=new PUBLISH().decode(frame).toString();
break;
case PUBACK.TYPE:
decoded=new PUBACK().decode(frame).toString();
break;
case PUBREC.TYPE:
decoded=new PUBREC().decode(frame).toString();
break;
case PUBREL.TYPE:
decoded=new PUBREL().decode(frame).toString();
break;
case PUBCOMP.TYPE:
decoded=new PUBCOMP().decode(frame).toString();
break;
case CONNACK.TYPE:
decoded=new CONNACK().decode(frame).toString();
break;
case SUBACK.TYPE:
decoded=new SUBACK().decode(frame).toString();
break;
default :
decoded=frame.toString();
}
}
 catch (Throwable e) {
decoded=frame.toString();
}
LOG.trace("tracer.onSend() " + this + ":  uri="+ uri+ ", frame="+ decoded);
}
@Override public void onReceive(MQTTFrame frame){
String decoded=null;
try {
switch (frame.messageType()) {
case PINGREQ.TYPE:
decoded=new PINGREQ().decode(frame).toString();
break;
case PINGRESP.TYPE:
decoded=new PINGRESP().decode(frame).toString();
break;
case CONNECT.TYPE:
decoded=new CONNECT().decode(frame).toString();
break;
case DISCONNECT.TYPE:
decoded=new DISCONNECT().decode(frame).toString();
break;
case SUBSCRIBE.TYPE:
decoded=new SUBSCRIBE().decode(frame).toString();
break;
case UNSUBSCRIBE.TYPE:
decoded=new UNSUBSCRIBE().decode(frame).toString();
break;
case PUBLISH.TYPE:
decoded=new PUBLISH().decode(frame).toString();
break;
case PUBACK.TYPE:
decoded=new PUBACK().decode(frame).toString();
break;
case PUBREC.TYPE:
decoded=new PUBREC().decode(frame).toString();
break;
case PUBREL.TYPE:
decoded=new PUBREL().decode(frame).toString();
break;
case PUBCOMP.TYPE:
decoded=new PUBCOMP().decode(frame).toString();
break;
case CONNACK.TYPE:
decoded=new CONNACK().decode(frame).toString();
break;
case SUBACK.TYPE:
decoded=new SUBACK().decode(frame).toString();
break;
default :
decoded=frame.toString();
}
}
 catch (Throwable e) {
decoded=frame.toString();
}
LOG.trace("tracer.onReceive() " + this + ":  uri="+ uri+ ", frame="+ decoded);
}
}
);
}
}
