{
  super.doStart();
  connection=configuration.callbackConnection();
  connection.listener(new Listener(){
    public void onConnected(){
      LOG.info("MQTT Connection connected to {}",configuration.getHost());
    }
    public void onDisconnected(){
      LOG.debug("MQTT Connection disconnected from {}",configuration.getHost());
    }
    public void onPublish(    UTF8Buffer topic,    Buffer body,    Runnable ack){
      if (!consumers.isEmpty()) {
        Exchange exchange=createExchange();
        exchange.getIn().setBody(body.toByteArray());
        exchange.getIn().setHeader(MQTTConfiguration.MQTT_SUBSCRIBE_TOPIC,topic.toString());
        for (        MQTTConsumer consumer : consumers) {
          consumer.processExchange(exchange);
        }
      }
      if (ack != null) {
        ack.run();
      }
    }
    public void onFailure(    Throwable value){
      connection.disconnect(new Callback<Void>(){
        public void onSuccess(        Void value){
        }
        public void onFailure(        Throwable e){
          LOG.debug("Failed to disconnect from " + configuration.getHost() + ". This exception is ignored.",e);
        }
      }
);
    }
  }
);
}
