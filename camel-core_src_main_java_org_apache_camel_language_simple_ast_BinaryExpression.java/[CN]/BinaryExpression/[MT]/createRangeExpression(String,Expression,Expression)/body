{
  return new Expression(){
    @Override public <T>T evaluate(    Exchange exchange,    Class<T> type){
      Predicate predicate;
      String range=rightExp.evaluate(exchange,String.class);
      Matcher matcher=RANGE_PATTERN.matcher(range);
      if (matcher.matches()) {
        Expression from=ExpressionBuilder.constantExpression(matcher.group(1));
        Expression to=ExpressionBuilder.constantExpression(matcher.group(3));
        predicate=PredicateBuilder.isGreaterThanOrEqualTo(leftExp,from);
        predicate=PredicateBuilder.and(predicate,PredicateBuilder.isLessThanOrEqualTo(leftExp,to));
      }
 else {
        throw new SimpleIllegalSyntaxException(expression,right.getToken().getIndex(),operator + " operator is not valid. Valid syntax:'from..to' (where from and to are numbers).");
      }
      if (operator == BinaryOperatorType.NOT_RANGE) {
        predicate=PredicateBuilder.not(predicate);
      }
      boolean answer=predicate.matches(exchange);
      return exchange.getContext().getTypeConverter().convertTo(type,answer);
    }
    @Override public String toString(){
      return left + " " + token.getText()+ " "+ right;
    }
  }
;
}
