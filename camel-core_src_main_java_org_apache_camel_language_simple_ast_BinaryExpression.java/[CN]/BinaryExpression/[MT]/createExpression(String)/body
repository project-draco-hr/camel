{
  ObjectHelper.notNull(left,"left node",this);
  ObjectHelper.notNull(right,"right node",this);
  final Expression leftExp=left.createExpression(expression);
  final Expression rightExp=right.createExpression(expression);
  if (operator == BinaryOperatorType.EQ) {
    return createExpression(leftExp,rightExp,PredicateBuilder.isEqualTo(leftExp,rightExp));
  }
 else   if (operator == BinaryOperatorType.EQ_IGNORE) {
    return createExpression(leftExp,rightExp,PredicateBuilder.isEqualToIgnoreCase(leftExp,rightExp));
  }
 else   if (operator == BinaryOperatorType.GT) {
    return createExpression(leftExp,rightExp,PredicateBuilder.isGreaterThan(leftExp,rightExp));
  }
 else   if (operator == BinaryOperatorType.GTE) {
    return createExpression(leftExp,rightExp,PredicateBuilder.isGreaterThanOrEqualTo(leftExp,rightExp));
  }
 else   if (operator == BinaryOperatorType.LT) {
    return createExpression(leftExp,rightExp,PredicateBuilder.isLessThan(leftExp,rightExp));
  }
 else   if (operator == BinaryOperatorType.LTE) {
    return createExpression(leftExp,rightExp,PredicateBuilder.isLessThanOrEqualTo(leftExp,rightExp));
  }
 else   if (operator == BinaryOperatorType.NOT_EQ) {
    return createExpression(leftExp,rightExp,PredicateBuilder.isNotEqualTo(leftExp,rightExp));
  }
 else   if (operator == BinaryOperatorType.CONTAINS) {
    return createExpression(leftExp,rightExp,PredicateBuilder.contains(leftExp,rightExp));
  }
 else   if (operator == BinaryOperatorType.NOT_CONTAINS) {
    return createExpression(leftExp,rightExp,PredicateBuilder.not(PredicateBuilder.contains(leftExp,rightExp)));
  }
 else   if (operator == BinaryOperatorType.IS || operator == BinaryOperatorType.NOT_IS) {
    return createIsExpression(expression,leftExp,rightExp);
  }
 else   if (operator == BinaryOperatorType.REGEX || operator == BinaryOperatorType.NOT_REGEX) {
    return createRegexExpression(leftExp,rightExp);
  }
 else   if (operator == BinaryOperatorType.IN || operator == BinaryOperatorType.NOT_IN) {
    return createInExpression(leftExp,rightExp);
  }
 else   if (operator == BinaryOperatorType.RANGE || operator == BinaryOperatorType.NOT_RANGE) {
    return createRangeExpression(expression,leftExp,rightExp);
  }
  throw new SimpleParserException("Unknown binary operator " + operator,token.getIndex());
}
