{
  LOG.trace("renderResourceListing");
  if (cors) {
    response.setHeader("Access-Control-Allow-Headers","Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers");
    response.setHeader("Access-Control-Allow-Methods","GET, HEAD, POST, PUT, DELETE, TRACE, OPTIONS, CONNECT, PATCH");
    response.setHeader("Access-Control-Allow-Origin","*");
  }
  List<RestDefinition> rests=getRestDefinitions(contextId);
  if (rests != null) {
    if (json) {
      response.setHeader(Exchange.CONTENT_TYPE,"application/json");
      Swagger swagger=reader.read(rests,route,swaggerConfig,contextId,classResolver);
      ObjectMapper mapper=new ObjectMapper();
      mapper.enable(SerializationFeature.INDENT_OUTPUT);
      mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
      byte[] bytes=mapper.writeValueAsBytes(swagger);
      int len=bytes.length;
      response.setHeader(Exchange.CONTENT_LENGTH,"" + len);
      response.writeBytes(bytes);
    }
 else {
      response.setHeader(Exchange.CONTENT_TYPE,"text/yaml");
      Swagger swagger=reader.read(rests,route,swaggerConfig,contextId,classResolver);
      ObjectMapper mapper=new ObjectMapper();
      mapper.enable(SerializationFeature.INDENT_OUTPUT);
      mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
      byte[] jsonData=mapper.writeValueAsBytes(swagger);
      JsonNode node=mapper.readTree(jsonData);
      byte[] bytes=Yaml.mapper().writerWithDefaultPrettyPrinter().writeValueAsBytes(node);
      int len=bytes.length;
      response.setHeader(Exchange.CONTENT_LENGTH,"" + len);
      response.writeBytes(bytes);
    }
  }
 else {
    response.noContent();
  }
}
