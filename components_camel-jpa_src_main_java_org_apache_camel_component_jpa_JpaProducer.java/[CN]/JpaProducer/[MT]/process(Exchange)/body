{
  exchange.getIn().setHeader(JpaConstants.ENTITYMANAGER,entityManager);
  final Object values=expression.evaluate(exchange,Object.class);
  if (values != null) {
    transactionTemplate.execute(new TransactionCallback<Object>(){
      public Object doInTransaction(      TransactionStatus status){
        entityManager.joinTransaction();
        if (values.getClass().isArray()) {
          Object[] array=(Object[])values;
          for (int index=0; index < array.length; index++) {
            Object managedEntity=save(array[index],entityManager);
            if (!endpoint.isUsePersist()) {
              array[index]=managedEntity;
            }
          }
        }
 else         if (values instanceof Collection) {
          @SuppressWarnings("unchecked") Collection<Object> collection=(Collection<Object>)values;
          List<Object> managedEntities=new ArrayList<Object>();
          for (          Object entity : collection) {
            Object managedEntity=save(entity,entityManager);
            managedEntities.add(managedEntity);
          }
          if (!endpoint.isUsePersist()) {
            collection.clear();
            collection.addAll(managedEntities);
          }
        }
 else {
          Object managedEntity=save(values,entityManager);
          if (!endpoint.isUsePersist()) {
            exchange.getIn().setBody(managedEntity);
          }
        }
        if (endpoint.isFlushOnSend()) {
          entityManager.flush();
        }
        return null;
      }
      /** 
 * save the given entity end return the managed entity
 * @param entity
 * @param entityManager
 * @return the managed entity
 */
      private Object save(      final Object entity,      EntityManager entityManager){
        if (endpoint.isUsePersist()) {
          entityManager.persist(entity);
          return entity;
        }
 else {
          return entityManager.merge(entity);
        }
      }
    }
);
  }
  exchange.getIn().removeHeader(JpaConstants.ENTITYMANAGER);
}
