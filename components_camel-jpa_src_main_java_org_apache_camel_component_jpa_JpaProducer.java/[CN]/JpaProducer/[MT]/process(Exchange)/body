{
  final EntityManager targetEntityManager=getTargetEntityManager(exchange);
  exchange.getIn().setHeader(JpaConstants.ENTITYMANAGER,targetEntityManager);
  final Object values=expression.evaluate(exchange,Object.class);
  if (values != null) {
    transactionTemplate.execute(new TransactionCallback<Object>(){
      public Object doInTransaction(      TransactionStatus status){
        if (getEndpoint().isJoinTransaction()) {
          targetEntityManager.joinTransaction();
        }
        if (values.getClass().isArray()) {
          Object[] array=(Object[])values;
          for (          Object element : array) {
            save(element);
          }
        }
 else         if (values instanceof Collection) {
          Collection<?> collection=(Collection<?>)values;
          for (          Object entity : collection) {
            save(entity);
          }
        }
 else {
          Object managedEntity=save(values);
          if (!getEndpoint().isUsePersist()) {
            exchange.getIn().setBody(managedEntity);
          }
        }
        if (getEndpoint().isFlushOnSend()) {
          if (getEndpoint().isJoinTransaction()) {
            targetEntityManager.joinTransaction();
          }
          targetEntityManager.flush();
        }
        return null;
      }
      /** 
 * save the given entity end return the managed entity
 * @return the managed entity
 */
      private Object save(      final Object entity){
        targetEntityManager.joinTransaction();
        if (getEndpoint().isUsePersist()) {
          targetEntityManager.persist(entity);
          return entity;
        }
 else {
          return targetEntityManager.merge(entity);
        }
      }
    }
);
  }
}
