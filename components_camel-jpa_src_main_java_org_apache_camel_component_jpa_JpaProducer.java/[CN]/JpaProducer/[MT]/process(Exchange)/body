{
  final EntityManager entityManager=getTargetEntityManager(exchange,entityManagerFactory,getEndpoint().isUsePassedInEntityManager(),getEndpoint().isSharedEntityManager(),true);
  final Object values=expression.evaluate(exchange,Object.class);
  if (values != null) {
    transactionTemplate.execute(new TransactionCallback<Object>(){
      public Object doInTransaction(      TransactionStatus status){
        if (getEndpoint().isJoinTransaction()) {
          entityManager.joinTransaction();
        }
        if (values.getClass().isArray()) {
          Object[] array=(Object[])values;
          for (          Object element : array) {
            if (!getEndpoint().isRemove()) {
              save(element);
            }
 else {
              remove(element);
            }
          }
        }
 else         if (values instanceof Collection) {
          Collection<?> collection=(Collection<?>)values;
          for (          Object entity : collection) {
            if (!getEndpoint().isRemove()) {
              save(entity);
            }
 else {
              remove(entity);
            }
          }
        }
 else {
          Object managedEntity=null;
          if (!getEndpoint().isRemove()) {
            managedEntity=save(values);
          }
 else {
            managedEntity=remove(values);
          }
          if (!getEndpoint().isUsePersist()) {
            exchange.getIn().setBody(managedEntity);
          }
        }
        if (getEndpoint().isFlushOnSend()) {
          entityManager.flush();
        }
        return null;
      }
      /** 
 * Save the given entity end return the managed entity
 * @return the managed entity
 */
      private Object save(      final Object entity){
        LOG.debug("save: {}",entity);
        if (getEndpoint().isUsePersist()) {
          entityManager.persist(entity);
          return entity;
        }
 else {
          return entityManager.merge(entity);
        }
      }
      /** 
 * Remove the given entity end return the managed entity
 * @return the managed entity
 */
      private Object remove(      final Object entity){
        LOG.debug("remove: {}",entity);
        Object managedEntity;
        if (entityManager.contains(entity)) {
          managedEntity=entity;
        }
 else {
          managedEntity=entityManager.merge(entity);
        }
        entityManager.remove(managedEntity);
        return managedEntity;
      }
    }
);
  }
}
