{
  MockEndpoint mock=getMockEndpoint("mock:result");
  mock.expectedMessageCount(1);
  Account account1=new Account();
  account1.setId(123);
  account1.setFirstName("James");
  account1.setLastName("Strachan");
  account1.setEmailAddress("Other@gmail.com");
  Account account2=new Account();
  account2.setId(456);
  account2.setFirstName("Claus");
  account2.setLastName("Ibsen");
  account2.setEmailAddress("Other@gmail.com");
  template.sendBody("direct:start",Arrays.asList(account1,account2));
  assertMockEndpointsSatisfied();
  Integer rows=template.requestBody("mybatis:count?statementType=SelectOne",null,Integer.class);
  assertEquals("There should be 2 rows",2,rows.intValue());
  Account james=template.requestBody("mybatis:selectAccountById?statementType=SelectOne",123,Account.class);
  assertEquals("James",james.getFirstName());
  assertEquals("Strachan",james.getLastName());
  assertEquals("Other@gmail.com",james.getEmailAddress());
  Account claus=template.requestBody("mybatis:selectAccountById?statementType=SelectOne",456,Account.class);
  assertEquals("Claus",claus.getFirstName());
  assertEquals("Ibsen",claus.getLastName());
  assertEquals("Other@gmail.com",claus.getEmailAddress());
}
