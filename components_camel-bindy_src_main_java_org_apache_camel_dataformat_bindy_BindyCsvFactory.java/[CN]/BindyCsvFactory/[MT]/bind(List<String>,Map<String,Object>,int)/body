{
  int pos=1;
  int counterMandatoryFields=0;
  for (  String data : tokens) {
    DataField dataField=dataFields.get(pos);
    ObjectHelper.notNull(dataField,"No position " + pos + " defined for the field: "+ data+ ", line: "+ line);
    if (dataField.trim()) {
      data=data.trim();
    }
    if (dataField.required()) {
      ++counterMandatoryFields;
      if (data.equals("")) {
        throw new IllegalArgumentException("The mandatory field defined at the position " + pos + " is empty for the line: "+ line);
      }
    }
    Field field=annotatedFields.get(pos);
    field.setAccessible(true);
    if (LOG.isDebugEnabled()) {
      LOG.debug("Pos: {}, Data: {}, Field type: {}",new Object[]{pos,data,field.getType()});
    }
    Format<?> format=FormatFactory.getFormat(field.getType(),getLocale(),dataField);
    Object modelField=model.get(field.getDeclaringClass().getName());
    Object value=null;
    if (!data.equals("")) {
      try {
        value=format.parse(data);
      }
 catch (      FormatException ie) {
        throw new IllegalArgumentException(ie.getMessage() + ", position: " + pos+ ", line: "+ line,ie);
      }
catch (      Exception e) {
        throw new IllegalArgumentException("Parsing error detected for field defined at the position: " + pos + ", line: "+ line,e);
      }
    }
 else {
      if (!dataField.defaultValue().isEmpty()) {
        value=format.parse(dataField.defaultValue());
      }
 else {
        value=getDefaultValueForPrimitive(field.getType());
      }
    }
    field.set(modelField,value);
    ++pos;
  }
  LOG.debug("Counter mandatory fields: {}",counterMandatoryFields);
  if (counterMandatoryFields < numberMandatoryFields) {
    throw new IllegalArgumentException("Some mandatory fields are missing, line: " + line);
  }
  if (pos < totalFields) {
    setDefaultValuesForFields(model);
  }
}
