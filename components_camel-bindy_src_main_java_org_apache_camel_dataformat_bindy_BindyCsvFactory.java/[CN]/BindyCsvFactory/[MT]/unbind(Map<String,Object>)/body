{
  StringBuilder buffer=new StringBuilder();
  Map<Integer,List<String>> results=new HashMap<Integer,List<String>>();
  ObjectHelper.notNull(this.separator,"The separator has not been instantiated or property not defined in the @CsvRecord annotation");
  char separator=ConverterUtils.getCharDelimiter(this.getSeparator());
  if (LOG.isDebugEnabled()) {
    LOG.debug("Separator converted: '0x{}', from: {}",Integer.toHexString(separator),this.getSeparator());
  }
  for (  Class<?> clazz : models) {
    if (model.containsKey(clazz.getName())) {
      Object obj=model.get(clazz.getName());
      if (obj != null && LOG.isDebugEnabled()) {
        LOG.debug("Model object: {}, class: {}",obj,obj.getClass().getName());
      }
      if (obj != null) {
        generateCsvPositionMap(clazz,obj,results);
      }
    }
  }
  List<List<String>> l=new ArrayList<List<String>>();
  if (isOneToMany) {
    l=product(results);
  }
 else {
    TreeMap<Integer,List<String>> sortValues=new TreeMap<Integer,List<String>>(results);
    List<String> temp=new ArrayList<String>();
    for (    Entry<Integer,List<String>> entry : sortValues.entrySet()) {
      List<String> val=entry.getValue();
      String value=val.get(0);
      if (value != null) {
        temp.add(value);
      }
 else {
        temp.add("");
      }
    }
    l.add(temp);
  }
  if (l != null) {
    Iterator<List<String>> it=l.iterator();
    while (it.hasNext()) {
      List<String> tokens=it.next();
      Iterator<String> itx=tokens.iterator();
      while (itx.hasNext()) {
        String res=itx.next();
        if (res != null) {
          if (quoting && quote != null) {
            buffer.append(quote);
          }
          buffer.append(res);
          if (quoting && quote != null) {
            buffer.append(quote);
          }
        }
        if (itx.hasNext()) {
          buffer.append(separator);
        }
      }
      if (it.hasNext()) {
        buffer.append(ConverterUtils.getStringCarriageReturn(getCarriageReturn()));
      }
    }
  }
  return buffer.toString();
}
