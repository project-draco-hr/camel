{
  ObjectHelper.notNull(dockerConfiguration,"dockerConfiguration");
  DockerClientProfile clientProfile=new DockerClientProfile();
  Integer port=DockerHelper.getProperty(DockerConstants.DOCKER_PORT,dockerConfiguration,message,Integer.class,dockerConfiguration.getPort());
  String host=DockerHelper.getProperty(DockerConstants.DOCKER_HOST,dockerConfiguration,message,String.class,dockerConfiguration.getHost());
  Integer maxTotalConnections=DockerHelper.getProperty(DockerConstants.DOCKER_MAX_TOTAL_CONNECTIONS,dockerConfiguration,message,Integer.class,dockerConfiguration.getMaxTotalConnections());
  Integer maxPerRouteConnections=DockerHelper.getProperty(DockerConstants.DOCKER_MAX_PER_ROUTE_CONNECTIONS,dockerConfiguration,message,Integer.class,dockerConfiguration.getMaxPerRouteConnections());
  String username=DockerHelper.getProperty(DockerConstants.DOCKER_USERNAME,dockerConfiguration,message,String.class,dockerConfiguration.getUsername());
  String password=DockerHelper.getProperty(DockerConstants.DOCKER_PASSWORD,dockerConfiguration,message,String.class,dockerConfiguration.getPassword());
  String email=DockerHelper.getProperty(DockerConstants.DOCKER_EMAIL,dockerConfiguration,message,String.class,dockerConfiguration.getEmail());
  Integer requestTimeout=DockerHelper.getProperty(DockerConstants.DOCKER_API_REQUEST_TIMEOUT,dockerConfiguration,message,Integer.class,dockerConfiguration.getRequestTimeout());
  String serverAddress=DockerHelper.getProperty(DockerConstants.DOCKER_SERVER_ADDRESS,dockerConfiguration,message,String.class,dockerConfiguration.getServerAddress());
  String certPath=DockerHelper.getProperty(DockerConstants.DOCKER_CERT_PATH,dockerConfiguration,message,String.class,dockerConfiguration.getCertPath());
  Boolean secure=DockerHelper.getProperty(DockerConstants.DOCKER_SECURE,dockerConfiguration,message,Boolean.class,dockerConfiguration.isSecure());
  clientProfile.setHost(host);
  clientProfile.setPort(port);
  clientProfile.setEmail(email);
  clientProfile.setUsername(username);
  clientProfile.setPassword(password);
  clientProfile.setRequestTimeout(requestTimeout);
  clientProfile.setServerAddress(serverAddress);
  clientProfile.setCertPath(certPath);
  clientProfile.setMaxTotalConnections(maxTotalConnections);
  clientProfile.setMaxPerRouteConnections(maxPerRouteConnections);
  clientProfile.setSecure(secure);
  DockerClient client=dockerComponent.getClient(clientProfile);
  if (client != null) {
    return client;
  }
  SSLConfig sslConfig;
  if (clientProfile.isSecure() != null && clientProfile.isSecure()) {
    ObjectHelper.notNull(clientProfile.getCertPath(),"certPath must be specified in secure mode");
    sslConfig=new LocalDirectorySSLConfig(clientProfile.getCertPath());
  }
 else {
    sslConfig=new NoImplSslConfig();
  }
  DockerClientConfig.DockerClientConfigBuilder configBuilder=new DockerClientConfig.DockerClientConfigBuilder().withUsername(clientProfile.getUsername()).withPassword(clientProfile.getPassword()).withEmail(clientProfile.getEmail()).withReadTimeout(clientProfile.getRequestTimeout()).withUri(clientProfile.toUrl()).withMaxPerRouteConnections(clientProfile.getMaxPerRouteConnections()).withMaxTotalConnections(clientProfile.getMaxTotalConnections()).withSSLConfig(sslConfig).withServerAddress(clientProfile.getServerAddress());
  if (clientProfile.getCertPath() != null) {
    configBuilder.withDockerCertPath(clientProfile.getCertPath());
  }
  DockerClientConfig config=configBuilder.build();
  DockerCmdExecFactory dockerClientFactory=new DockerCmdExecFactoryImpl();
  client=DockerClientBuilder.getInstance(config).withDockerCmdExecFactory(dockerClientFactory).build();
  dockerComponent.setClient(clientProfile,client);
  return client;
}
