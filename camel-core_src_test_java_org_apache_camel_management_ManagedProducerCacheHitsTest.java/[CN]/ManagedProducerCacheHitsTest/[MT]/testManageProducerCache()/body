{
  getMockEndpoint("mock:a").expectedMessageCount(1);
  getMockEndpoint("mock:b").expectedMessageCount(1);
  getMockEndpoint("mock:c").expectedMessageCount(1);
  template.sendBodyAndHeader("direct:start","Hello World","foo","mock:a");
  template.sendBodyAndHeader("direct:start","Hello World","foo","mock:b");
  template.sendBodyAndHeader("direct:start","Hello World","foo","mock:c");
  assertMockEndpointsSatisfied();
  MBeanServer mbeanServer=getMBeanServer();
  Set<ObjectName> set=mbeanServer.queryNames(new ObjectName("*:type=services,*"),null);
  List<ObjectName> list=new ArrayList<ObjectName>(set);
  ObjectName on=null;
  for (  ObjectName name : list) {
    if (name.getCanonicalName().contains("ProducerCache")) {
      on=name;
      break;
    }
  }
  assertNotNull("Should have found ProducerCache",on);
  Integer max=(Integer)mbeanServer.getAttribute(on,"MaximumCacheSize");
  assertEquals(1000,max.intValue());
  Integer current=(Integer)mbeanServer.getAttribute(on,"Size");
  assertEquals(3,current.intValue());
  Long hits=(Long)mbeanServer.getAttribute(on,"Hits");
  assertEquals(0,hits.longValue());
  Long misses=(Long)mbeanServer.getAttribute(on,"Misses");
  assertEquals(3,misses.longValue());
  resetMocks();
  getMockEndpoint("mock:a").expectedMessageCount(1);
  getMockEndpoint("mock:b").expectedMessageCount(1);
  template.sendBodyAndHeader("direct:start","Bye World","foo","mock:a");
  template.sendBodyAndHeader("direct:start","Bye World","foo","mock:b");
  assertMockEndpointsSatisfied();
  hits=(Long)mbeanServer.getAttribute(on,"Hits");
  assertEquals(2,hits.longValue());
  misses=(Long)mbeanServer.getAttribute(on,"Misses");
  assertEquals(3,misses.longValue());
  resetMocks();
  getMockEndpoint("mock:d").expectedMessageCount(1);
  template.sendBodyAndHeader("direct:start","Hi World","foo","mock:d");
  assertMockEndpointsSatisfied();
  hits=(Long)mbeanServer.getAttribute(on,"Hits");
  assertEquals(2,hits.longValue());
  misses=(Long)mbeanServer.getAttribute(on,"Misses");
  assertEquals(4,misses.longValue());
  mbeanServer.invoke(on,"resetStatistics",null,null);
  hits=(Long)mbeanServer.getAttribute(on,"Hits");
  assertEquals(0,hits.longValue());
  misses=(Long)mbeanServer.getAttribute(on,"Misses");
  assertEquals(0,misses.longValue());
}
