{
  CamelContext container=new DefaultCamelContext();
  final ArrayList<String> order=new ArrayList<String>();
  final DelegateProcessor interceptor1=new DelegateProcessor(){
    @Override public void process(    Exchange exchange) throws Exception {
      order.add("START:1");
      super.process(exchange);
      order.add("END:1");
    }
  }
;
  final DelegateProcessor interceptor2=new DelegateProcessor(){
    @Override public void process(    Exchange exchange) throws Exception {
      order.add("START:2");
      super.process(exchange);
      order.add("END:2");
    }
  }
;
  final Processor orderProcessor=new Processor(){
    public void process(    Exchange exchange){
      order.add("INVOKED");
    }
  }
;
  final Processor toProcessor=new Processor(){
    public void process(    Exchange exchange){
      order.add("TO");
    }
  }
;
  RouteBuilder builder=new RouteBuilder(){
    public void configure(){
      from("direct:a").intercept(interceptor1).process(orderProcessor).end().intercept(interceptor2).process(toProcessor);
    }
  }
;
  container.addRoutes(builder);
  container.start();
  Endpoint endpoint=container.getEndpoint("direct:a");
  Exchange exchange=endpoint.createExchange();
  Producer producer=endpoint.createProducer();
  producer.process(exchange);
  ArrayList<String> expected=new ArrayList<String>();
  expected.add("START:1");
  expected.add("INVOKED");
  expected.add("END:1");
  expected.add("START:2");
  expected.add("TO");
  expected.add("END:2");
  log.debug("Interceptor invocation order:" + order);
  assertEquals(expected,order);
}
