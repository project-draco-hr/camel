{
  if (!enabled) {
    LOG.debug("StreamCaching is not enabled");
    return;
  }
  String bufferSize=camelContext.getProperty(BUFFER_SIZE);
  String hold=camelContext.getProperty(THRESHOLD);
  String chiper=camelContext.getProperty(CIPHER_TRANSFORMATION);
  String dir=camelContext.getProperty(TEMP_DIR);
  boolean warn=false;
  if (bufferSize != null) {
    warn=true;
    this.bufferSize=camelContext.getTypeConverter().convertTo(Integer.class,bufferSize);
  }
  if (hold != null) {
    warn=true;
    this.spoolThreshold=camelContext.getTypeConverter().convertTo(Long.class,hold);
  }
  if (chiper != null) {
    warn=true;
    this.spoolChiper=chiper;
  }
  if (dir != null) {
    warn=true;
    this.spoolDirectory=camelContext.getTypeConverter().convertTo(File.class,dir);
  }
  if (warn) {
    LOG.warn("Configuring of StreamCaching using CamelContext properties is deprecated - use StreamCachingStrategy instead.");
  }
  if (spoolUsedHeapMemoryThreshold > 99) {
    throw new IllegalArgumentException("SpoolHeapMemoryWatermarkThreshold must not be higher than 99, was: " + spoolUsedHeapMemoryThreshold);
  }
  if (spoolThreshold > 0 || spoolUsedHeapMemoryThreshold > 0) {
    if (spoolDirectory == null && spoolDirectoryName == null) {
      throw new IllegalArgumentException("SpoolDirectory must be configured when using SpoolThreshold > 0");
    }
    if (spoolDirectory == null) {
      String name=resolveSpoolDirectory(spoolDirectoryName);
      if (name != null) {
        spoolDirectory=new File(name);
        spoolDirectoryName=null;
      }
 else {
        throw new IllegalStateException("Cannot resolve spool directory from pattern: " + spoolDirectoryName);
      }
    }
    if (spoolDirectory.exists()) {
      if (spoolDirectory.isDirectory()) {
        LOG.debug("Using spool directory: {}",spoolDirectory);
      }
 else {
        LOG.warn("Spool directory: {} is not a directory. This may cause problems spooling to disk for the stream caching!",spoolDirectory);
      }
    }
 else {
      boolean created=spoolDirectory.mkdirs();
      if (!created) {
        LOG.warn("Cannot create spool directory: {}. This may cause problems spooling to disk for the stream caching!",spoolDirectory);
      }
 else {
        LOG.debug("Created spool directory: {}",spoolDirectory);
      }
    }
    if (spoolThreshold > 0) {
      spoolRules.add(new FixedThresholdSpoolRule());
    }
    if (spoolUsedHeapMemoryThreshold > 0) {
      spoolRules.add(new UsedHeapMemorySpoolRule());
    }
  }
  LOG.debug("StreamCaching configuration {}",this.toString());
  if (spoolDirectory != null) {
    LOG.info("StreamCaching in use with spool directory: {} and rules: {}",spoolDirectory.getPath(),spoolRules.toString());
  }
 else {
    LOG.info("StreamCaching in use with rules: {}",spoolRules.toString());
  }
}
