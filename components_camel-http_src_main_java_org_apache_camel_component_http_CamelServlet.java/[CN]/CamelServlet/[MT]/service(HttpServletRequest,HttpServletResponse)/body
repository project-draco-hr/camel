{
  log.trace("Service: {}",request);
  HttpConsumer consumer=resolve(request);
  if (consumer == null) {
    log.debug("No consumer to service request {}",request);
    response.sendError(HttpServletResponse.SC_NOT_FOUND);
    return;
  }
  if (consumer.isSuspended()) {
    log.debug("Consumer suspended, cannot service request {}",request);
    response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);
    return;
  }
  if (consumer.getEndpoint().getHttpMethodRestrict() != null && !consumer.getEndpoint().getHttpMethodRestrict().equals(request.getMethod())) {
    response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED);
    return;
  }
  if ("TRACE".equals(request.getMethod()) && !consumer.isTraceEnabled()) {
    response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED);
    return;
  }
  Exchange exchange=new DefaultExchange(consumer.getEndpoint(),ExchangePattern.InOut);
  if (consumer.getEndpoint().isBridgeEndpoint()) {
    exchange.setProperty(Exchange.SKIP_GZIP_ENCODING,Boolean.TRUE);
  }
  if (consumer.getEndpoint().isDisableStreamCache()) {
    exchange.setProperty(Exchange.DISABLE_HTTP_STREAM_CACHE,Boolean.TRUE);
  }
  ClassLoader oldTccl=overrideTccl(exchange);
  HttpHelper.setCharsetFromContentType(request.getContentType(),exchange);
  exchange.setIn(new HttpMessage(exchange,request,response));
  try {
    log.trace("Processing request for exchangeId: {}",exchange.getExchangeId());
    consumer.getProcessor().process(exchange);
  }
 catch (  Exception e) {
    exchange.setException(e);
  }
  try {
    log.trace("Writing response for exchangeId: {}",exchange.getExchangeId());
    consumer.getBinding().writeResponse(exchange,response);
  }
 catch (  IOException e) {
    log.error("Error processing request",e);
    throw e;
  }
catch (  Exception e) {
    log.error("Error processing request",e);
    throw new ServletException(e);
  }
 finally {
    restoreTccl(exchange,oldTccl);
  }
}
