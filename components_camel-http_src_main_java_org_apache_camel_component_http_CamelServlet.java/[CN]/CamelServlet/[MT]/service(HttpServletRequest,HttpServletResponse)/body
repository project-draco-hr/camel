{
  if (log.isTraceEnabled()) {
    log.trace("Service: " + request);
  }
  HttpConsumer consumer=resolve(request);
  if (consumer == null) {
    response.sendError(HttpServletResponse.SC_NOT_FOUND);
    return;
  }
  if (consumer.isSuspended()) {
    response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);
    return;
  }
  Exchange exchange=new DefaultExchange(consumer.getEndpoint(),ExchangePattern.InOut);
  if (consumer.getEndpoint().isBridgeEndpoint()) {
    exchange.setProperty(Exchange.SKIP_GZIP_ENCODING,Boolean.TRUE);
  }
  if (consumer.getEndpoint().isDisableStreamCache()) {
    exchange.setProperty(Exchange.DISABLE_HTTP_STREAM_CACHE,Boolean.TRUE);
  }
  HttpHelper.setCharsetFromContentType(request.getContentType(),exchange);
  exchange.setIn(new HttpMessage(exchange,request,response));
  try {
    if (log.isTraceEnabled()) {
      log.trace("Processing request for exchangeId: " + exchange.getExchangeId());
    }
    consumer.getProcessor().process(exchange);
  }
 catch (  Exception e) {
    exchange.setException(e);
  }
  try {
    if (log.isTraceEnabled()) {
      log.trace("Writing response for exchangeId: " + exchange.getExchangeId());
    }
    consumer.getBinding().writeResponse(exchange,response);
  }
 catch (  IOException e) {
    log.error("Error processing request",e);
    throw e;
  }
catch (  Exception e) {
    log.error("Error processing request",e);
    throw new ServletException(e);
  }
}
