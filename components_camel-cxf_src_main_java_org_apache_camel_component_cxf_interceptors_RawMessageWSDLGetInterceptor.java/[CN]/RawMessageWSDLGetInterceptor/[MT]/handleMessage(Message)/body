{
  String method=(String)message.get(Message.HTTP_REQUEST_METHOD);
  String query=(String)message.get(Message.QUERY_STRING);
  if (!"GET".equals(method) || StringUtils.isEmpty(query)) {
    return;
  }
  String baseUri=(String)message.get(Message.REQUEST_URL);
  String ctx=(String)message.get(Message.PATH_INFO);
  Map<String,String> map=UrlUtils.parseQueryString(query);
  if (isRecognizedQuery(map,baseUri,ctx,message.getExchange().getEndpoint().getEndpointInfo())) {
    Document doc=getDocument(message,baseUri,map,ctx);
    Endpoint e=message.getExchange().get(Endpoint.class);
    Message mout=new MessageImpl();
    mout.setExchange(message.getExchange());
    mout=e.getBinding().createMessage(mout);
    mout.setInterceptorChain(OutgoingChainInterceptor.getOutInterceptorChain(message.getExchange()));
    message.getExchange().setOutMessage(mout);
    mout.put(DOCUMENT_HOLDER,doc);
    Iterator<Interceptor<? extends Message>> iterator=mout.getInterceptorChain().iterator();
    while (iterator.hasNext()) {
      Interceptor<? extends Message> inInterceptor=iterator.next();
      if (inInterceptor instanceof AbstractPhaseInterceptor) {
        AbstractPhaseInterceptor<?> interceptor=(AbstractPhaseInterceptor<?>)inInterceptor;
        if (interceptor.getPhase().equals(Phase.PREPARE_SEND) || interceptor.getPhase().equals(Phase.PRE_STREAM)) {
          continue;
        }
      }
      mout.getInterceptorChain().remove(inInterceptor);
    }
    mout.getInterceptorChain().add(RawMessageWSDLGetOutInterceptor.INSTANCE);
    message.getInterceptorChain().doInterceptStartingAt(message,OutgoingChainInterceptor.class.getName());
  }
}
