{
  Properties velocityProperties=new Properties();
  velocityProperties.setProperty(RuntimeConstants.RESOURCE_LOADER,"cloader");
  velocityProperties.setProperty("cloader.resource.loader.class",ClasspathResourceLoader.class.getName());
  velocityProperties.setProperty(RuntimeConstants.RUNTIME_LOG_LOGSYSTEM_CLASS,Log4JLogChute.class.getName());
  velocityProperties.setProperty(RuntimeConstants.RUNTIME_LOG_LOGSYSTEM + ".log4j.logger",LOG.getName());
  engine=new VelocityEngine(velocityProperties);
  engine.init();
  if (!engine.resourceExists(SOBJECT_POJO_VM) || !engine.resourceExists(SOBJECT_QUERY_RECORDS_VM)) {
    throw new MojoExecutionException("Velocity templates not found");
  }
  final SalesforceHttpClient httpClient=createHttpClient();
  final SalesforceSession session=httpClient.getSession();
  getLog().info("Salesforce login...");
  try {
    session.login(null);
  }
 catch (  SalesforceException e) {
    String msg="Salesforce login error " + e.getMessage();
    throw new MojoExecutionException(msg,e);
  }
  getLog().info("Salesforce login successful");
  RestClient restClient;
  try {
    restClient=new DefaultRestClient(httpClient,version,PayloadFormat.JSON,session);
    ((DefaultRestClient)restClient).start();
  }
 catch (  Exception e) {
    final String msg="Unexpected exception creating Rest client: " + e.getMessage();
    throw new MojoExecutionException(msg,e);
  }
  try {
    final ObjectMapper mapper=new ObjectMapper();
    final Set<String> objectNames=new TreeSet<String>();
    final SyncResponseCallback callback=new SyncResponseCallback();
    try {
      getLog().info("Getting Salesforce Objects...");
      restClient.getGlobalObjects(callback);
      if (!callback.await(responseTimeout,TimeUnit.MILLISECONDS)) {
        throw new MojoExecutionException("Timeout waiting for getGlobalObjects!");
      }
      final SalesforceException ex=callback.getException();
      if (ex != null) {
        throw ex;
      }
      final GlobalObjects globalObjects=mapper.readValue(callback.getResponse(),GlobalObjects.class);
      for (      SObject sObject : globalObjects.getSobjects()) {
        objectNames.add(sObject.getName());
      }
    }
 catch (    Exception e) {
      String msg="Error getting global Objects " + e.getMessage();
      throw new MojoExecutionException(msg,e);
    }
    if ((includes != null && includes.length > 0) || (excludes != null && excludes.length > 0) || ObjectHelper.isNotEmpty(includePattern)|| ObjectHelper.isNotEmpty(excludePattern)) {
      filterObjectNames(objectNames);
    }
 else {
      getLog().warn(String.format("Generating Java classes for all %s Objects, this may take a while...",objectNames.size()));
    }
    final Set<SObjectDescription> descriptions=new HashSet<SObjectDescription>();
    getLog().info("Retrieving Object descriptions...");
    for (    String name : objectNames) {
      try {
        callback.reset();
        restClient.getDescription(name,callback);
        if (!callback.await(responseTimeout,TimeUnit.MILLISECONDS)) {
          throw new MojoExecutionException("Timeout waiting for getDescription for sObject " + name);
        }
        final SalesforceException ex=callback.getException();
        if (ex != null) {
          throw ex;
        }
        descriptions.add(mapper.readValue(callback.getResponse(),SObjectDescription.class));
      }
 catch (      Exception e) {
        String msg="Error getting SObject description for '" + name + "': "+ e.getMessage();
        throw new MojoExecutionException(msg,e);
      }
    }
    if (!packageName.matches(PACKAGE_NAME_PATTERN)) {
      throw new MojoExecutionException("Invalid package name " + packageName);
    }
    final File pkgDir=new File(outputDirectory,packageName.trim().replace('.',File.separatorChar));
    if (!pkgDir.exists()) {
      if (!pkgDir.mkdirs()) {
        throw new MojoExecutionException("Unable to create " + pkgDir);
      }
    }
    getLog().info("Generating Java Classes...");
    final GeneratorUtility utility=new GeneratorUtility(useStringsForPicklists);
    final String generatedDate=new Date().toString();
    for (    SObjectDescription description : descriptions) {
      processDescription(pkgDir,description,utility,generatedDate);
    }
    getLog().info(String.format("Successfully generated %s Java Classes",descriptions.size() * 2));
  }
  finally {
    try {
      ((DefaultRestClient)restClient).stop();
    }
 catch (    Exception ignore) {
    }
    try {
      session.stop();
    }
 catch (    Exception ignore) {
    }
    try {
      httpClient.stop();
    }
 catch (    Exception ignore) {
    }
  }
}
