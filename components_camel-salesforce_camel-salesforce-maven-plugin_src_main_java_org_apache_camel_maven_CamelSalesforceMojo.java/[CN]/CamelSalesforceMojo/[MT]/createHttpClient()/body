{
  final SalesforceHttpClient httpClient;
  try {
    final SSLContextParameters contextParameters=sslContextParameters != null ? sslContextParameters : new SSLContextParameters();
    final SslContextFactory sslContextFactory=new SslContextFactory();
    sslContextFactory.setSslContext(contextParameters.createSSLContext());
    httpClient=new SalesforceHttpClient(sslContextFactory);
  }
 catch (  GeneralSecurityException e) {
    throw new MojoExecutionException("Error creating default SSL context: " + e.getMessage(),e);
  }
catch (  IOException e) {
    throw new MojoExecutionException("Error creating default SSL context: " + e.getMessage(),e);
  }
  httpClient.setConnectTimeout(DEFAULT_TIMEOUT);
  httpClient.setTimeout(DEFAULT_TIMEOUT);
  httpClient.setFollowRedirects(true);
  if (httpClientProperties != null && !httpClientProperties.isEmpty()) {
    try {
      IntrospectionSupport.setProperties(httpClient,new HashMap<String,Object>(httpClientProperties));
    }
 catch (    Exception e) {
      throw new MojoExecutionException("Error setting HTTP client properties: " + e.getMessage(),e);
    }
  }
  responseTimeout=httpClient.getTimeout() + 1000L;
  if (this.httpProxyHost != null && httpProxyPort != null) {
    Origin.Address proxyAddress=new Origin.Address(this.httpProxyHost,this.httpProxyPort);
    ProxyConfiguration.Proxy proxy;
    if (isHttpProxySocks4) {
      proxy=new Socks4Proxy(proxyAddress,isHttpProxySecure);
    }
 else {
      proxy=new HttpProxy(proxyAddress,isHttpProxySecure);
    }
    if (httpProxyIncludedAddresses != null && !httpProxyIncludedAddresses.isEmpty()) {
      proxy.getIncludedAddresses().addAll(httpProxyIncludedAddresses);
    }
    if (httpProxyExcludedAddresses != null && !httpProxyExcludedAddresses.isEmpty()) {
      proxy.getExcludedAddresses().addAll(httpProxyExcludedAddresses);
    }
    httpClient.getProxyConfiguration().getProxies().add(proxy);
  }
  if (this.httpProxyUsername != null && httpProxyPassword != null) {
    ObjectHelper.notEmpty(httpProxyAuthUri,"httpProxyAuthUri");
    ObjectHelper.notEmpty(httpProxyRealm,"httpProxyRealm");
    final Authentication authentication;
    if (httpProxyUseDigestAuth) {
      authentication=new DigestAuthentication(URI.create(httpProxyAuthUri),httpProxyRealm,httpProxyUsername,httpProxyPassword);
    }
 else {
      authentication=new BasicAuthentication(URI.create(httpProxyAuthUri),httpProxyRealm,httpProxyUsername,httpProxyPassword);
    }
    httpClient.getAuthenticationStore().addAuthentication(authentication);
  }
  final SalesforceSession session=new SalesforceSession(httpClient,httpClient.getTimeout(),new SalesforceLoginConfig(loginUrl,clientId,clientSecret,userName,password,false));
  httpClient.setSession(session);
  try {
    httpClient.start();
  }
 catch (  Exception e) {
    throw new MojoExecutionException("Error creating HTTP client: " + e.getMessage(),e);
  }
  return httpClient;
}
