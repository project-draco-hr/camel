{
  final HttpClient httpClient=new HttpClient();
  httpClient.registerListener(RedirectListener.class.getName());
  httpClient.setConnectorType(HttpClient.CONNECTOR_SELECT_CHANNEL);
  httpClient.setConnectTimeout(DEFAULT_TIMEOUT);
  httpClient.setTimeout(DEFAULT_TIMEOUT);
  try {
    final SSLContextParameters contextParameters=sslContextParameters != null ? sslContextParameters : new SSLContextParameters();
    final SslContextFactory sslContextFactory=httpClient.getSslContextFactory();
    sslContextFactory.setSslContext(contextParameters.createSSLContext());
  }
 catch (  GeneralSecurityException e) {
    throw new MojoExecutionException("Error creating default SSL context: " + e.getMessage(),e);
  }
catch (  IOException e) {
    throw new MojoExecutionException("Error creating default SSL context: " + e.getMessage(),e);
  }
  if (httpClientProperties != null && !httpClientProperties.isEmpty()) {
    try {
      IntrospectionSupport.setProperties(httpClient,new HashMap<String,Object>(httpClientProperties));
    }
 catch (    Exception e) {
      throw new MojoExecutionException("Error setting HTTP client properties: " + e.getMessage(),e);
    }
  }
  responseTimeout=httpClient.getTimeout() + 1000L;
  if (this.httpProxyHost != null && httpProxyPort != null) {
    httpClient.setProxy(new Address(this.httpProxyHost,this.httpProxyPort));
  }
  if (this.httpProxyUsername != null && httpProxyPassword != null) {
    try {
      httpClient.setProxyAuthentication(new ProxyAuthorization(this.httpProxyUsername,this.httpProxyPassword));
    }
 catch (    IOException e) {
      throw new MojoExecutionException("Error configuring proxy authorization: " + e.getMessage(),e);
    }
  }
  String listenerClass=RedirectListener.class.getName();
  if (httpClient.getRegisteredListeners() == null || !httpClient.getRegisteredListeners().contains(listenerClass)) {
    httpClient.registerListener(listenerClass);
  }
  try {
    httpClient.start();
  }
 catch (  Exception e) {
    throw new MojoExecutionException("Error creating HTTP client: " + e.getMessage(),e);
  }
  return httpClient;
}
