{
  Date timestamp=new Date();
  String toNode=definition.getId();
  String routeId=ProcessorDefinitionHelper.getRouteId(definition);
  String exchangeId=exchange.getExchangeId();
  String messageAsXml=MessageHelper.dumpAsXml(exchange.getIn(),true,2,isBodyIncludeStreams(),isBodyIncludeFiles(),getBodyMaxChars());
  long uid=debugCounter.incrementAndGet();
  BacklogTracerEventMessage msg=new DefaultBacklogTracerEventMessage(uid,timestamp,routeId,toNode,exchangeId,messageAsXml);
  suspendedBreakpointMessages.put(toNode,msg);
  SuspendedExchange se=new SuspendedExchange(exchange,new CountDownLatch(1));
  suspendedBreakpoints.put(toNode,se);
  logger.log("StepBreakpoint at node " + toNode + " is waiting to continue for exchangeId: "+ exchange.getExchangeId());
  try {
    boolean hit=se.getLatch().await(fallbackTimeout,TimeUnit.SECONDS);
    if (!hit) {
      logger.log("StepBreakpoint at node " + toNode + " timed out and is continued exchangeId: "+ exchange.getExchangeId(),LoggingLevel.WARN);
    }
 else {
      logger.log("StepBreakpoint at node " + toNode + " is continued exchangeId: "+ exchange.getExchangeId());
    }
  }
 catch (  InterruptedException e) {
  }
}
