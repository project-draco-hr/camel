{
  Date timestamp=new Date();
  String toNode=nodeId;
  String routeId=ProcessorDefinitionHelper.getRouteId(definition);
  String exchangeId=exchange.getExchangeId();
  String messageAsXml=MessageHelper.dumpAsXml(exchange.getIn(),true,4,false,false,1000);
  long uid=debugCounter.incrementAndGet();
  BacklogTracerEventMessage msg=new DefaultBacklogTracerEventMessage(uid,timestamp,routeId,toNode,exchangeId,messageAsXml);
  suspendedBreakpointMessages.put(nodeId,msg);
  final CountDownLatch latch=new CountDownLatch(1);
  suspendedBreakpoints.put(nodeId,latch);
  if (LOG.isInfoEnabled()) {
    LOG.info("Breakpoint at node {} is waiting to continue for exchangeId: {}",nodeId,exchange.getExchangeId());
  }
  try {
    latch.await();
    LOG.info("Breakpoint at node {} is continued for exchangeId: {}",nodeId,exchange.getExchangeId());
  }
 catch (  InterruptedException e) {
  }
  super.beforeProcess(exchange,processor,definition);
}
