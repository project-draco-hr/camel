{
  List<Object> bodyParts=new ArrayList<Object>();
  List<Object> headerParts=new ArrayList<Object>();
  if (inputObject instanceof BeanInvocation) {
    BeanInvocation bi=(BeanInvocation)inputObject;
    Annotation[][] annotations=bi.getMethod().getParameterAnnotations();
    List<WebParam> webParams=new ArrayList<WebParam>();
    for (    Annotation[] singleParameterAnnotations : annotations) {
      for (      Annotation annotation : singleParameterAnnotations) {
        if (annotation instanceof WebParam) {
          webParams.add((WebParam)annotation);
        }
      }
    }
    if (webParams.size() > 0) {
      if (webParams.size() == bi.getArgs().length) {
        int index=-1;
        for (        Object o : bi.getArgs()) {
          if (webParams.get(++index).header()) {
            headerParts.add(o);
          }
 else {
            bodyParts.add(o);
          }
        }
      }
 else {
        throw new RuntimeCamelException("The number of bean invocation parameters does not " + "match the number of parameters annotated with @WebParam for the method [ " + bi.getMethod().getName() + "].");
      }
    }
 else {
      for (      Object o : bi.getArgs()) {
        bodyParts.add(o);
      }
    }
  }
 else {
    bodyParts.add(inputObject);
  }
  List<JAXBElement<?>> bodyElements=new ArrayList<JAXBElement<?>>();
  for (  Object bodyObj : bodyParts) {
    QName name=elementNameStrategy.findQNameForSoapActionOrType(soapAction,bodyObj.getClass());
    if (name == null) {
      log.warn("Could not find QName for class " + bodyObj.getClass().getName());
      continue;
    }
 else {
      bodyElements.add(getElement(bodyObj,name));
    }
  }
  for (  Object headerObj : headerParts) {
    QName name=elementNameStrategy.findQNameForSoapActionOrType(soapAction,headerObj.getClass());
    if (name == null) {
      log.warn("Could not find QName for class " + headerObj.getClass().getName());
      continue;
    }
 else {
      JAXBElement<?> headerElem=getElement(headerObj,name);
      if (null != headerElem) {
        headerElements.add(headerElem);
      }
    }
  }
  return bodyElements;
}
