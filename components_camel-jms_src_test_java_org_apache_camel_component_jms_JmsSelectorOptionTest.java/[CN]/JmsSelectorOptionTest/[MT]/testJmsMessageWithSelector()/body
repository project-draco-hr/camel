{
  MockEndpoint endpointA=getMockEndpoint("mock:a");
  MockEndpoint endpointB=getMockEndpoint("mock:b");
  MockEndpoint endpointC=getMockEndpoint("mock:c");
  endpointA.expectedBodiesReceived("A blue car!","A blue car, again!");
  endpointA.expectedHeaderReceived("color","blue");
  endpointB.expectedHeaderReceived("color","red");
  endpointB.expectedBodiesReceived("A red car!");
  endpointC.expectedBodiesReceived("Message1","Message2");
  endpointC.expectedMessageCount(2);
  template.sendBodyAndHeader("activemq:queue:hello","A blue car!","color","blue");
  template.sendBodyAndHeader("activemq:queue:hello","A red car!","color","red");
  template.sendBodyAndHeader("activemq:queue:hello","A blue car, again!","color","blue");
  template.sendBodyAndHeader("activemq:queue:hello","Message1","SIZE_NUMBER",1505);
  template.sendBodyAndHeader("activemq:queue:hello","Message3","SIZE_NUMBER",1300);
  template.sendBodyAndHeader("activemq:queue:hello","Message2","SIZE_NUMBER",1600);
  assertMockEndpointsSatisfied();
}
