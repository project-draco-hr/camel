{
  final List<Object[]> parameters=new ArrayList<Object[]>();
  if (SIZE_PARAMETER_VALUE == 0) {
    parameters.add(new Object[]{"SEDA LONG {P=1, C=1, CCT=1, SIZE=0}","seda:speedtest?concurrentConsumers=1&waitForTaskToComplete=IfReplyExpected&timeout=30000&multipleConsumers=false&limitConcurrentConsumers=true&blockWhenFull=false",singleProducer(),singleConsumer(),singleConcurrentConsumerThread(),SEDA_SIZE_HISTOGRAM_BOUNDS});
  }
 else {
    parameters.add(new Object[]{"SEDA LONG {P=1, C=1, CCT=1, SIZE=" + SIZE_PARAMETER_VALUE + "}","seda:speedtest?concurrentConsumers=1&waitForTaskToComplete=IfReplyExpected&timeout=30000&multipleConsumers=false&limitConcurrentConsumers=true&blockWhenFull=true&size=" + SIZE_PARAMETER_VALUE,singleProducer(),singleConsumer(),singleConcurrentConsumerThread(),SEDA_SIZE_HISTOGRAM_BOUNDS});
  }
  addParameterPair(parameters,singleProducer(),singleConsumer(),singleConcurrentConsumerThread());
  addParameterPair(parameters,singleProducer(),singleConsumer(),multipleConcurrentConsumerThreads());
  addParameterPair(parameters,singleProducer(),multipleConsumers(),singleConcurrentConsumerThread());
  addParameterPair(parameters,singleProducer(),multipleConsumers(),multipleConcurrentConsumerThreads());
  addParameterPair(parameters,multipleProducers(),singleConsumer(),singleConcurrentConsumerThread());
  addParameterPair(parameters,multipleProducers(),singleConsumer(),multipleConcurrentConsumerThreads());
  addParameterPair(parameters,multipleProducers(),multipleConsumers(),singleConcurrentConsumerThread());
  addParameterPair(parameters,multipleProducers(),multipleConsumers(),multipleConcurrentConsumerThreads());
  return parameters;
}
