{
  Processor childProcessor=this.createChildProcessor(routeContext,true);
  CamelInternalProcessor internal=new CamelInternalProcessor(childProcessor);
  internal.addTask(new CamelInternalProcessor.UnitOfWorkProcessorTask(routeContext.getRoute().getId()));
  Expression correlation=getExpression().createExpression(routeContext);
  AggregationStrategy strategy=createAggregationStrategy(routeContext);
  boolean shutdownThreadPool=ProcessorDefinitionHelper.willCreateNewThreadPool(routeContext,this,isParallelProcessing());
  ExecutorService threadPool=ProcessorDefinitionHelper.getConfiguredExecutorService(routeContext,"Aggregator",this,isParallelProcessing());
  if (threadPool == null && !isParallelProcessing()) {
    threadPool=new SynchronousExecutorService();
    shutdownThreadPool=true;
  }
  AggregateProcessor answer=new AggregateProcessor(routeContext.getCamelContext(),internal,correlation,strategy,threadPool,shutdownThreadPool);
  AggregationRepository repository=createAggregationRepository(routeContext);
  if (repository != null) {
    answer.setAggregationRepository(repository);
  }
  boolean shutdownTimeoutThreadPool=false;
  ScheduledExecutorService timeoutThreadPool=timeoutCheckerExecutorService;
  if (timeoutThreadPool == null && timeoutCheckerExecutorServiceRef != null) {
    timeoutThreadPool=routeContext.getCamelContext().getRegistry().lookupByNameAndType(timeoutCheckerExecutorServiceRef,ScheduledExecutorService.class);
    if (timeoutThreadPool == null) {
      timeoutThreadPool=routeContext.getCamelContext().getExecutorServiceManager().newScheduledThreadPool(this,AggregateProcessor.AGGREGATE_TIMEOUT_CHECKER,timeoutCheckerExecutorServiceRef);
      if (timeoutThreadPool == null) {
        throw new IllegalArgumentException("ExecutorServiceRef " + timeoutCheckerExecutorServiceRef + " not found in registry or as a thread pool profile.");
      }
      shutdownTimeoutThreadPool=true;
    }
  }
  answer.setTimeoutCheckerExecutorService(timeoutThreadPool);
  answer.setShutdownTimeoutCheckerExecutorService(shutdownTimeoutThreadPool);
  answer.setParallelProcessing(isParallelProcessing());
  answer.setOptimisticLocking(isOptimisticLocking());
  if (getCompletionPredicate() != null) {
    Predicate predicate=getCompletionPredicate().createPredicate(routeContext);
    answer.setCompletionPredicate(predicate);
  }
  if (getCompletionTimeoutExpression() != null) {
    Expression expression=getCompletionTimeoutExpression().createExpression(routeContext);
    answer.setCompletionTimeoutExpression(expression);
  }
  if (getCompletionTimeout() != null) {
    answer.setCompletionTimeout(getCompletionTimeout());
  }
  if (getCompletionInterval() != null) {
    answer.setCompletionInterval(getCompletionInterval());
  }
  if (getCompletionSizeExpression() != null) {
    Expression expression=getCompletionSizeExpression().createExpression(routeContext);
    answer.setCompletionSizeExpression(expression);
  }
  if (getCompletionSize() != null) {
    answer.setCompletionSize(getCompletionSize());
  }
  if (getCompletionFromBatchConsumer() != null) {
    answer.setCompletionFromBatchConsumer(isCompletionFromBatchConsumer());
  }
  if (getEagerCheckCompletion() != null) {
    answer.setEagerCheckCompletion(isEagerCheckCompletion());
  }
  if (getIgnoreInvalidCorrelationKeys() != null) {
    answer.setIgnoreInvalidCorrelationKeys(isIgnoreInvalidCorrelationKeys());
  }
  if (getCloseCorrelationKeyOnCompletion() != null) {
    answer.setCloseCorrelationKeyOnCompletion(getCloseCorrelationKeyOnCompletion());
  }
  if (getDiscardOnCompletionTimeout() != null) {
    answer.setDiscardOnCompletionTimeout(isDiscardOnCompletionTimeout());
  }
  if (getForceCompletionOnStop() != null) {
    answer.setForceCompletionOnStop(getForceCompletionOnStop());
  }
  if (optimisticLockRetryPolicy == null) {
    if (getOptimisticLockRetryPolicyDefinition() != null) {
      answer.setOptimisticLockRetryPolicy(getOptimisticLockRetryPolicyDefinition().createOptimisticLockRetryPolicy());
    }
  }
 else {
    answer.setOptimisticLockRetryPolicy(optimisticLockRetryPolicy);
  }
  return answer;
}
