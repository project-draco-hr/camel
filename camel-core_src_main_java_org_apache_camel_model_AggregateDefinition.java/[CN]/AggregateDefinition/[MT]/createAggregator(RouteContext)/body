{
  Processor processor=routeContext.createProcessor(this);
  processor=new UnitOfWorkProcessor(routeContext,processor);
  Expression correlation=getExpression().createExpression(routeContext);
  AggregationStrategy strategy=createAggregationStrategy(routeContext);
  AggregateProcessor answer=new AggregateProcessor(routeContext.getCamelContext(),processor,correlation,strategy);
  executorService=ExecutorServiceHelper.getConfiguredExecutorService(routeContext,this);
  answer.setExecutorService(executorService);
  if (isParallelProcessing() != null) {
    answer.setParallelProcessing(isParallelProcessing());
  }
  AggregationRepository<Object> repository=createAggregationRepository(routeContext);
  if (repository != null) {
    answer.setAggregationRepository(repository);
  }
  if (getCompletionPredicate() != null) {
    Predicate predicate=getCompletionPredicate().createPredicate(routeContext);
    answer.setCompletionPredicate(predicate);
  }
  if (getCompletionTimeoutExpression() != null) {
    Expression expression=getCompletionTimeoutExpression().createExpression(routeContext);
    answer.setCompletionTimeoutExpression(expression);
  }
  if (getCompletionTimeout() != null) {
    answer.setCompletionTimeout(getCompletionTimeout());
  }
  if (getCompletionSizeExpression() != null) {
    Expression expression=getCompletionSizeExpression().createExpression(routeContext);
    answer.setCompletionSizeExpression(expression);
  }
  if (getCompletionSize() != null) {
    answer.setCompletionSize(getCompletionSize());
  }
  if (isCompletionFromBatchConsumer() != null) {
    answer.setCompletionFromBatchConsumer(isCompletionFromBatchConsumer());
  }
  if (isEagerCheckCompletion() != null) {
    answer.setEagerCheckCompletion(isEagerCheckCompletion());
  }
  if (isIgnoreBadCorrelationKeys() != null) {
    answer.setIgnoreBadCorrelationKeys(isIgnoreBadCorrelationKeys());
  }
  if (getCloseCorrelationKeyOnCompletion() != null) {
    answer.setCloseCorrelationKeyOnCompletion(getCloseCorrelationKeyOnCompletion());
  }
  return answer;
}
