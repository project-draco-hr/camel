{
  final String url="bean-validator://x?group=org.apache.camel.component.bean.validator.OptionalChecks";
  final Car car=createCar("BMW","D-A");
  try {
    template.request(url,new Processor(){
      public void process(      Exchange exchange) throws Exception {
        exchange.getIn().setBody(car);
      }
    }
);
    fail("RuntimeCamelException expected");
  }
 catch (  RuntimeCamelException e) {
    assertIsInstanceOf(BeanValidationException.class,e.getCause());
    System.out.println(e.getMessage());
    BeanValidationException exception=(BeanValidationException)e.getCause();
    Set<ConstraintViolation<Object>> constraintViolations=exception.getConstraintViolations();
    assertEquals(1,constraintViolations.size());
    ConstraintViolation<Object> constraintViolation=constraintViolations.iterator().next();
    assertEquals("licensePlate",constraintViolation.getPropertyPath().toString());
    assertEquals("D-A",constraintViolation.getInvalidValue());
    assertEquals("size must be between 5 and 14",constraintViolation.getMessage());
  }
  car.setLicensePlate("DD-AB-123");
  Exchange exchange=template.request(url,new Processor(){
    public void process(    Exchange exchange) throws Exception {
      exchange.getIn().setBody(car);
    }
  }
);
  assertNotNull(exchange);
}
