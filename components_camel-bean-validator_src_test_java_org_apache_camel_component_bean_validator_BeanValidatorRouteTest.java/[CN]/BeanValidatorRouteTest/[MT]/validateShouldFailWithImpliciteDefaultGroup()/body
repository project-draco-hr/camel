{
  final String url="bean-validator://x";
  final Car car=createCar("BMW",null);
  try {
    template.requestBody(url,car);
    fail("should throw exception");
  }
 catch (  CamelExecutionException e) {
    assertIsInstanceOf(BeanValidationException.class,e.getCause());
    BeanValidationException exception=(BeanValidationException)e.getCause();
    Set<ConstraintViolation<Object>> constraintViolations=exception.getConstraintViolations();
    assertEquals(1,constraintViolations.size());
    ConstraintViolation<Object> constraintViolation=constraintViolations.iterator().next();
    assertEquals("licensePlate",constraintViolation.getPropertyPath().toString());
    assertEquals(null,constraintViolation.getInvalidValue());
    assertEquals("may not be null",constraintViolation.getMessage());
  }
  car.setLicensePlate("D-A");
  Exchange exchange=template.request(url,new Processor(){
    public void process(    Exchange exchange) throws Exception {
      exchange.getIn().setBody(car);
    }
  }
);
  assertNotNull(exchange);
}
