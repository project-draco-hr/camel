{
  final Cache<Object,Object> cache=getCacheFromEndpoint("jcache://test-cache");
  final String key=randomString();
  final String val1="to-filter-" + randomString();
  final String val2=randomString();
  cache.put(key,val1);
  cache.put(key,val2);
  cache.remove(key);
  MockEndpoint mockCreated=getMockEndpoint("mock:created");
  mockCreated.expectedMinimumMessageCount(1);
  mockCreated.expectedHeaderReceived(JCacheConstants.KEY,key);
  mockCreated.expectedMessagesMatches(new Predicate(){
    @Override public boolean matches(    Exchange exchange){
      return exchange.getIn().getBody(String.class).equals(val1);
    }
  }
);
  MockEndpoint mockUpdated=getMockEndpoint("mock:updated");
  mockUpdated.expectedMinimumMessageCount(1);
  mockUpdated.expectedHeaderReceived(JCacheConstants.KEY,key);
  mockUpdated.expectedMessagesMatches(new Predicate(){
    @Override public boolean matches(    Exchange exchange){
      return exchange.getIn().getBody(String.class).equals(val2);
    }
  }
);
  MockEndpoint mockRemoved=getMockEndpoint("mock:removed");
  mockRemoved.expectedMinimumMessageCount(1);
  mockRemoved.expectedHeaderReceived(JCacheConstants.KEY,key);
  mockRemoved.expectedMessagesMatches(new Predicate(){
    @Override public boolean matches(    Exchange exchange){
      return exchange.getIn().getBody(String.class).equals(val2);
    }
  }
);
  MockEndpoint mockMyFilter=getMockEndpoint("mock:my-filter");
  mockMyFilter.expectedMinimumMessageCount(1);
  mockMyFilter.expectedHeaderReceived(JCacheConstants.KEY,key);
  mockMyFilter.expectedMessagesMatches(new Predicate(){
    @Override public boolean matches(    Exchange exchange){
      return exchange.getIn().getBody(String.class).equals(val2);
    }
  }
);
  assertMockEndpointsSatisfied();
}
