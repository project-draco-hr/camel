{
  if (!super.acquireExclusiveReadLock(operations,file,exchange)) {
    return false;
  }
  File target=new File(file.getAbsoluteFilePath());
  LOG.trace("Waiting for exclusive read lock to file: {}",target);
  FileChannel channel=null;
  RandomAccessFile randomAccessFile=null;
  boolean exclusive=false;
  FileLock lock=null;
  try {
    randomAccessFile=new RandomAccessFile(target,"rw");
    channel=randomAccessFile.getChannel();
    StopWatch watch=new StopWatch();
    while (!exclusive) {
      if (timeout > 0) {
        long delta=watch.taken();
        if (delta > timeout) {
          CamelLogger.log(LOG,readLockLoggingLevel,"Cannot acquire read lock within " + timeout + " millis. Will skip the file: "+ target);
          return false;
        }
      }
      try {
        lock=timeout > 0 ? channel.tryLock() : channel.lock();
      }
 catch (      IllegalStateException ex) {
      }
      if (lock != null) {
        LOG.trace("Acquired exclusive read lock: {} to file: {}",lock,target);
        exclusive=true;
      }
 else {
        boolean interrupted=sleep();
        if (interrupted) {
          return false;
        }
      }
    }
  }
 catch (  IOException e) {
    if (timeout == 0) {
      return false;
    }
    LOG.debug("Cannot acquire read lock. Will try again.",e);
    boolean interrupted=sleep();
    if (interrupted) {
      return false;
    }
  }
 finally {
    if (!exclusive) {
      IOHelper.close(channel,"while acquiring exclusive read lock for file: " + target,LOG);
      IOHelper.close(randomAccessFile,"while acquiring exclusive read lock for file: " + target,LOG);
      super.releaseExclusiveReadLockOnAbort(operations,file,exchange);
    }
  }
  exchange.setProperty(Exchange.FILE_LOCK_EXCLUSIVE_LOCK,lock);
  exchange.setProperty(Exchange.FILE_LOCK_RANDOM_ACCESS_FILE,randomAccessFile);
  return true;
}
