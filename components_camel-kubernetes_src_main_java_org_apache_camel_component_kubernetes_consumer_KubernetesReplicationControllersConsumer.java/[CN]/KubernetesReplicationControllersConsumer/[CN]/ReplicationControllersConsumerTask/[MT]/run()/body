{
  ClientMixedOperation<ReplicationController,ReplicationControllerList,DoneableReplicationController,ClientRollableScallableResource<ReplicationController,DoneableReplicationController>> w=getEndpoint().getKubernetesClient().replicationControllers();
  if (ObjectHelper.isNotEmpty(getEndpoint().getKubernetesConfiguration().getNamespace())) {
    w.inNamespace(getEndpoint().getKubernetesConfiguration().getNamespace());
  }
  if (ObjectHelper.isNotEmpty(getEndpoint().getKubernetesConfiguration().getLabelKey()) && ObjectHelper.isNotEmpty(getEndpoint().getKubernetesConfiguration().getLabelValue())) {
    w.withLabel(getEndpoint().getKubernetesConfiguration().getLabelKey(),getEndpoint().getKubernetesConfiguration().getLabelValue());
  }
  if (ObjectHelper.isNotEmpty(getEndpoint().getKubernetesConfiguration().getResourceName())) {
    w.withName(getEndpoint().getKubernetesConfiguration().getResourceName());
  }
  w.watch(new Watcher<ReplicationController>(){
    @Override public void eventReceived(    io.fabric8.kubernetes.client.Watcher.Action action,    ReplicationController resource){
      ReplicationControllerEvent rce=new ReplicationControllerEvent(action,resource);
      Exchange exchange=getEndpoint().createExchange();
      exchange.getIn().setBody(rce.getReplicationController());
      exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_EVENT_ACTION,rce.getAction());
      exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_EVENT_TIMESTAMP,System.currentTimeMillis());
      try {
        processor.process(exchange);
      }
 catch (      Exception e) {
        getExceptionHandler().handleException("Error during processing",exchange,e);
      }
    }
    @Override public void onClose(    KubernetesClientException cause){
      if (cause != null) {
        LOG.error(cause.getMessage(),cause);
      }
    }
  }
);
}
