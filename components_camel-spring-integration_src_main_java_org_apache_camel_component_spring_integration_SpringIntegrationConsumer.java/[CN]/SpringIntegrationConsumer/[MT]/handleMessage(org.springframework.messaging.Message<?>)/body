{
  Exchange exchange=getEndpoint().createExchange(getEndpoint().isInOut() ? ExchangePattern.InOut : ExchangePattern.InOnly);
  exchange.setIn(new SpringIntegrationMessage(siInMessage));
  try {
    getProcessor().process(exchange);
  }
 catch (  Exception e) {
    getExceptionHandler().handleException("Error processing exchange",exchange,e);
    return;
  }
  if (getEndpoint().isInOut()) {
    MessageChannel reply=null;
    Object returnAddress=siInMessage.getHeaders().getReplyChannel();
    if (returnAddress != null) {
      if (returnAddress instanceof String) {
        reply=context.getApplicationContext().getBean((String)returnAddress,MessageChannel.class);
      }
 else       if (returnAddress instanceof MessageChannel) {
        reply=(MessageChannel)returnAddress;
      }
    }
 else {
      reply=outputChannel;
      if (reply == null) {
        throw new IllegalArgumentException("OutputChannel has not been configured on " + getEndpoint());
      }
    }
    if (reply == null) {
      throw new IllegalArgumentException("Cannot resolve ReplyChannel from message: " + siInMessage);
    }
    org.springframework.messaging.Message<?> siOutMessage=SpringIntegrationBinding.storeToSpringIntegrationMessage(exchange.getOut());
    log.debug("Sending {} to ReplyChannel: {}",siOutMessage,reply);
    reply.send(siOutMessage);
  }
}
