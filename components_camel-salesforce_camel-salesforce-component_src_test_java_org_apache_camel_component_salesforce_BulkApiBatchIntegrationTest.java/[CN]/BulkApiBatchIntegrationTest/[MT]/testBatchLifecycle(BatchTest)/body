{
  log.info("Testing Batch lifecycle with {} content",request.contentType);
  JobInfo jobInfo=new JobInfo();
  jobInfo.setOperation(OperationEnum.UPSERT);
  jobInfo.setContentType(request.contentType);
  jobInfo.setObject(Merchandise__c.class.getSimpleName());
  jobInfo.setExternalIdFieldName("Name");
  jobInfo=createJob(jobInfo);
  Map<String,Object> headers=new HashMap<String,Object>();
  headers.put(SalesforceEndpointConfig.JOB_ID,jobInfo.getId());
  headers.put(SalesforceEndpointConfig.CONTENT_TYPE,jobInfo.getContentType());
  BatchInfo batchInfo=template().requestBodyAndHeaders("direct:createBatch",request.stream,headers,BatchInfo.class);
  assertNotNull("Null batch",batchInfo);
  assertNotNull("Null batch id",batchInfo.getId());
  @SuppressWarnings("unchecked") List<BatchInfo> batches=template().requestBody("direct:getAllBatches",jobInfo,List.class);
  assertNotNull("Null batches",batches);
  assertFalse("Empty batch list",batches.isEmpty());
  batchInfo=batches.get(0);
  batchInfo=getBatchInfo(batchInfo);
  InputStream requestStream=template().requestBody("direct:getRequest",batchInfo,InputStream.class);
  assertNotNull("Null batch request",requestStream);
  log.info("Waiting for batch to finish...");
  while (!batchProcessed(batchInfo)) {
    Thread.sleep(5000);
    batchInfo=getBatchInfo(batchInfo);
  }
  log.info("Batch finished with state " + batchInfo.getState());
  assertEquals("Batch did not succeed",BatchStateEnum.COMPLETED,batchInfo.getState());
  InputStream results=template().requestBody("direct:getResults",batchInfo,InputStream.class);
  assertNotNull("Null batch results",results);
  template().requestBody("direct:closeJob",jobInfo,JobInfo.class);
}
