{
  int receiveTimeoutCounter=0;
  while (!isInterrupted() && null != clientSocket && clientSocket.isConnected() && !clientSocket.isClosed()) {
    byte[] hl7MessageBytes=null;
    log.debug("Reading data ....");
    try {
      if (null != initialByte && START_OF_BLOCK == initialByte) {
        hl7MessageBytes=MllpUtil.closeFrame(clientSocket,endpoint.receiveTimeout,endpoint.readTimeout);
      }
 else {
        try {
          if (!MllpUtil.openFrame(clientSocket,endpoint.receiveTimeout,endpoint.readTimeout)) {
            receiveTimeoutCounter=0;
            continue;
          }
 else {
            receiveTimeoutCounter=0;
          }
        }
 catch (        SocketTimeoutException timeoutEx) {
          if (endpoint.maxReceiveTimeouts > 0 && ++receiveTimeoutCounter >= endpoint.maxReceiveTimeouts) {
            log.warn("Idle Client - resetting connection");
            MllpUtil.resetConnection(clientSocket);
          }
          continue;
        }
        hl7MessageBytes=MllpUtil.closeFrame(clientSocket,endpoint.receiveTimeout,endpoint.readTimeout);
      }
    }
 catch (    MllpException mllpEx) {
      Exchange exchange=endpoint.createExchange(ExchangePattern.InOut);
      exchange.setException(mllpEx);
      return;
    }
 finally {
      initialByte=null;
    }
    if (null == hl7MessageBytes) {
      continue;
    }
    log.debug("Populating the exchange with received message");
    Exchange exchange=endpoint.createExchange(ExchangePattern.InOut);
    Message message=exchange.getIn();
    message.setBody(hl7MessageBytes,byte[].class);
    message.setHeader(MLLP_LOCAL_ADDRESS,clientSocket.getLocalAddress().toString());
    message.setHeader(MLLP_REMOTE_ADDRESS,clientSocket.getRemoteSocketAddress());
    message.setHeader(MLLP_AUTO_ACKNOWLEDGE,endpoint.autoAck);
    populateHl7DataHeaders(exchange,message,hl7MessageBytes);
    exchange.addOnCompletion(new AcknowledgmentSynchronizationAdapter(clientSocket,hl7MessageBytes));
    log.debug("Calling processor");
    try {
      getProcessor().process(exchange);
    }
 catch (    RuntimeException runtimeEx) {
      throw runtimeEx;
    }
catch (    Exception ex) {
      log.error("Unexpected exception processing exchange",ex);
      throw new RuntimeException("Unexpected exception processing exchange",ex);
    }
  }
  log.debug("ClientSocketThread exiting");
}
