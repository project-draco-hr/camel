{
  final byte fieldSeparator=hl7MessageBytes[3];
  final byte componentSeparator=hl7MessageBytes[4];
  int endOfMSH=-1;
  List<Integer> fieldSeparatorIndexes=new ArrayList<>(10);
  for (int i=0; i < hl7MessageBytes.length; ++i) {
    if (fieldSeparator == hl7MessageBytes[i]) {
      fieldSeparatorIndexes.add(i);
    }
 else     if (SEGMENT_DELIMITER == hl7MessageBytes[i]) {
      endOfMSH=i;
      break;
    }
  }
  if (-1 == endOfMSH) {
    log.error("Population of message headers failed - unable to find the end of the MSH segment");
  }
 else {
    log.debug("Populating the message headers");
    Charset charset=Charset.forName(IOHelper.getCharsetName(exchange));
    message.setHeader(MLLP_SENDING_APPLICATION,new String(hl7MessageBytes,fieldSeparatorIndexes.get(1) + 1,fieldSeparatorIndexes.get(2) - fieldSeparatorIndexes.get(1) - 1,charset));
    message.setHeader(MLLP_SENDING_FACILITY,new String(hl7MessageBytes,fieldSeparatorIndexes.get(2) + 1,fieldSeparatorIndexes.get(3) - fieldSeparatorIndexes.get(2) - 1,charset));
    message.setHeader(MLLP_RECEIVING_APPLICATION,new String(hl7MessageBytes,fieldSeparatorIndexes.get(3) + 1,fieldSeparatorIndexes.get(4) - fieldSeparatorIndexes.get(3) - 1,charset));
    message.setHeader(MLLP_RECEIVING_FACILITY,new String(hl7MessageBytes,fieldSeparatorIndexes.get(4) + 1,fieldSeparatorIndexes.get(5) - fieldSeparatorIndexes.get(4) - 1,charset));
    message.setHeader(MLLP_TIMESTAMP,new String(hl7MessageBytes,fieldSeparatorIndexes.get(5) + 1,fieldSeparatorIndexes.get(6) - fieldSeparatorIndexes.get(5) - 1,charset));
    message.setHeader(MLLP_SECURITY,new String(hl7MessageBytes,fieldSeparatorIndexes.get(6) + 1,fieldSeparatorIndexes.get(7) - fieldSeparatorIndexes.get(6) - 1,charset));
    message.setHeader(MLLP_MESSAGE_TYPE,new String(hl7MessageBytes,fieldSeparatorIndexes.get(7) + 1,fieldSeparatorIndexes.get(8) - fieldSeparatorIndexes.get(7) - 1,charset));
    message.setHeader(MLLP_MESSAGE_CONTROL,new String(hl7MessageBytes,fieldSeparatorIndexes.get(8) + 1,fieldSeparatorIndexes.get(9) - fieldSeparatorIndexes.get(8) - 1,charset));
    message.setHeader(MLLP_PROCESSING_ID,new String(hl7MessageBytes,fieldSeparatorIndexes.get(9) + 1,fieldSeparatorIndexes.get(10) - fieldSeparatorIndexes.get(9) - 1,charset));
    message.setHeader(MLLP_VERSION_ID,new String(hl7MessageBytes,fieldSeparatorIndexes.get(10) + 1,fieldSeparatorIndexes.get(11) - fieldSeparatorIndexes.get(10) - 1,charset));
    message.setHeader(MLLP_CHARSET,new String(hl7MessageBytes,fieldSeparatorIndexes.get(16) + 1,fieldSeparatorIndexes.get(17) - fieldSeparatorIndexes.get(16) - 1,charset));
    for (int i=fieldSeparatorIndexes.get(7) + 1; i < fieldSeparatorIndexes.get(8); ++i) {
      if (componentSeparator == hl7MessageBytes[i]) {
        message.setHeader(MLLP_EVENT_TYPE,new String(hl7MessageBytes,fieldSeparatorIndexes.get(7) + 1,i - fieldSeparatorIndexes.get(7) - 1,charset));
        message.setHeader(MLLP_TRIGGER_EVENT,new String(hl7MessageBytes,i + 1,fieldSeparatorIndexes.get(8) - i - 1,charset));
        break;
      }
    }
  }
}
