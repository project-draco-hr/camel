{
  final byte fieldSeparator=hl7MessageBytes[3];
  int endOfMSH=-1;
  List<Integer> fieldSeparatorIndexes=new ArrayList<>(10);
  for (int i=0; i < hl7MessageBytes.length; ++i) {
    if (fieldSeparator == hl7MessageBytes[i]) {
      fieldSeparatorIndexes.add(i);
    }
 else     if (SEGMENT_DELIMITER == hl7MessageBytes[i]) {
      if (fieldSeparator != hl7MessageBytes[i - 1]) {
        fieldSeparatorIndexes.add(i);
      }
      endOfMSH=i;
      break;
    }
  }
  String messageBodyForDebugging=new String(hl7MessageBytes);
  if (-1 == endOfMSH) {
    log.error("Population of message headers failed - unable to find the end of the MSH segment");
  }
 else   if (endpoint.hl7Headers) {
    log.debug("Populating the HL7 message headers");
    Charset charset=Charset.forName(IOHelper.getCharsetName(exchange));
    for (int i=2; i < fieldSeparatorIndexes.size(); ++i) {
      int startingFieldSeparatorIndex=fieldSeparatorIndexes.get(i - 1);
      int endingFieldSeparatorIndex=fieldSeparatorIndexes.get(i);
      if (endingFieldSeparatorIndex - startingFieldSeparatorIndex > 1) {
        String headerName=null;
switch (i) {
case 2:
          headerName=MLLP_SENDING_APPLICATION;
        break;
case 3:
      headerName=MLLP_SENDING_FACILITY;
    break;
case 4:
  headerName=MLLP_RECEIVING_APPLICATION;
break;
case 5:
headerName=MLLP_RECEIVING_FACILITY;
break;
case 6:
headerName=MLLP_TIMESTAMP;
break;
case 7:
headerName=MLLP_SECURITY;
break;
case 8:
headerName=MLLP_MESSAGE_TYPE;
break;
case 9:
headerName=MLLP_MESSAGE_CONTROL;
break;
case 10:
headerName=MLLP_PROCESSING_ID;
break;
case 11:
headerName=MLLP_VERSION_ID;
break;
case 17:
headerName=MLLP_CHARSET;
break;
default :
continue;
}
String headerValue=new String(hl7MessageBytes,startingFieldSeparatorIndex + 1,endingFieldSeparatorIndex - startingFieldSeparatorIndex - 1,charset);
message.setHeader(headerName,headerValue);
if (i == 8) {
String componentSeparator=new String(hl7MessageBytes,4,1,charset);
String[] components=headerValue.split(String.format("\\Q%s\\E",componentSeparator),3);
message.setHeader(MLLP_EVENT_TYPE,components[0]);
if (2 <= components.length) {
message.setHeader(MLLP_TRIGGER_EVENT,components[1]);
}
}
}
}
}
 else {
log.trace("HL7 Message headers disabled");
}
}
