{
  LOG.info("CamelContextServletListener initializing ...");
  try {
    jndiContext=new JndiContext();
    camelContext=new ServletCamelContext(jndiContext,sce.getServletContext());
  }
 catch (  Exception e) {
    throw new RuntimeException("Error creating CamelContext.",e);
  }
  Map<String,Object> map=extractInitParameters(sce);
  String test=(String)map.remove("test");
  if (test != null && "true".equalsIgnoreCase(test)) {
    this.test=true;
  }
  LOG.trace("In test mode? {}",this.test);
  try {
    initPropertyPlaceholder(camelContext,map);
    initCamelContext(camelContext,map);
    if (!map.isEmpty()) {
      IntrospectionSupport.setProperties(camelContext,map);
    }
  }
 catch (  Exception e) {
    throw new RuntimeException("Error setting init parameters on CamelContext.",e);
  }
  List<Object> routes=extractRoutes(map);
  for (  Object route : routes) {
    if (route instanceof RouteBuilder) {
      try {
        camelContext.addRoutes((RoutesBuilder)route);
      }
 catch (      Exception e) {
        throw new RuntimeException("Error adding route " + route,e);
      }
    }
 else     if (route instanceof Set) {
      for (      Object clazz : (Set)route) {
        try {
          camelContext.addRoutes((RoutesBuilder)clazz);
        }
 catch (        Exception e) {
          throw new RuntimeException("Error adding route " + clazz,e);
        }
      }
    }
 else     if (route instanceof RoutesDefinition) {
      try {
        camelContext.addRouteDefinitions(((RoutesDefinition)route).getRoutes());
      }
 catch (      Exception e) {
        throw new RuntimeException("Error adding route(s) " + route,e);
      }
    }
 else     if (route instanceof RouteDefinition) {
      try {
        camelContext.addRouteDefinition((RouteDefinition)route);
      }
 catch (      Exception e) {
        throw new RuntimeException("Error adding route(s) " + route,e);
      }
    }
 else {
      throw new IllegalArgumentException("Unsupported route: " + route);
    }
  }
  String lifecycle=(String)map.remove("CamelContextLifecycle");
  if (lifecycle != null) {
    try {
      Class<CamelContextLifecycle> clazz=camelContext.getClassResolver().resolveMandatoryClass(lifecycle,CamelContextLifecycle.class);
      camelContextLifecycle=camelContext.getInjector().newInstance(clazz);
    }
 catch (    ClassNotFoundException e) {
      throw new RuntimeException("Error creating CamelContextLifecycle class with name " + lifecycle,e);
    }
  }
  if (!map.isEmpty()) {
    throw new IllegalArgumentException("Error setting init parameters on CamelContext." + " There are " + map.size() + " unknown parameters. ["+ map+ "]");
  }
  try {
    if (camelContextLifecycle != null) {
      camelContextLifecycle.beforeStart(camelContext,jndiContext);
    }
    camelContext.start();
    if (camelContextLifecycle != null) {
      camelContextLifecycle.afterStart(camelContext,jndiContext);
    }
  }
 catch (  Exception e) {
    LOG.error("Error starting CamelContext.",e);
    throw new RuntimeException("Error starting CamelContext.",e);
  }
  if (this.test) {
    instance=camelContext;
  }
  LOG.info("CamelContextServletListener initialized");
}
