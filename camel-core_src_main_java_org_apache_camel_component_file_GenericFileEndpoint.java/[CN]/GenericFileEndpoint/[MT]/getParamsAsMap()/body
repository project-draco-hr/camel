{
  Map<String,Object> params=new HashMap<String,Object>();
  if (isNoop()) {
    params.put("noop",Boolean.toString(true));
  }
  if (isDelete()) {
    params.put("delete",Boolean.toString(true));
  }
  if (move != null) {
    params.put("move",move);
  }
  if (moveFailed != null) {
    params.put("moveFailed",moveFailed);
  }
  if (preMove != null) {
    params.put("preMove",preMove);
  }
  if (exclusiveReadLockStrategy != null) {
    params.put("exclusiveReadLockStrategy",exclusiveReadLockStrategy);
  }
  if (readLock != null) {
    params.put("readLock",readLock);
  }
  if ("idempotent".equals(readLock)) {
    params.put("readLockIdempotentRepository",idempotentRepository);
  }
  if (readLockCheckInterval > 0) {
    params.put("readLockCheckInterval",readLockCheckInterval);
  }
  if (readLockTimeout > 0) {
    params.put("readLockTimeout",readLockTimeout);
  }
  params.put("readLockMarkerFile",readLockMarkerFile);
  params.put("readLockDeleteOrphanLockFiles",readLockDeleteOrphanLockFiles);
  params.put("readLockMinLength",readLockMinLength);
  params.put("readLockLoggingLevel",readLockLoggingLevel);
  params.put("readLockMinAge",readLockMinAge);
  params.put("readLockRemoveOnRollback",readLockRemoveOnRollback);
  params.put("readLockRemoveOnCommit",readLockRemoveOnCommit);
  return params;
}
