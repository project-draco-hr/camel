{
  if (!"none".equals(readLock) && !"off".equals(readLock)) {
    if (readLockTimeout > 0 && readLockTimeout <= readLockCheckInterval) {
      throw new IllegalArgumentException("The option readLockTimeout must be higher than readLockCheckInterval" + ", was readLockTimeout=" + readLockTimeout + ", readLockCheckInterval="+ readLockCheckInterval+ ". A good practice is to let the readLockTimeout be at least 3 times higher than the readLockCheckInterval"+ " to ensure that the read lock procedure has enough time to acquire the lock.");
    }
  }
  if ("idempotent".equals(readLock) && idempotentRepository == null) {
    throw new IllegalArgumentException("IdempotentRepository must be configured when using readLock=idempotent");
  }
  if (antInclude != null) {
    if (antFilter == null) {
      antFilter=new AntPathMatcherGenericFileFilter<>();
    }
    antFilter.setIncludes(antInclude);
  }
  if (antExclude != null) {
    if (antFilter == null) {
      antFilter=new AntPathMatcherGenericFileFilter<>();
    }
    antFilter.setExcludes(antExclude);
  }
  if (antFilter != null) {
    antFilter.setCaseSensitive(antFilterCaseSensitive);
  }
  if (idempotentRepository != null) {
    getCamelContext().addService(idempotentRepository,true);
  }
  ServiceHelper.startServices(inProgressRepository);
  super.doStart();
}
