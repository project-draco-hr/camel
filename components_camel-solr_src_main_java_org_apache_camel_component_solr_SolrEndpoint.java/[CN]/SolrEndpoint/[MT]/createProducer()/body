{
  SolrComponent.SolrServerReference ref=getComponent().getSolrServers(this);
  if (ref == null) {
    ref=new SolrComponent.SolrServerReference();
    CloudSolrClient cloudServer=getCloudServer();
    if (cloudServer == null) {
      HttpSolrClient solrServer=new HttpSolrClient(url);
      ConcurrentUpdateSolrClient solrStreamingServer=new ConcurrentUpdateSolrClient(url,streamingQueueSize,streamingThreadCount);
      if (maxRetries != null) {
        solrServer.setMaxRetries(maxRetries);
      }
      if (soTimeout != null) {
        solrServer.setSoTimeout(soTimeout);
      }
      if (connectionTimeout != null) {
        solrServer.setConnectionTimeout(connectionTimeout);
      }
      if (defaultMaxConnectionsPerHost != null) {
        solrServer.setDefaultMaxConnectionsPerHost(defaultMaxConnectionsPerHost);
      }
      if (maxTotalConnections != null) {
        solrServer.setMaxTotalConnections(maxTotalConnections);
      }
      if (followRedirects != null) {
        solrServer.setFollowRedirects(followRedirects);
      }
      if (allowCompression != null) {
        solrServer.setAllowCompression(allowCompression);
      }
      ref.setSolrServer(solrServer);
      ref.setUpdateSolrServer(solrStreamingServer);
    }
    ref.setCloudSolrServer(cloudServer);
    getComponent().addSolrServers(this,ref);
  }
  ref.addReference();
  return new SolrProducer(this,ref.getSolrServer(),ref.getUpdateSolrServer(),ref.getCloudSolrServer());
}
