{
  LOGGER.debug("processing workflow task " + exchange);
  try {
    Operation operation=getOperation(exchange);
switch (operation) {
case CANCEL:
      camelSWFClient.requestCancelWorkflowExecution(getWorkflowId(exchange),getRunId(exchange));
    break;
case GET_STATE:
  Object state=camelSWFClient.getWorkflowExecutionState(getWorkflowId(exchange),getRunId(exchange),getResultType(exchange));
endpoint.setResult(exchange,state);
break;
case DESCRIBE:
Map<String,Object> workflowInfo=camelSWFClient.describeWorkflowInstance(getWorkflowId(exchange),getRunId(exchange));
endpoint.setResult(exchange,workflowInfo);
break;
case GET_HISTORY:
Object history=camelSWFClient.getWorkflowExecutionHistory(getWorkflowId(exchange),getRunId(exchange));
endpoint.setResult(exchange,history);
break;
case START:
String[] ids=camelSWFClient.startWorkflowExecution(getWorkflowId(exchange),getRunId(exchange),getEventName(exchange),getVersion(exchange),getArguments(exchange));
setHeader(exchange,SWFConstants.WORKFLOW_ID,ids[0]);
setHeader(exchange,SWFConstants.RUN_ID,ids[1]);
break;
case SIGNAL:
camelSWFClient.signalWorkflowExecution(getWorkflowId(exchange),getRunId(exchange),getSignalName(exchange),getArguments(exchange));
break;
case TERMINATE:
camelSWFClient.terminateWorkflowExecution(getWorkflowId(exchange),getRunId(exchange),getReason(exchange),getDetails(exchange),getChildPolicy(exchange));
break;
default :
throw new UnsupportedOperationException(operation.toString());
}
}
 catch (Throwable throwable) {
throw new Exception(throwable);
}
}
