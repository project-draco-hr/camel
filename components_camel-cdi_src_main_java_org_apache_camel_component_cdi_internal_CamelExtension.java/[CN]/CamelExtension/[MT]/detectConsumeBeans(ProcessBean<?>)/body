{
  final Bean<?> bean=event.getBean();
  ReflectionHelper.doWithMethods(bean.getBeanClass(),new ReflectionHelper.MethodCallback(){
    @Override public void doWith(    Method method) throws IllegalArgumentException, IllegalAccessException {
      Consume consume=method.getAnnotation(Consume.class);
      if (consume != null) {
        BeanAdapter beanAdapter=getBeanAdapter(bean);
        beanAdapter.addConsumeMethod(method);
      }
      Produce produce=method.getAnnotation(Produce.class);
      if (produce != null) {
        BeanAdapter beanAdapter=getBeanAdapter(bean);
        beanAdapter.addProduceMethod(method);
      }
    }
  }
);
  ReflectionHelper.doWithFields(bean.getBeanClass(),new ReflectionHelper.FieldCallback(){
    @Override public void doWith(    Field field) throws IllegalArgumentException, IllegalAccessException {
      Produce produce=field.getAnnotation(Produce.class);
      if (produce != null && !injectAnnotatedField(field)) {
        BeanAdapter beanAdapter=getBeanAdapter(bean);
        beanAdapter.addProduceField(field);
      }
    }
  }
);
}
