{
  final Bean<?> bean=event.getBean();
  Class<?> beanClass=bean.getBeanClass();
  ReflectionHelper.doWithMethods(beanClass,new ReflectionHelper.MethodCallback(){
    @Override public void doWith(    Method method) throws IllegalArgumentException, IllegalAccessException {
      Consume consume=method.getAnnotation(Consume.class);
      if (consume != null) {
        eagerlyCreate(bean);
      }
    }
  }
);
  if (RouteBuilder.class.isAssignableFrom(beanClass)) {
    CamelStartup annotation=beanClass.getAnnotation(CamelStartup.class);
    if (annotation != null) {
      String contextName=annotation.contextName();
      List<Bean<?>> beans=namedCamelContexts.get(contextName);
      if (beans == null) {
        beans=new ArrayList<Bean<?>>();
        namedCamelContexts.put(contextName,beans);
      }
      beans.add(bean);
    }
  }
}
