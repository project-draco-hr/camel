{
  final Bean<?> bean=event.getBean();
  Class<?> beanClass=bean.getBeanClass();
  ReflectionHelper.doWithMethods(beanClass,new ReflectionHelper.MethodCallback(){
    @Override public void doWith(    Method method) throws IllegalArgumentException, IllegalAccessException {
      Consume consume=method.getAnnotation(Consume.class);
      if (consume != null) {
        eagerlyCreate(bean);
      }
    }
  }
);
  if (eagerlyCreateSingletonsOnStartup() && isApplicationScopeOrSingleton(beanClass) && beanClass.getAnnotation(Startup.class) != null) {
    eagerlyCreate(bean);
  }
}
