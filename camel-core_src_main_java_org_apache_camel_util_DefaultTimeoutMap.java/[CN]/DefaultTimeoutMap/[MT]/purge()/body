{
  log.trace("There are {} in the timeout map",map.size());
  long now=currentTime();
  List<TimeoutMapEntry<K,V>> expired=new ArrayList<TimeoutMapEntry<K,V>>();
  if (useLock) {
    lock.lock();
  }
  try {
    for (    Map.Entry<K,TimeoutMapEntry<K,V>> entry : map.entrySet()) {
      if (entry.getValue().getExpireTime() < now) {
        if (isValidForEviction(entry.getValue())) {
          log.debug("Evicting inactive entry ID: {}",entry.getValue());
          expired.add(entry.getValue());
        }
      }
    }
    if (!expired.isEmpty()) {
      Collections.sort(expired,new Comparator<TimeoutMapEntry<K,V>>(){
        public int compare(        TimeoutMapEntry<K,V> a,        TimeoutMapEntry<K,V> b){
          long diff=a.getExpireTime() - b.getExpireTime();
          if (diff == 0) {
            return 0;
          }
          return diff > 0 ? 1 : -1;
        }
      }
);
      List<K> evicts=new ArrayList<K>(expired.size());
      try {
        for (        TimeoutMapEntry<K,V> entry : expired) {
          boolean evict=onEviction(entry.getKey(),entry.getValue());
          if (evict) {
            evicts.add(entry.getKey());
          }
        }
      }
  finally {
        for (        K key : evicts) {
          map.remove(key);
        }
      }
    }
  }
  finally {
    if (useLock) {
      lock.unlock();
    }
  }
}
