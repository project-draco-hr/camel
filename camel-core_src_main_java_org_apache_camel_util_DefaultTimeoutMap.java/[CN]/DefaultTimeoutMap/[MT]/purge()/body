{
  if (log.isTraceEnabled()) {
    log.trace("There are " + map.size() + " in the timeout map");
  }
  long now=currentTime();
  List<TimeoutMapEntry<K,V>> expired=new ArrayList<TimeoutMapEntry<K,V>>();
  lock.lock();
  try {
    for (    Map.Entry<K,TimeoutMapEntry<K,V>> entry : map.entrySet()) {
      if (entry.getValue().getExpireTime() < now) {
        if (isValidForEviction(entry.getValue())) {
          if (log.isDebugEnabled()) {
            log.debug("Evicting inactive request for correlationID: " + entry);
          }
          expired.add(entry.getValue());
        }
      }
    }
    if (!expired.isEmpty()) {
      Collections.sort(expired,new Comparator<TimeoutMapEntry<K,V>>(){
        public int compare(        TimeoutMapEntry<K,V> a,        TimeoutMapEntry<K,V> b){
          long diff=a.getExpireTime() - b.getExpireTime();
          if (diff == 0) {
            return 0;
          }
          return diff > 0 ? 1 : -1;
        }
      }
);
      try {
        for (        TimeoutMapEntry<K,V> entry : expired) {
          onEviction(entry.getKey(),entry.getValue());
        }
      }
  finally {
        for (        TimeoutMapEntry<K,V> entry : expired) {
          map.remove(entry.getKey());
        }
      }
    }
  }
  finally {
    lock.unlock();
  }
}
