{
  if (holder != null && isRunAllowed()) {
    try {
      Exchange exchange=holder.getExchange();
      boolean timeout=holder.isTimeout();
      if (timeout) {
        if (log.isWarnEnabled()) {
          log.warn("Timeout occurred after {} millis waiting for reply message with correlationID [{}] on destination {}." + " Setting ExchangeTimedOutException on {} and continue routing.",new Object[]{holder.getRequestTimeout(),holder.getCorrelationId(),replyTo,ExchangeHelper.logIds(exchange)});
        }
        String msg="reply message with correlationID: " + holder.getCorrelationId() + " not received on destination: "+ replyTo;
        exchange.setException(new ExchangeTimedOutException(exchange,holder.getRequestTimeout(),msg));
      }
 else {
        Message message=holder.getMessage();
        Session session=holder.getSession();
        JmsMessage response=new JmsMessage(message,session,endpoint.getBinding());
        exchange.setOut(response);
        Object body=response.getBody();
        if (endpoint.isTransferException() && body instanceof Exception) {
          log.debug("Reply was an Exception. Setting the Exception on the Exchange: {}",body);
          exchange.setException((Exception)body);
        }
 else {
          log.debug("Reply received. OUT message body set to reply payload: {}",body);
        }
        if (holder.getOriginalCorrelationId() != null) {
          JmsMessageHelper.setCorrelationId(message,holder.getOriginalCorrelationId());
          exchange.getOut().setHeader("JMSCorrelationID",holder.getOriginalCorrelationId());
        }
      }
    }
  finally {
      AsyncCallback callback=holder.getCallback();
      callback.done(false);
    }
  }
}
