{
  AtomicInteger index=new AtomicInteger();
  AtomicInteger count=new AtomicInteger();
  AtomicBoolean doWhile=new AtomicBoolean();
  try {
    if (expression != null) {
      String text=expression.evaluate(exchange,String.class);
      int num=ExchangeHelper.convertToMandatoryType(exchange,Integer.class,text);
      count.set(num);
    }
 else {
      boolean result=predicate.matches(exchange);
      doWhile.set(result);
    }
  }
 catch (  Exception e) {
    exchange.setException(e);
    callback.done(true);
    return true;
  }
  final Exchange original=exchange;
  Exchange target=exchange;
  if (predicate == null) {
    exchange.setProperty(Exchange.LOOP_SIZE,count);
  }
  while ((predicate != null && doWhile.get()) || (index.get() < count.get())) {
    target=prepareExchange(exchange,index.get(),original);
    boolean sync=process(target,callback,index,count,doWhile,original);
    if (!sync) {
      LOG.trace("Processing exchangeId: {} is continued being processed asynchronously",target.getExchangeId());
      return false;
    }
    LOG.trace("Processing exchangeId: {} is continued being processed synchronously",target.getExchangeId());
    if (!continueProcessing(target,"so breaking out of loop",LOG)) {
      break;
    }
  }
  ExchangeHelper.copyResults(exchange,target);
  LOG.trace("Processing complete for exchangeId: {} >>> {}",exchange.getExchangeId(),exchange);
  callback.done(true);
  return true;
}
