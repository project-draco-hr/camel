{
  getMockEndpoint("mock:a").expectedBodiesReceivedInAnyOrder("Hello World","Bye World");
  getMockEndpoint("mock:b").expectedBodiesReceivedInAnyOrder("Hello World","Bye World");
  getMockEndpoint("mock:c").expectedMessageCount(0);
  template.sendBody("disruptor:foo","Hello World");
  template.sendBody("disruptor:bar","Bye World");
  assertMockEndpointsSatisfied();
  context.addRoutes(new RouteBuilder(){
    @Override public void configure() throws Exception {
      from("disruptor:foo?multipleConsumers=true").id("testRoute").to("mock:c");
    }
  }
);
  resetMocks();
  getMockEndpoint("mock:a").expectedMessageCount(20);
  getMockEndpoint("mock:b").expectedMessageCount(20);
  getMockEndpoint("mock:c").expectedMessageCount(20);
  for (int i=0; i < 10; i++) {
    template.sendBody("disruptor:foo","Hello World");
    template.sendBody("disruptor:bar","Bye World");
  }
  assertMockEndpointsSatisfied();
  resetMocks();
  context.suspendRoute("testRoute");
  getMockEndpoint("mock:a").expectedMessageCount(20);
  getMockEndpoint("mock:b").expectedMessageCount(20);
  getMockEndpoint("mock:c").expectedMessageCount(0);
  for (int i=0; i < 10; i++) {
    template.sendBody("disruptor:foo","Hello World");
    template.sendBody("disruptor:bar","Bye World");
  }
  assertMockEndpointsSatisfied();
}
