{
  Incident incident=null;
  String sysId;
  String number;
  MockEndpoint mock=getMockEndpoint("mock:servicenow");
{
    mock.reset();
    mock.expectedMessageCount(1);
    incident=new Incident();
    incident.setDescription("my incident");
    incident.setShortDescription("An incident");
    incident.setSeverity(1);
    incident.setImpact(1);
    template().sendBodyAndHeaders("direct:servicenow",incident,new KVBuilder().put(ServiceNowConstants.RESOURCE,"table").put(ServiceNowConstants.ACTION,ServiceNowConstants.ACTION_CREATE).put(ServiceNowConstants.TABLE,"incident").build());
    mock.assertIsSatisfied();
    incident=mock.getExchanges().get(0).getIn().getBody(Incident.class);
    sysId=incident.getId();
    number=incident.getNumber();
    LOGGER.info("****************************************************");
    LOGGER.info("* Incident created");
    LOGGER.info("*  sysid  = {}",sysId);
    LOGGER.info("*  number = {}",number);
    LOGGER.info("****************************************************");
  }
{
    mock.reset();
    mock.expectedMessageCount(1);
    template().sendBodyAndHeaders("direct:servicenow",null,new KVBuilder().put(ServiceNowConstants.RESOURCE,"table").put(ServiceNowConstants.ACTION,ServiceNowConstants.ACTION_RETRIEVE).put(ServiceNowConstants.TABLE,"incident").put(ServiceNowConstants.SYSPARM_QUERY,"number=" + number).build());
    mock.assertIsSatisfied();
    List<Incident> incidents=mock.getExchanges().get(0).getIn().getBody(List.class);
    assertEquals(1,incidents.size());
    assertEquals(number,incidents.get(0).getNumber());
    assertEquals(sysId,incidents.get(0).getId());
  }
{
    mock.reset();
    mock.expectedMessageCount(1);
    incident=new Incident();
    incident.setDescription("my incident");
    incident.setShortDescription("The incident");
    incident.setSeverity(2);
    incident.setImpact(3);
    template().sendBodyAndHeaders("direct:servicenow",incident,new KVBuilder().put(ServiceNowConstants.RESOURCE,"table").put(ServiceNowConstants.ACTION,ServiceNowConstants.ACTION_MODIFY).put(ServiceNowConstants.TABLE,"incident").put(ServiceNowConstants.SYSPARM_ID,sysId).build());
    mock.assertIsSatisfied();
    incident=mock.getExchanges().get(0).getIn().getBody(Incident.class);
    assertEquals(number,incident.getNumber());
    assertEquals(2,incident.getSeverity());
    assertEquals(3,incident.getImpact());
    assertEquals("The incident",incident.getShortDescription());
  }
{
    mock.reset();
    mock.expectedMessageCount(1);
    template().sendBodyAndHeaders("direct:servicenow",null,new KVBuilder().put(ServiceNowConstants.RESOURCE,"table").put(ServiceNowConstants.ACTION,ServiceNowConstants.ACTION_RETRIEVE).put(ServiceNowConstants.TABLE,"incident").put(ServiceNowConstants.SYSPARM_QUERY,"number=" + number).build());
    mock.assertIsSatisfied();
    List<Incident> incidents=mock.getExchanges().get(0).getIn().getBody(List.class);
    assertEquals(1,incidents.size());
    assertEquals(number,incidents.get(0).getNumber());
    assertEquals(sysId,incidents.get(0).getId());
    assertEquals(2,incidents.get(0).getSeverity());
    assertEquals(3,incidents.get(0).getImpact());
    assertEquals("The incident",incidents.get(0).getShortDescription());
  }
{
    mock.reset();
    mock.expectedMessageCount(1);
    template().sendBodyAndHeaders("direct:servicenow",null,new KVBuilder().put(ServiceNowConstants.RESOURCE,"table").put(ServiceNowConstants.ACTION,ServiceNowConstants.ACTION_RETRIEVE).put(ServiceNowConstants.TABLE,"incident").put(ServiceNowConstants.SYSPARM_ID,sysId).build());
    mock.assertIsSatisfied();
    incident=mock.getExchanges().get(0).getIn().getBody(Incident.class);
    assertEquals(2,incident.getSeverity());
    assertEquals(3,incident.getImpact());
    assertEquals("The incident",incident.getShortDescription());
    assertEquals(number,incident.getNumber());
  }
{
    mock.reset();
    mock.expectedMessageCount(1);
    template().sendBodyAndHeaders("direct:servicenow",null,new KVBuilder().put(ServiceNowConstants.RESOURCE,"table").put(ServiceNowConstants.ACTION,ServiceNowConstants.ACTION_DELETE).put(ServiceNowConstants.TABLE,"incident").put(ServiceNowConstants.SYSPARM_ID,sysId).build());
    mock.assertIsSatisfied();
  }
{
    try {
      template().sendBodyAndHeaders("direct:servicenow",null,new KVBuilder().put(ServiceNowConstants.RESOURCE,"table").put(ServiceNowConstants.ACTION,ServiceNowConstants.ACTION_RETRIEVE).put(ServiceNowConstants.SYSPARM_QUERY,"number=" + number).put(ServiceNowConstants.TABLE,"incident").build());
      fail("Record +" + number + " should have been deleted");
    }
 catch (    CamelExecutionException e) {
      assertTrue(e.getCause() instanceof ServiceNowException);
    }
  }
}
