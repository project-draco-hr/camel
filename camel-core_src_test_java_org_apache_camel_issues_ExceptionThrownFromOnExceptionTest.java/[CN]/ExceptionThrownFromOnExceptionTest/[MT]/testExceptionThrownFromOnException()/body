{
  retry.set(0);
  onExceptionRetry.set(0);
  context.addRoutes(new RouteBuilder(){
    @Override public void configure() throws Exception {
      onException(IOException.class).maximumRedeliveries(3).to("mock:b").process(new Processor(){
        @Override public void process(        Exchange exchange) throws Exception {
          onExceptionRetry.incrementAndGet();
          throw new IOException("Some other IOException");
        }
      }
).to("mock:c");
      from("direct:start").to("direct:intermediate").to("mock:result");
      from("direct:intermediate").to("mock:a").process(new Processor(){
        @Override public void process(        Exchange exchange) throws Exception {
          retry.incrementAndGet();
          throw new IOException("IO error");
        }
      }
).to("mock:end");
    }
  }
);
  context.start();
  getMockEndpoint("mock:a").expectedMessageCount(1);
  getMockEndpoint("mock:b").expectedMessageCount(1);
  getMockEndpoint("mock:c").expectedMessageCount(0);
  getMockEndpoint("mock:result").expectedMessageCount(0);
  getMockEndpoint("mock:end").expectedMessageCount(0);
  try {
    template.sendBody("direct:start","Hello World");
    fail("Should have thrown an exception");
  }
 catch (  CamelExecutionException e) {
    IOException cause=assertIsInstanceOf(IOException.class,e.getCause());
    assertEquals("Some other IOException",cause.getMessage());
  }
  assertMockEndpointsSatisfied();
  assertEquals("Should try 4 times (1 first, 3 retry)",4,retry.get());
  assertEquals("Should only invoke onException once",1,onExceptionRetry.get());
}
