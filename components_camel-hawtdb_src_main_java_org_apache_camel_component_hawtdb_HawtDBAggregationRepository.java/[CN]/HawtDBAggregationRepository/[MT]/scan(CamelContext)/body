{
  final Set<String> answer=new LinkedHashSet<String>();
  hawtDBFile.execute(new Work<Buffer>(){
    public Buffer execute(    Transaction tx){
      if (!isRunAllowed()) {
        return null;
      }
      Index<Buffer,Buffer> indexCompleted=hawtDBFile.getRepositoryIndex(tx,getRepositoryNameCompleted(),false);
      if (indexCompleted == null) {
        return null;
      }
      Iterator<Map.Entry<Buffer,Buffer>> it=indexCompleted.iterator();
      while (it.hasNext() && isRunAllowed()) {
        Map.Entry<Buffer,Buffer> entry=it.next();
        Buffer keyBuffer=entry.getKey();
        String exchangeId;
        try {
          exchangeId=marshaller.unmarshallKey(keyBuffer);
        }
 catch (        IOException e) {
          throw new RuntimeException("Error unmarshalling confirm key: " + keyBuffer,e);
        }
        if (exchangeId != null) {
          if (LOG.isTraceEnabled()) {
            LOG.trace("Scan exchangeId [" + exchangeId + "]");
          }
          answer.add(exchangeId);
        }
      }
      return null;
    }
    @Override public String toString(){
      return "Scan";
    }
  }
);
  if (answer.size() == 0) {
    LOG.trace("Scanned and found no exchange to recover.");
  }
 else {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Scanned and found " + answer.size() + " exchange(s) to recover (note some of them may already be in progress).");
    }
  }
  return answer;
}
