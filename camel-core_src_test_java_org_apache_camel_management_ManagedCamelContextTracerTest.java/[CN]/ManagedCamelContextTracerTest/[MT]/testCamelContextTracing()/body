{
  MBeanServer mbeanServer=context.getManagementStrategy().getManagementAgent().getMBeanServer();
  ObjectName camel=ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=context,name=\"camel-1\"");
  Set<ObjectName> set=mbeanServer.queryNames(new ObjectName("*:type=tracer,*"),null);
  assertEquals(1,set.size());
  ObjectName on=set.iterator().next();
  MockEndpoint traced=getMockEndpoint("mock:traced");
  traced.setExpectedMessageCount(2);
  MockEndpoint result=getMockEndpoint("mock:result");
  result.setExpectedMessageCount(1);
  template.sendBody("direct:start","Hello World");
  assertMockEndpointsSatisfied();
  Boolean tracing=(Boolean)mbeanServer.getAttribute(camel,"Tracing");
  assertEquals("Tracing should be enabled",true,tracing.booleanValue());
  String destinationUri=(String)mbeanServer.getAttribute(on,"DestinationUri");
  assertEquals("mock:traced",destinationUri);
  String logLevel=(String)mbeanServer.getAttribute(on,"LogLevel");
  assertEquals(LoggingLevel.OFF.name(),logLevel);
  String logName=(String)mbeanServer.getAttribute(on,"LogName");
  assertNotNull(logName);
  Boolean logStackTrace=(Boolean)mbeanServer.getAttribute(on,"LogStackTrace");
  assertEquals(Boolean.FALSE,logStackTrace);
  Boolean traceInterceptors=(Boolean)mbeanServer.getAttribute(on,"TraceInterceptors");
  assertEquals(Boolean.FALSE,traceInterceptors);
  Boolean traceExceptions=(Boolean)mbeanServer.getAttribute(on,"TraceExceptions");
  assertEquals(Boolean.TRUE,traceExceptions);
  Boolean traceOutExchanges=(Boolean)mbeanServer.getAttribute(on,"TraceOutExchanges");
  assertEquals(Boolean.FALSE,traceOutExchanges);
  Boolean formatterShowBody=(Boolean)mbeanServer.getAttribute(on,"FormatterShowBody");
  assertEquals(Boolean.TRUE,formatterShowBody);
  Boolean formatterShowBodyType=(Boolean)mbeanServer.getAttribute(on,"FormatterShowBodyType");
  assertEquals(Boolean.TRUE,formatterShowBodyType);
  Boolean formatterShowOutBody=(Boolean)mbeanServer.getAttribute(on,"FormatterShowOutBody");
  assertEquals(Boolean.FALSE,formatterShowOutBody);
  Boolean formatterShowOutBodyType=(Boolean)mbeanServer.getAttribute(on,"FormatterShowOutBodyType");
  assertEquals(Boolean.FALSE,formatterShowOutBodyType);
  Boolean formatterShowBreadCrumb=(Boolean)mbeanServer.getAttribute(on,"FormatterShowBreadCrumb");
  assertEquals(Boolean.TRUE,formatterShowBreadCrumb);
  Boolean formatterShowExchangeId=(Boolean)mbeanServer.getAttribute(on,"FormatterShowExchangeId");
  assertEquals(Boolean.FALSE,formatterShowExchangeId);
  Boolean formatterShowHeaders=(Boolean)mbeanServer.getAttribute(on,"FormatterShowHeaders");
  assertEquals(Boolean.TRUE,formatterShowHeaders);
  Boolean formatterShowOutHeaders=(Boolean)mbeanServer.getAttribute(on,"FormatterShowOutHeaders");
  assertEquals(Boolean.FALSE,formatterShowOutHeaders);
  Boolean formatterShowProperties=(Boolean)mbeanServer.getAttribute(on,"FormatterShowProperties");
  assertEquals(Boolean.FALSE,formatterShowProperties);
  Boolean formatterShowNode=(Boolean)mbeanServer.getAttribute(on,"FormatterShowNode");
  assertEquals(Boolean.TRUE,formatterShowNode);
  Boolean formatterShowExchangePattern=(Boolean)mbeanServer.getAttribute(on,"FormatterShowExchangePattern");
  assertEquals(Boolean.TRUE,formatterShowExchangePattern);
  Boolean formatterShowException=(Boolean)mbeanServer.getAttribute(on,"FormatterShowException");
  assertEquals(Boolean.TRUE,formatterShowException);
  Boolean formatterShowShortExchangeId=(Boolean)mbeanServer.getAttribute(on,"FormatterShowShortExchangeId");
  assertEquals(Boolean.FALSE,formatterShowShortExchangeId);
  Integer formatterBreadCrumbLength=(Integer)mbeanServer.getAttribute(on,"FormatterBreadCrumbLength");
  assertEquals(0,formatterBreadCrumbLength.intValue());
  Integer formatterNodeLength=(Integer)mbeanServer.getAttribute(on,"FormatterNodeLength");
  assertEquals(0,formatterNodeLength.intValue());
  Integer formatterMaxChars=(Integer)mbeanServer.getAttribute(on,"FormatterMaxChars");
  assertEquals(0,formatterMaxChars.intValue());
  mbeanServer.setAttribute(camel,new Attribute("Tracing",Boolean.FALSE));
  traced.reset();
  traced.setExpectedMessageCount(0);
  result.reset();
  result.setExpectedMessageCount(1);
  template.sendBody("direct:start","Hello World");
  assertMockEndpointsSatisfied();
}
