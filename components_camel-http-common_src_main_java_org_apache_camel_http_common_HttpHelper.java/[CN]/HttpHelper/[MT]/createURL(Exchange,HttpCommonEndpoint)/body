{
  String uri=(String)exchange.getIn().removeHeader(Exchange.REST_HTTP_URI);
  if (uri == null && !(endpoint.isBridgeEndpoint())) {
    uri=exchange.getIn().getHeader(Exchange.HTTP_URI,String.class);
  }
  if (uri == null) {
    uri=endpoint.getHttpUri().toASCIIString();
  }
  try {
    uri=exchange.getContext().resolvePropertyPlaceholders(uri);
  }
 catch (  Exception e) {
    throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uri,exchange,e);
  }
  String path=exchange.getIn().getHeader(Exchange.HTTP_PATH,String.class);
  if (path != null) {
    if (path.length() > 1 && path.startsWith("/")) {
      path=path.substring(1);
    }
    if (path.length() > 0) {
      int idx=uri.indexOf("?");
      if (idx == -1) {
        uri=uri.endsWith("/") || path.startsWith("/") ? uri : uri + "/";
        uri=uri.concat(path);
      }
 else {
        String base=uri.substring(0,idx);
        base=base.endsWith("/") ? base : base + "/";
        base=base.concat(path);
        uri=base.concat(uri.substring(idx));
      }
    }
  }
  uri=UnsafeUriCharactersEncoder.encodeHttpURI(uri);
  return uri;
}
