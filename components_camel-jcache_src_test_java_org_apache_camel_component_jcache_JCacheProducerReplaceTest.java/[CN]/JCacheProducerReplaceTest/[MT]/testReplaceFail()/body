{
  final Map<String,Object> headers=new HashMap<>();
  final Cache<Object,Object> cache=getCacheFromEndpoint("jcache://test-cache");
  final String key=randomString();
  final String val=randomString();
  assertFalse(cache.containsKey(key));
  headers.clear();
  headers.put(JCacheConstants.ACTION,"REPLACE");
  headers.put(JCacheConstants.KEY,key);
  sendBody("direct:replace-fail",val,headers);
  MockEndpoint mock=getMockEndpoint("mock:replace-fail");
  mock.expectedMinimumMessageCount(1);
  mock.expectedHeaderReceived(JCacheConstants.KEY,key);
  mock.expectedHeaderReceived(JCacheConstants.RESULT,false);
  mock.expectedMessagesMatches(new Predicate(){
    @Override public boolean matches(    Exchange exchange){
      assertNotNull("body",exchange.getIn().getBody());
      return exchange.getIn().getBody().equals(val);
    }
  }
);
  mock.assertIsSatisfied();
  assertFalse(cache.containsKey(key));
}
