{
  final Map<String,Object> headers=new HashMap<>();
  final Cache<Object,Object> cache=getCacheFromEndpoint("jcache://test-cache");
  final String key=randomString();
  final String val=randomString();
  final String val1=randomString();
  cache.put(key,val);
  headers.clear();
  headers.put(JCacheConstants.ACTION,"REPLACE");
  headers.put(JCacheConstants.KEY,key);
  headers.put(JCacheConstants.OLD_VALUE,val);
  sendBody("direct:replace",val1,headers);
  MockEndpoint mock=getMockEndpoint("mock:replace");
  mock.expectedMinimumMessageCount(1);
  mock.expectedHeaderReceived(JCacheConstants.KEY,key);
  mock.expectedHeaderReceived(JCacheConstants.RESULT,true);
  mock.expectedMessagesMatches(new Predicate(){
    @Override public boolean matches(    Exchange exchange){
      assertNotNull("body",exchange.getIn().getBody());
      return exchange.getIn().getBody().equals(val1);
    }
  }
);
  mock.assertIsSatisfied();
  assertEquals(val1,cache.get(key));
}
