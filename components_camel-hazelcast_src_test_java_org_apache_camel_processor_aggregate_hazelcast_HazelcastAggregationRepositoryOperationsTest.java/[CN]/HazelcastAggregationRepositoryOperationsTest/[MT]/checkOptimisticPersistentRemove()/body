{
  final String persistentRepoName=String.format("%s-completed",OPTIMISTIC_REPO);
  HazelcastAggregationRepository repoOne=new HazelcastAggregationRepository(OPTIMISTIC_REPO,persistentRepoName,true,getFirstInstance());
  HazelcastAggregationRepository repoTwo=new HazelcastAggregationRepository(OPTIMISTIC_REPO,persistentRepoName,true,getSecondInstance());
  try {
    repoOne.doStart();
    repoTwo.doStart();
    final String testBody="This is an optimistic test body. Sincerely yours, Captain Obvious.";
    final String key="optimisticKey";
    Exchange ex=createExchangeWithBody(testBody);
    repoOne.add(context(),key,null,ex);
    Exchange getBackEx=repoTwo.get(context(),key);
    assertNotNull("getBackEx should not be null.",getBackEx);
    repoTwo.remove(context(),key,ex);
    getBackEx=repoOne.get(context(),key);
    assertNull("getBackEx should be null here.",getBackEx);
    Set<String> keys=repoTwo.scan(context());
    assertCollectionSize(keys,1);
    getBackEx=repoOne.recover(context(),keys.iterator().next());
    assertNotNull("getBackEx got from persistent repo should not be null.",getBackEx);
  }
  finally {
    repoOne.doStop();
    repoTwo.doStop();
  }
}
