{
  final Channel channel=channelFuture.channel();
  if (getConfiguration().isReuseChannel() && exchange.getProperty(NettyConstants.NETTY_CHANNEL) == null) {
    exchange.setProperty(NettyConstants.NETTY_CHANNEL,channel);
    exchange.addOnCompletion(new SynchronizationAdapter(){
      @Override public void onComplete(      Exchange exchange){
        Boolean close;
        if (ExchangeHelper.isOutCapable(exchange)) {
          close=exchange.getOut().getHeader(NettyConstants.NETTY_CLOSE_CHANNEL_WHEN_COMPLETE,Boolean.class);
        }
 else {
          close=exchange.getIn().getHeader(NettyConstants.NETTY_CLOSE_CHANNEL_WHEN_COMPLETE,Boolean.class);
        }
        boolean disconnect=getConfiguration().isDisconnect();
        if (close != null) {
          disconnect=close;
        }
        if (disconnect) {
          LOG.trace("Closing channel {} as routing the Exchange is done",channel);
          NettyHelper.close(channel);
        }
        releaseChannel(channelFuture);
      }
    }
);
  }
  if (exchange.getIn().getHeader(NettyConstants.NETTY_REQUEST_TIMEOUT) != null) {
    long timeoutInMs=exchange.getIn().getHeader(NettyConstants.NETTY_REQUEST_TIMEOUT,Long.class);
    ChannelHandler oldHandler=channel.pipeline().get("timeout");
    ReadTimeoutHandler newHandler=new ReadTimeoutHandler(timeoutInMs,TimeUnit.MILLISECONDS);
    if (oldHandler == null) {
      channel.pipeline().addBefore("handler","timeout",newHandler);
    }
 else {
      channel.pipeline().replace(oldHandler,"timeout",newHandler);
    }
  }
  final AsyncCallback producerCallback;
  if (configuration.isReuseChannel()) {
    producerCallback=callback;
  }
 else {
    producerCallback=new NettyProducerCallback(channelFuture,callback);
  }
  putState(channel,new NettyCamelState(producerCallback,exchange));
  InetSocketAddress remoteAddress=null;
  if (!isTcp()) {
    remoteAddress=new InetSocketAddress(configuration.getHost(),configuration.getPort());
  }
  NettyHelper.writeBodyAsync(LOG,channel,remoteAddress,body,exchange,new ChannelFutureListener(){
    public void operationComplete(    ChannelFuture channelFuture) throws Exception {
      LOG.trace("Operation complete {}",channelFuture);
      if (!channelFuture.isSuccess()) {
        return;
      }
      if (!configuration.isSync()) {
        try {
          Boolean close;
          if (ExchangeHelper.isOutCapable(exchange)) {
            close=exchange.getOut().getHeader(NettyConstants.NETTY_CLOSE_CHANNEL_WHEN_COMPLETE,Boolean.class);
          }
 else {
            close=exchange.getIn().getHeader(NettyConstants.NETTY_CLOSE_CHANNEL_WHEN_COMPLETE,Boolean.class);
          }
          boolean disconnect=getConfiguration().isDisconnect();
          if (close != null) {
            disconnect=close;
          }
          if (!configuration.isReuseChannel() && disconnect) {
            if (LOG.isTraceEnabled()) {
              LOG.trace("Closing channel when complete at address: {}",getEndpoint().getConfiguration().getAddress());
            }
            NettyHelper.close(channel);
          }
        }
  finally {
          producerCallback.done(false);
        }
      }
    }
  }
);
}
