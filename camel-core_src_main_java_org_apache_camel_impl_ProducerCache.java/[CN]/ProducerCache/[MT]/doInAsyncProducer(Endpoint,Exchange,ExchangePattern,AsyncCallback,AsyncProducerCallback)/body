{
  Producer target;
  try {
    target=doGetProducer(endpoint,true);
    if (target == null) {
      if (isStopped()) {
        LOG.warn("Ignoring exchange sent after processor is stopped: " + exchange);
        callback.done(true);
        return true;
      }
 else {
        exchange.setException(new IllegalStateException("No producer, this processor has not been started: " + this));
        callback.done(true);
        return true;
      }
    }
  }
 catch (  Throwable e) {
    exchange.setException(e);
    callback.done(true);
    return true;
  }
  final Producer producer=target;
  final StopWatch watch=eventNotifierEnabled && exchange != null ? new StopWatch() : null;
  try {
    if (eventNotifierEnabled && exchange != null) {
      EventHelper.notifyExchangeSending(exchange.getContext(),exchange,endpoint);
    }
    AsyncProcessor asyncProcessor=AsyncProcessorConverterHelper.convert(producer);
    return producerCallback.doInAsyncProducer(producer,asyncProcessor,exchange,pattern,new AsyncCallback(){
      @Override public void done(      boolean doneSync){
        try {
          if (eventNotifierEnabled && watch != null) {
            long timeTaken=watch.stop();
            EventHelper.notifyExchangeSent(exchange.getContext(),exchange,endpoint,timeTaken);
          }
          if (producer instanceof ServicePoolAware) {
            pool.release(endpoint,producer);
          }
 else           if (!producer.isSingleton()) {
            try {
              ServiceHelper.stopAndShutdownService(producer);
            }
 catch (            Exception e) {
              LOG.warn("Error stopping/shutting down producer: " + producer,e);
            }
          }
        }
  finally {
          callback.done(doneSync);
        }
      }
    }
);
  }
 catch (  Throwable e) {
    if (exchange != null) {
      exchange.setException(e);
    }
    callback.done(true);
    return true;
  }
}
