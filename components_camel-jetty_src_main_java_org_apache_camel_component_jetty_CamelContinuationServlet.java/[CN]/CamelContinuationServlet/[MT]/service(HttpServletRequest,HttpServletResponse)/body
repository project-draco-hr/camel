{
  HttpConsumer consumer=resolve(request);
  if (consumer == null) {
    response.sendError(HttpServletResponse.SC_NOT_FOUND);
    return;
  }
  final Exchange result=(Exchange)request.getAttribute(EXCHANGE_ATTRIBUTE_NAME);
  if (result == null) {
    final Continuation continuation=ContinuationSupport.getContinuation(request);
    if (consumer.isSuspended() && continuation.isInitial()) {
      response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);
      return;
    }
    if (continuation.isExpired()) {
      String id=(String)continuation.getAttribute(EXCHANGE_ATTRIBUTE_ID);
      log.warn("Continuation expired of exchangeId: " + id);
      response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);
      return;
    }
    final Exchange exchange=new DefaultExchange(consumer.getEndpoint(),ExchangePattern.InOut);
    if (consumer.getEndpoint().isBridgeEndpoint()) {
      exchange.setProperty(Exchange.SKIP_GZIP_ENCODING,Boolean.TRUE);
    }
    if (consumer.getEndpoint().isDisableStreamCache()) {
      exchange.setProperty(Exchange.DISABLE_HTTP_STREAM_CACHE,Boolean.TRUE);
    }
    exchange.setIn(new HttpMessage(exchange,request,response));
    if (log.isTraceEnabled()) {
      log.trace("Suspending continuation of exchangeId: " + exchange.getExchangeId());
    }
    continuation.setAttribute(EXCHANGE_ATTRIBUTE_ID,exchange.getExchangeId());
    continuation.suspend();
    consumer.getAsyncProcessor().process(exchange,new AsyncCallback(){
      public void done(      boolean doneSync){
        if (log.isTraceEnabled()) {
          log.trace("Resuming continuation of exchangeId: " + exchange.getExchangeId());
        }
        continuation.setAttribute(EXCHANGE_ATTRIBUTE_NAME,exchange);
        continuation.resume();
      }
    }
);
    return;
  }
  try {
    if (log.isTraceEnabled()) {
      log.trace("Resuming continuation of exchangeId: " + result.getExchangeId());
    }
    consumer.getBinding().writeResponse(result,response);
  }
 catch (  IOException e) {
    log.error("Error processing request",e);
    throw e;
  }
}
