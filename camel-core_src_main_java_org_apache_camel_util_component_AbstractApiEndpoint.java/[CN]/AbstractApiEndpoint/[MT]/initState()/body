{
  this.endpointPropertyNames=Collections.unmodifiableSet(getPropertiesHelper().getEndpointPropertyNames(configuration));
  final HashMap<String,Object> properties=new HashMap<String,Object>();
  getPropertiesHelper().getEndpointProperties(configuration,properties);
  this.endpointProperties=Collections.unmodifiableMap(properties);
  final Set<String> arguments=new HashSet<>(endpointPropertyNames);
  if (inBody != null) {
    arguments.add(inBody);
  }
  interceptPropertyNames(arguments);
  candidates=new ArrayList<>();
  candidates.addAll(methodHelper.getCandidateMethods(methodName,arguments));
  candidates=Collections.unmodifiableList(candidates);
  if (candidates.isEmpty()) {
    throw new IllegalArgumentException(String.format("No matching method for %s/%s, with arguments %s",apiName.getName(),methodName,arguments));
  }
  if (log.isDebugEnabled()) {
    final Set<String> missing=methodHelper.getMissingProperties(methodName,arguments);
    if (!missing.isEmpty()) {
      log.debug("Method {} could use one or more properties from {}",methodName,missing);
    }
  }
}
