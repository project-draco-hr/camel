{
  final List<String> enabledCipherSuites=this.getCipherSuites() == null ? null : this.getCipherSuites().getCipherSuite();
  final Patterns enabledCipherSuitePatterns;
  final Patterns defaultEnabledCipherSuitePatterns=this.getDefaultCipherSuitesFilter().getPatterns();
  if (this.getCipherSuitesFilter() != null) {
    enabledCipherSuitePatterns=this.getCipherSuitesFilter().getPatterns();
  }
 else {
    enabledCipherSuitePatterns=null;
  }
  final List<String> enabledSecureSocketProtocols=this.getSecureSocketProtocols() == null ? null : this.getSecureSocketProtocols().getSecureSocketProtocol();
  final Patterns enabledSecureSocketProtocolsPatterns;
  final Patterns defaultEnabledSecureSocketProtocolsPatterns=this.getDefaultSecureSocketProcotolFilter().getPatterns();
  if (this.getSecureSocketProtocolsFilter() != null) {
    enabledSecureSocketProtocolsPatterns=this.getSecureSocketProtocolsFilter().getPatterns();
  }
 else {
    enabledSecureSocketProtocolsPatterns=null;
  }
  final boolean allowPassthrough=getAllowPassthrough();
  Configurer<SSLSocket> sslSocketConfigurer=new Configurer<SSLSocket>(){
    @Override public SSLSocket configure(    SSLSocket socket){
      Collection<String> filteredCipherSuites=BaseSSLContextParameters.this.filter(enabledCipherSuites,Arrays.asList(socket.getSSLParameters().getCipherSuites()),Arrays.asList(socket.getEnabledCipherSuites()),enabledCipherSuitePatterns,defaultEnabledCipherSuitePatterns,!allowPassthrough);
      socket.setEnabledCipherSuites(filteredCipherSuites.toArray(new String[filteredCipherSuites.size()]));
      Collection<String> filteredSecureSocketProtocols=BaseSSLContextParameters.this.filter(enabledSecureSocketProtocols,Arrays.asList(socket.getSSLParameters().getProtocols()),Arrays.asList(socket.getEnabledProtocols()),enabledSecureSocketProtocolsPatterns,defaultEnabledSecureSocketProtocolsPatterns,!allowPassthrough);
      socket.setEnabledProtocols(filteredSecureSocketProtocols.toArray(new String[filteredSecureSocketProtocols.size()]));
      return socket;
    }
  }
;
  List<Configurer<SSLSocket>> sslSocketConfigurers=new LinkedList<Configurer<SSLSocket>>();
  sslSocketConfigurers.add(sslSocketConfigurer);
  return sslSocketConfigurers;
}
