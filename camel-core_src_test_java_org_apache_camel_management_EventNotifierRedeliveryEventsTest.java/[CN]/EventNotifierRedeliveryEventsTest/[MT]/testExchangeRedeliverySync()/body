{
  context.addRoutes(new RouteBuilder(){
    @Override public void configure() throws Exception {
      errorHandler(deadLetterChannel("mock:dead").maximumRedeliveries(4).redeliveryDelay(0));
      from("direct:start").throwException(new IllegalArgumentException("Damn"));
    }
  }
);
  context.start();
  getMockEndpoint("mock:dead").expectedMessageCount(1);
  template.sendBody("direct:start","Hello World");
  assertMockEndpointsSatisfied();
  assertTrue(oneExchangeDone.matchesMockWaitTime());
  assertEquals(12,events.size());
  assertIsInstanceOf(ExchangeSendingEvent.class,events.get(0));
  assertIsInstanceOf(ExchangeCreatedEvent.class,events.get(1));
  ExchangeRedeliveryEvent e=assertIsInstanceOf(ExchangeRedeliveryEvent.class,events.get(2));
  assertEquals(1,e.getAttempt());
  e=assertIsInstanceOf(ExchangeRedeliveryEvent.class,events.get(3));
  assertEquals(2,e.getAttempt());
  e=assertIsInstanceOf(ExchangeRedeliveryEvent.class,events.get(4));
  assertEquals(3,e.getAttempt());
  e=assertIsInstanceOf(ExchangeRedeliveryEvent.class,events.get(5));
  assertEquals(4,e.getAttempt());
  assertIsInstanceOf(ExchangeFailureHandlingEvent.class,events.get(6));
  assertIsInstanceOf(ExchangeSendingEvent.class,events.get(7));
  assertIsInstanceOf(ExchangeSentEvent.class,events.get(8));
  assertIsInstanceOf(ExchangeFailureHandledEvent.class,events.get(9));
  assertIsInstanceOf(ExchangeCompletedEvent.class,events.get(10));
  assertIsInstanceOf(ExchangeSentEvent.class,events.get(11));
}
