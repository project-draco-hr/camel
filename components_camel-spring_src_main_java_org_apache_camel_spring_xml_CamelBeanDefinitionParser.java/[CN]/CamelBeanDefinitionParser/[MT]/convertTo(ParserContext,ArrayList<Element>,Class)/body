{
  if (clazz.isArray() || elements.size() > 1) {
    List list=new ArrayList();
    for (int i=0; i < elements.size(); i++) {
      ArrayList<Element> e=new ArrayList<Element>(1);
      e.add(elements.get(i));
      Object value=convertTo(parserContext,e,clazz.getComponentType());
      list.add(value);
    }
    return list;
  }
 else {
    Element element=elements.get(0);
    String ref=element.getAttribute("ref");
    if (StringUtils.hasText(ref)) {
      return new RuntimeBeanReference(ref);
    }
    if (hasChildElements(element)) {
      ArrayList<BuilderAction> actions=new ArrayList<BuilderAction>();
      Class type=parseBuilderElement(parserContext,element,RouteBuilder.class,actions);
      if (type == ValueBuilder.class && clazz == Expression.class) {
        Method method;
        try {
          method=ValueBuilder.class.getMethod("getExpression",new Class[]{});
        }
 catch (        Throwable e) {
          throw new RuntimeException(ValueBuilder.class.getName() + " does not have the getExpression() method.");
        }
        MethodInfo methodInfo=new MethodInfo(method,null,new LinkedHashMap<String,Class>(),new LinkedHashMap<String,FluentArg>());
        actions.add(new BuilderAction(methodInfo,new HashMap<String,Object>()));
        type=Expression.class;
      }
      BuilderStatement statement=new BuilderStatement();
      statement.setReturnType(type);
      statement.setActions(actions);
      if (!clazz.isAssignableFrom(statement.getReturnType())) {
        throw new IllegalStateException("Builder does not produce object of expected type: " + clazz.getName() + ", it produced: "+ statement.getReturnType());
      }
      return statement;
    }
 else {
      String name=element.getLocalName();
      if (namespaceHandler.getParserElementNames().contains(name)) {
        String id=createBeanId(name);
        element.setAttribute("id",id);
        namespaceHandler.parse(element,parserContext);
        return new RuntimeBeanReference(id);
      }
      SimpleTypeConverter converter=new SimpleTypeConverter();
      return converter.convertIfNecessary(element.getTextContent(),clazz);
    }
  }
}
