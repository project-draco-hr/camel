{
  Collection<Method> methods=getAllMethods(testClass);
  final List<Properties> properties=new LinkedList<Properties>();
  for (  Method method : methods) {
    if (AnnotationUtils.findAnnotation(method,UseOverridePropertiesWithPropertiesComponent.class) != null) {
      Class<?>[] argTypes=method.getParameterTypes();
      if (argTypes.length > 0) {
        throw new IllegalArgumentException("Method [" + method.getName() + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not a no-argument method.");
      }
 else       if (!Properties.class.isAssignableFrom(method.getReturnType())) {
        throw new IllegalArgumentException("Method [" + method.getName() + "] is annotated with UseOverridePropertiesWithPropertiesComponent but does not return a java.util.Properties.");
      }
 else       if (!Modifier.isStatic(method.getModifiers())) {
        throw new IllegalArgumentException("Method [" + method.getName() + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not static.");
      }
 else       if (!Modifier.isPublic(method.getModifiers())) {
        throw new IllegalArgumentException("Method [" + method.getName() + "] is annotated with UseOverridePropertiesWithPropertiesComponent but is not public.");
      }
      try {
        properties.add((Properties)method.invoke(null));
      }
 catch (      Exception e) {
        throw new RuntimeException("Method [" + method.getName() + "] threw exception during evaluation.",e);
      }
    }
  }
  if (properties.size() != 0) {
    CamelSpringTestHelper.doToSpringCamelContexts(context,new CamelSpringTestHelper.DoToSpringCamelContextsStrategy(){
      public void execute(      String contextName,      SpringCamelContext camelContext) throws Exception {
        PropertiesComponent pc=camelContext.getComponent("properties",PropertiesComponent.class);
        Properties extra=new Properties();
        for (        Properties prop : properties) {
          extra.putAll(prop);
        }
        if (!extra.isEmpty()) {
          LOGGER.info("Using {} properties to override any existing properties on the PropertiesComponent on CamelContext with name [{}].",extra.size(),contextName);
          pc.setOverrideProperties(extra);
        }
      }
    }
);
  }
}
