{
  MBeanServer mbeanServer=getMBeanServer();
  ObjectName on=ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=context,name=\"camel-1\"");
  assertTrue("Should be registered",mbeanServer.isRegistered(on));
  String name=(String)mbeanServer.getAttribute(on,"CamelId");
  assertEquals("camel-1",name);
  String uptime=(String)mbeanServer.getAttribute(on,"Uptime");
  assertNotNull(uptime);
  String status=(String)mbeanServer.getAttribute(on,"State");
  assertEquals("Started",status);
  MockEndpoint mock=getMockEndpoint("mock:result");
  mock.expectedBodiesReceived("Hello World");
  mbeanServer.invoke(on,"sendBody",new Object[]{"direct:start","Hello World"},new String[]{"java.lang.String","java.lang.Object"});
  assertMockEndpointsSatisfied();
  resetMocks();
  mock.expectedBodiesReceived("Hello World");
  mbeanServer.invoke(on,"sendStringBody",new Object[]{"direct:start","Hello World"},new String[]{"java.lang.String","java.lang.String"});
  assertMockEndpointsSatisfied();
  Object reply=mbeanServer.invoke(on,"requestBody",new Object[]{"direct:foo","Hello World"},new String[]{"java.lang.String","java.lang.Object"});
  assertEquals("Bye World",reply);
  reply=mbeanServer.invoke(on,"requestStringBody",new Object[]{"direct:foo","Hello World"},new String[]{"java.lang.String","java.lang.String"});
  assertEquals("Bye World",reply);
  resetMocks();
  mock=getMockEndpoint("mock:result");
  mock.expectedBodiesReceived("Hello World");
  mock.expectedHeaderReceived("foo",123);
  Map<String,Object> headers=new HashMap<String,Object>();
  headers.put("foo",123);
  mbeanServer.invoke(on,"sendBodyAndHeaders",new Object[]{"direct:start","Hello World",headers},new String[]{"java.lang.String","java.lang.Object","java.util.Map"});
  assertMockEndpointsSatisfied();
  resetMocks();
  mock=getMockEndpoint("mock:result");
  mock.expectedBodiesReceived("Hello World");
  mock.expectedHeaderReceived("foo",123);
  reply=mbeanServer.invoke(on,"requestBodyAndHeaders",new Object[]{"direct:start","Hello World",headers},new String[]{"java.lang.String","java.lang.Object","java.util.Map"});
  assertEquals("Hello World",reply);
  assertMockEndpointsSatisfied();
  mbeanServer.invoke(on,"stop",null,null);
}
