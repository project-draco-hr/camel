{
  JobDetail jobDetail=createJobDetail(action,route);
  Trigger trigger=createTrigger(action,route);
  updateScheduledRouteDetails(action,jobDetail,trigger,route);
  loadCallbackDataIntoSchedulerContext(jobDetail,action,route);
  boolean isClustered=route.getRouteContext().getCamelContext().getComponent("quartz",QuartzComponent.class).isClustered();
  if (isClustered) {
    JobDetail existingJobDetail=getScheduler().getJobDetail(jobDetail.getName(),jobDetail.getGroup());
    if (jobDetail.equals(existingJobDetail)) {
      if (LOG.isInfoEnabled()) {
        LOG.info("Skipping to schedule the job: {} for action: {} on route {} as the job: {} already existing!",new Object[]{jobDetail.getFullName(),action,route.getId(),existingJobDetail.getFullName()});
      }
      return;
    }
  }
  getScheduler().scheduleJob(jobDetail,trigger);
  if (LOG.isInfoEnabled()) {
    LOG.info("Scheduled trigger: {} for action: {} on route {}",new Object[]{trigger.getFullName(),action,route.getId()});
  }
}
