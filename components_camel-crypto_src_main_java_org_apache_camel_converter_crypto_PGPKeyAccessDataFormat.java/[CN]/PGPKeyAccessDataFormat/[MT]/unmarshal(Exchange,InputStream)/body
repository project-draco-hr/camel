{
  if (encryptedStream == null) {
    return null;
  }
  InputStream in=null;
  InputStream encData=null;
  InputStream uncompressedData=null;
  InputStream litData=null;
  OutputStreamBuilder osb=null;
  try {
    in=PGPUtil.getDecoderStream(encryptedStream);
    encData=getDecryptedData(exchange,in);
    PGPObjectFactory pgpFactory=new PGPObjectFactory(encData,new BcKeyFingerprintCalculator());
    Object object=pgpFactory.nextObject();
    if (object instanceof PGPCompressedData) {
      PGPCompressedData comData=(PGPCompressedData)object;
      uncompressedData=comData.getDataStream();
      pgpFactory=new PGPObjectFactory(uncompressedData,new BcKeyFingerprintCalculator());
      object=pgpFactory.nextObject();
    }
 else {
      LOG.debug("PGP Message does not contain a Compressed Data Packet");
    }
    PGPOnePassSignature signature;
    if (object instanceof PGPOnePassSignatureList) {
      signature=getSignature(exchange,(PGPOnePassSignatureList)object);
      object=pgpFactory.nextObject();
    }
 else {
      signature=null;
      if (SIGNATURE_VERIFICATION_OPTION_REQUIRED.equals(getSignatureVerificationOption())) {
        throw new PGPException("PGP message does not contain any signatures although a signature is expected. Either send a PGP message with signature or change the configuration of the PGP decryptor.");
      }
    }
    PGPLiteralData ld;
    if (object instanceof PGPLiteralData) {
      ld=(PGPLiteralData)object;
    }
 else {
      throw getFormatException();
    }
    litData=ld.getInputStream();
    osb=OutputStreamBuilder.withExchange(exchange);
    byte[] buffer=new byte[BUFFER_SIZE];
    int bytesRead;
    while ((bytesRead=litData.read(buffer)) != -1) {
      osb.write(buffer,0,bytesRead);
      if (signature != null) {
        signature.update(buffer,0,bytesRead);
      }
      osb.flush();
    }
    verifySignature(pgpFactory,signature);
  }
  finally {
    IOHelper.close(osb,litData,uncompressedData,encData,in,encryptedStream);
  }
  return osb.build();
}
