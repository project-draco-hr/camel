{
  this.routeContext=routeContext;
  this.definition=outputDefinition;
  this.camelContext=routeContext.getCamelContext();
  this.internalProcessor=new CamelInternalProcessor();
  Processor target=nextProcessor;
  Processor next;
  if (target instanceof CamelContextAware) {
    ((CamelContextAware)target).setCamelContext(camelContext);
  }
  ProcessorDefinition<?> targetOutputDef=childDefinition != null ? childDefinition : outputDefinition;
  LOG.debug("Initialize channel for target: '{}'",targetOutputDef);
  if (childDefinition != null && outputDefinition != childDefinition) {
    childDefinition.setParent(outputDefinition);
  }
  RouteDefinitionHelper.forceAssignIds(routeContext.getCamelContext(),definition);
  InterceptStrategy managed=routeContext.getManagedInterceptStrategy();
  if (managed != null) {
    next=target == nextProcessor ? null : nextProcessor;
    target=managed.wrapProcessorInInterceptors(routeContext.getCamelContext(),targetOutputDef,target,next);
  }
  InterceptStrategy tracer=getOrCreateBacklogTracer();
  if (tracer instanceof BacklogTracer) {
    BacklogTracer backlogTracer=(BacklogTracer)tracer;
    backlogTracer.addDefinition(targetOutputDef);
    RouteDefinition route=ProcessorDefinitionHelper.getRoute(definition);
    boolean first=false;
    if (route != null && !route.getOutputs().isEmpty()) {
      first=route.getOutputs().get(0) == definition;
    }
    internalProcessor.addTask(new CamelInternalProcessor.BacklogTracerTask(backlogTracer.getQueue(),backlogTracer,targetOutputDef,route,first));
    InterceptStrategy debugger=getOrCreateBacklogDebugger();
    if (debugger instanceof BacklogDebugger) {
      BacklogDebugger backlogDebugger=(BacklogDebugger)debugger;
      internalProcessor.addTask(new CamelInternalProcessor.BacklogDebuggerTask(backlogDebugger,target,targetOutputDef));
    }
  }
  tracer=getOrCreateTracer();
  if (tracer != null) {
    TraceInterceptor trace=(TraceInterceptor)tracer.wrapProcessorInInterceptors(routeContext.getCamelContext(),targetOutputDef,target,null);
    trace.setRouteContext(routeContext);
    target=trace;
  }
  Collections.sort(interceptors,new OrderedComparator());
  Collections.reverse(interceptors);
  for (  InterceptStrategy strategy : interceptors) {
    next=target == nextProcessor ? null : nextProcessor;
    if (strategy instanceof Tracer) {
      continue;
    }
    if (strategy instanceof StreamCaching) {
      continue;
    }
    Processor wrapped=strategy.wrapProcessorInInterceptors(routeContext.getCamelContext(),targetOutputDef,target,next);
    if (!(wrapped instanceof AsyncProcessor)) {
      LOG.warn("Interceptor: " + strategy + " at: "+ outputDefinition+ " does not return an AsyncProcessor instance."+ " This causes the asynchronous routing engine to not work as optimal as possible."+ " See more details at the InterceptStrategy javadoc."+ " Camel will use a bridge to adapt the interceptor to the asynchronous routing engine,"+ " but its not the most optimal solution. Please consider changing your interceptor to comply.");
      InterceptorToAsyncProcessorBridge bridge=new InterceptorToAsyncProcessorBridge(target);
      wrapped=strategy.wrapProcessorInInterceptors(routeContext.getCamelContext(),targetOutputDef,bridge,next);
      bridge.setTarget(wrapped);
      wrapped=bridge;
    }
    if (!(wrapped instanceof Service)) {
      wrapped=new WrapProcessor(wrapped,target);
    }
    target=wrapped;
  }
  output=target;
}
