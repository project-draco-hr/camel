{
  if (socket.isConnected() && !socket.isClosed()) {
    InputStream socketInputStream=MllpUtil.getInputStream(socket);
    int readByte;
    try {
      readByte=socketInputStream.read();
switch (readByte) {
case START_OF_BLOCK:
        return;
case END_OF_STREAM:
      resetConnection(socket);
    return;
default :
}
}
 catch (SocketTimeoutException normaTimeoutEx) {
throw normaTimeoutEx;
}
catch (IOException unexpectedException) {
LOG.error("Unexpected Exception occurred opening MLLP frame - resetting the connection");
MllpUtil.resetConnection(socket);
throw new MllpException("Unexpected Exception occurred opening MLLP frame",unexpectedException);
}
ByteArrayOutputStream outOfFrameData=new ByteArrayOutputStream();
outOfFrameData.write(readByte);
try {
while (true) {
  readByte=socketInputStream.read();
switch (readByte) {
case END_OF_STREAM:
    if (isLogPHIEnabled(LOG)) {
      LOG.error("END_OF_STREAM read while looking for the beginning of the MLLP frame, and " + "out-of-frame data had been read - resetting connection and eating out-of-frame data: {}",outOfFrameData.toString().replace('\r','\n'));
    }
 else {
      LOG.error("END_OF_STREAM read while looking for the beginning of the MLLP frame, and out-of-frame data had been read - resetting connection and eating out-of-frame data");
    }
  resetConnection(socket);
throw new MllpCorruptFrameException("END_OF_STREAM read while looking for the beginning of the MLLP frame",outOfFrameData.toByteArray());
case START_OF_BLOCK:
if (isLogPHIEnabled(LOG)) {
LOG.warn("The beginning of the MLLP frame was preceded by out-of-frame data - eating data: {}",outOfFrameData.toString().replace('\r','\n'));
}
 else {
LOG.warn("The beginning of the MLLP frame was preceded by out-of-frame data - eating data");
}
throw new MllpCorruptFrameException("The beginning of the MLLP frame was preceded by out-of-frame data",outOfFrameData.toByteArray());
default :
outOfFrameData.write(readByte);
break;
}
}
}
 catch (SocketTimeoutException timeoutEx) {
if (isLogPHIEnabled(LOG)) {
LOG.error("Timeout looking for the beginning of the MLLP frame, and out-of-frame data had been read - resetting connection and eating out-of-frame data: {}",outOfFrameData.toString().replace('\r','\n'));
}
 else {
LOG.error("Timeout looking for the beginning of the MLLP frame, and out-of-frame data had been read - resetting connection and eating out-of-frame data");
}
resetConnection(socket);
throw new MllpCorruptFrameException("Timeout looking for the beginning of the MLLP frame, and out-of-frame data had been read",outOfFrameData.toByteArray());
}
catch (IOException e) {
if (isLogPHIEnabled(LOG)) {
LOG.error("Exception encountered looking for the beginning of the MLLP frame, and out-of-frame data had been read - resetting connection and eating out-of-frame data: {}",outOfFrameData.toString().replace('\r','\n'));
}
 else {
LOG.error("Exception encountered looking for the beginning of the MLLP frame, and out-of-frame data had been read - resetting connection and eating out-of-frame data");
}
resetConnection(socket);
throw new MllpCorruptFrameException("Exception encountered looking for the beginning of the MLLP frame, and out-of-frame data had been read",outOfFrameData.toByteArray());
}
}
}
