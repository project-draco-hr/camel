{
  Object element=graph;
  if (partialClass != null && getPartNamespace() != null) {
    element=new JAXBElement<Object>(getPartNamespace(),partialClass,graph);
  }
  if (introspector.isElement(element)) {
    if (asXmlStreamWriter(exchange)) {
      XMLStreamWriter writer=typeConverter.convertTo(XMLStreamWriter.class,stream);
      if (needFiltering(exchange)) {
        writer=new FilteringXmlStreamWriter(writer);
      }
      if (xmlStreamWriterWrapper != null) {
        writer=xmlStreamWriterWrapper.wrapWriter(writer);
      }
      marshaller.marshal(element,writer);
    }
 else {
      marshaller.marshal(element,stream);
    }
    return;
  }
 else   if (element != null) {
    Method objectFactoryMethod=JaxbHelper.getJaxbElementFactoryMethod(camelContext,element.getClass());
    if (objectFactoryMethod != null) {
      try {
        Object instance=objectFactoryMethod.getDeclaringClass().newInstance();
        if (instance != null) {
          Object toMarshall=objectFactoryMethod.invoke(instance,element);
          if (asXmlStreamWriter(exchange)) {
            XMLStreamWriter writer=typeConverter.convertTo(XMLStreamWriter.class,stream);
            if (needFiltering(exchange)) {
              writer=new FilteringXmlStreamWriter(writer);
            }
            if (xmlStreamWriterWrapper != null) {
              writer=xmlStreamWriterWrapper.wrapWriter(writer);
            }
            marshaller.marshal(toMarshall,writer);
          }
 else {
            marshaller.marshal(toMarshall,stream);
          }
          return;
        }
      }
 catch (      Exception e) {
        LOG.debug("Unable to create JAXBElement object for type " + element.getClass() + " due to "+ e.getMessage(),e);
      }
    }
  }
  if (!mustBeJAXBElement) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Attempt to marshalling non JAXBElement with type {} as InputStream",ObjectHelper.classCanonicalName(graph));
    }
    InputStream is=exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class,exchange,graph);
    IOHelper.copyAndCloseInput(is,stream);
  }
 else {
    throw new InvalidPayloadException(exchange,JAXBElement.class);
  }
}
