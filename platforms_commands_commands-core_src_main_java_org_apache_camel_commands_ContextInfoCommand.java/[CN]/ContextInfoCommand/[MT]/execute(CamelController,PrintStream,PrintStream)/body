{
  Map<String,Object> row=camelController.getCamelContextInformation(context);
  if (row == null || row.isEmpty()) {
    err.println("Camel context " + context + " not found.");
    return null;
  }
  out.println("");
  out.println(stringEscape.unescapeJava("\u001B[1mCamel Context " + context + "\u001B[0m"));
  out.println(stringEscape.unescapeJava("\tName: " + row.get("name")));
  out.println(stringEscape.unescapeJava("\tManagementName: " + row.get("managementName")));
  out.println(stringEscape.unescapeJava("\tVersion: " + row.get("version")));
  out.println(stringEscape.unescapeJava("\tStatus: " + row.get("status")));
  out.println(stringEscape.unescapeJava("\tUptime: " + row.get("uptime")));
  out.println("");
  out.println(stringEscape.unescapeJava("\u001B[1mMiscellaneous\u001B[0m"));
  out.println(stringEscape.unescapeJava("\tSuspended: " + row.get("suspended")));
  out.println(stringEscape.unescapeJava("\tShutdown Timeout: " + row.get("shutdownTimeout") + " sec."));
  out.println(stringEscape.unescapeJava("\tAllow UseOriginalMessage: " + row.get("allowUseOriginalMessage")));
  out.println(stringEscape.unescapeJava("\tMessage History: " + row.get("messageHistory")));
  out.println(stringEscape.unescapeJava("\tTracing: " + row.get("tracing")));
  out.println("");
  out.println(stringEscape.unescapeJava("\u001B[1mProperties\u001B[0m"));
  for (  Map.Entry<String,Object> entry : row.entrySet()) {
    String key=entry.getKey();
    if (key.startsWith("property.")) {
      key=key.substring(9);
      out.println(stringEscape.unescapeJava("\t" + key + " = "+ entry.getValue()));
    }
  }
  if (verbose) {
    out.println("");
    out.println(stringEscape.unescapeJava("\u001B[1mAdvanced\u001B[0m"));
    out.println(stringEscape.unescapeJava("\tClassResolver: " + row.get("classResolver")));
    out.println(stringEscape.unescapeJava("\tPackageScanClassResolver: " + row.get("packageScanClassResolver")));
    out.println(stringEscape.unescapeJava("\tApplicationContextClassLoader: " + row.get("applicationContextClassLoader")));
    printStatistics(camelController,out);
    boolean enabled=false;
    if (row.get("typeConverter.statisticsEnabled") != null) {
      enabled=(boolean)row.get("typeConverter.statisticsEnabled");
    }
    if (enabled) {
      long attempt=(long)row.get("typeConverter.attemptCounter");
      long hit=(long)row.get("typeConverter.hitCounter");
      long miss=(long)row.get("typeConverter.missCounter");
      long failed=(long)row.get("typeConverter.failedCounter");
      out.println(stringEscape.unescapeJava(String.format("\tTypeConverterRegistry utilization: [attempts=%s, hits=%s, misses=%s, failures=%s]",attempt,hit,miss,failed)));
    }
    long totalRoutes=(long)row.get("totalRoutes");
    long startedRoutes=(long)row.get("totalRoutes");
    out.println(stringEscape.unescapeJava("\tNumber of running routes: " + startedRoutes));
    out.println(stringEscape.unescapeJava("\tNumber of not running routes: " + (totalRoutes - startedRoutes)));
  }
  return null;
}
