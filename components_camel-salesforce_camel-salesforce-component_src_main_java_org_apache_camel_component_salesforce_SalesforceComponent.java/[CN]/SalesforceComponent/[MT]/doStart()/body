{
  ObjectHelper.notNull(loginConfig,"loginConfig");
  if (null == httpClient) {
    if (config != null && config.getHttpClient() != null) {
      httpClient=config.getHttpClient();
    }
 else {
      final SSLContextParameters contextParameters=sslContextParameters != null ? sslContextParameters : new SSLContextParameters();
      final SslContextFactory sslContextFactory=new SslContextFactory();
      sslContextFactory.setSslContext(contextParameters.createSSLContext(getCamelContext()));
      httpClient=new SalesforceHttpClient(sslContextFactory);
      httpClient.setConnectTimeout(CONNECTION_TIMEOUT);
    }
  }
  if (httpClientProperties != null && !httpClientProperties.isEmpty()) {
    IntrospectionSupport.setProperties(getCamelContext().getTypeConverter(),httpClient,new HashMap<String,Object>(httpClientProperties));
  }
  if (this.httpProxyHost != null && httpProxyPort != null) {
    Origin.Address proxyAddress=new Origin.Address(this.httpProxyHost,this.httpProxyPort);
    ProxyConfiguration.Proxy proxy;
    if (isHttpProxySocks4) {
      proxy=new Socks4Proxy(proxyAddress,isHttpProxySecure);
    }
 else {
      proxy=new HttpProxy(proxyAddress,isHttpProxySecure);
    }
    if (httpProxyIncludedAddresses != null && !httpProxyIncludedAddresses.isEmpty()) {
      proxy.getIncludedAddresses().addAll(httpProxyIncludedAddresses);
    }
    if (httpProxyExcludedAddresses != null && !httpProxyExcludedAddresses.isEmpty()) {
      proxy.getExcludedAddresses().addAll(httpProxyExcludedAddresses);
    }
    httpClient.getProxyConfiguration().getProxies().add(proxy);
  }
  if (this.httpProxyUsername != null && httpProxyPassword != null) {
    ObjectHelper.notEmpty(httpProxyAuthUri,"httpProxyAuthUri");
    ObjectHelper.notEmpty(httpProxyRealm,"httpProxyRealm");
    final Authentication authentication;
    if (httpProxyUseDigestAuth) {
      authentication=new DigestAuthentication(new URI(httpProxyAuthUri),httpProxyRealm,httpProxyUsername,httpProxyPassword);
    }
 else {
      authentication=new BasicAuthentication(new URI(httpProxyAuthUri),httpProxyRealm,httpProxyUsername,httpProxyPassword);
    }
    httpClient.getAuthenticationStore().addAuthentication(authentication);
  }
  if (null == this.session) {
    this.session=new SalesforceSession(httpClient,httpClient.getTimeout(),loginConfig);
  }
  httpClient.setSession(this.session);
  httpClient.start();
  if (!loginConfig.isLazyLogin()) {
    ServiceHelper.startService(session);
  }
  if (packages != null && packages.length > 0) {
    classMap=parsePackages();
    LOG.info("Found {} generated classes in packages: {}",classMap.size(),Arrays.asList(packages));
  }
 else {
    LOG.warn("Missing property packages, getSObject* operations will NOT work");
    classMap=new HashMap<String,Class<?>>(0);
  }
  if (subscriptionHelper != null) {
    ServiceHelper.startService(subscriptionHelper);
  }
}
